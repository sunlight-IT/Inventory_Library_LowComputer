
InventoryRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000841c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08008600  08008600  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d8  080089d8  0000a068  2**0
                  CONTENTS
  4 .ARM          00000000  080089d8  080089d8  0000a068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089d8  080089d8  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d8  080089d8  000099d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089dc  080089dc  000099dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080089e0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000068  08008a48  0000a068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  08008a48  0000a724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a26  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dcf  00000000  00000000  0001fab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  00023888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fea  00000000  00000000  00024cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005f77  00000000  00000000  00025ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f67f  00000000  00000000  0002bc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a94c2  00000000  00000000  0004b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f479a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a0  00000000  00000000  000f47e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000fa180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	080085e8 	.word	0x080085e8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	080085e8 	.word	0x080085e8

08000224 <Events_MainLogic>:
#include "MainLogic.h"



uint8_t Flag_Events_MainLogic = 0;
void    Events_MainLogic(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  switch (Flag_Events_MainLogic) {
 8000228:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <Events_MainLogic+0x34>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <Events_MainLogic+0x12>
 8000230:	2b01      	cmp	r3, #1
 8000232:	d00b      	beq.n	800024c <Events_MainLogic+0x28>
      // Events_WirelessModule();//无线串口事件
      // Events_BLDCMotor();
      Events_ServoMotor();
    } break;
  }
}
 8000234:	e00d      	b.n	8000252 <Events_MainLogic+0x2e>
      HAL_TIM_Base_Start_IT(&htim1);
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <Events_MainLogic+0x38>)
 8000238:	f004 fd6c 	bl	8004d14 <HAL_TIM_Base_Start_IT>
      HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	4808      	ldr	r0, [pc, #32]	@ (8000260 <Events_MainLogic+0x3c>)
 8000240:	f004 fe7e 	bl	8004f40 <HAL_TIM_IC_Start_IT>
      Flag_Events_MainLogic = 1;
 8000244:	4b04      	ldr	r3, [pc, #16]	@ (8000258 <Events_MainLogic+0x34>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
    } break;
 800024a:	e002      	b.n	8000252 <Events_MainLogic+0x2e>
      Events_ServoMotor();
 800024c:	f000 f832 	bl	80002b4 <Events_ServoMotor>
    } break;
 8000250:	bf00      	nop
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000084 	.word	0x20000084
 800025c:	20000268 	.word	0x20000268
 8000260:	200002f8 	.word	0x200002f8

08000264 <motor_uart_init>:
static Event_t MotorUart;
static uint8_t motor_ack[2];

static void moteruart_receive(void);

void motor_uart_init(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  MotorUart.type = kPackIdle;
 8000268:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <motor_uart_init+0x1c>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
  MotorUart.func = moteruart_receive;
 800026e:	4b04      	ldr	r3, [pc, #16]	@ (8000280 <motor_uart_init+0x1c>)
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <motor_uart_init+0x20>)
 8000272:	605a      	str	r2, [r3, #4]
  reg_event(&MotorUart);
 8000274:	4802      	ldr	r0, [pc, #8]	@ (8000280 <motor_uart_init+0x1c>)
 8000276:	f007 fa15 	bl	80076a4 <reg_event>
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	200001d4 	.word	0x200001d4
 8000284:	080018a1 	.word	0x080018a1

08000288 <GetMoterAck>:

uint8_t *GetMoterAck(void) { return motor_ack; }
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
 800028c:	4b02      	ldr	r3, [pc, #8]	@ (8000298 <GetMoterAck+0x10>)
 800028e:	4618      	mov	r0, r3
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	200001dc 	.word	0x200001dc

0800029c <GetMoterOnPos>:
int8_t   GetMoterOnPos(void) { return ServoMotor.MotorPosition; };
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
 80002a0:	4b03      	ldr	r3, [pc, #12]	@ (80002b0 <GetMoterOnPos+0x14>)
 80002a2:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 80002a6:	4618      	mov	r0, r3
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000088 	.word	0x20000088

080002b4 <Events_ServoMotor>:
void test(uint8_t *buf) {
  for (uint8_t i = 0; i < 4; i++) {
    buf[i + 1] = ServoMotor.Flag_Event[i];
  }
}
void Events_ServoMotor(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  UartDriver_ServoMotor();
 80002b8:	f001 fc5a 	bl	8001b70 <UartDriver_ServoMotor>
  switch (ServoMotor.Flag_Event[0]) {
 80002bc:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <Events_ServoMotor+0x28>)
 80002be:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d002      	beq.n	80002cc <Events_ServoMotor+0x18>
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d003      	beq.n	80002d2 <Events_ServoMotor+0x1e>
    } break;
    case 1: {
      Event_Movement_ServoMotor();
    } break;
  }
}
 80002ca:	e005      	b.n	80002d8 <Events_ServoMotor+0x24>
      Event_Init_ServoMotor();
 80002cc:	f000 f808 	bl	80002e0 <Event_Init_ServoMotor>
    } break;
 80002d0:	e002      	b.n	80002d8 <Events_ServoMotor+0x24>
      Event_Movement_ServoMotor();
 80002d2:	f000 fd23 	bl	8000d1c <Event_Movement_ServoMotor>
    } break;
 80002d6:	bf00      	nop
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000088 	.word	0x20000088

080002e0 <Event_Init_ServoMotor>:

void Event_Init_ServoMotor(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  LOGI("STATE :1 %d", ServoMotor.Flag_Event[1]);
 80002e4:	f002 fd36 	bl	8002d54 <HAL_GetTick>
 80002e8:	4601      	mov	r1, r0
 80002ea:	4b72      	ldr	r3, [pc, #456]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 80002ec:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80002f0:	4a71      	ldr	r2, [pc, #452]	@ (80004b8 <Event_Init_ServoMotor+0x1d8>)
 80002f2:	4872      	ldr	r0, [pc, #456]	@ (80004bc <Event_Init_ServoMotor+0x1dc>)
 80002f4:	f007 fb00 	bl	80078f8 <iprintf>
  switch (ServoMotor.Flag_Event[1]) {
 80002f8:	4b6e      	ldr	r3, [pc, #440]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 80002fa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80002fe:	2b1a      	cmp	r3, #26
 8000300:	f200 80d5 	bhi.w	80004ae <Event_Init_ServoMotor+0x1ce>
 8000304:	a201      	add	r2, pc, #4	@ (adr r2, 800030c <Event_Init_ServoMotor+0x2c>)
 8000306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030a:	bf00      	nop
 800030c:	08000379 	.word	0x08000379
 8000310:	080004af 	.word	0x080004af
 8000314:	0800039d 	.word	0x0800039d
 8000318:	080004af 	.word	0x080004af
 800031c:	080003b3 	.word	0x080003b3
 8000320:	080004af 	.word	0x080004af
 8000324:	080003c9 	.word	0x080003c9
 8000328:	080004af 	.word	0x080004af
 800032c:	080003df 	.word	0x080003df
 8000330:	080004af 	.word	0x080004af
 8000334:	080003f5 	.word	0x080003f5
 8000338:	080004af 	.word	0x080004af
 800033c:	0800040b 	.word	0x0800040b
 8000340:	080004af 	.word	0x080004af
 8000344:	08000421 	.word	0x08000421
 8000348:	080004af 	.word	0x080004af
 800034c:	08000437 	.word	0x08000437
 8000350:	080004af 	.word	0x080004af
 8000354:	0800044d 	.word	0x0800044d
 8000358:	080004af 	.word	0x080004af
 800035c:	08000463 	.word	0x08000463
 8000360:	080004af 	.word	0x080004af
 8000364:	08000479 	.word	0x08000479
 8000368:	080004af 	.word	0x080004af
 800036c:	0800048f 	.word	0x0800048f
 8000370:	080004af 	.word	0x080004af
 8000374:	080004a5 	.word	0x080004a5
    case 0: {
      SetStatus_Power_ServoMotor(PowerON_ServoMotor);  // 打开伺服驱动器的电源
 8000378:	2000      	movs	r0, #0
 800037a:	f001 fa1d 	bl	80017b8 <SetStatus_Power_ServoMotor>
      UartReceiveIT_ServoMotor();                      // 打开伺服驱动器的串口接收
 800037e:	f001 fa33 	bl	80017e8 <UartReceiveIT_ServoMotor>
      ServoMotor.address       = 0x01;                 // 伺服电机地址设置
 8000382:	4b4c      	ldr	r3, [pc, #304]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 8000384:	2201      	movs	r2, #1
 8000386:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      ServoMotor.MotorPosition = ON_LEFT;
 800038a:	4b4a      	ldr	r3, [pc, #296]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 800038c:	22ff      	movs	r2, #255	@ 0xff
 800038e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      ServoMotor.Flag_Event[1] = 1;  // 定时器定时变2，因为伺服驱动器启动时间大约5s
 8000392:	4b48      	ldr	r3, [pc, #288]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 8000394:	2201      	movs	r2, #1
 8000396:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800039a:	e088      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 2: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800039c:	4848      	ldr	r0, [pc, #288]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 800039e:	f000 feab 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(0);  // 串口发送：检测状态监控寄存器1-5设置指令,发送是Read_Func，10words
 80003a2:	2000      	movs	r0, #0
 80003a4:	f000 ff04 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 3;            // 等待串口返回，返回正确赋值14，错误赋值4，串口连上则赋值IsConnected = 1，超时5s：定时器赋值2重新发送
 80003a8:	4b42      	ldr	r3, [pc, #264]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 80003aa:	2203      	movs	r2, #3
 80003ac:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003b0:	e07d      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 4: {  // 状态监控寄存器1-5配置错误，发送状态监控寄存器1配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003b2:	4843      	ldr	r0, [pc, #268]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 80003b4:	f000 fea0 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(1);  // 设置状态监控寄存器1，发送是Write_Once_Func
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 fef9 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 5;            // 等待串口返回，返回正确赋值6，错误或者超时2s，赋值4
 80003be:	4b3d      	ldr	r3, [pc, #244]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 80003c0:	2205      	movs	r2, #5
 80003c2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003c6:	e072      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 6: {  // 状态监控寄存器2配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003c8:	483d      	ldr	r0, [pc, #244]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 80003ca:	f000 fe95 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(2);  // 设置状态监控寄存器2，发送是Write_Once_Func
 80003ce:	2002      	movs	r0, #2
 80003d0:	f000 feee 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 7;            // 等待串口返回，返回正确赋值8，错误或者超时2s，赋值6
 80003d4:	4b37      	ldr	r3, [pc, #220]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 80003d6:	2207      	movs	r2, #7
 80003d8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003dc:	e067      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 8: {  // 状态监控寄存器3配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003de:	4838      	ldr	r0, [pc, #224]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 80003e0:	f000 fe8a 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(3);  // 设置状态监控寄存器3，发送是Write_Once_Func
 80003e4:	2003      	movs	r0, #3
 80003e6:	f000 fee3 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 9;            // 等待串口返回，返回正确赋值10，错误或者超时2s，赋值8
 80003ea:	4b32      	ldr	r3, [pc, #200]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 80003ec:	2209      	movs	r2, #9
 80003ee:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003f2:	e05c      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 10: {  // 状态监控寄存器4配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003f4:	4832      	ldr	r0, [pc, #200]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 80003f6:	f000 fe7f 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(4);  // 设置状态监控寄存器4，发送是Write_Once_Func
 80003fa:	2004      	movs	r0, #4
 80003fc:	f000 fed8 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 11;           // 等待串口返回，返回正确赋值12，错误或者超时2s，赋值10
 8000400:	4b2c      	ldr	r3, [pc, #176]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 8000402:	220b      	movs	r2, #11
 8000404:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000408:	e051      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 12: {  // 状态监控寄存器5配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800040a:	482d      	ldr	r0, [pc, #180]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 800040c:	f000 fe74 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(5);  // 设置状态监控寄存器5，发送是Write_Once_Func
 8000410:	2005      	movs	r0, #5
 8000412:	f000 fecd 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 13;           // 等待串口返回，返回正确赋值2,重读寄存器的状态，错误或者超时2s，赋值12
 8000416:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 8000418:	220d      	movs	r2, #13
 800041a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800041e:	e046      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 14: {  // 状态监控寄存器都是正确的
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000420:	4827      	ldr	r0, [pc, #156]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 8000422:	f000 fe69 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(6);  // 查询电子齿轮比分子分母的设置,发送是Read_Func，4words
 8000426:	2006      	movs	r0, #6
 8000428:	f000 fec2 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 15;           // 等待串口返回，返回正确赋值18,重读寄存器的设置，错误赋值16，超时2s，赋值14
 800042c:	4b21      	ldr	r3, [pc, #132]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 800042e:	220f      	movs	r2, #15
 8000430:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000434:	e03b      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 16: {
      //
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000436:	4822      	ldr	r0, [pc, #136]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 8000438:	f000 fe5e 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(7);  // 电子齿轮比分子分母的设置，发送是Write_Multi_Func，4words
 800043c:	2007      	movs	r0, #7
 800043e:	f000 feb7 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 17;           // 等待串口返回，返回正确赋值14,重读寄存器的设置，错误或者超时2s，赋值16
 8000442:	4b1c      	ldr	r3, [pc, #112]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 8000444:	2211      	movs	r2, #17
 8000446:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800044a:	e030      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 18: {  // 读取脉冲清除模式，需要设置为0x11;
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800044c:	481c      	ldr	r0, [pc, #112]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 800044e:	f000 fe53 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(8);  // 读取脉冲清除模式，需要设置为0x11，发送是Read_Func，1words
 8000452:	2008      	movs	r0, #8
 8000454:	f000 feac 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 19;           // 等待串口返回，返回正确赋值22,重读寄存器的设置，错误赋值20，超时2s，赋值18
 8000458:	4b16      	ldr	r3, [pc, #88]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 800045a:	2213      	movs	r2, #19
 800045c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000460:	e025      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 20: {  // 脉冲清除模式，需要设置为0x11;
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000462:	4817      	ldr	r0, [pc, #92]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 8000464:	f000 fe48 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(9);  // 脉冲清除模式，需要设置为0x11，发送是Write_Once_Func，1words
 8000468:	2009      	movs	r0, #9
 800046a:	f000 fea1 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 21;           // 等待串口返回，返回正确赋值18,重读寄存器的设置，错误超时2s，赋值20
 800046e:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 8000470:	2215      	movs	r2, #21
 8000472:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000476:	e01a      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 22: {  //
      // 脉冲模式设置正确，读取EEPROM是否为不保存模式
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000478:	4811      	ldr	r0, [pc, #68]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 800047a:	f000 fe3d 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(10);  // 读取EEPROM是否为不保存模式，发送是Read_Func，1words
 800047e:	200a      	movs	r0, #10
 8000480:	f000 fe96 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 23;            // 等待串口返回，返回正确赋值26,重读寄存器的设置，错误赋值24，超时2s，赋值22
 8000484:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 8000486:	2217      	movs	r2, #23
 8000488:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800048c:	e00f      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 24: {
      //
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800048e:	480c      	ldr	r0, [pc, #48]	@ (80004c0 <Event_Init_ServoMotor+0x1e0>)
 8000490:	f000 fe32 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(11);  // 设置EEPROM为不保存模式，发送是Write_Once_Func，1words
 8000494:	200b      	movs	r0, #11
 8000496:	f000 fe8b 	bl	80011b0 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 25;            // 等待串口返回，返回正确赋值22,重读寄存器的设置，错误超时2s，赋值24
 800049a:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 800049c:	2219      	movs	r2, #25
 800049e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80004a2:	e004      	b.n	80004ae <Event_Init_ServoMotor+0x1ce>
    case 26: {  // 设置了EEPROM不保存模式
      ServoMotor.Flag_Event[0] = 1;
 80004a4:	4b03      	ldr	r3, [pc, #12]	@ (80004b4 <Event_Init_ServoMotor+0x1d4>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    } break;
 80004ac:	bf00      	nop
  }
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000088 	.word	0x20000088
 80004b8:	08008898 	.word	0x08008898
 80004bc:	08008600 	.word	0x08008600
 80004c0:	200000ba 	.word	0x200000ba

080004c4 <UartAction_ServoMotor>:
void UartAction_ServoMotor(uint8_t *buf, uint8_t len) {
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b0c5      	sub	sp, #276	@ 0x114
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80004d2:	6018      	str	r0, [r3, #0]
 80004d4:	460a      	mov	r2, r1
 80004d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004da:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80004de:	701a      	strb	r2, [r3, #0]
  uint8_t uartbuf[255] = {0};
 80004e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	3304      	adds	r3, #4
 80004ee:	22fb      	movs	r2, #251	@ 0xfb
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f007 fa55 	bl	80079a2 <memset>
  uint8_t lenbuf       = len / 2;
 80004f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004fc:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	085b      	lsrs	r3, r3, #1
 8000504:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
  for (uint8_t i = 0; i < lenbuf; i++) {
 8000508:	2300      	movs	r3, #0
 800050a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800050e:	e02f      	b.n	8000570 <UartAction_ServoMotor+0xac>
    uartbuf[i] = Get_Regroup_ASCII(buf[2 * i], 0) | Get_Regroup_ASCII(buf[2 * i + 1], 1);
 8000510:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	461a      	mov	r2, r3
 8000518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800051c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f001 f98b 	bl	8001844 <Get_Regroup_ASCII>
 800052e:	4603      	mov	r3, r0
 8000530:	461c      	mov	r4, r3
 8000532:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	3301      	adds	r3, #1
 800053a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800053e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000542:	6812      	ldr	r2, [r2, #0]
 8000544:	4413      	add	r3, r2
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f001 f97a 	bl	8001844 <Get_Regroup_ASCII>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000558:	4322      	orrs	r2, r4
 800055a:	b2d1      	uxtb	r1, r2
 800055c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000560:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000564:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < lenbuf; i++) {
 8000566:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800056a:	3301      	adds	r3, #1
 800056c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000570:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8000574:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8000578:	429a      	cmp	r2, r3
 800057a:	d3c9      	bcc.n	8000510 <UartAction_ServoMotor+0x4c>
  }

  if (uartbuf[0] != ServoMotor.address && uartbuf[1] != (uint8_t)(ServoMotor.UartCurrentCmd[0] & 0xFF)) {
 800057c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000584:	781a      	ldrb	r2, [r3, #0]
 8000586:	4bbb      	ldr	r3, [pc, #748]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000588:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800058c:	429a      	cmp	r2, r3
 800058e:	d00a      	beq.n	80005a6 <UartAction_ServoMotor+0xe2>
 8000590:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000598:	785a      	ldrb	r2, [r3, #1]
 800059a:	4bb6      	ldr	r3, [pc, #728]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 800059c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	429a      	cmp	r2, r3
 80005a2:	f040 83ad 	bne.w	8000d00 <UartAction_ServoMotor+0x83c>
    return;
  }
  UartWrite_WirelessModule(uartbuf, lenbuf);
 80005a6:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	4611      	mov	r1, r2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fb3e 	bl	8001c34 <UartWrite_WirelessModule>
  switch (uartbuf[1]) {
 80005b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005c0:	785b      	ldrb	r3, [r3, #1]
 80005c2:	2b10      	cmp	r3, #16
 80005c4:	f000 8382 	beq.w	8000ccc <UartAction_ServoMotor+0x808>
 80005c8:	2b10      	cmp	r3, #16
 80005ca:	f300 83a0 	bgt.w	8000d0e <UartAction_ServoMotor+0x84a>
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	d003      	beq.n	80005da <UartAction_ServoMotor+0x116>
 80005d2:	2b06      	cmp	r3, #6
 80005d4:	f000 80e4 	beq.w	80007a0 <UartAction_ServoMotor+0x2dc>
 80005d8:	e399      	b.n	8000d0e <UartAction_ServoMotor+0x84a>
    case Cmd_Read_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 寄存器
 80005da:	4ba6      	ldr	r3, [pc, #664]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 80005dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80005de:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80005e2:	f000 80bd 	beq.w	8000760 <UartAction_ServoMotor+0x29c>
 80005e6:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80005ea:	f300 838b 	bgt.w	8000d04 <UartAction_ServoMotor+0x840>
 80005ee:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80005f2:	f000 809f 	beq.w	8000734 <UartAction_ServoMotor+0x270>
 80005f6:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80005fa:	f300 8383 	bgt.w	8000d04 <UartAction_ServoMotor+0x840>
 80005fe:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 8000602:	d067      	beq.n	80006d4 <UartAction_ServoMotor+0x210>
 8000604:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 8000608:	f300 837c 	bgt.w	8000d04 <UartAction_ServoMotor+0x840>
 800060c:	2b12      	cmp	r3, #18
 800060e:	f000 80bd 	beq.w	800078c <UartAction_ServoMotor+0x2c8>
 8000612:	2b22      	cmp	r3, #34	@ 0x22
 8000614:	f040 8376 	bne.w	8000d04 <UartAction_ServoMotor+0x840>
        case MonitorRegister_1_Data: {         // 含电机脉冲、扭矩、速度等
        } break;
        case MonitorRegister_1_Set: {  // 状态寄存器1设置地址，需要设置该位读取“回授位置（PUU）自定义单位，00h”
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000618:	4b96      	ldr	r3, [pc, #600]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 800061a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800061c:	2b01      	cmp	r3, #1
 800061e:	d057      	beq.n	80006d0 <UartAction_ServoMotor+0x20c>
 8000620:	2b0a      	cmp	r3, #10
 8000622:	f040 80b5 	bne.w	8000790 <UartAction_ServoMotor+0x2cc>
            case 1: {  // 单字节查询
            } break;
            case 10: {  // 查询状态监控寄存器1-5
              ServoMotor.IsConnected         = 1;
 8000626:	4b93      	ldr	r3, [pc, #588]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000628:	2201      	movs	r2, #1
 800062a:	705a      	strb	r2, [r3, #1]
              uint8_t MonitorRegisterSet_buf = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              // 检查uartbuf[4]的值，如果不等于PulseMonitor_0022H的低8位，则设置MonitorRegisterSet_buf的第0位（0x01）
              if (uartbuf[4] != (PulseMonitor_0022H & 0xFF)) {
 8000632:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d005      	beq.n	800064c <UartAction_ServoMotor+0x188>
                MonitorRegisterSet_buf |= 0x01;
 8000640:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              }
              // 检查uartbuf[8]的值，如果不等于TorqueMonitor_0024H的低8位，则设置MonitorRegisterSet_buf的第1位（0x02）
              if (uartbuf[8] != (TorqueMonitor_0024H & 0xFF)) {
 800064c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000654:	7a1b      	ldrb	r3, [r3, #8]
 8000656:	2b0b      	cmp	r3, #11
 8000658:	d005      	beq.n	8000666 <UartAction_ServoMotor+0x1a2>
                MonitorRegisterSet_buf |= 0x02;
 800065a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              }
              // 检查uartbuf[12]的值，如果不等于SpeedMonitor_0026H的低8位，则设置MonitorRegisterSet_buf的第2位（0x04）
              if (uartbuf[12] != (SpeedMonitor_0026H & 0xFF)) {
 8000666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800066a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800066e:	7b1b      	ldrb	r3, [r3, #12]
 8000670:	2b07      	cmp	r3, #7
 8000672:	d005      	beq.n	8000680 <UartAction_ServoMotor+0x1bc>
                MonitorRegisterSet_buf |= 0x04;
 8000674:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              }
              // 检查uartbuf[16]的值，如果不等于Monitor_0028H的低8位，则设置MonitorRegisterSet_buf的第3位（0x08）
              if (uartbuf[16] != (Monitor_0028H & 0xFF)) {
 8000680:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000688:	7c1b      	ldrb	r3, [r3, #16]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d005      	beq.n	800069a <UartAction_ServoMotor+0x1d6>
                MonitorRegisterSet_buf |= 0x08;
 800068e:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              }
              // 检查uartbuf[20]的值，如果不等于Monitor_002AH的低8位，则设置MonitorRegisterSet_buf的第4位（0x10）
              if (uartbuf[20] != (Monitor_002AH & 0xFF)) {
 800069a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800069e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006a2:	7d1b      	ldrb	r3, [r3, #20]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d005      	beq.n	80006b4 <UartAction_ServoMotor+0x1f0>
                MonitorRegisterSet_buf |= 0x10;
 80006a8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              }
              if (MonitorRegisterSet_buf) {    // 有配置错误
 80006b4:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d004      	beq.n	80006c6 <UartAction_ServoMotor+0x202>
                ServoMotor.Flag_Event[1] = 4;  // 重新设置状态监控寄存器1
 80006bc:	4b6d      	ldr	r3, [pc, #436]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 80006be:	2204      	movs	r2, #4
 80006c0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
              } else {                         // 配置正确
                ServoMotor.Flag_Event[1] = 14;
              }
            } break;
 80006c4:	e005      	b.n	80006d2 <UartAction_ServoMotor+0x20e>
                ServoMotor.Flag_Event[1] = 14;
 80006c6:	4b6b      	ldr	r3, [pc, #428]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 80006c8:	220e      	movs	r2, #14
 80006ca:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 80006ce:	e000      	b.n	80006d2 <UartAction_ServoMotor+0x20e>
            } break;
 80006d0:	bf00      	nop
          }
        } break;
 80006d2:	e05d      	b.n	8000790 <UartAction_ServoMotor+0x2cc>
        case GearRatioRegister_Numerator: {  // 电子齿轮比分子分母寄存器，需要设置分子160，分母94
          switch (ServoMotor.UartCurrentCmd[2]) {
 80006d4:	4b67      	ldr	r3, [pc, #412]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 80006d6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d15b      	bne.n	8000794 <UartAction_ServoMotor+0x2d0>
            case 4: {
              uint8_t GearRatioRegisterSet_buf = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              // 检查uartbuf[4]的值，如果不等于PulseMonitor_0022H的低8位，则设置MonitorRegisterSet_buf的第0位（0x01）
              if (uartbuf[4] != (GearRatio_Numerator_0158H & 0xFF)) {
 80006e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80006ee:	d005      	beq.n	80006fc <UartAction_ServoMotor+0x238>
                GearRatioRegisterSet_buf |= 0x01;
 80006f0:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              }
              // 检查uartbuf[8]的值，如果不等于TorqueMonitor_0024H的低8位，则设置MonitorRegisterSet_buf的第1位（0x02）
              if (uartbuf[8] != (GearRatio_Denominator_015AH & 0xFF)) {
 80006fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000704:	7a1b      	ldrb	r3, [r3, #8]
 8000706:	2b5e      	cmp	r3, #94	@ 0x5e
 8000708:	d005      	beq.n	8000716 <UartAction_ServoMotor+0x252>
                GearRatioRegisterSet_buf |= 0x02;
 800070a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800070e:	f043 0302 	orr.w	r3, r3, #2
 8000712:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              }
              if (GearRatioRegisterSet_buf) {   // 有配置错误
 8000716:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <UartAction_ServoMotor+0x264>
                ServoMotor.Flag_Event[1] = 16;  // 重新设置电子齿轮比分子分母寄存器
 800071e:	4b55      	ldr	r3, [pc, #340]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000720:	2210      	movs	r2, #16
 8000722:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
              } else {                          // 配置正确
                ServoMotor.Flag_Event[1] = 18;
              }
            } break;
 8000726:	e003      	b.n	8000730 <UartAction_ServoMotor+0x26c>
                ServoMotor.Flag_Event[1] = 18;
 8000728:	4b52      	ldr	r3, [pc, #328]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 800072a:	2212      	movs	r2, #18
 800072c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000730:	bf00      	nop
          }
        } break;
 8000732:	e02f      	b.n	8000794 <UartAction_ServoMotor+0x2d0>
        case AuxrFuncRegister_P2_30: {  // 0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000734:	4b4f      	ldr	r3, [pc, #316]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000736:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000738:	2b01      	cmp	r3, #1
 800073a:	d12d      	bne.n	8000798 <UartAction_ServoMotor+0x2d4>
            case 1: {
              if (uartbuf[4] == (EEPROM_Disable_P2_30 & 0xFF)) {  // 已经设置了EEPROM不保存
 800073c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000740:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	2b05      	cmp	r3, #5
 8000748:	d104      	bne.n	8000754 <UartAction_ServoMotor+0x290>
                ServoMotor.Flag_Event[1] = 26;
 800074a:	4b4a      	ldr	r3, [pc, #296]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 800074c:	221a      	movs	r2, #26
 800074e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
              } else {
                ServoMotor.Flag_Event[1] = 24;
              }
            } break;
 8000752:	e003      	b.n	800075c <UartAction_ServoMotor+0x298>
                ServoMotor.Flag_Event[1] = 24;
 8000754:	4b47      	ldr	r3, [pc, #284]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000756:	2218      	movs	r2, #24
 8000758:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800075c:	bf00      	nop
          }
        } break;
 800075e:	e01b      	b.n	8000798 <UartAction_ServoMotor+0x2d4>
        case PulseReset_Register_P2_50: {  // 脉冲清除模式，需要设置为0x11;
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000760:	4b44      	ldr	r3, [pc, #272]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000762:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d119      	bne.n	800079c <UartAction_ServoMotor+0x2d8>
            case 1: {
              if (uartbuf[4] == (PulseReset_Data_P2_50 & 0xFF)) {  // 已经设置脉冲清除模式，为0x11;
 8000768:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800076c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	2b11      	cmp	r3, #17
 8000774:	d104      	bne.n	8000780 <UartAction_ServoMotor+0x2bc>
                ServoMotor.Flag_Event[1] = 22;
 8000776:	4b3f      	ldr	r3, [pc, #252]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000778:	2216      	movs	r2, #22
 800077a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
              } else {
                ServoMotor.Flag_Event[1] = 20;
              }
            } break;
 800077e:	e003      	b.n	8000788 <UartAction_ServoMotor+0x2c4>
                ServoMotor.Flag_Event[1] = 20;
 8000780:	4b3c      	ldr	r3, [pc, #240]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000782:	2214      	movs	r2, #20
 8000784:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000788:	bf00      	nop
          }
        } break;
 800078a:	e007      	b.n	800079c <UartAction_ServoMotor+0x2d8>
        } break;
 800078c:	bf00      	nop
 800078e:	e2b9      	b.n	8000d04 <UartAction_ServoMotor+0x840>
        } break;
 8000790:	bf00      	nop
 8000792:	e2b7      	b.n	8000d04 <UartAction_ServoMotor+0x840>
        } break;
 8000794:	bf00      	nop
 8000796:	e2b5      	b.n	8000d04 <UartAction_ServoMotor+0x840>
        } break;
 8000798:	bf00      	nop
 800079a:	e2b3      	b.n	8000d04 <UartAction_ServoMotor+0x840>
        } break;
 800079c:	bf00      	nop
      }
    } break;
 800079e:	e2b1      	b.n	8000d04 <UartAction_ServoMotor+0x840>
    case Cmd_Write_Once_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 读取寄存器
 80007a0:	4b34      	ldr	r3, [pc, #208]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 80007a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80007a4:	f240 420a 	movw	r2, #1034	@ 0x40a
 80007a8:	4293      	cmp	r3, r2
 80007aa:	f000 80db 	beq.w	8000964 <UartAction_ServoMotor+0x4a0>
 80007ae:	f240 420a 	movw	r2, #1034	@ 0x40a
 80007b2:	4293      	cmp	r3, r2
 80007b4:	f300 82a8 	bgt.w	8000d08 <UartAction_ServoMotor+0x844>
 80007b8:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80007bc:	f000 80cd 	beq.w	800095a <UartAction_ServoMotor+0x496>
 80007c0:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80007c4:	f300 82a0 	bgt.w	8000d08 <UartAction_ServoMotor+0x844>
 80007c8:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80007cc:	f000 80c0 	beq.w	8000950 <UartAction_ServoMotor+0x48c>
 80007d0:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80007d4:	f300 8298 	bgt.w	8000d08 <UartAction_ServoMotor+0x844>
 80007d8:	f240 2216 	movw	r2, #534	@ 0x216
 80007dc:	4293      	cmp	r3, r2
 80007de:	f000 809a 	beq.w	8000916 <UartAction_ServoMotor+0x452>
 80007e2:	f240 2216 	movw	r2, #534	@ 0x216
 80007e6:	4293      	cmp	r3, r2
 80007e8:	f300 828e 	bgt.w	8000d08 <UartAction_ServoMotor+0x844>
 80007ec:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 80007f0:	d05e      	beq.n	80008b0 <UartAction_ServoMotor+0x3ec>
 80007f2:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 80007f6:	f300 8287 	bgt.w	8000d08 <UartAction_ServoMotor+0x844>
 80007fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80007fc:	dc1c      	bgt.n	8000838 <UartAction_ServoMotor+0x374>
 80007fe:	2b22      	cmp	r3, #34	@ 0x22
 8000800:	f2c0 8282 	blt.w	8000d08 <UartAction_ServoMotor+0x844>
 8000804:	3b22      	subs	r3, #34	@ 0x22
 8000806:	2b08      	cmp	r3, #8
 8000808:	f200 827e 	bhi.w	8000d08 <UartAction_ServoMotor+0x844>
 800080c:	a201      	add	r2, pc, #4	@ (adr r2, 8000814 <UartAction_ServoMotor+0x350>)
 800080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000812:	bf00      	nop
 8000814:	08000841 	.word	0x08000841
 8000818:	08000d09 	.word	0x08000d09
 800081c:	0800084b 	.word	0x0800084b
 8000820:	08000d09 	.word	0x08000d09
 8000824:	08000855 	.word	0x08000855
 8000828:	08000d09 	.word	0x08000d09
 800082c:	0800085f 	.word	0x0800085f
 8000830:	08000d09 	.word	0x08000d09
 8000834:	08000869 	.word	0x08000869
 8000838:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800083c:	d01c      	beq.n	8000878 <UartAction_ServoMotor+0x3b4>
              }
            } break;
          }
        } break;
      }
    } break;
 800083e:	e263      	b.n	8000d08 <UartAction_ServoMotor+0x844>
          ServoMotor.Flag_Event[1] = 6;        // 设置状态监控寄存器2
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000842:	2206      	movs	r2, #6
 8000844:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000848:	e23f      	b.n	8000cca <UartAction_ServoMotor+0x806>
          ServoMotor.Flag_Event[1] = 8;  // 设置状态监控寄存器3
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 800084c:	2208      	movs	r2, #8
 800084e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000852:	e23a      	b.n	8000cca <UartAction_ServoMotor+0x806>
          ServoMotor.Flag_Event[1] = 10;  // 设置状态监控寄存器4
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000856:	220a      	movs	r2, #10
 8000858:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800085c:	e235      	b.n	8000cca <UartAction_ServoMotor+0x806>
          ServoMotor.Flag_Event[1] = 12;  // 设置状态监控寄存器5
 800085e:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 8000860:	220c      	movs	r2, #12
 8000862:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000866:	e230      	b.n	8000cca <UartAction_ServoMotor+0x806>
          ServoMotor.Flag_Event[1] = 2;  // 重新检查状态监控寄存器1-5
 8000868:	4b02      	ldr	r3, [pc, #8]	@ (8000874 <UartAction_ServoMotor+0x3b0>)
 800086a:	2202      	movs	r2, #2
 800086c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000870:	e22b      	b.n	8000cca <UartAction_ServoMotor+0x806>
 8000872:	bf00      	nop
 8000874:	20000088 	.word	0x20000088
          switch (ServoMotor.Flag_Event[2]) {
 8000878:	4bbe      	ldr	r3, [pc, #760]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 800087a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800087e:	2b17      	cmp	r3, #23
 8000880:	f040 821e 	bne.w	8000cc0 <UartAction_ServoMotor+0x7fc>
              ServoMotor.Flag_Event[2] = Szmode_Data_P1_01 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 24 : 22;
 8000884:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000894:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000898:	7952      	ldrb	r2, [r2, #5]
 800089a:	4313      	orrs	r3, r2
 800089c:	2b04      	cmp	r3, #4
 800089e:	d101      	bne.n	80008a4 <UartAction_ServoMotor+0x3e0>
 80008a0:	2218      	movs	r2, #24
 80008a2:	e000      	b.n	80008a6 <UartAction_ServoMotor+0x3e2>
 80008a4:	2216      	movs	r2, #22
 80008a6:	4bb3      	ldr	r3, [pc, #716]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 80008a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 80008ac:	bf00      	nop
        } break;
 80008ae:	e207      	b.n	8000cc0 <UartAction_ServoMotor+0x7fc>
          switch (ServoMotor.Flag_Event[2]) {
 80008b0:	4bb0      	ldr	r3, [pc, #704]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 80008b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d002      	beq.n	80008c0 <UartAction_ServoMotor+0x3fc>
 80008ba:	2b19      	cmp	r3, #25
 80008bc:	d015      	beq.n	80008ea <UartAction_ServoMotor+0x426>
        } break;
 80008be:	e204      	b.n	8000cca <UartAction_ServoMotor+0x806>
              ServoMotor.Flag_Event[2] = DI1_Data_ServoON == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 6 : 4;
 80008c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008d0:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80008d4:	7952      	ldrb	r2, [r2, #5]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d101      	bne.n	80008e0 <UartAction_ServoMotor+0x41c>
 80008dc:	2206      	movs	r2, #6
 80008de:	e000      	b.n	80008e2 <UartAction_ServoMotor+0x41e>
 80008e0:	2204      	movs	r2, #4
 80008e2:	4ba4      	ldr	r3, [pc, #656]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 80008e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 80008e8:	e014      	b.n	8000914 <UartAction_ServoMotor+0x450>
              ServoMotor.Flag_Event[2] = DI1_Data_ServoON == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 26 : 24;
 80008ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	021b      	lsls	r3, r3, #8
 80008f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008fa:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80008fe:	7952      	ldrb	r2, [r2, #5]
 8000900:	4313      	orrs	r3, r2
 8000902:	2b01      	cmp	r3, #1
 8000904:	d101      	bne.n	800090a <UartAction_ServoMotor+0x446>
 8000906:	221a      	movs	r2, #26
 8000908:	e000      	b.n	800090c <UartAction_ServoMotor+0x448>
 800090a:	2218      	movs	r2, #24
 800090c:	4b99      	ldr	r3, [pc, #612]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 800090e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000912:	bf00      	nop
        } break;
 8000914:	e1d9      	b.n	8000cca <UartAction_ServoMotor+0x806>
          switch (ServoMotor.Flag_Event[2]) {
 8000916:	4b97      	ldr	r3, [pc, #604]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800091c:	2b15      	cmp	r3, #21
 800091e:	f040 81d1 	bne.w	8000cc4 <UartAction_ServoMotor+0x800>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_End_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 22 : 20;
 8000922:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000926:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000932:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000936:	7952      	ldrb	r2, [r2, #5]
 8000938:	4313      	orrs	r3, r2
 800093a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800093e:	d101      	bne.n	8000944 <UartAction_ServoMotor+0x480>
 8000940:	2216      	movs	r2, #22
 8000942:	e000      	b.n	8000946 <UartAction_ServoMotor+0x482>
 8000944:	2214      	movs	r2, #20
 8000946:	4b8b      	ldr	r3, [pc, #556]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 800094c:	bf00      	nop
        } break;
 800094e:	e1b9      	b.n	8000cc4 <UartAction_ServoMotor+0x800>
          ServoMotor.Flag_Event[1] = 22;  // 重新读取EEPROM设置是否为不保存模式
 8000950:	4b88      	ldr	r3, [pc, #544]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000952:	2216      	movs	r2, #22
 8000954:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000958:	e1b7      	b.n	8000cca <UartAction_ServoMotor+0x806>
          ServoMotor.Flag_Event[1] = 18;  // 重新读取脉冲清除模式
 800095a:	4b86      	ldr	r3, [pc, #536]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 800095c:	2212      	movs	r2, #18
 800095e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000962:	e1b2      	b.n	8000cca <UartAction_ServoMotor+0x806>
          switch (ServoMotor.Flag_Event[2]) {
 8000964:	4b83      	ldr	r3, [pc, #524]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800096a:	3b03      	subs	r3, #3
 800096c:	2b1a      	cmp	r3, #26
 800096e:	f200 81ab 	bhi.w	8000cc8 <UartAction_ServoMotor+0x804>
 8000972:	a201      	add	r2, pc, #4	@ (adr r2, 8000978 <UartAction_ServoMotor+0x4b4>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	080009e5 	.word	0x080009e5
 800097c:	08000cc9 	.word	0x08000cc9
 8000980:	08000cc9 	.word	0x08000cc9
 8000984:	08000cc9 	.word	0x08000cc9
 8000988:	08000a0f 	.word	0x08000a0f
 800098c:	08000cc9 	.word	0x08000cc9
 8000990:	08000a39 	.word	0x08000a39
 8000994:	08000cc9 	.word	0x08000cc9
 8000998:	08000aad 	.word	0x08000aad
 800099c:	08000cc9 	.word	0x08000cc9
 80009a0:	08000ad7 	.word	0x08000ad7
 80009a4:	08000cc9 	.word	0x08000cc9
 80009a8:	08000b4b 	.word	0x08000b4b
 80009ac:	08000cc9 	.word	0x08000cc9
 80009b0:	08000b79 	.word	0x08000b79
 80009b4:	08000cc9 	.word	0x08000cc9
 80009b8:	08000ba3 	.word	0x08000ba3
 80009bc:	08000cc9 	.word	0x08000cc9
 80009c0:	08000cc9 	.word	0x08000cc9
 80009c4:	08000cc9 	.word	0x08000cc9
 80009c8:	08000cc9 	.word	0x08000cc9
 80009cc:	08000cc9 	.word	0x08000cc9
 80009d0:	08000cc9 	.word	0x08000cc9
 80009d4:	08000cc9 	.word	0x08000cc9
 80009d8:	08000c15 	.word	0x08000c15
 80009dc:	08000cc9 	.word	0x08000cc9
 80009e0:	08000c3f 	.word	0x08000c3f
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 4 : 2;
 80009e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009ec:	791b      	ldrb	r3, [r3, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d108      	bne.n	8000a04 <UartAction_ServoMotor+0x540>
 80009f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009fa:	795b      	ldrb	r3, [r3, #5]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d101      	bne.n	8000a04 <UartAction_ServoMotor+0x540>
 8000a00:	2204      	movs	r2, #4
 8000a02:	e000      	b.n	8000a06 <UartAction_ServoMotor+0x542>
 8000a04:	2202      	movs	r2, #2
 8000a06:	4b5b      	ldr	r3, [pc, #364]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a0c:	e157      	b.n	8000cbe <UartAction_ServoMotor+0x7fa>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x01) ? 8 : 6;
 8000a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d108      	bne.n	8000a2e <UartAction_ServoMotor+0x56a>
 8000a1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a24:	795b      	ldrb	r3, [r3, #5]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d101      	bne.n	8000a2e <UartAction_ServoMotor+0x56a>
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	e000      	b.n	8000a30 <UartAction_ServoMotor+0x56c>
 8000a2e:	2206      	movs	r2, #6
 8000a30:	4b50      	ldr	r3, [pc, #320]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a36:	e142      	b.n	8000cbe <UartAction_ServoMotor+0x7fa>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CCW往左动JOGmode_Data_CCW
 8000a38:	4b4e      	ldr	r3, [pc, #312]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a3a:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d116      	bne.n	8000a70 <UartAction_ServoMotor+0x5ac>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 10 : 8;
 8000a42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a4a:	791b      	ldrb	r3, [r3, #4]
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a52:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a56:	7952      	ldrb	r2, [r2, #5]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <UartAction_ServoMotor+0x5a2>
 8000a62:	220a      	movs	r2, #10
 8000a64:	e000      	b.n	8000a68 <UartAction_ServoMotor+0x5a4>
 8000a66:	2208      	movs	r2, #8
 8000a68:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a6e:	e11f      	b.n	8000cb0 <UartAction_ServoMotor+0x7ec>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CW往右动
 8000a70:	4b40      	ldr	r3, [pc, #256]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a72:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7a:	f040 8119 	bne.w	8000cb0 <UartAction_ServoMotor+0x7ec>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 10 : 8;
 8000a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a86:	791b      	ldrb	r3, [r3, #4]
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a8e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a92:	7952      	ldrb	r2, [r2, #5]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <UartAction_ServoMotor+0x5de>
 8000a9e:	220a      	movs	r2, #10
 8000aa0:	e000      	b.n	8000aa4 <UartAction_ServoMotor+0x5e0>
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000aaa:	e101      	b.n	8000cb0 <UartAction_ServoMotor+0x7ec>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 12 : 10;
 8000aac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ab4:	791b      	ldrb	r3, [r3, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d108      	bne.n	8000acc <UartAction_ServoMotor+0x608>
 8000aba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000abe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ac2:	795b      	ldrb	r3, [r3, #5]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d101      	bne.n	8000acc <UartAction_ServoMotor+0x608>
 8000ac8:	220c      	movs	r2, #12
 8000aca:	e000      	b.n	8000ace <UartAction_ServoMotor+0x60a>
 8000acc:	220a      	movs	r2, #10
 8000ace:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000ad4:	e0f3      	b.n	8000cbe <UartAction_ServoMotor+0x7fa>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CW往右动
 8000ad6:	4b27      	ldr	r3, [pc, #156]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000ad8:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d116      	bne.n	8000b0e <UartAction_ServoMotor+0x64a>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 14 : 12;
 8000ae0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000af0:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000af4:	7952      	ldrb	r2, [r2, #5]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d101      	bne.n	8000b04 <UartAction_ServoMotor+0x640>
 8000b00:	220e      	movs	r2, #14
 8000b02:	e000      	b.n	8000b06 <UartAction_ServoMotor+0x642>
 8000b04:	220c      	movs	r2, #12
 8000b06:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b0c:	e0d2      	b.n	8000cb4 <UartAction_ServoMotor+0x7f0>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CCW往左动
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b10:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b18:	f040 80cc 	bne.w	8000cb4 <UartAction_ServoMotor+0x7f0>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 14 : 12;
 8000b1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b24:	791b      	ldrb	r3, [r3, #4]
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b2c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000b30:	7952      	ldrb	r2, [r2, #5]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d101      	bne.n	8000b40 <UartAction_ServoMotor+0x67c>
 8000b3c:	220e      	movs	r2, #14
 8000b3e:	e000      	b.n	8000b42 <UartAction_ServoMotor+0x67e>
 8000b40:	220c      	movs	r2, #12
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b48:	e0b4      	b.n	8000cb4 <UartAction_ServoMotor+0x7f0>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 16 : 14;
 8000b4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b52:	791b      	ldrb	r3, [r3, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d108      	bne.n	8000b6a <UartAction_ServoMotor+0x6a6>
 8000b58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b60:	795b      	ldrb	r3, [r3, #5]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <UartAction_ServoMotor+0x6a6>
 8000b66:	2210      	movs	r2, #16
 8000b68:	e000      	b.n	8000b6c <UartAction_ServoMotor+0x6a8>
 8000b6a:	220e      	movs	r2, #14
 8000b6c:	4b01      	ldr	r3, [pc, #4]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b72:	e0a4      	b.n	8000cbe <UartAction_ServoMotor+0x7fa>
 8000b74:	20000088 	.word	0x20000088
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x01) ? 18 : 16;
 8000b78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b80:	791b      	ldrb	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d108      	bne.n	8000b98 <UartAction_ServoMotor+0x6d4>
 8000b86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b8e:	795b      	ldrb	r3, [r3, #5]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d101      	bne.n	8000b98 <UartAction_ServoMotor+0x6d4>
 8000b94:	2212      	movs	r2, #18
 8000b96:	e000      	b.n	8000b9a <UartAction_ServoMotor+0x6d6>
 8000b98:	2210      	movs	r2, #16
 8000b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000ba0:	e08d      	b.n	8000cbe <UartAction_ServoMotor+0x7fa>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CCW往左动JOGmode_Data_CCW
 8000ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000ba4:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d116      	bne.n	8000bda <UartAction_ServoMotor+0x716>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 18;
 8000bac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bb4:	791b      	ldrb	r3, [r3, #4]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bbc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bc0:	7952      	ldrb	r2, [r2, #5]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d101      	bne.n	8000bd0 <UartAction_ServoMotor+0x70c>
 8000bcc:	2214      	movs	r2, #20
 8000bce:	e000      	b.n	8000bd2 <UartAction_ServoMotor+0x70e>
 8000bd0:	2212      	movs	r2, #18
 8000bd2:	4b51      	ldr	r3, [pc, #324]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000bd8:	e06e      	b.n	8000cb8 <UartAction_ServoMotor+0x7f4>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CW往右动
 8000bda:	4b4f      	ldr	r3, [pc, #316]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000bdc:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d168      	bne.n	8000cb8 <UartAction_ServoMotor+0x7f4>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 18;
 8000be6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bee:	791b      	ldrb	r3, [r3, #4]
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bf6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bfa:	7952      	ldrb	r2, [r2, #5]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <UartAction_ServoMotor+0x746>
 8000c06:	2214      	movs	r2, #20
 8000c08:	e000      	b.n	8000c0c <UartAction_ServoMotor+0x748>
 8000c0a:	2212      	movs	r2, #18
 8000c0c:	4b42      	ldr	r3, [pc, #264]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c12:	e051      	b.n	8000cb8 <UartAction_ServoMotor+0x7f4>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 28 : 26;
 8000c14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c1c:	791b      	ldrb	r3, [r3, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d108      	bne.n	8000c34 <UartAction_ServoMotor+0x770>
 8000c22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c2a:	795b      	ldrb	r3, [r3, #5]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <UartAction_ServoMotor+0x770>
 8000c30:	221c      	movs	r2, #28
 8000c32:	e000      	b.n	8000c36 <UartAction_ServoMotor+0x772>
 8000c34:	221a      	movs	r2, #26
 8000c36:	4b38      	ldr	r3, [pc, #224]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c3c:	e03f      	b.n	8000cbe <UartAction_ServoMotor+0x7fa>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CW往右动
 8000c3e:	4b36      	ldr	r3, [pc, #216]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000c40:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d116      	bne.n	8000c76 <UartAction_ServoMotor+0x7b2>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 30 : 28;
 8000c48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c50:	791b      	ldrb	r3, [r3, #4]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c58:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c5c:	7952      	ldrb	r2, [r2, #5]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d101      	bne.n	8000c6c <UartAction_ServoMotor+0x7a8>
 8000c68:	221e      	movs	r2, #30
 8000c6a:	e000      	b.n	8000c6e <UartAction_ServoMotor+0x7aa>
 8000c6c:	221c      	movs	r2, #28
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c74:	e022      	b.n	8000cbc <UartAction_ServoMotor+0x7f8>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CCW往左动
 8000c76:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000c78:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c80:	d11c      	bne.n	8000cbc <UartAction_ServoMotor+0x7f8>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 30 : 28;
 8000c82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c8a:	791b      	ldrb	r3, [r3, #4]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c92:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c96:	7952      	ldrb	r2, [r2, #5]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <UartAction_ServoMotor+0x7e2>
 8000ca2:	221e      	movs	r2, #30
 8000ca4:	e000      	b.n	8000ca8 <UartAction_ServoMotor+0x7e4>
 8000ca6:	221c      	movs	r2, #28
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000cae:	e005      	b.n	8000cbc <UartAction_ServoMotor+0x7f8>
            } break;
 8000cb0:	bf00      	nop
 8000cb2:	e009      	b.n	8000cc8 <UartAction_ServoMotor+0x804>
            } break;
 8000cb4:	bf00      	nop
 8000cb6:	e007      	b.n	8000cc8 <UartAction_ServoMotor+0x804>
            } break;
 8000cb8:	bf00      	nop
 8000cba:	e005      	b.n	8000cc8 <UartAction_ServoMotor+0x804>
            } break;
 8000cbc:	bf00      	nop
        } break;
 8000cbe:	e003      	b.n	8000cc8 <UartAction_ServoMotor+0x804>
        } break;
 8000cc0:	bf00      	nop
 8000cc2:	e021      	b.n	8000d08 <UartAction_ServoMotor+0x844>
        } break;
 8000cc4:	bf00      	nop
 8000cc6:	e01f      	b.n	8000d08 <UartAction_ServoMotor+0x844>
        } break;
 8000cc8:	bf00      	nop
    } break;
 8000cca:	e01d      	b.n	8000d08 <UartAction_ServoMotor+0x844>
    case Cmd_Write_Multi_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 读取寄存器
 8000ccc:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000cce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000cd0:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 8000cd4:	d11a      	bne.n	8000d0c <UartAction_ServoMotor+0x848>
        case GearRatioRegister_Numerator: {    // 电子齿轮比分子分母寄存器，需要设置分子160，分母94
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000cd8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d10e      	bne.n	8000cfc <UartAction_ServoMotor+0x838>
            case 4: {
              if (uartbuf[5] == ServoMotor.UartCurrentCmd[2]) ServoMotor.Flag_Event[1] = 14;  // 重新电子齿轮比分子分母寄存器
 8000cde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ce6:	795b      	ldrb	r3, [r3, #5]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000cec:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d103      	bne.n	8000cfa <UartAction_ServoMotor+0x836>
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <UartAction_ServoMotor+0x854>)
 8000cf4:	220e      	movs	r2, #14
 8000cf6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000cfa:	bf00      	nop
          }
        } break;
 8000cfc:	bf00      	nop
      }
    } break;
 8000cfe:	e005      	b.n	8000d0c <UartAction_ServoMotor+0x848>
    return;
 8000d00:	bf00      	nop
 8000d02:	e004      	b.n	8000d0e <UartAction_ServoMotor+0x84a>
    } break;
 8000d04:	bf00      	nop
 8000d06:	e002      	b.n	8000d0e <UartAction_ServoMotor+0x84a>
    } break;
 8000d08:	bf00      	nop
 8000d0a:	e000      	b.n	8000d0e <UartAction_ServoMotor+0x84a>
    } break;
 8000d0c:	bf00      	nop
  }
}
 8000d0e:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000088 	.word	0x20000088

08000d1c <Event_Movement_ServoMotor>:
void Event_Movement_ServoMotor(void) {
 8000d1c:	b598      	push	{r3, r4, r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  LOGI("STATE : %d", ServoMotor.Flag_Event[2]);
 8000d20:	f002 f818 	bl	8002d54 <HAL_GetTick>
 8000d24:	4601      	mov	r1, r0
 8000d26:	4bb1      	ldr	r3, [pc, #708]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d2c:	4ab0      	ldr	r2, [pc, #704]	@ (8000ff0 <Event_Movement_ServoMotor+0x2d4>)
 8000d2e:	48b1      	ldr	r0, [pc, #708]	@ (8000ff4 <Event_Movement_ServoMotor+0x2d8>)
 8000d30:	f006 fde2 	bl	80078f8 <iprintf>
  switch (ServoMotor.Flag_Event[2]) {
 8000d34:	4bad      	ldr	r3, [pc, #692]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d3a:	2b1c      	cmp	r3, #28
 8000d3c:	f200 8153 	bhi.w	8000fe6 <Event_Movement_ServoMotor+0x2ca>
 8000d40:	a201      	add	r2, pc, #4	@ (adr r2, 8000d48 <Event_Movement_ServoMotor+0x2c>)
 8000d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d46:	bf00      	nop
 8000d48:	08000dbd 	.word	0x08000dbd
 8000d4c:	08000dd1 	.word	0x08000dd1
 8000d50:	08000df3 	.word	0x08000df3
 8000d54:	08000fe7 	.word	0x08000fe7
 8000d58:	08000e0b 	.word	0x08000e0b
 8000d5c:	08000fe7 	.word	0x08000fe7
 8000d60:	08000e23 	.word	0x08000e23
 8000d64:	08000fe7 	.word	0x08000fe7
 8000d68:	08000e43 	.word	0x08000e43
 8000d6c:	08000fe7 	.word	0x08000fe7
 8000d70:	08000e7f 	.word	0x08000e7f
 8000d74:	08000fe7 	.word	0x08000fe7
 8000d78:	08000ea7 	.word	0x08000ea7
 8000d7c:	08000fe7 	.word	0x08000fe7
 8000d80:	08000ee3 	.word	0x08000ee3
 8000d84:	08000fe7 	.word	0x08000fe7
 8000d88:	08000f09 	.word	0x08000f09
 8000d8c:	08000fe7 	.word	0x08000fe7
 8000d90:	08000f35 	.word	0x08000f35
 8000d94:	08000fe7 	.word	0x08000fe7
 8000d98:	08000f71 	.word	0x08000f71
 8000d9c:	08000fe7 	.word	0x08000fe7
 8000da0:	08000f9d 	.word	0x08000f9d
 8000da4:	08000fe7 	.word	0x08000fe7
 8000da8:	08000fad 	.word	0x08000fad
 8000dac:	08000fe7 	.word	0x08000fe7
 8000db0:	08000fbd 	.word	0x08000fbd
 8000db4:	08000fe7 	.word	0x08000fe7
 8000db8:	08000fcd 	.word	0x08000fcd
    case 0: {                     // 判断是否校准
      if (!ServoMotor.IsReset) {  // 没有校准
 8000dbc:	4b8b      	ldr	r3, [pc, #556]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000dbe:	789b      	ldrb	r3, [r3, #2]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f040 810b 	bne.w	8000fdc <Event_Movement_ServoMotor+0x2c0>
        ServoMotor.Flag_Event[2] = 1;
 8000dc6:	4b89      	ldr	r3, [pc, #548]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    } break;
 8000dce:	e105      	b.n	8000fdc <Event_Movement_ServoMotor+0x2c0>
    case 1: {                                                                                                            // 没有校准的时候
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 一开始就有传感器触发的情况
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	4889      	ldr	r0, [pc, #548]	@ (8000ff8 <Event_Movement_ServoMotor+0x2dc>)
 8000dd4:	f003 f912 	bl	8003ffc <HAL_GPIO_ReadPin>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d104      	bne.n	8000de8 <Event_Movement_ServoMotor+0xcc>
        ServoMotor.Flag_Event[2] = 2;
 8000dde:	4b83      	ldr	r3, [pc, #524]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      } else {
        ServoMotor.Flag_Event[2] = 2;
      }
    } break;
 8000de6:	e0fe      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
        ServoMotor.Flag_Event[2] = 2;
 8000de8:	4b80      	ldr	r3, [pc, #512]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000dea:	2202      	movs	r2, #2
 8000dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000df0:	e0f9      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 2: {  // 设备最低速度缓慢运动然后当刚离开传感器范围，随后又返回至刚触发瞬间
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000df2:	4882      	ldr	r0, [pc, #520]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000df4:	f000 f980 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，如果一开始不设置速度0的话，可能会冲出去
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f000 f988 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 3;                 // 等待串口返回，赋值4，超时赋值2
 8000e00:	4b7a      	ldr	r3, [pc, #488]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000e02:	2203      	movs	r2, #3
 8000e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e08:	e0ed      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 4: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e0a:	487c      	ldr	r0, [pc, #496]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000e0c:	f000 f974 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(1, DI1_Data_ServoON);  // 打开伺服控制Servo ON
 8000e10:	2101      	movs	r1, #1
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 f97c 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 5;                                // 等待串口返回，赋值6，超时赋值4
 8000e18:	4b74      	ldr	r3, [pc, #464]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e20:	e0e1      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 6: {
      //   ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
      //   Uart_Send_MovementRegister_ServoMotor(3, 1);  // 设置速度1
      LOGI("%d", motor_move());
 8000e22:	f001 ff97 	bl	8002d54 <HAL_GetTick>
 8000e26:	4604      	mov	r4, r0
 8000e28:	f006 fa54 	bl	80072d4 <motor_move>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a70      	ldr	r2, [pc, #448]	@ (8000ff0 <Event_Movement_ServoMotor+0x2d4>)
 8000e30:	4621      	mov	r1, r4
 8000e32:	4873      	ldr	r0, [pc, #460]	@ (8001000 <Event_Movement_ServoMotor+0x2e4>)
 8000e34:	f006 fd60 	bl	80078f8 <iprintf>
      ServoMotor.Flag_Event[2] = 6;  // 等待串口返回，赋值8，超时赋值6
 8000e38:	4b6c      	ldr	r3, [pc, #432]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000e3a:	2206      	movs	r2, #6
 8000e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e40:	e0d1      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 8: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e42:	486e      	ldr	r0, [pc, #440]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000e44:	f000 f958 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往左动，在左则往右动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000e48:	4b68      	ldr	r3, [pc, #416]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000e4a:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d105      	bne.n	8000e5e <Event_Movement_ServoMotor+0x142>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // CCW往左动JOGmode_Data_CCW
 8000e52:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000e56:	2003      	movs	r0, #3
 8000e58:	f000 f95a 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
 8000e5c:	e00a      	b.n	8000e74 <Event_Movement_ServoMotor+0x158>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000e5e:	4b63      	ldr	r3, [pc, #396]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000e60:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d104      	bne.n	8000e74 <Event_Movement_ServoMotor+0x158>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CW往右动
 8000e6a:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f000 f94e 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
      }
      ServoMotor.Flag_Event[2] = 9;  // 等待串口返回，赋值10，超时赋值8
 8000e74:	4b5d      	ldr	r3, [pc, #372]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000e76:	2209      	movs	r2, #9
 8000e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e7c:	e0b3      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 10: {
      if (LimitSensorOFF_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 刚好离开，马上停止
 8000e7e:	2102      	movs	r1, #2
 8000e80:	485d      	ldr	r0, [pc, #372]	@ (8000ff8 <Event_Movement_ServoMotor+0x2dc>)
 8000e82:	f003 f8bb 	bl	8003ffc <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	f040 80a9 	bne.w	8000fe0 <Event_Movement_ServoMotor+0x2c4>
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e8e:	485b      	ldr	r0, [pc, #364]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000e90:	f000 f932 	bl	80010f8 <ResetTimerFlag_ServoMotor>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，停止
 8000e94:	2100      	movs	r1, #0
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f93a 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 11;                // 等待串口返回，赋值12，超时赋值10
 8000e9c:	4b53      	ldr	r3, [pc, #332]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000e9e:	220b      	movs	r2, #11
 8000ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    } break;
 8000ea4:	e09c      	b.n	8000fe0 <Event_Movement_ServoMotor+0x2c4>
    case 12: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ea6:	4855      	ldr	r0, [pc, #340]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000ea8:	f000 f926 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往右动，在左则往左动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000eac:	4b4f      	ldr	r3, [pc, #316]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000eae:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d105      	bne.n	8000ec2 <Event_Movement_ServoMotor+0x1a6>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CW往右动
 8000eb6:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000eba:	2003      	movs	r0, #3
 8000ebc:	f000 f928 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
 8000ec0:	e00a      	b.n	8000ed8 <Event_Movement_ServoMotor+0x1bc>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000ec4:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d104      	bne.n	8000ed8 <Event_Movement_ServoMotor+0x1bc>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // CCW往左动
 8000ece:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f91c 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
      }
      ServoMotor.Flag_Event[2] = 13;  // 等待串口返回，赋值14，超时赋值12
 8000ed8:	4b44      	ldr	r3, [pc, #272]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000eda:	220d      	movs	r2, #13
 8000edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000ee0:	e081      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 14: {
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 刚好回去
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4844      	ldr	r0, [pc, #272]	@ (8000ff8 <Event_Movement_ServoMotor+0x2dc>)
 8000ee6:	f003 f889 	bl	8003ffc <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d179      	bne.n	8000fe4 <Event_Movement_ServoMotor+0x2c8>
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ef0:	4842      	ldr	r0, [pc, #264]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000ef2:	f000 f901 	bl	80010f8 <ResetTimerFlag_ServoMotor>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，停止
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f909 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 15;                // 等待串口返回，赋值16，超时赋值14
 8000efe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000f00:	220f      	movs	r2, #15
 8000f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      if (0) {  // 扭矩过大要停下来
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
        Uart_Send_MovementRegister_ServoMotor(3, 0);
        ServoMotor.Flag_Event[2] = 0;
      }
    } break;
 8000f06:	e06d      	b.n	8000fe4 <Event_Movement_ServoMotor+0x2c8>
    // 缺一个开始信号
    case 16: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f08:	483c      	ldr	r0, [pc, #240]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000f0a:	f000 f8f5 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      if (0x01 == GetCmdType()) {
 8000f0e:	f006 fb67 	bl	80075e0 <GetCmdType>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d108      	bne.n	8000f2a <Event_Movement_ServoMotor+0x20e>
        Uart_Send_MovementRegister_ServoMotor(3, 1);  // 设置速度1，
 8000f18:	2101      	movs	r1, #1
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 f8f8 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 18;
 8000f20:	4b32      	ldr	r3, [pc, #200]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000f22:	2212      	movs	r2, #18
 8000f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      } else {
        ServoMotor.Flag_Event[2] = 16;  // 等待串口返回，赋值18，超时赋值16
      }
      //   Uart_Send_MovementRegister_ServoMotor(2, PTmode_Data_P1_01); // 已经归位，重置脉冲计数,写入PT模式
    } break;
 8000f28:	e05d      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
        ServoMotor.Flag_Event[2] = 16;  // 等待串口返回，赋值18，超时赋值16
 8000f2a:	4b30      	ldr	r3, [pc, #192]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f32:	e058      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 18: {  // 设置了PT模式，发送清除脉冲的指令，设置DI2
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f34:	4831      	ldr	r0, [pc, #196]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000f36:	f000 f8df 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往右动，在左则往左动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000f3c:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d105      	bne.n	8000f50 <Event_Movement_ServoMotor+0x234>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // cCW往右动
 8000f44:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f8e1 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
 8000f4e:	e00a      	b.n	8000f66 <Event_Movement_ServoMotor+0x24a>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000f50:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000f52:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5a:	d104      	bne.n	8000f66 <Event_Movement_ServoMotor+0x24a>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CCW往左动
 8000f5c:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f8d5 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
      }
      // Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_Start_Data_P2_11); // 已经归位，重置脉冲计数,写入PT模式
      ServoMotor.Flag_Event[2] = 19;  // 等待串口返回，赋值20，超时赋值18
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000f68:	2213      	movs	r2, #19
 8000f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f6e:	e03a      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 20: {  // 设置了PT模式，发送清除脉冲的指令，复位DI2
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f70:	4822      	ldr	r0, [pc, #136]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000f72:	f000 f8c1 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      if (0x00 == GetCmdType()) {
 8000f76:	f006 fb33 	bl	80075e0 <GetCmdType>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d108      	bne.n	8000f92 <Event_Movement_ServoMotor+0x276>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，
 8000f80:	2100      	movs	r1, #0
 8000f82:	2003      	movs	r0, #3
 8000f84:	f000 f8c4 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 22;
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000f8a:	2216      	movs	r2, #22
 8000f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      } else {
        ServoMotor.Flag_Event[2] = 20;  // 等待串口返回，赋值18，超时赋值16
      }
      // Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_End_Data_P2_11); // 已经归位，重置脉冲计数,写入PT模式
      // ServoMotor.Flag_Event[2] = 21; // 等待串口返回，赋值22，超时赋值20
    } break;
 8000f90:	e029      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
        ServoMotor.Flag_Event[2] = 20;  // 等待串口返回，赋值18，超时赋值16
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000f94:	2214      	movs	r2, #20
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f9a:	e024      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 22: {  // 脉冲已经重置了，设置成Sz模式
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f9c:	4817      	ldr	r0, [pc, #92]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000f9e:	f000 f8ab 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(4, Szmode_Data_P1_01); // 已经归位，重置脉冲计数,写入PT模式
      ServoMotor.Flag_Event[2] = 23;  // 等待串口返回，赋值24，超时赋值22
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000fa4:	2217      	movs	r2, #23
 8000fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000faa:	e01c      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 24: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000fac:	4813      	ldr	r0, [pc, #76]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000fae:	f000 f8a3 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(1, DI1_Data_ServoON); // 打开伺服控制Servo ON
      ServoMotor.Flag_Event[2] = 25;  // 等待串口返回，赋值6，超时赋值4
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000fb4:	2219      	movs	r2, #25
 8000fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000fba:	e014      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 26: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000fbc:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000fbe:	f000 f89b 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(3, 1); // 设置速度1
      ServoMotor.Flag_Event[2] = 27;  // 等待串口返回，赋值26，超时赋值24
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000fc4:	221b      	movs	r2, #27
 8000fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000fca:	e00c      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    case 28: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <Event_Movement_ServoMotor+0x2e0>)
 8000fce:	f000 f893 	bl	80010f8 <ResetTimerFlag_ServoMotor>
      ServoMotor.Flag_Event[2] = 29;  // 等待串口返回，赋值28，超时赋值26
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <Event_Movement_ServoMotor+0x2d0>)
 8000fd4:	221d      	movs	r2, #29
 8000fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000fda:	e004      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    } break;
 8000fdc:	bf00      	nop
 8000fde:	e002      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    } break;
 8000fe0:	bf00      	nop
 8000fe2:	e000      	b.n	8000fe6 <Event_Movement_ServoMotor+0x2ca>
    } break;
 8000fe4:	bf00      	nop
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	bd98      	pop	{r3, r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000088 	.word	0x20000088
 8000ff0:	080088b0 	.word	0x080088b0
 8000ff4:	08008628 	.word	0x08008628
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	200000bc 	.word	0x200000bc
 8001000:	08008650 	.word	0x08008650

08001004 <TimerTasks_ServoMotor>:
void TimerTasks_ServoMotor(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  UartRxdMonitor_ServoMotor(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f000 fd6f 	bl	8001aec <UartRxdMonitor_ServoMotor>
  if (ServoMotor.Flag_Event[1] == 1) {  // 初始化上电延迟
 800100e:	4b39      	ldr	r3, [pc, #228]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001010:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001014:	2b01      	cmp	r3, #1
 8001016:	d113      	bne.n	8001040 <TimerTasks_ServoMotor+0x3c>
    ServoMotor.TimerFlag[0]++;
 8001018:	4b36      	ldr	r3, [pc, #216]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 800101a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800101c:	3301      	adds	r3, #1
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001022:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ServoMotor.TimerFlag[0] >= 5000) {
 8001024:	4b33      	ldr	r3, [pc, #204]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001026:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001028:	f241 3287 	movw	r2, #4999	@ 0x1387
 800102c:	4293      	cmp	r3, r2
 800102e:	d95e      	bls.n	80010ee <TimerTasks_ServoMotor+0xea>
      ServoMotor.TimerFlag[0]  = 0;
 8001030:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001032:	2200      	movs	r2, #0
 8001034:	865a      	strh	r2, [r3, #50]	@ 0x32
      ServoMotor.Flag_Event[1] = 2;  // 检查状态监控寄存器1-5状态
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001038:	2202      	movs	r2, #2
 800103a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (ServoMotor.TimerFlag[0] >= 1000) {
      ServoMotor.TimerFlag[0]  = 0;
      ServoMotor.Flag_Event[1] = ServoMotor.Flag_Event[1] - 1;  // 超时没反应，返回上一次发送
    }
  }
}
 800103e:	e056      	b.n	80010ee <TimerTasks_ServoMotor+0xea>
  } else if (ServoMotor.Flag_Event[1] == 3 ||   //
 8001040:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001042:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001046:	2b03      	cmp	r3, #3
 8001048:	d03b      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 5 ||   //
 800104a:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 800104c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
  } else if (ServoMotor.Flag_Event[1] == 3 ||   //
 8001050:	2b05      	cmp	r3, #5
 8001052:	d036      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 7 ||   //
 8001054:	4b27      	ldr	r3, [pc, #156]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001056:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 5 ||   //
 800105a:	2b07      	cmp	r3, #7
 800105c:	d031      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 9 ||   //
 800105e:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001060:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 7 ||   //
 8001064:	2b09      	cmp	r3, #9
 8001066:	d02c      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 11 ||  //
 8001068:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 800106a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 9 ||   //
 800106e:	2b0b      	cmp	r3, #11
 8001070:	d027      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 13 ||  //
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001074:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 11 ||  //
 8001078:	2b0d      	cmp	r3, #13
 800107a:	d022      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 15 ||  //
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 800107e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 13 ||  //
 8001082:	2b0f      	cmp	r3, #15
 8001084:	d01d      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 17 ||  //
 8001086:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001088:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 15 ||  //
 800108c:	2b11      	cmp	r3, #17
 800108e:	d018      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 19 ||  //
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 8001092:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 17 ||  //
 8001096:	2b13      	cmp	r3, #19
 8001098:	d013      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 21 ||  //
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 800109c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 19 ||  //
 80010a0:	2b15      	cmp	r3, #21
 80010a2:	d00e      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 23 ||  //
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 80010a6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 21 ||  //
 80010aa:	2b17      	cmp	r3, #23
 80010ac:	d009      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 25 ||  //
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 80010b0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 23 ||  //
 80010b4:	2b19      	cmp	r3, #25
 80010b6:	d004      	beq.n	80010c2 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 27) {  // 初始化检查指令，必须设置正确
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 80010ba:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 25 ||  //
 80010be:	2b1b      	cmp	r3, #27
 80010c0:	d115      	bne.n	80010ee <TimerTasks_ServoMotor+0xea>
    ServoMotor.TimerFlag[0]++;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 80010c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80010c6:	3301      	adds	r3, #1
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 80010cc:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ServoMotor.TimerFlag[0] >= 1000) {
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 80010d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80010d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010d6:	d30a      	bcc.n	80010ee <TimerTasks_ServoMotor+0xea>
      ServoMotor.TimerFlag[0]  = 0;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	865a      	strh	r2, [r3, #50]	@ 0x32
      ServoMotor.Flag_Event[1] = ServoMotor.Flag_Event[1] - 1;  // 超时没反应，返回上一次发送
 80010de:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 80010e0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80010e4:	3b01      	subs	r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b02      	ldr	r3, [pc, #8]	@ (80010f4 <TimerTasks_ServoMotor+0xf0>)
 80010ea:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000088 	.word	0x20000088

080010f8 <ResetTimerFlag_ServoMotor>:
void ResetTimerFlag_ServoMotor(uint16_t *TimerFlag) { *TimerFlag = 0; }
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	801a      	strh	r2, [r3, #0]
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <Uart_Send_MovementRegister_ServoMotor>:
void Uart_Send_MovementRegister_ServoMotor(uint8_t mode, uint16_t Data) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af02      	add	r7, sp, #8
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	80bb      	strh	r3, [r7, #4]
  switch (mode) {
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b04      	cmp	r3, #4
 8001124:	d83d      	bhi.n	80011a2 <Uart_Send_MovementRegister_ServoMotor+0x92>
 8001126:	a201      	add	r2, pc, #4	@ (adr r2, 800112c <Uart_Send_MovementRegister_ServoMotor+0x1c>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	08001141 	.word	0x08001141
 8001130:	08001153 	.word	0x08001153
 8001134:	08001167 	.word	0x08001167
 8001138:	0800117b 	.word	0x0800117b
 800113c:	0800118f 	.word	0x0800118f
    case 0: {  // 查询监视器1-5内容
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 10, MonitorRegister_1_Data, 0, Set_null_ServoMotor);
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2300      	movs	r3, #0
 8001146:	2212      	movs	r2, #18
 8001148:	210a      	movs	r1, #10
 800114a:	2003      	movs	r0, #3
 800114c:	f000 fa2e 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001150:	e027      	b.n	80011a2 <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 1: {  // 开启 或 关闭伺服控制
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, DI1_Register_P2_10, Data, Set_null_ServoMotor);
 8001152:	88bb      	ldrh	r3, [r7, #4]
 8001154:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 8001156:	9200      	str	r2, [sp, #0]
 8001158:	f44f 7205 	mov.w	r2, #532	@ 0x214
 800115c:	2100      	movs	r1, #0
 800115e:	2006      	movs	r0, #6
 8001160:	f000 fa24 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001164:	e01d      	b.n	80011a2 <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 2: {  // 写入PT或Sz模式,写入4，设置速度模式，写入0，设置位置模式
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, PT_Szmode_Register_P1_01, Data, Set_null_ServoMotor);
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 800116a:	9200      	str	r2, [sp, #0]
 800116c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001170:	2100      	movs	r1, #0
 8001172:	2006      	movs	r0, #6
 8001174:	f000 fa1a 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001178:	e013      	b.n	80011a2 <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 3: {  // 速度控制
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, JOGmode_Register_P4_05, Data, Set_null_ServoMotor);
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	f240 420a 	movw	r2, #1034	@ 0x40a
 8001184:	2100      	movs	r1, #0
 8001186:	2006      	movs	r0, #6
 8001188:	f000 fa10 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800118c:	e009      	b.n	80011a2 <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 4: {  // DI2设置0x0004-脉冲清除,0x0104	//脉冲恢复计数
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, DI2_PulseClear_Register_P2_11, Data, Set_null_ServoMotor);
 800118e:	88bb      	ldrh	r3, [r7, #4]
 8001190:	4a06      	ldr	r2, [pc, #24]	@ (80011ac <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	f240 2216 	movw	r2, #534	@ 0x216
 8001198:	2100      	movs	r1, #0
 800119a:	2006      	movs	r0, #6
 800119c:	f000 fa06 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011a0:	bf00      	nop
  }
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200000c8 	.word	0x200000c8

080011b0 <UartSend_MonitorRegister_ServoMotor>:
void UartSend_MonitorRegister_ServoMotor(uint8_t mode) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  switch (mode) {
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b0b      	cmp	r3, #11
 80011be:	f200 8095 	bhi.w	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
 80011c2:	a201      	add	r2, pc, #4	@ (adr r2, 80011c8 <UartSend_MonitorRegister_ServoMotor+0x18>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	080011f9 	.word	0x080011f9
 80011cc:	0800120b 	.word	0x0800120b
 80011d0:	0800121d 	.word	0x0800121d
 80011d4:	0800122f 	.word	0x0800122f
 80011d8:	08001241 	.word	0x08001241
 80011dc:	08001253 	.word	0x08001253
 80011e0:	08001265 	.word	0x08001265
 80011e4:	08001279 	.word	0x08001279
 80011e8:	0800129d 	.word	0x0800129d
 80011ec:	080012b1 	.word	0x080012b1
 80011f0:	080012c5 	.word	0x080012c5
 80011f4:	080012d9 	.word	0x080012d9
    case 0: {  // 问询监视器1-5寄存器配置是否正确
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 10, MonitorRegister_1_Set, 0, Set_null_ServoMotor);
 80011f8:	4b3e      	ldr	r3, [pc, #248]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	2222      	movs	r2, #34	@ 0x22
 8001200:	210a      	movs	r1, #10
 8001202:	2003      	movs	r0, #3
 8001204:	f000 f9d2 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001208:	e070      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 1: {  // 写入正确的监视器1寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_1_Set, PulseMonitor_0022H, Set_null_ServoMotor);
 800120a:	4b3a      	ldr	r3, [pc, #232]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	2222      	movs	r2, #34	@ 0x22
 8001212:	2100      	movs	r1, #0
 8001214:	2006      	movs	r0, #6
 8001216:	f000 f9c9 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800121a:	e067      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 2: {  // 写入正确的监视器2寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_2_Set, TorqueMonitor_0024H, Set_null_ServoMotor);
 800121c:	4b35      	ldr	r3, [pc, #212]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	230b      	movs	r3, #11
 8001222:	2224      	movs	r2, #36	@ 0x24
 8001224:	2100      	movs	r1, #0
 8001226:	2006      	movs	r0, #6
 8001228:	f000 f9c0 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800122c:	e05e      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 3: {  // 写入正确的监视器3寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_3_Set, SpeedMonitor_0026H, Set_null_ServoMotor);
 800122e:	4b31      	ldr	r3, [pc, #196]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2307      	movs	r3, #7
 8001234:	2226      	movs	r2, #38	@ 0x26
 8001236:	2100      	movs	r1, #0
 8001238:	2006      	movs	r0, #6
 800123a:	f000 f9b7 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800123e:	e055      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 4: {  // 写入正确的监视器4寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_4_Set, Monitor_0028H, Set_null_ServoMotor);
 8001240:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2303      	movs	r3, #3
 8001246:	2228      	movs	r2, #40	@ 0x28
 8001248:	2100      	movs	r1, #0
 800124a:	2006      	movs	r0, #6
 800124c:	f000 f9ae 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001250:	e04c      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 5: {  // 写入正确的监视器5寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_5_Set, Monitor_002AH, Set_null_ServoMotor);
 8001252:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2300      	movs	r3, #0
 8001258:	222a      	movs	r2, #42	@ 0x2a
 800125a:	2100      	movs	r1, #0
 800125c:	2006      	movs	r0, #6
 800125e:	f000 f9a5 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001262:	e043      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 6: {  // 查询电子齿轮比分子分母的设置
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 4, GearRatioRegister_Numerator, 0, Set_null_ServoMotor);
 8001264:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2300      	movs	r3, #0
 800126a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800126e:	2104      	movs	r1, #4
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f99b 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001276:	e039      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 7: {  // 写入正确的电子齿轮比分子分母的设置，分子160，分母94，对应的皮带94mm一圈，计算得出1000脉冲/mm
      uint8_t uartsendbuf[8] = {0x00, 0xA0, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00};
 8001278:	4a1f      	ldr	r2, [pc, #124]	@ (80012f8 <UartSend_MonitorRegister_ServoMotor+0x148>)
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001282:	e883 0003 	stmia.w	r3, {r0, r1}
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Multi_Func_ServoMotor, 4, GearRatioRegister_Numerator, 0, uartsendbuf);
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8001292:	2104      	movs	r1, #4
 8001294:	2010      	movs	r0, #16
 8001296:	f000 f989 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800129a:	e027      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 8: {  // 读一次脉冲清除模式，需要设置为0x11;
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 1, PulseReset_Register_P2_50, 0, Set_null_ServoMotor);
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2300      	movs	r3, #0
 80012a2:	f44f 7219 	mov.w	r2, #612	@ 0x264
 80012a6:	2101      	movs	r1, #1
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f97f 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80012ae:	e01d      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 9: {  // 设置脉冲清除模式，需要设置为0x11;
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, PulseReset_Register_P2_50, PulseReset_Data_P2_50, Set_null_ServoMotor);
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2311      	movs	r3, #17
 80012b6:	f44f 7219 	mov.w	r2, #612	@ 0x264
 80012ba:	2100      	movs	r1, #0
 80012bc:	2006      	movs	r0, #6
 80012be:	f000 f975 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80012c2:	e013      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 10: {  // 读一次EEPROM的设置，0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 1, AuxrFuncRegister_P2_30, 0, Set_null_ServoMotor);
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2300      	movs	r3, #0
 80012ca:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 80012ce:	2101      	movs	r1, #1
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f96b 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80012d6:	e009      	b.n	80012ec <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 11: {  // 设置EEPROM的为不保存模式，0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, AuxrFuncRegister_P2_30, EEPROM_Disable_P2_30, Set_null_ServoMotor);
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <UartSend_MonitorRegister_ServoMotor+0x144>)
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2305      	movs	r3, #5
 80012de:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 80012e2:	2100      	movs	r1, #0
 80012e4:	2006      	movs	r0, #6
 80012e6:	f000 f961 	bl	80015ac <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80012ea:	bf00      	nop
  }
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200000c8 	.word	0x200000c8
 80012f8:	08008670 	.word	0x08008670

080012fc <Get_LRC_ServoMotor>:

uint16_t Get_LRC_ServoMotor(uint8_t *buf, uint8_t len) {
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
  uint16_t sumbuf = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	81fb      	strh	r3, [r7, #14]
  uint8_t  result = 0, result_h, result_l;
 800130c:	2300      	movs	r3, #0
 800130e:	72bb      	strb	r3, [r7, #10]
  uint16_t LRCbuf = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	81bb      	strh	r3, [r7, #12]
  for (uint8_t i = 0; i < len; i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	72fb      	strb	r3, [r7, #11]
 8001318:	e00a      	b.n	8001330 <Get_LRC_ServoMotor+0x34>
    sumbuf += buf[i];
 800131a:	7afb      	ldrb	r3, [r7, #11]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	89fb      	ldrh	r3, [r7, #14]
 8001326:	4413      	add	r3, r2
 8001328:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++) {
 800132a:	7afb      	ldrb	r3, [r7, #11]
 800132c:	3301      	adds	r3, #1
 800132e:	72fb      	strb	r3, [r7, #11]
 8001330:	7afa      	ldrb	r2, [r7, #11]
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3f0      	bcc.n	800131a <Get_LRC_ServoMotor+0x1e>
  }
  result   = ~(sumbuf & 0xFF) + 1;
 8001338:	89fb      	ldrh	r3, [r7, #14]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	425b      	negs	r3, r3
 800133e:	72bb      	strb	r3, [r7, #10]
  result_h = result / 0x10;
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	727b      	strb	r3, [r7, #9]
  result_l = result % 0x10;
 8001346:	7abb      	ldrb	r3, [r7, #10]
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	723b      	strb	r3, [r7, #8]
  if (0x00 <= result_h && result_h <= 0x09) {
 800134e:	7a7b      	ldrb	r3, [r7, #9]
 8001350:	2b09      	cmp	r3, #9
 8001352:	d80b      	bhi.n	800136c <Get_LRC_ServoMotor+0x70>
    LRCbuf |= (uint16_t)(result_h + '0') << 8;
 8001354:	7a7b      	ldrb	r3, [r7, #9]
 8001356:	b29b      	uxth	r3, r3
 8001358:	3330      	adds	r3, #48	@ 0x30
 800135a:	b29b      	uxth	r3, r3
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	b21b      	sxth	r3, r3
 8001368:	81bb      	strh	r3, [r7, #12]
 800136a:	e010      	b.n	800138e <Get_LRC_ServoMotor+0x92>
  } else if (0x0A <= result_h && result_h <= 0x0F) {
 800136c:	7a7b      	ldrb	r3, [r7, #9]
 800136e:	2b09      	cmp	r3, #9
 8001370:	d90d      	bls.n	800138e <Get_LRC_ServoMotor+0x92>
 8001372:	7a7b      	ldrb	r3, [r7, #9]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <Get_LRC_ServoMotor+0x92>
    LRCbuf |= (uint16_t)(result_h - 0x0A + 'A') << 8;
 8001378:	7a7b      	ldrb	r3, [r7, #9]
 800137a:	b29b      	uxth	r3, r3
 800137c:	3337      	adds	r3, #55	@ 0x37
 800137e:	b29b      	uxth	r3, r3
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b21a      	sxth	r2, r3
 8001384:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	b21b      	sxth	r3, r3
 800138c:	81bb      	strh	r3, [r7, #12]
  }
  if (0x00 <= result_l && result_l <= 0x09) {
 800138e:	7a3b      	ldrb	r3, [r7, #8]
 8001390:	2b09      	cmp	r3, #9
 8001392:	d80a      	bhi.n	80013aa <Get_LRC_ServoMotor+0xae>
    LRCbuf |= result_l + '0';
 8001394:	7a3b      	ldrb	r3, [r7, #8]
 8001396:	b29b      	uxth	r3, r3
 8001398:	3330      	adds	r3, #48	@ 0x30
 800139a:	b29b      	uxth	r3, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	81bb      	strh	r3, [r7, #12]
 80013a8:	e00f      	b.n	80013ca <Get_LRC_ServoMotor+0xce>
  } else if (0x0A <= result_l && result_l <= 0x0F) {
 80013aa:	7a3b      	ldrb	r3, [r7, #8]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	d90c      	bls.n	80013ca <Get_LRC_ServoMotor+0xce>
 80013b0:	7a3b      	ldrb	r3, [r7, #8]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	d809      	bhi.n	80013ca <Get_LRC_ServoMotor+0xce>
    LRCbuf |= result_l - 0x0A + 'A';
 80013b6:	7a3b      	ldrb	r3, [r7, #8]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	3337      	adds	r3, #55	@ 0x37
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b21a      	sxth	r2, r3
 80013c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	81bb      	strh	r3, [r7, #12]
  }
  return LRCbuf;
 80013ca:	89bb      	ldrh	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <UartWrite_HexToAscii_AddLRC_ServoMotor>:
void UartWrite_HexToAscii_AddLRC_ServoMotor(uint8_t *buf, uint8_t len) {
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b0c4      	sub	sp, #272	@ 0x110
 80013da:	af00      	add	r7, sp, #0
 80013dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013e4:	6018      	str	r0, [r3, #0]
 80013e6:	460a      	mov	r2, r1
 80013e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ec:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80013f0:	701a      	strb	r2, [r3, #0]
  uint8_t  Sendbuf[255] = {0};
 80013f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	3304      	adds	r3, #4
 8001400:	22fb      	movs	r2, #251	@ 0xfb
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f006 facc 	bl	80079a2 <memset>
  uint8_t  lenbuf       = 2 * len + 5;
 800140a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800140e:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	3305      	adds	r3, #5
 800141a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  uint16_t LRCbuf       = Get_LRC_ServoMotor(buf, len);
 800141e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001422:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800142c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001430:	4611      	mov	r1, r2
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	f7ff ff62 	bl	80012fc <Get_LRC_ServoMotor>
 8001438:	4603      	mov	r3, r0
 800143a:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
  uint8_t  buf_h, buf_l;
  Sendbuf[0]          = ':';
 800143e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001446:	223a      	movs	r2, #58	@ 0x3a
 8001448:	701a      	strb	r2, [r3, #0]
  Sendbuf[lenbuf - 4] = LRCbuf >> 8;
 800144a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b29a      	uxth	r2, r3
 8001452:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001456:	3b04      	subs	r3, #4
 8001458:	b2d1      	uxtb	r1, r2
 800145a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800145e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001462:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 3] = LRCbuf & 0xFF;
 8001464:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001468:	3b03      	subs	r3, #3
 800146a:	f8b7 210c 	ldrh.w	r2, [r7, #268]	@ 0x10c
 800146e:	b2d1      	uxtb	r1, r2
 8001470:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001474:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001478:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 2] = 0x0D;
 800147a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800147e:	3b02      	subs	r3, #2
 8001480:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001484:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001488:	210d      	movs	r1, #13
 800148a:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 1] = 0x0A;
 800148c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001490:	3b01      	subs	r3, #1
 8001492:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001496:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800149a:	210a      	movs	r1, #10
 800149c:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < len; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80014a4:	e06b      	b.n	800157e <UartWrite_HexToAscii_AddLRC_ServoMotor+0x1a8>
    buf_h = buf[i] / 0x10;
 80014a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014aa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014ae:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    buf_l = buf[i] % 0x10;
 80014be:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014c2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014c6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    if (0x00 <= buf_h && buf_h <= 0x09) {
 80014d8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80014dc:	2b09      	cmp	r3, #9
 80014de:	d80d      	bhi.n	80014fc <UartWrite_HexToAscii_AddLRC_ServoMotor+0x126>
      Sendbuf[2 * i + 1] = buf_h + '0';
 80014e0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	3301      	adds	r3, #1
 80014e8:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 80014ec:	3230      	adds	r2, #48	@ 0x30
 80014ee:	b2d1      	uxtb	r1, r2
 80014f0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014f4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014f8:	54d1      	strb	r1, [r2, r3]
 80014fa:	e014      	b.n	8001526 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x150>
    } else if (0x0A <= buf_h && buf_h <= 0x0F) {
 80014fc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001500:	2b09      	cmp	r3, #9
 8001502:	d910      	bls.n	8001526 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x150>
 8001504:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d80c      	bhi.n	8001526 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x150>
      Sendbuf[2 * i + 1] = buf_h - 0x0A + 'A';
 800150c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	3301      	adds	r3, #1
 8001514:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 8001518:	3237      	adds	r2, #55	@ 0x37
 800151a:	b2d1      	uxtb	r1, r2
 800151c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001520:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001524:	54d1      	strb	r1, [r2, r3]
    }
    if (0x00 <= buf_l && buf_l <= 0x09) {
 8001526:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 800152a:	2b09      	cmp	r3, #9
 800152c:	d80d      	bhi.n	800154a <UartWrite_HexToAscii_AddLRC_ServoMotor+0x174>
      Sendbuf[2 * i + 2] = buf_l + '0';
 800152e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001532:	3301      	adds	r3, #1
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 800153a:	3230      	adds	r2, #48	@ 0x30
 800153c:	b2d1      	uxtb	r1, r2
 800153e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001542:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001546:	54d1      	strb	r1, [r2, r3]
 8001548:	e014      	b.n	8001574 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19e>
    } else if (0x0A <= buf_l && buf_l <= 0x0F) {
 800154a:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 800154e:	2b09      	cmp	r3, #9
 8001550:	d910      	bls.n	8001574 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19e>
 8001552:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 8001556:	2b0f      	cmp	r3, #15
 8001558:	d80c      	bhi.n	8001574 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19e>
      Sendbuf[2 * i + 2] = buf_l - 0x0A + 'A';
 800155a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800155e:	3301      	adds	r3, #1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 8001566:	3237      	adds	r2, #55	@ 0x37
 8001568:	b2d1      	uxtb	r1, r2
 800156a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800156e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001572:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < len; i++) {
 8001574:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001578:	3301      	adds	r3, #1
 800157a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800157e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001582:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8001586:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d38a      	bcc.n	80014a6 <UartWrite_HexToAscii_AddLRC_ServoMotor+0xd0>
    }
  }
  // UartWrite_WirelessModule(Sendbuf, lenbuf);

  UartWrite_ServoMotor(Sendbuf, lenbuf);
 8001590:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001594:	b29a      	uxth	r2, r3
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fa5f 	bl	8001a60 <UartWrite_ServoMotor>
}
 80015a2:	bf00      	nop
 80015a4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <Uart_ReadWriteRegister_ServoMotor>:

void Uart_ReadWriteRegister_ServoMotor(uint8_t Read_WriteFunc, uint8_t WordsNum, uint16_t Register, uint16_t Write_Once_ByteData, uint8_t *Write_Multi_Bytes) {
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b0c4      	sub	sp, #272	@ 0x110
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4605      	mov	r5, r0
 80015b4:	460c      	mov	r4, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015be:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80015c2:	462a      	mov	r2, r5
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ca:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80015ce:	4622      	mov	r2, r4
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015da:	4602      	mov	r2, r0
 80015dc:	801a      	strh	r2, [r3, #0]
 80015de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e2:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 80015e6:	460a      	mov	r2, r1
 80015e8:	801a      	strh	r2, [r3, #0]
  uint8_t UartSendbuf[255] = {0};
 80015ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	3304      	adds	r3, #4
 80015f8:	22fb      	movs	r2, #251	@ 0xfb
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 f9d0 	bl	80079a2 <memset>
  uint8_t lenbuf           = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  UartSendbuf[0]           = ServoMotor.address;
 8001608:	4b6a      	ldr	r3, [pc, #424]	@ (80017b4 <Uart_ReadWriteRegister_ServoMotor+0x208>)
 800160a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800160e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001616:	701a      	strb	r2, [r3, #0]
  UartSendbuf[1]           = Read_WriteFunc;
 8001618:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800161c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001620:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001624:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	705a      	strb	r2, [r3, #1]
  UartSendbuf[2]           = Register >> 8;
 800162c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001630:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	0a1b      	lsrs	r3, r3, #8
 8001638:	b29b      	uxth	r3, r3
 800163a:	b2da      	uxtb	r2, r3
 800163c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001640:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001644:	709a      	strb	r2, [r3, #2]
  UartSendbuf[3]           = Register & 0xFF;
 8001646:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800164a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800165a:	70da      	strb	r2, [r3, #3]
  switch (Read_WriteFunc) {
 800165c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001660:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d037      	beq.n	80016da <Uart_ReadWriteRegister_ServoMotor+0x12e>
 800166a:	2b10      	cmp	r3, #16
 800166c:	f300 809d 	bgt.w	80017aa <Uart_ReadWriteRegister_ServoMotor+0x1fe>
 8001670:	2b03      	cmp	r3, #3
 8001672:	d002      	beq.n	800167a <Uart_ReadWriteRegister_ServoMotor+0xce>
 8001674:	2b06      	cmp	r3, #6
 8001676:	d014      	beq.n	80016a2 <Uart_ReadWriteRegister_ServoMotor+0xf6>
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
        UartSendbuf[7 + i] = Write_Multi_Bytes[i];
      }
    } break;
    default:
      return;
 8001678:	e097      	b.n	80017aa <Uart_ReadWriteRegister_ServoMotor+0x1fe>
      lenbuf         = 6;
 800167a:	2306      	movs	r3, #6
 800167c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = 0x00;
 8001680:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001688:	2200      	movs	r2, #0
 800168a:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = WordsNum;
 800168c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001694:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001698:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	715a      	strb	r2, [r3, #5]
    } break;
 80016a0:	e063      	b.n	800176a <Uart_ReadWriteRegister_ServoMotor+0x1be>
      lenbuf         = 6;
 80016a2:	2306      	movs	r3, #6
 80016a4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = Write_Once_ByteData >> 8;
 80016a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016ac:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016c0:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = Write_Once_ByteData & 0xFF;
 80016c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c6:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016d6:	715a      	strb	r2, [r3, #5]
    } break;
 80016d8:	e047      	b.n	800176a <Uart_ReadWriteRegister_ServoMotor+0x1be>
      lenbuf         = 7 + 2 * WordsNum;
 80016da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016de:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	3307      	adds	r3, #7
 80016ea:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = 0x00;
 80016ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016f6:	2200      	movs	r2, #0
 80016f8:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = WordsNum;
 80016fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001702:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001706:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	715a      	strb	r2, [r3, #5]
      UartSendbuf[6] = 2 * WordsNum;
 800170e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001712:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001724:	719a      	strb	r2, [r3, #6]
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
 8001726:	2300      	movs	r3, #0
 8001728:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800172c:	e012      	b.n	8001754 <Uart_ReadWriteRegister_ServoMotor+0x1a8>
        UartSendbuf[7 + i] = Write_Multi_Bytes[i];
 800172e:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001732:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8001736:	441a      	add	r2, r3
 8001738:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800173c:	3307      	adds	r3, #7
 800173e:	7811      	ldrb	r1, [r2, #0]
 8001740:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001744:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001748:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
 800174a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800174e:	3301      	adds	r3, #1
 8001750:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8001754:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8001758:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800175c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	429a      	cmp	r2, r3
 8001766:	dbe2      	blt.n	800172e <Uart_ReadWriteRegister_ServoMotor+0x182>
    } break;
 8001768:	bf00      	nop
  }
  ServoMotor.UartCurrentCmd[0] = Read_WriteFunc;
 800176a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800176e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <Uart_ReadWriteRegister_ServoMotor+0x208>)
 8001778:	859a      	strh	r2, [r3, #44]	@ 0x2c
  ServoMotor.UartCurrentCmd[1] = Register;
 800177a:	4a0e      	ldr	r2, [pc, #56]	@ (80017b4 <Uart_ReadWriteRegister_ServoMotor+0x208>)
 800177c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001780:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	85d3      	strh	r3, [r2, #46]	@ 0x2e
  ServoMotor.UartCurrentCmd[2] = WordsNum;
 8001788:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800178c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <Uart_ReadWriteRegister_ServoMotor+0x208>)
 8001796:	861a      	strh	r2, [r3, #48]	@ 0x30
  UartWrite_HexToAscii_AddLRC_ServoMotor(UartSendbuf, lenbuf);
 8001798:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe17 	bl	80013d6 <UartWrite_HexToAscii_AddLRC_ServoMotor>
 80017a8:	e000      	b.n	80017ac <Uart_ReadWriteRegister_ServoMotor+0x200>
      return;
 80017aa:	bf00      	nop
}
 80017ac:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bdb0      	pop	{r4, r5, r7, pc}
 80017b4:	20000088 	.word	0x20000088

080017b8 <SetStatus_Power_ServoMotor>:

void SetStatus_Power_ServoMotor(uint8_t status) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(Power_ServoMotor_GPIO_Port, Power_ServoMotor_Pin, status);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	461a      	mov	r2, r3
 80017c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <SetStatus_Power_ServoMotor+0x28>)
 80017cc:	f002 fc2d 	bl	800402a <HAL_GPIO_WritePin>
  ServoMotor.IsPowerOn = Power_ServoMotor_Pin == PowerON_ServoMotor ? 1 : 0;
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <SetStatus_Power_ServoMotor+0x2c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40010800 	.word	0x40010800
 80017e4:	20000088 	.word	0x20000088

080017e8 <UartReceiveIT_ServoMotor>:
uint8_t GetStatus_Power_ServoMotor(void) { return ServoMotor.IsPowerOn; }

void UartReceiveIT_ServoMotor(void) {                                       // 读写器串口接收
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart_ServoMotor, (uint8_t *)Rxdbuf_ServoMotor, 1);  // 重新启动接收中断
 80017ec:	2201      	movs	r2, #1
 80017ee:	4903      	ldr	r1, [pc, #12]	@ (80017fc <UartReceiveIT_ServoMotor+0x14>)
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <UartReceiveIT_ServoMotor+0x18>)
 80017f2:	f004 fd9e 	bl	8006332 <HAL_UART_Receive_IT>
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200000cc 	.word	0x200000cc
 8001800:	20000418 	.word	0x20000418

08001804 <UartGetData_ServoMotor>:
void UartGetData_ServoMotor(void) {  // 处理接收到的数据到新的数组，并重新接收
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  if (ServoMotor.Flag_Event[2] >= 6) {
 8001808:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <UartGetData_ServoMotor+0x30>)
 800180a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800180e:	2b05      	cmp	r3, #5
 8001810:	d90a      	bls.n	8001828 <UartGetData_ServoMotor+0x24>
    MotorUart.type = kMoterUart;
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <UartGetData_ServoMotor+0x34>)
 8001814:	2202      	movs	r2, #2
 8001816:	701a      	strb	r2, [r3, #0]
    LOGI("EVENT MOTOR");
 8001818:	f001 fa9c 	bl	8002d54 <HAL_GetTick>
 800181c:	4603      	mov	r3, r0
 800181e:	4a07      	ldr	r2, [pc, #28]	@ (800183c <UartGetData_ServoMotor+0x38>)
 8001820:	4619      	mov	r1, r3
 8001822:	4807      	ldr	r0, [pc, #28]	@ (8001840 <UartGetData_ServoMotor+0x3c>)
 8001824:	f006 f868 	bl	80078f8 <iprintf>
  }
  UartRegroup_ASCII_ServoMotor();
 8001828:	f000 f8c0 	bl	80019ac <UartRegroup_ASCII_ServoMotor>

  UartReceiveIT_ServoMotor();
 800182c:	f7ff ffdc 	bl	80017e8 <UartReceiveIT_ServoMotor>
  //	UartRxd_ServoMotor[CntRxd_ServoMotor] = Rxdbuf_ServoMotor[0];
  //	CntRxd_ServoMotor++;
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000088 	.word	0x20000088
 8001838:	200001d4 	.word	0x200001d4
 800183c:	080088cc 	.word	0x080088cc
 8001840:	08008678 	.word	0x08008678

08001844 <Get_Regroup_ASCII>:

uint8_t Get_Regroup_ASCII(uint8_t data, uint8_t H_L) {
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
  uint8_t databuf;
  if ('0' <= data && data <= '9') {
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2b2f      	cmp	r3, #47	@ 0x2f
 8001858:	d906      	bls.n	8001868 <Get_Regroup_ASCII+0x24>
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b39      	cmp	r3, #57	@ 0x39
 800185e:	d803      	bhi.n	8001868 <Get_Regroup_ASCII+0x24>
    databuf = data - '0';
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	3b30      	subs	r3, #48	@ 0x30
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e008      	b.n	800187a <Get_Regroup_ASCII+0x36>
  } else if ('A' <= data && data <= 'F') {
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b40      	cmp	r3, #64	@ 0x40
 800186c:	d905      	bls.n	800187a <Get_Regroup_ASCII+0x36>
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b46      	cmp	r3, #70	@ 0x46
 8001872:	d802      	bhi.n	800187a <Get_Regroup_ASCII+0x36>
    databuf = data - 'A' + 0x0A;
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	3b37      	subs	r3, #55	@ 0x37
 8001878:	73fb      	strb	r3, [r7, #15]
  }
  if (H_L == 0) {
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d103      	bne.n	8001888 <Get_Regroup_ASCII+0x44>
    return databuf << 4;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	b2db      	uxtb	r3, r3
 8001886:	e005      	b.n	8001894 <Get_Regroup_ASCII+0x50>
  } else if (H_L == 1) {
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <Get_Regroup_ASCII+0x4e>
    return databuf;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	e000      	b.n	8001894 <Get_Regroup_ASCII+0x50>
  }
  return 0;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
	...

080018a0 <moteruart_receive>:

void moteruart_receive(void) {
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 80018a6:	af00      	add	r7, sp, #0
  uint8_t len    = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
  uint8_t lenbuf = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
  uint8_t buf[255];
  uint8_t uartbuf[255];
  LOGI("SUCESS UART MOTOR");
 80018b4:	f001 fa4e 	bl	8002d54 <HAL_GetTick>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a38      	ldr	r2, [pc, #224]	@ (800199c <moteruart_receive+0xfc>)
 80018bc:	4619      	mov	r1, r3
 80018be:	4838      	ldr	r0, [pc, #224]	@ (80019a0 <moteruart_receive+0x100>)
 80018c0:	f006 f81a 	bl	80078f8 <iprintf>

  len    = UartRead_ServoMotor(buf, sizeof(buf));
 80018c4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80018c8:	21ff      	movs	r1, #255	@ 0xff
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f8dc 	bl	8001a88 <UartRead_ServoMotor>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
  lenbuf = len / 2;
 80018d6:	f897 3206 	ldrb.w	r3, [r7, #518]	@ 0x206
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
  for (uint8_t i = 0; i < lenbuf; i++) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
 80018e6:	e02a      	b.n	800193e <moteruart_receive+0x9e>
    uartbuf[i] = Get_Regroup_ASCII(buf[2 * i], 0) | Get_Regroup_ASCII(buf[2 * i + 1], 1);
 80018e8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018f2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80018f6:	5cd3      	ldrb	r3, [r2, r3]
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ffa2 	bl	8001844 <Get_Regroup_ASCII>
 8001900:	4603      	mov	r3, r0
 8001902:	461c      	mov	r4, r3
 8001904:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	3301      	adds	r3, #1
 800190c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001910:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	2101      	movs	r1, #1
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff93 	bl	8001844 <Get_Regroup_ASCII>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001926:	4322      	orrs	r2, r4
 8001928:	b2d1      	uxtb	r1, r2
 800192a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800192e:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8001932:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < lenbuf; i++) {
 8001934:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001938:	3301      	adds	r3, #1
 800193a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
 800193e:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 8001942:	f897 3205 	ldrb.w	r3, [r7, #517]	@ 0x205
 8001946:	429a      	cmp	r2, r3
 8001948:	d3ce      	bcc.n	80018e8 <moteruart_receive+0x48>
  }

  if (uartbuf[0] != ServoMotor.address && uartbuf[1] != (uint8_t)(ServoMotor.UartCurrentCmd[0] & 0xFF)) {
 800194a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <moteruart_receive+0x104>)
 8001956:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800195a:	429a      	cmp	r2, r3
 800195c:	d009      	beq.n	8001972 <moteruart_receive+0xd2>
 800195e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001962:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001966:	785a      	ldrb	r2, [r3, #1]
 8001968:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <moteruart_receive+0x104>)
 800196a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800196c:	b2db      	uxtb	r3, r3
 800196e:	429a      	cmp	r2, r3
 8001970:	d10e      	bne.n	8001990 <moteruart_receive+0xf0>
    return;
  }
  motor_ack[0] = uartbuf[4];
 8001972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001976:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800197a:	791a      	ldrb	r2, [r3, #4]
 800197c:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <moteruart_receive+0x108>)
 800197e:	701a      	strb	r2, [r3, #0]
  motor_ack[1] = uartbuf[5];
 8001980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001984:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001988:	795a      	ldrb	r2, [r3, #5]
 800198a:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <moteruart_receive+0x108>)
 800198c:	705a      	strb	r2, [r3, #1]
 800198e:	e000      	b.n	8001992 <moteruart_receive+0xf2>
    return;
 8001990:	bf00      	nop

  //   if ((uartbuf[4] == 0x00 && uartbuf[5] == 0x01)) {
  //   }
}
 8001992:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	080088e4 	.word	0x080088e4
 80019a0:	080086a0 	.word	0x080086a0
 80019a4:	20000088 	.word	0x20000088
 80019a8:	200001dc 	.word	0x200001dc

080019ac <UartRegroup_ASCII_ServoMotor>:

void UartRegroup_ASCII_ServoMotor(void) {
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  if (Flag_UartRegroup_ASCII_ServoMotor == 2) {
 80019b0:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <UartRegroup_ASCII_ServoMotor+0xa0>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d108      	bne.n	80019ca <UartRegroup_ASCII_ServoMotor+0x1e>
    Flag_UartRegroup_ASCII_ServoMotor = Rxdbuf_ServoMotor[0] == 0x0D ? 3 : 1;
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <UartRegroup_ASCII_ServoMotor+0xa4>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b0d      	cmp	r3, #13
 80019be:	d101      	bne.n	80019c4 <UartRegroup_ASCII_ServoMotor+0x18>
 80019c0:	2203      	movs	r2, #3
 80019c2:	e000      	b.n	80019c6 <UartRegroup_ASCII_ServoMotor+0x1a>
 80019c4:	2201      	movs	r2, #1
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <UartRegroup_ASCII_ServoMotor+0xa0>)
 80019c8:	701a      	strb	r2, [r3, #0]
  }
  switch (Flag_UartRegroup_ASCII_ServoMotor) {
 80019ca:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <UartRegroup_ASCII_ServoMotor+0xa0>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d838      	bhi.n	8001a44 <UartRegroup_ASCII_ServoMotor+0x98>
 80019d2:	a201      	add	r2, pc, #4	@ (adr r2, 80019d8 <UartRegroup_ASCII_ServoMotor+0x2c>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	080019ed 	.word	0x080019ed
 80019dc:	080019fd 	.word	0x080019fd
 80019e0:	08001a1b 	.word	0x08001a1b
 80019e4:	08001a33 	.word	0x08001a33
 80019e8:	08001a3b 	.word	0x08001a3b
    case 0: {  // 帧头必须是':'(0x3A)
      if (Rxdbuf_ServoMotor[0] == ':') Flag_UartRegroup_ASCII_ServoMotor = 1;
 80019ec:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <UartRegroup_ASCII_ServoMotor+0xa4>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b3a      	cmp	r3, #58	@ 0x3a
 80019f2:	d126      	bne.n	8001a42 <UartRegroup_ASCII_ServoMotor+0x96>
 80019f4:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <UartRegroup_ASCII_ServoMotor+0xa0>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
    } break;
 80019fa:	e022      	b.n	8001a42 <UartRegroup_ASCII_ServoMotor+0x96>
    case 1: {  // 高字节
      UartRxd_ServoMotor[CntRxd_ServoMotor++] = Rxdbuf_ServoMotor[0];
 80019fc:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <UartRegroup_ASCII_ServoMotor+0xa8>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	b2d1      	uxtb	r1, r2
 8001a04:	4a13      	ldr	r2, [pc, #76]	@ (8001a54 <UartRegroup_ASCII_ServoMotor+0xa8>)
 8001a06:	7011      	strb	r1, [r2, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <UartRegroup_ASCII_ServoMotor+0xa4>)
 8001a0c:	7819      	ldrb	r1, [r3, #0]
 8001a0e:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <UartRegroup_ASCII_ServoMotor+0xac>)
 8001a10:	5499      	strb	r1, [r3, r2]
      Flag_UartRegroup_ASCII_ServoMotor       = 2;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <UartRegroup_ASCII_ServoMotor+0xa0>)
 8001a14:	2202      	movs	r2, #2
 8001a16:	701a      	strb	r2, [r3, #0]
    } break;
 8001a18:	e014      	b.n	8001a44 <UartRegroup_ASCII_ServoMotor+0x98>
    case 2: {  // 低字节
      UartRxd_ServoMotor[CntRxd_ServoMotor++] = Rxdbuf_ServoMotor[0];
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <UartRegroup_ASCII_ServoMotor+0xa8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	b2d1      	uxtb	r1, r2
 8001a22:	4a0c      	ldr	r2, [pc, #48]	@ (8001a54 <UartRegroup_ASCII_ServoMotor+0xa8>)
 8001a24:	7011      	strb	r1, [r2, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <UartRegroup_ASCII_ServoMotor+0xa4>)
 8001a2a:	7819      	ldrb	r1, [r3, #0]
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <UartRegroup_ASCII_ServoMotor+0xac>)
 8001a2e:	5499      	strb	r1, [r3, r2]
    } break;
 8001a30:	e008      	b.n	8001a44 <UartRegroup_ASCII_ServoMotor+0x98>
    case 3: {  // 0x0D
      Flag_UartRegroup_ASCII_ServoMotor = 4;
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <UartRegroup_ASCII_ServoMotor+0xa0>)
 8001a34:	2204      	movs	r2, #4
 8001a36:	701a      	strb	r2, [r3, #0]
    } break;
 8001a38:	e004      	b.n	8001a44 <UartRegroup_ASCII_ServoMotor+0x98>
    case 4: {  // 0x0A
      Flag_UartRxdMonitor_ServoMotor = 1;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <UartRegroup_ASCII_ServoMotor+0xb0>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
    } break;
 8001a40:	e000      	b.n	8001a44 <UartRegroup_ASCII_ServoMotor+0x98>
    } break;
 8001a42:	bf00      	nop
  }
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	200001d0 	.word	0x200001d0
 8001a50:	200000cc 	.word	0x200000cc
 8001a54:	200000cd 	.word	0x200000cd
 8001a58:	200000d0 	.word	0x200000d0
 8001a5c:	200001cf 	.word	0x200001cf

08001a60 <UartWrite_ServoMotor>:

void UartWrite_ServoMotor(uint8_t *pData, uint16_t Size) {  // 发送给读写器
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart_ServoMotor, pData, Size, 1000);
 8001a6c:	887a      	ldrh	r2, [r7, #2]
 8001a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <UartWrite_ServoMotor+0x24>)
 8001a76:	f004 fbd9 	bl	800622c <HAL_UART_Transmit>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000418 	.word	0x20000418

08001a88 <UartRead_ServoMotor>:
uint8_t UartRead_ServoMotor(uint8_t *buf, uint8_t len) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  if (len > CntRxd_ServoMotor) {
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <UartRead_ServoMotor+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d902      	bls.n	8001aa4 <UartRead_ServoMotor+0x1c>
    len = CntRxd_ServoMotor;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <UartRead_ServoMotor+0x58>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	70fb      	strb	r3, [r7, #3]
  }
  for (i = 0; i < len; i++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e009      	b.n	8001abe <UartRead_ServoMotor+0x36>
    buf[i] = UartRxd_ServoMotor[i];
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	440b      	add	r3, r1
 8001ab2:	490c      	ldr	r1, [pc, #48]	@ (8001ae4 <UartRead_ServoMotor+0x5c>)
 8001ab4:	5c8a      	ldrb	r2, [r1, r2]
 8001ab6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	3301      	adds	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d3f1      	bcc.n	8001aaa <UartRead_ServoMotor+0x22>
  }
  CntRxd_ServoMotor                 = 0;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <UartRead_ServoMotor+0x58>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
  Flag_UartRegroup_ASCII_ServoMotor = 0;
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <UartRead_ServoMotor+0x60>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
  return len;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	200000cd 	.word	0x200000cd
 8001ae4:	200000d0 	.word	0x200000d0
 8001ae8:	200001d0 	.word	0x200001d0

08001aec <UartRxdMonitor_ServoMotor>:
void UartRxdMonitor_ServoMotor(uint8_t time_ms) {
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  static uint8_t cnt_bkp    = 0;
  static uint8_t idle_timer = 0;
  if (CntRxd_ServoMotor > 0) {
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <UartRxdMonitor_ServoMotor+0x70>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d026      	beq.n	8001b4c <UartRxdMonitor_ServoMotor+0x60>
    if (cnt_bkp != CntRxd_ServoMotor) {
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <UartRxdMonitor_ServoMotor+0x74>)
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <UartRxdMonitor_ServoMotor+0x70>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d007      	beq.n	8001b1a <UartRxdMonitor_ServoMotor+0x2e>
      cnt_bkp    = CntRxd_ServoMotor;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <UartRxdMonitor_ServoMotor+0x70>)
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <UartRxdMonitor_ServoMotor+0x74>)
 8001b10:	701a      	strb	r2, [r3, #0]
      idle_timer = 0;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <UartRxdMonitor_ServoMotor+0x78>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
      }
    }
  } else {
    cnt_bkp = 0;
  }
}
 8001b18:	e01b      	b.n	8001b52 <UartRxdMonitor_ServoMotor+0x66>
      if (idle_timer < 10) {
 8001b1a:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <UartRxdMonitor_ServoMotor+0x78>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b09      	cmp	r3, #9
 8001b20:	d817      	bhi.n	8001b52 <UartRxdMonitor_ServoMotor+0x66>
        idle_timer += time_ms;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <UartRxdMonitor_ServoMotor+0x78>)
 8001b24:	781a      	ldrb	r2, [r3, #0]
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4413      	add	r3, r2
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <UartRxdMonitor_ServoMotor+0x78>)
 8001b2e:	701a      	strb	r2, [r3, #0]
        if (idle_timer >= 10) {
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <UartRxdMonitor_ServoMotor+0x78>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b09      	cmp	r3, #9
 8001b36:	d90c      	bls.n	8001b52 <UartRxdMonitor_ServoMotor+0x66>
          CntRxd_ServoMotor                 = 0;
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <UartRxdMonitor_ServoMotor+0x70>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
          Flag_UartRegroup_ASCII_ServoMotor = 0;
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <UartRxdMonitor_ServoMotor+0x7c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
          Flag_UartRxdMonitor_ServoMotor    = 1;
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <UartRxdMonitor_ServoMotor+0x80>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
}
 8001b4a:	e002      	b.n	8001b52 <UartRxdMonitor_ServoMotor+0x66>
    cnt_bkp = 0;
 8001b4c:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <UartRxdMonitor_ServoMotor+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	200000cd 	.word	0x200000cd
 8001b60:	200001de 	.word	0x200001de
 8001b64:	200001df 	.word	0x200001df
 8001b68:	200001d0 	.word	0x200001d0
 8001b6c:	200001cf 	.word	0x200001cf

08001b70 <UartDriver_ServoMotor>:
void UartDriver_ServoMotor(void) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0c0      	sub	sp, #256	@ 0x100
 8001b74:	af00      	add	r7, sp, #0
  uint8_t len;
  uint8_t buf[255] = {0};
 8001b76:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001b7a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	3304      	adds	r3, #4
 8001b84:	22fb      	movs	r2, #251	@ 0xfb
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f005 ff0a 	bl	80079a2 <memset>
  if (Flag_UartRxdMonitor_ServoMotor) {
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <UartDriver_ServoMotor+0x54>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d011      	beq.n	8001bba <UartDriver_ServoMotor+0x4a>
    Flag_UartRxdMonitor_ServoMotor = 0;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <UartDriver_ServoMotor+0x54>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
    len                            = UartRead_ServoMotor(buf, sizeof(buf));
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	21ff      	movs	r1, #255	@ 0xff
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff71 	bl	8001a88 <UartRead_ServoMotor>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
    UartAction_ServoMotor(buf, len);
 8001bac:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fc85 	bl	80004c4 <UartAction_ServoMotor>
  }
}
 8001bba:	bf00      	nop
 8001bbc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200001cf 	.word	0x200001cf

08001bc8 <HAL_UART_RxCpltCallback>:
 */

#include "SystemTasks.h"
#include "module_driver/driver_wireless.h"
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	// }
	// if (huart->Instance == UartX_WirelessModule)
	// {
	// 	UartGetData_WirelessModule(); // 处理接收到的数据
	// }
	if (huart->Instance == UartX_ServoMotor)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_UART_RxCpltCallback+0x20>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_UART_RxCpltCallback+0x16>
	{
		UartGetData_ServoMotor(); // 处理接收到的数据
 8001bda:	f7ff fe13 	bl	8001804 <UartGetData_ServoMotor>
	}
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40004400 	.word	0x40004400

08001bec <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
	if (huart == GetWireLessHandle())
 8001bf8:	f005 fcc6 	bl	8007588 <GetWireLessHandle>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_UARTEx_RxEventCallback+0x1c>
	{
		receive_rx_data();
 8001c04:	f005 fd0c 	bl	8007620 <receive_rx_data>
	}
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) // 1ms
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		// TimerTasks_WirelessModule();
		// TimerTasks_Reader15693();
		TimerTasks_ServoMotor();
 8001c22:	f7ff f9ef 	bl	8001004 <TimerTasks_ServoMotor>
	}
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40012c00 	.word	0x40012c00

08001c34 <UartWrite_WirelessModule>:
	UartRxd_WirelessModule[CntRxd_WirelessModule] = Rxdbuf_WirelessModule[0];
	CntRxd_WirelessModule++;
	UartReceiveIT_WirelessModule();
}
void UartWrite_WirelessModule(uint8_t *pData, uint16_t Size)
{//发送给读写器
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart_WirelessModule,pData,Size,1000);
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4803      	ldr	r0, [pc, #12]	@ (8001c58 <UartWrite_WirelessModule+0x24>)
 8001c4a:	f004 faef 	bl	800622c <HAL_UART_Transmit>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000340 	.word	0x20000340

08001c5c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <MX_ADC1_Init+0x74>)
 8001c6e:	4a19      	ldr	r2, [pc, #100]	@ (8001cd4 <MX_ADC1_Init+0x78>)
 8001c70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <MX_ADC1_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c78:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <MX_ADC1_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c7e:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <MX_ADC1_Init+0x74>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c84:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <MX_ADC1_Init+0x74>)
 8001c86:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001c8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <MX_ADC1_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c92:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <MX_ADC1_Init+0x74>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c98:	480d      	ldr	r0, [pc, #52]	@ (8001cd0 <MX_ADC1_Init+0x74>)
 8001c9a:	f001 f865 	bl	8002d68 <HAL_ADC_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ca4:	f000 fa19 	bl	80020da <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ca8:	2305      	movs	r3, #5
 8001caa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <MX_ADC1_Init+0x74>)
 8001cba:	f001 f93f 	bl	8002f3c <HAL_ADC_ConfigChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001cc4:	f000 fa09 	bl	80020da <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200001e0 	.word	0x200001e0
 8001cd4:	40012400 	.word	0x40012400

08001cd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a14      	ldr	r2, [pc, #80]	@ (8001d44 <HAL_ADC_MspInit+0x6c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d121      	bne.n	8001d3c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_ADC_MspInit+0x70>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_ContactPoint_Pin|ADC_BAT_Pin|ADC_CurrentDetection_Pin;
 8001d28:	23b0      	movs	r3, #176	@ 0xb0
 8001d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4619      	mov	r1, r3
 8001d36:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <HAL_ADC_MspInit+0x74>)
 8001d38:	f001 ffcc 	bl	8003cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40012400 	.word	0x40012400
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010800 	.word	0x40010800

08001d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d56:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <MX_DMA_Init+0x38>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d88 <MX_DMA_Init+0x38>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6153      	str	r3, [r2, #20]
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <MX_DMA_Init+0x38>)
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	200f      	movs	r0, #15
 8001d74:	f001 faf3 	bl	800335e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d78:	200f      	movs	r0, #15
 8001d7a:	f001 fb0c 	bl	8003396 <HAL_NVIC_EnableIRQ>

}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000

08001d8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da0:	4b44      	ldr	r3, [pc, #272]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a43      	ldr	r2, [pc, #268]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001da6:	f043 0310 	orr.w	r3, r3, #16
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b41      	ldr	r3, [pc, #260]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db8:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001dbe:	f043 0320 	orr.w	r3, r3, #32
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b38      	ldr	r3, [pc, #224]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a37      	ldr	r2, [pc, #220]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b35      	ldr	r3, [pc, #212]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	4b32      	ldr	r3, [pc, #200]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a31      	ldr	r2, [pc, #196]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb4 <MX_GPIO_Init+0x128>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Power_EStopLED_Pin|Power_Host_Pin, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8001e06:	482c      	ldr	r0, [pc, #176]	@ (8001eb8 <MX_GPIO_Init+0x12c>)
 8001e08:	f002 f90f 	bl	800402a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power_Sensor_GPIO_Port, Power_Sensor_Pin, GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4829      	ldr	r0, [pc, #164]	@ (8001eb8 <MX_GPIO_Init+0x12c>)
 8001e12:	f002 f90a 	bl	800402a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_DetectionSwitch_Pin|Power_BLDCMotor_Pin|Power_WirelessModule_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 6114 	mov.w	r1, #2368	@ 0x940
 8001e1c:	4827      	ldr	r0, [pc, #156]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e1e:	f002 f904 	bl	800402a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Power_Reader15693_Pin|Power_Lidar2_Pin, GPIO_PIN_SET);
 8001e22:	2201      	movs	r2, #1
 8001e24:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001e28:	4824      	ldr	r0, [pc, #144]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e2a:	f002 f8fe 	bl	800402a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Power_Lidar1_Pin|Direction_Ctl_BLDCMotor_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2118      	movs	r1, #24
 8001e32:	4823      	ldr	r0, [pc, #140]	@ (8001ec0 <MX_GPIO_Init+0x134>)
 8001e34:	f002 f8f9 	bl	800402a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Power_EStopLED_Pin|Power_Sensor_Pin|Power_Host_Pin;
 8001e38:	f242 2301 	movw	r3, #8705	@ 0x2201
 8001e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 0310 	add.w	r3, r7, #16
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4819      	ldr	r0, [pc, #100]	@ (8001eb8 <MX_GPIO_Init+0x12c>)
 8001e52:	f001 ff3f 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Input_Sensor3_Pin|Input_Sensor1_Pin|Input_Sensor2_Pin|Input_EmergencyStopButton_Pin;
 8001e56:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4813      	ldr	r0, [pc, #76]	@ (8001eb8 <MX_GPIO_Init+0x12c>)
 8001e6c:	f001 ff32 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ADC_DetectionSwitch_Pin|Power_BLDCMotor_Pin|Power_WirelessModule_Pin|Power_Reader15693_Pin
 8001e70:	f649 1340 	movw	r3, #39232	@ 0x9940
 8001e74:	613b      	str	r3, [r7, #16]
                          |Power_Lidar2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	4619      	mov	r1, r3
 8001e88:	480c      	ldr	r0, [pc, #48]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e8a:	f001 ff23 	bl	8003cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Power_Lidar1_Pin|Direction_Ctl_BLDCMotor_Pin;
 8001e8e:	2318      	movs	r3, #24
 8001e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4806      	ldr	r0, [pc, #24]	@ (8001ec0 <MX_GPIO_Init+0x134>)
 8001ea6:	f001 ff15 	bl	8003cd4 <HAL_GPIO_Init>

}
 8001eaa:	bf00      	nop
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40011000 	.word	0x40011000
 8001ebc:	40010800 	.word	0x40010800
 8001ec0:	40010c00 	.word	0x40010c00

08001ec4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <MX_I2C1_Init+0x50>)
 8001eca:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <MX_I2C1_Init+0x54>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <MX_I2C1_Init+0x50>)
 8001ed0:	4a12      	ldr	r2, [pc, #72]	@ (8001f1c <MX_I2C1_Init+0x58>)
 8001ed2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <MX_I2C1_Init+0x50>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <MX_I2C1_Init+0x50>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <MX_I2C1_Init+0x50>)
 8001ee2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ee6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <MX_I2C1_Init+0x50>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <MX_I2C1_Init+0x50>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <MX_I2C1_Init+0x50>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <MX_I2C1_Init+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f00:	4804      	ldr	r0, [pc, #16]	@ (8001f14 <MX_I2C1_Init+0x50>)
 8001f02:	f002 f8ab 	bl	800405c <HAL_I2C_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f0c:	f000 f8e5 	bl	80020da <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000210 	.word	0x20000210
 8001f18:	40005400 	.word	0x40005400
 8001f1c:	000186a0 	.word	0x000186a0

08001f20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	@ 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb0 <HAL_I2C_MspInit+0x90>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d132      	bne.n	8001fa6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f40:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <HAL_I2C_MspInit+0x94>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb4 <HAL_I2C_MspInit+0x94>)
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <HAL_I2C_MspInit+0x94>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 8001f58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f5e:	2312      	movs	r3, #18
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4812      	ldr	r0, [pc, #72]	@ (8001fb8 <HAL_I2C_MspInit+0x98>)
 8001f6e:	f001 feb1 	bl	8003cd4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f72:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <HAL_I2C_MspInit+0x9c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f88:	4a0c      	ldr	r2, [pc, #48]	@ (8001fbc <HAL_I2C_MspInit+0x9c>)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f8e:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <HAL_I2C_MspInit+0x94>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a08      	ldr	r2, [pc, #32]	@ (8001fb4 <HAL_I2C_MspInit+0x94>)
 8001f94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_I2C_MspInit+0x94>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3728      	adds	r7, #40	@ 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40005400 	.word	0x40005400
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010c00 	.word	0x40010c00
 8001fbc:	40010000 	.word	0x40010000

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc4:	f000 fe6e 	bl	8002ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc8:	f000 f82a 	bl	8002020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fcc:	f7ff fede 	bl	8001d8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001fd0:	f7ff febe 	bl	8001d50 <MX_DMA_Init>
  MX_UART4_Init();
 8001fd4:	f000 fbd6 	bl	8002784 <MX_UART4_Init>
  MX_UART5_Init();
 8001fd8:	f000 fbfe 	bl	80027d8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001fdc:	f000 fc26 	bl	800282c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001fe0:	f000 fc4e 	bl	8002880 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001fe4:	f000 fc76 	bl	80028d4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001fe8:	f7ff fe38 	bl	8001c5c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001fec:	f7ff ff6a 	bl	8001ec4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001ff0:	f000 fa8a 	bl	8002508 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001ff4:	f000 f9de 	bl	80023b4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ff8:	f000 fa2c 	bl	8002454 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  wireless_reg_handle(&huart1, &hdma_usart1_rx);
 8001ffc:	4906      	ldr	r1, [pc, #24]	@ (8002018 <main+0x58>)
 8001ffe:	4807      	ldr	r0, [pc, #28]	@ (800201c <main+0x5c>)
 8002000:	f005 fa7c 	bl	80074fc <wireless_reg_handle>
  wireless_init();
 8002004:	f005 fa9e 	bl	8007544 <wireless_init>

  motor_uart_init();
 8002008:	f7fe f92c 	bl	8000264 <motor_uart_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    event_datapack_process();
 800200c:	f005 fb74 	bl	80076f8 <event_datapack_process>
    Events_MainLogic();
 8002010:	f7fe f908 	bl	8000224 <Events_MainLogic>
    event_datapack_process();
 8002014:	bf00      	nop
 8002016:	e7f9      	b.n	800200c <main+0x4c>
 8002018:	200004a8 	.word	0x200004a8
 800201c:	200003d0 	.word	0x200003d0

08002020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b096      	sub	sp, #88	@ 0x58
 8002024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002026:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800202a:	2228      	movs	r2, #40	@ 0x28
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f005 fcb7 	bl	80079a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	611a      	str	r2, [r3, #16]
 8002052:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002054:	2301      	movs	r3, #1
 8002056:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002058:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800205c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002062:	2301      	movs	r3, #1
 8002064:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002066:	2302      	movs	r3, #2
 8002068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800206a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800206e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002070:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002074:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002076:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800207a:	4618      	mov	r0, r3
 800207c:	f002 f932 	bl	80042e4 <HAL_RCC_OscConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002086:	f000 f828 	bl	80020da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208a:	230f      	movs	r3, #15
 800208c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800208e:	2302      	movs	r3, #2
 8002090:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800209a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	2102      	movs	r1, #2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fb9e 	bl	80047e8 <HAL_RCC_ClockConfig>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80020b2:	f000 f812 	bl	80020da <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020b6:	2302      	movs	r3, #2
 80020b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80020ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 fd20 	bl	8004b08 <HAL_RCCEx_PeriphCLKConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80020ce:	f000 f804 	bl	80020da <Error_Handler>
  }
}
 80020d2:	bf00      	nop
 80020d4:	3758      	adds	r7, #88	@ 0x58
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020de:	b672      	cpsid	i
}
 80020e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80020e2:	bf00      	nop
 80020e4:	e7fd      	b.n	80020e2 <Error_Handler+0x8>
	...

080020e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_MspInit+0x5c>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <HAL_MspInit+0x5c>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6193      	str	r3, [r2, #24]
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_MspInit+0x5c>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <HAL_MspInit+0x5c>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a0e      	ldr	r2, [pc, #56]	@ (8002144 <HAL_MspInit+0x5c>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <HAL_MspInit+0x5c>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_MspInit+0x60>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <HAL_MspInit+0x60>)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <NMI_Handler+0x4>

08002154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <MemManage_Handler+0x4>

08002164 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <UsageFault_Handler+0x4>

08002174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800219c:	f000 fdc8 	bl	8002d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021a8:	4802      	ldr	r0, [pc, #8]	@ (80021b4 <DMA1_Channel5_IRQHandler+0x10>)
 80021aa:	f001 fb29 	bl	8003800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200004a8 	.word	0x200004a8

080021b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021bc:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021be:	f002 ffe7 	bl	8005190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000268 	.word	0x20000268

080021cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021d0:	4802      	ldr	r0, [pc, #8]	@ (80021dc <TIM3_IRQHandler+0x10>)
 80021d2:	f002 ffdd 	bl	8005190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200002b0 	.word	0x200002b0

080021e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021e4:	4802      	ldr	r0, [pc, #8]	@ (80021f0 <TIM4_IRQHandler+0x10>)
 80021e6:	f002 ffd3 	bl	8005190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200002f8 	.word	0x200002f8

080021f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <USART1_IRQHandler+0x10>)
 80021fa:	f004 f91d 	bl	8006438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200003d0 	.word	0x200003d0

08002208 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <USART2_IRQHandler+0x10>)
 800220e:	f004 f913 	bl	8006438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000418 	.word	0x20000418

0800221c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <USART3_IRQHandler+0x10>)
 8002222:	f004 f909 	bl	8006438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000460 	.word	0x20000460

08002230 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <UART4_IRQHandler+0x10>)
 8002236:	f004 f8ff 	bl	8006438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000340 	.word	0x20000340

08002244 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <UART5_IRQHandler+0x10>)
 800224a:	f004 f8f5 	bl	8006438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000388 	.word	0x20000388

08002258 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
	}
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e00a      	b.n	8002292 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800227c:	f3af 8000 	nop.w
 8002280:	4601      	mov	r1, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	60ba      	str	r2, [r7, #8]
 8002288:	b2ca      	uxtb	r2, r1
 800228a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3301      	adds	r3, #1
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	dbf0      	blt.n	800227c <_read+0x12>
  }

  return len;
 800229a:	687b      	ldr	r3, [r7, #4]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e009      	b.n	80022ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	60ba      	str	r2, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 fff6 	bl	80072b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	dbf1      	blt.n	80022b6 <_write+0x12>
  }
  return len;
 80022d2:	687b      	ldr	r3, [r7, #4]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <_close>:

int _close(int file)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002302:	605a      	str	r2, [r3, #4]
  return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <_isatty>:

int _isatty(int file)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002318:	2301      	movs	r3, #1
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002344:	4a14      	ldr	r2, [pc, #80]	@ (8002398 <_sbrk+0x5c>)
 8002346:	4b15      	ldr	r3, [pc, #84]	@ (800239c <_sbrk+0x60>)
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002350:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <_sbrk+0x64>)
 800235a:	4a12      	ldr	r2, [pc, #72]	@ (80023a4 <_sbrk+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235e:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d207      	bcs.n	800237c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800236c:	f005 fb68 	bl	8007a40 <__errno>
 8002370:	4603      	mov	r3, r0
 8002372:	220c      	movs	r2, #12
 8002374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	e009      	b.n	8002390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002382:	4b07      	ldr	r3, [pc, #28]	@ (80023a0 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4a05      	ldr	r2, [pc, #20]	@ (80023a0 <_sbrk+0x64>)
 800238c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20018000 	.word	0x20018000
 800239c:	00000400 	.word	0x00000400
 80023a0:	20000264 	.word	0x20000264
 80023a4:	20000728 	.word	0x20000728

080023a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c8:	463b      	mov	r3, r7
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023d0:	4b1e      	ldr	r3, [pc, #120]	@ (800244c <MX_TIM1_Init+0x98>)
 80023d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002450 <MX_TIM1_Init+0x9c>)
 80023d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80023d6:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <MX_TIM1_Init+0x98>)
 80023d8:	2247      	movs	r2, #71	@ 0x47
 80023da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <MX_TIM1_Init+0x98>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	@ (800244c <MX_TIM1_Init+0x98>)
 80023e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ea:	4b18      	ldr	r3, [pc, #96]	@ (800244c <MX_TIM1_Init+0x98>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023f0:	4b16      	ldr	r3, [pc, #88]	@ (800244c <MX_TIM1_Init+0x98>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <MX_TIM1_Init+0x98>)
 80023f8:	2280      	movs	r2, #128	@ 0x80
 80023fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023fc:	4813      	ldr	r0, [pc, #76]	@ (800244c <MX_TIM1_Init+0x98>)
 80023fe:	f002 fc39 	bl	8004c74 <HAL_TIM_Base_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002408:	f7ff fe67 	bl	80020da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002410:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	4619      	mov	r1, r3
 8002418:	480c      	ldr	r0, [pc, #48]	@ (800244c <MX_TIM1_Init+0x98>)
 800241a:	f003 f91f 	bl	800565c <HAL_TIM_ConfigClockSource>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002424:	f7ff fe59 	bl	80020da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002430:	463b      	mov	r3, r7
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	@ (800244c <MX_TIM1_Init+0x98>)
 8002436:	f003 fe1d 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002440:	f7ff fe4b 	bl	80020da <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000268 	.word	0x20000268
 8002450:	40012c00 	.word	0x40012c00

08002454 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	@ 0x28
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245a:	f107 0320 	add.w	r3, r7, #32
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]
 8002472:	615a      	str	r2, [r3, #20]
 8002474:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002476:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <MX_TIM3_Init+0xac>)
 8002478:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <MX_TIM3_Init+0xb0>)
 800247a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800247c:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <MX_TIM3_Init+0xac>)
 800247e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002482:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002484:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <MX_TIM3_Init+0xac>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 800248a:	4b1d      	ldr	r3, [pc, #116]	@ (8002500 <MX_TIM3_Init+0xac>)
 800248c:	2209      	movs	r2, #9
 800248e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002490:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <MX_TIM3_Init+0xac>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002496:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <MX_TIM3_Init+0xac>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800249c:	4818      	ldr	r0, [pc, #96]	@ (8002500 <MX_TIM3_Init+0xac>)
 800249e:	f002 fca7 	bl	8004df0 <HAL_TIM_PWM_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80024a8:	f7ff fe17 	bl	80020da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024b4:	f107 0320 	add.w	r3, r7, #32
 80024b8:	4619      	mov	r1, r3
 80024ba:	4811      	ldr	r0, [pc, #68]	@ (8002500 <MX_TIM3_Init+0xac>)
 80024bc:	f003 fdda 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80024c6:	f7ff fe08 	bl	80020da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ca:	2360      	movs	r3, #96	@ 0x60
 80024cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	2204      	movs	r2, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	4807      	ldr	r0, [pc, #28]	@ (8002500 <MX_TIM3_Init+0xac>)
 80024e2:	f002 fff9 	bl	80054d8 <HAL_TIM_PWM_ConfigChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80024ec:	f7ff fdf5 	bl	80020da <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024f0:	4803      	ldr	r0, [pc, #12]	@ (8002500 <MX_TIM3_Init+0xac>)
 80024f2:	f000 f901 	bl	80026f8 <HAL_TIM_MspPostInit>

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	@ 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200002b0 	.word	0x200002b0
 8002504:	40000400 	.word	0x40000400

08002508 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	@ 0x28
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250e:	f107 0318 	add.w	r3, r7, #24
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002526:	463b      	mov	r3, r7
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002532:	4b2b      	ldr	r3, [pc, #172]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 8002534:	4a2b      	ldr	r2, [pc, #172]	@ (80025e4 <MX_TIM4_Init+0xdc>)
 8002536:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002538:	4b29      	ldr	r3, [pc, #164]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 800253a:	2247      	movs	r2, #71	@ 0x47
 800253c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253e:	4b28      	ldr	r3, [pc, #160]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002544:	4b26      	ldr	r3, [pc, #152]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 8002546:	f242 720f 	movw	r2, #9999	@ 0x270f
 800254a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002552:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 8002554:	2280      	movs	r2, #128	@ 0x80
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002558:	4821      	ldr	r0, [pc, #132]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 800255a:	f002 fb8b 	bl	8004c74 <HAL_TIM_Base_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002564:	f7ff fdb9 	bl	80020da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800256c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800256e:	f107 0318 	add.w	r3, r7, #24
 8002572:	4619      	mov	r1, r3
 8002574:	481a      	ldr	r0, [pc, #104]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 8002576:	f003 f871 	bl	800565c <HAL_TIM_ConfigClockSource>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002580:	f7ff fdab 	bl	80020da <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002584:	4816      	ldr	r0, [pc, #88]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 8002586:	f002 fc82 	bl	8004e8e <HAL_TIM_IC_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002590:	f7ff fda3 	bl	80020da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4619      	mov	r1, r3
 80025a2:	480f      	ldr	r0, [pc, #60]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 80025a4:	f003 fd66 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80025ae:	f7ff fd94 	bl	80020da <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025b6:	2301      	movs	r3, #1
 80025b8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025c2:	463b      	mov	r3, r7
 80025c4:	2200      	movs	r2, #0
 80025c6:	4619      	mov	r1, r3
 80025c8:	4805      	ldr	r0, [pc, #20]	@ (80025e0 <MX_TIM4_Init+0xd8>)
 80025ca:	f002 fee9 	bl	80053a0 <HAL_TIM_IC_ConfigChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80025d4:	f7ff fd81 	bl	80020da <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	3728      	adds	r7, #40	@ 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200002f8 	.word	0x200002f8
 80025e4:	40000800 	.word	0x40000800

080025e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	@ 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0318 	add.w	r3, r7, #24
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a26      	ldr	r2, [pc, #152]	@ (800269c <HAL_TIM_Base_MspInit+0xb4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d114      	bne.n	8002632 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002608:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb8>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4a24      	ldr	r2, [pc, #144]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb8>)
 800260e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002612:	6193      	str	r3, [r2, #24]
 8002614:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb8>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2101      	movs	r1, #1
 8002624:	2019      	movs	r0, #25
 8002626:	f000 fe9a 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800262a:	2019      	movs	r0, #25
 800262c:	f000 feb3 	bl	8003396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002630:	e030      	b.n	8002694 <HAL_TIM_Base_MspInit+0xac>
  else if(tim_baseHandle->Instance==TIM4)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1b      	ldr	r2, [pc, #108]	@ (80026a4 <HAL_TIM_Base_MspInit+0xbc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d12b      	bne.n	8002694 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb8>)
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	4a17      	ldr	r2, [pc, #92]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb8>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	61d3      	str	r3, [r2, #28]
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb8>)
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002654:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb8>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4a11      	ldr	r2, [pc, #68]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb8>)
 800265a:	f043 0308 	orr.w	r3, r3, #8
 800265e:	6193      	str	r3, [r2, #24]
 8002660:	4b0f      	ldr	r3, [pc, #60]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb8>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HallCount_BLDCMotor_Pin;
 800266c:	2340      	movs	r3, #64	@ 0x40
 800266e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HallCount_BLDCMotor_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	4619      	mov	r1, r3
 800267e:	480a      	ldr	r0, [pc, #40]	@ (80026a8 <HAL_TIM_Base_MspInit+0xc0>)
 8002680:	f001 fb28 	bl	8003cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002684:	2200      	movs	r2, #0
 8002686:	2100      	movs	r1, #0
 8002688:	201e      	movs	r0, #30
 800268a:	f000 fe68 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800268e:	201e      	movs	r0, #30
 8002690:	f000 fe81 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 8002694:	bf00      	nop
 8002696:	3728      	adds	r7, #40	@ 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40000800 	.word	0x40000800
 80026a8:	40010c00 	.word	0x40010c00

080026ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <HAL_TIM_PWM_MspInit+0x44>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d113      	bne.n	80026e6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026be:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <HAL_TIM_PWM_MspInit+0x48>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4a0c      	ldr	r2, [pc, #48]	@ (80026f4 <HAL_TIM_PWM_MspInit+0x48>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	61d3      	str	r3, [r2, #28]
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <HAL_TIM_PWM_MspInit+0x48>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	201d      	movs	r0, #29
 80026dc:	f000 fe3f 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026e0:	201d      	movs	r0, #29
 80026e2:	f000 fe58 	bl	8003396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40021000 	.word	0x40021000

080026f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a18      	ldr	r2, [pc, #96]	@ (8002774 <HAL_TIM_MspPostInit+0x7c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d129      	bne.n	800276c <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002718:	4b17      	ldr	r3, [pc, #92]	@ (8002778 <HAL_TIM_MspPostInit+0x80>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a16      	ldr	r2, [pc, #88]	@ (8002778 <HAL_TIM_MspPostInit+0x80>)
 800271e:	f043 0308 	orr.w	r3, r3, #8
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <HAL_TIM_MspPostInit+0x80>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Speed_PWMCtl_BLDCMotor_Pin;
 8002730:	2320      	movs	r3, #32
 8002732:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2302      	movs	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Speed_PWMCtl_BLDCMotor_GPIO_Port, &GPIO_InitStruct);
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	4619      	mov	r1, r3
 8002742:	480e      	ldr	r0, [pc, #56]	@ (800277c <HAL_TIM_MspPostInit+0x84>)
 8002744:	f001 fac6 	bl	8003cd4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002748:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <HAL_TIM_MspPostInit+0x88>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	4a06      	ldr	r2, [pc, #24]	@ (8002780 <HAL_TIM_MspPostInit+0x88>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800276c:	bf00      	nop
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40000400 	.word	0x40000400
 8002778:	40021000 	.word	0x40021000
 800277c:	40010c00 	.word	0x40010c00
 8002780:	40010000 	.word	0x40010000

08002784 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;
DMA_HandleTypeDef  hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void) {
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance          = UART4;
 8002788:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <MX_UART4_Init+0x4c>)
 800278a:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <MX_UART4_Init+0x50>)
 800278c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate     = 230400;
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <MX_UART4_Init+0x4c>)
 8002790:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002794:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength   = UART_WORDLENGTH_8B;
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <MX_UART4_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits     = UART_STOPBITS_1;
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <MX_UART4_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity       = UART_PARITY_NONE;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <MX_UART4_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode         = UART_MODE_TX_RX;
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <MX_UART4_Init+0x4c>)
 80027aa:	220c      	movs	r2, #12
 80027ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <MX_UART4_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <MX_UART4_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK) {
 80027ba:	4805      	ldr	r0, [pc, #20]	@ (80027d0 <MX_UART4_Init+0x4c>)
 80027bc:	f003 fce6 	bl	800618c <HAL_UART_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_UART4_Init+0x46>
    Error_Handler();
 80027c6:	f7ff fc88 	bl	80020da <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000340 	.word	0x20000340
 80027d4:	40004c00 	.word	0x40004c00

080027d8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance          = UART5;
 80027dc:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <MX_UART5_Init+0x4c>)
 80027de:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <MX_UART5_Init+0x50>)
 80027e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate     = 230400;
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <MX_UART5_Init+0x4c>)
 80027e4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80027e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength   = UART_WORDLENGTH_8B;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <MX_UART5_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits     = UART_STOPBITS_1;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <MX_UART5_Init+0x4c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity       = UART_PARITY_NONE;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <MX_UART5_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode         = UART_MODE_TX_RX;
 80027fc:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <MX_UART5_Init+0x4c>)
 80027fe:	220c      	movs	r2, #12
 8002800:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <MX_UART5_Init+0x4c>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <MX_UART5_Init+0x4c>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK) {
 800280e:	4805      	ldr	r0, [pc, #20]	@ (8002824 <MX_UART5_Init+0x4c>)
 8002810:	f003 fcbc 	bl	800618c <HAL_UART_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_UART5_Init+0x46>
    Error_Handler();
 800281a:	f7ff fc5e 	bl	80020da <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000388 	.word	0x20000388
 8002828:	40005000 	.word	0x40005000

0800282c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance          = USART1;
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002832:	4a12      	ldr	r2, [pc, #72]	@ (800287c <MX_USART1_UART_Init+0x50>)
 8002834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 9600;
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002838:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800283c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 8002844:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 800284a:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002852:	220c      	movs	r2, #12
 8002854:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002856:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002862:	4805      	ldr	r0, [pc, #20]	@ (8002878 <MX_USART1_UART_Init+0x4c>)
 8002864:	f003 fc92 	bl	800618c <HAL_UART_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_USART1_UART_Init+0x46>
    Error_Handler();
 800286e:	f7ff fc34 	bl	80020da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200003d0 	.word	0x200003d0
 800287c:	40013800 	.word	0x40013800

08002880 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void) {
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <MX_USART2_UART_Init+0x4c>)
 8002886:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <MX_USART2_UART_Init+0x50>)
 8002888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 38400;
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <MX_USART2_UART_Init+0x4c>)
 800288c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8002892:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <MX_USART2_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <MX_USART2_UART_Init+0x4c>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 800289e:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <MX_USART2_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 80028a4:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <MX_USART2_UART_Init+0x4c>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80028aa:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <MX_USART2_UART_Init+0x4c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <MX_USART2_UART_Init+0x4c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 80028b6:	4805      	ldr	r0, [pc, #20]	@ (80028cc <MX_USART2_UART_Init+0x4c>)
 80028b8:	f003 fc68 	bl	800618c <HAL_UART_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 80028c2:	f7ff fc0a 	bl	80020da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000418 	.word	0x20000418
 80028d0:	40004400 	.word	0x40004400

080028d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance          = USART3;
 80028d8:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <MX_USART3_UART_Init+0x4c>)
 80028da:	4a12      	ldr	r2, [pc, #72]	@ (8002924 <MX_USART3_UART_Init+0x50>)
 80028dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate     = 115200;
 80028de:	4b10      	ldr	r3, [pc, #64]	@ (8002920 <MX_USART3_UART_Init+0x4c>)
 80028e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <MX_USART3_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits     = UART_STOPBITS_1;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <MX_USART3_UART_Init+0x4c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity       = UART_PARITY_NONE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <MX_USART3_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode         = UART_MODE_TX_RX;
 80028f8:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <MX_USART3_UART_Init+0x4c>)
 80028fa:	220c      	movs	r2, #12
 80028fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <MX_USART3_UART_Init+0x4c>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <MX_USART3_UART_Init+0x4c>)
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 800290a:	4805      	ldr	r0, [pc, #20]	@ (8002920 <MX_USART3_UART_Init+0x4c>)
 800290c:	f003 fc3e 	bl	800618c <HAL_UART_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8002916:	f7ff fbe0 	bl	80020da <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000460 	.word	0x20000460
 8002924:	40004800 	.word	0x40004800

08002928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b092      	sub	sp, #72	@ 0x48
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
  if (uartHandle->Instance == UART4) {
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a96      	ldr	r2, [pc, #600]	@ (8002b9c <HAL_UART_MspInit+0x274>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d13a      	bne.n	80029be <HAL_UART_MspInit+0x96>
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002948:	4b95      	ldr	r3, [pc, #596]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4a94      	ldr	r2, [pc, #592]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 800294e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002952:	61d3      	str	r3, [r2, #28]
 8002954:	4b92      	ldr	r3, [pc, #584]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
 800295e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002960:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4a8e      	ldr	r2, [pc, #568]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002966:	f043 0310 	orr.w	r3, r3, #16
 800296a:	6193      	str	r3, [r2, #24]
 800296c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	633b      	str	r3, [r7, #48]	@ 0x30
 8002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin   = GPIO_PIN_10;
 8002978:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800297c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002986:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800298a:	4619      	mov	r1, r3
 800298c:	4885      	ldr	r0, [pc, #532]	@ (8002ba4 <HAL_UART_MspInit+0x27c>)
 800298e:	f001 f9a1 	bl	8003cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 8002992:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002996:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002998:	2300      	movs	r3, #0
 800299a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029a4:	4619      	mov	r1, r3
 80029a6:	487f      	ldr	r0, [pc, #508]	@ (8002ba4 <HAL_UART_MspInit+0x27c>)
 80029a8:	f001 f994 	bl	8003cd4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80029ac:	2200      	movs	r2, #0
 80029ae:	2100      	movs	r1, #0
 80029b0:	2034      	movs	r0, #52	@ 0x34
 80029b2:	f000 fcd4 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80029b6:	2034      	movs	r0, #52	@ 0x34
 80029b8:	f000 fced 	bl	8003396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }
}
 80029bc:	e141      	b.n	8002c42 <HAL_UART_MspInit+0x31a>
  } else if (uartHandle->Instance == UART5) {
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a79      	ldr	r2, [pc, #484]	@ (8002ba8 <HAL_UART_MspInit+0x280>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d145      	bne.n	8002a54 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029c8:	4b75      	ldr	r3, [pc, #468]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	4a74      	ldr	r2, [pc, #464]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029d2:	61d3      	str	r3, [r2, #28]
 80029d4:	4b72      	ldr	r3, [pc, #456]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 80029e6:	f043 0310 	orr.w	r3, r3, #16
 80029ea:	6193      	str	r3, [r2, #24]
 80029ec:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f8:	4b69      	ldr	r3, [pc, #420]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4a68      	ldr	r2, [pc, #416]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 80029fe:	f043 0320 	orr.w	r3, r3, #32
 8002a02:	6193      	str	r3, [r2, #24]
 8002a04:	4b66      	ldr	r3, [pc, #408]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin   = GPIO_PIN_12;
 8002a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a22:	4619      	mov	r1, r3
 8002a24:	485f      	ldr	r0, [pc, #380]	@ (8002ba4 <HAL_UART_MspInit+0x27c>)
 8002a26:	f001 f955 	bl	8003cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = GPIO_PIN_2;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	485b      	ldr	r0, [pc, #364]	@ (8002bac <HAL_UART_MspInit+0x284>)
 8002a3e:	f001 f949 	bl	8003cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	2035      	movs	r0, #53	@ 0x35
 8002a48:	f000 fc89 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002a4c:	2035      	movs	r0, #53	@ 0x35
 8002a4e:	f000 fca2 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 8002a52:	e0f6      	b.n	8002c42 <HAL_UART_MspInit+0x31a>
  } else if (uartHandle->Instance == USART1) {
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a55      	ldr	r2, [pc, #340]	@ (8002bb0 <HAL_UART_MspInit+0x288>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d160      	bne.n	8002b20 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a5e:	4b50      	ldr	r3, [pc, #320]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	4a4f      	ldr	r2, [pc, #316]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a68:	6193      	str	r3, [r2, #24]
 8002a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	4a49      	ldr	r2, [pc, #292]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	6193      	str	r3, [r2, #24]
 8002a82:	4b47      	ldr	r3, [pc, #284]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin   = AndroidSerial_TX_Pin;
 8002a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a92:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002a94:	2302      	movs	r3, #2
 8002a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(AndroidSerial_TX_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4844      	ldr	r0, [pc, #272]	@ (8002bb4 <HAL_UART_MspInit+0x28c>)
 8002aa4:	f001 f916 	bl	8003cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = AndroidSerial_RX_Pin;
 8002aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(AndroidSerial_RX_GPIO_Port, &GPIO_InitStruct);
 8002ab6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002aba:	4619      	mov	r1, r3
 8002abc:	483d      	ldr	r0, [pc, #244]	@ (8002bb4 <HAL_UART_MspInit+0x28c>)
 8002abe:	f001 f909 	bl	8003cd4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002ac4:	4a3d      	ldr	r2, [pc, #244]	@ (8002bbc <HAL_UART_MspInit+0x294>)
 8002ac6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002ace:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002ad4:	4b38      	ldr	r3, [pc, #224]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002ad6:	2280      	movs	r2, #128	@ 0x80
 8002ad8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ada:	4b37      	ldr	r3, [pc, #220]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002ae0:	4b35      	ldr	r3, [pc, #212]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode                = DMA_NORMAL;
 8002ae6:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8002aec:	4b32      	ldr	r3, [pc, #200]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK) {
 8002af2:	4831      	ldr	r0, [pc, #196]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002af4:	f000 fc6a 	bl	80033cc <HAL_DMA_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8002afe:	f7ff faec 	bl	80020da <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002b06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b08:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <HAL_UART_MspInit+0x290>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2025      	movs	r0, #37	@ 0x25
 8002b14:	f000 fc23 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b18:	2025      	movs	r0, #37	@ 0x25
 8002b1a:	f000 fc3c 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 8002b1e:	e090      	b.n	8002c42 <HAL_UART_MspInit+0x31a>
  } else if (uartHandle->Instance == USART2) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a26      	ldr	r2, [pc, #152]	@ (8002bc0 <HAL_UART_MspInit+0x298>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d14c      	bne.n	8002bc4 <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b34:	61d3      	str	r3, [r2, #28]
 8002b36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	6193      	str	r3, [r2, #24]
 8002b4e:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <HAL_UART_MspInit+0x278>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin   = DebugSerial_TX_Pin;
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b62:	2303      	movs	r3, #3
 8002b64:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(DebugSerial_TX_GPIO_Port, &GPIO_InitStruct);
 8002b66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4811      	ldr	r0, [pc, #68]	@ (8002bb4 <HAL_UART_MspInit+0x28c>)
 8002b6e:	f001 f8b1 	bl	8003cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = DebugSerial_RX_Pin;
 8002b72:	2308      	movs	r3, #8
 8002b74:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b76:	2300      	movs	r3, #0
 8002b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(DebugSerial_RX_GPIO_Port, &GPIO_InitStruct);
 8002b7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b82:	4619      	mov	r1, r3
 8002b84:	480b      	ldr	r0, [pc, #44]	@ (8002bb4 <HAL_UART_MspInit+0x28c>)
 8002b86:	f001 f8a5 	bl	8003cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2026      	movs	r0, #38	@ 0x26
 8002b90:	f000 fbe5 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b94:	2026      	movs	r0, #38	@ 0x26
 8002b96:	f000 fbfe 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 8002b9a:	e052      	b.n	8002c42 <HAL_UART_MspInit+0x31a>
 8002b9c:	40004c00 	.word	0x40004c00
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40011000 	.word	0x40011000
 8002ba8:	40005000 	.word	0x40005000
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	40013800 	.word	0x40013800
 8002bb4:	40010800 	.word	0x40010800
 8002bb8:	200004a8 	.word	0x200004a8
 8002bbc:	40020058 	.word	0x40020058
 8002bc0:	40004400 	.word	0x40004400
  } else if (uartHandle->Instance == USART3) {
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	@ (8002c4c <HAL_UART_MspInit+0x324>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d139      	bne.n	8002c42 <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bce:	4b20      	ldr	r3, [pc, #128]	@ (8002c50 <HAL_UART_MspInit+0x328>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <HAL_UART_MspInit+0x328>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bd8:	61d3      	str	r3, [r2, #28]
 8002bda:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <HAL_UART_MspInit+0x328>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_UART_MspInit+0x328>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	4a19      	ldr	r2, [pc, #100]	@ (8002c50 <HAL_UART_MspInit+0x328>)
 8002bec:	f043 0308 	orr.w	r3, r3, #8
 8002bf0:	6193      	str	r3, [r2, #24]
 8002bf2:	4b17      	ldr	r3, [pc, #92]	@ (8002c50 <HAL_UART_MspInit+0x328>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin   = GPIO_PIN_10;
 8002bfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c02:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c10:	4619      	mov	r1, r3
 8002c12:	4810      	ldr	r0, [pc, #64]	@ (8002c54 <HAL_UART_MspInit+0x32c>)
 8002c14:	f001 f85e 	bl	8003cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 8002c18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4809      	ldr	r0, [pc, #36]	@ (8002c54 <HAL_UART_MspInit+0x32c>)
 8002c2e:	f001 f851 	bl	8003cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	2027      	movs	r0, #39	@ 0x27
 8002c38:	f000 fb91 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c3c:	2027      	movs	r0, #39	@ 0x27
 8002c3e:	f000 fbaa 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3748      	adds	r7, #72	@ 0x48
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40004800 	.word	0x40004800
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010c00 	.word	0x40010c00

08002c58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c58:	f7ff fba6 	bl	80023a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c5c:	480b      	ldr	r0, [pc, #44]	@ (8002c8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c5e:	490c      	ldr	r1, [pc, #48]	@ (8002c90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c60:	4a0c      	ldr	r2, [pc, #48]	@ (8002c94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c64:	e002      	b.n	8002c6c <LoopCopyDataInit>

08002c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c6a:	3304      	adds	r3, #4

08002c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c70:	d3f9      	bcc.n	8002c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c72:	4a09      	ldr	r2, [pc, #36]	@ (8002c98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c74:	4c09      	ldr	r4, [pc, #36]	@ (8002c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c78:	e001      	b.n	8002c7e <LoopFillZerobss>

08002c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c7c:	3204      	adds	r2, #4

08002c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c80:	d3fb      	bcc.n	8002c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c82:	f004 fee3 	bl	8007a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c86:	f7ff f99b 	bl	8001fc0 <main>
  bx lr
 8002c8a:	4770      	bx	lr
  ldr r0, =_sdata
 8002c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c90:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002c94:	080089e0 	.word	0x080089e0
  ldr r2, =_sbss
 8002c98:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002c9c:	20000724 	.word	0x20000724

08002ca0 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ca0:	e7fe      	b.n	8002ca0 <ADC1_2_IRQHandler>
	...

08002ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca8:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_Init+0x28>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a07      	ldr	r2, [pc, #28]	@ (8002ccc <HAL_Init+0x28>)
 8002cae:	f043 0310 	orr.w	r3, r3, #16
 8002cb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f000 fb47 	bl	8003348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cba:	200f      	movs	r0, #15
 8002cbc:	f000 f808 	bl	8002cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc0:	f7ff fa12 	bl	80020e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40022000 	.word	0x40022000

08002cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <HAL_InitTick+0x54>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <HAL_InitTick+0x58>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fb5f 	bl	80033b2 <HAL_SYSTICK_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00e      	b.n	8002d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d80a      	bhi.n	8002d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d04:	2200      	movs	r2, #0
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	f000 fb27 	bl	800335e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d10:	4a06      	ldr	r2, [pc, #24]	@ (8002d2c <HAL_InitTick+0x5c>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000000 	.word	0x20000000
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	20000004 	.word	0x20000004

08002d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <HAL_IncTick+0x1c>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_IncTick+0x20>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a03      	ldr	r2, [pc, #12]	@ (8002d50 <HAL_IncTick+0x20>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	20000008 	.word	0x20000008
 8002d50:	200004ec 	.word	0x200004ec

08002d54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return uwTick;
 8002d58:	4b02      	ldr	r3, [pc, #8]	@ (8002d64 <HAL_GetTick+0x10>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	200004ec 	.word	0x200004ec

08002d68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0ce      	b.n	8002f28 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d109      	bne.n	8002dac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe ff96 	bl	8001cd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f9bd 	bl	800312c <ADC_ConversionStop_Disable>
 8002db2:	4603      	mov	r3, r0
 8002db4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 80a9 	bne.w	8002f16 <HAL_ADC_Init+0x1ae>
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 80a5 	bne.w	8002f16 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dd4:	f023 0302 	bic.w	r3, r3, #2
 8002dd8:	f043 0202 	orr.w	r2, r3, #2
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4951      	ldr	r1, [pc, #324]	@ (8002f30 <HAL_ADC_Init+0x1c8>)
 8002dea:	428b      	cmp	r3, r1
 8002dec:	d10a      	bne.n	8002e04 <HAL_ADC_Init+0x9c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002df6:	d002      	beq.n	8002dfe <HAL_ADC_Init+0x96>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	e004      	b.n	8002e08 <HAL_ADC_Init+0xa0>
 8002dfe:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002e02:	e001      	b.n	8002e08 <HAL_ADC_Init+0xa0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7b1b      	ldrb	r3, [r3, #12]
 8002e0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e20:	d003      	beq.n	8002e2a <HAL_ADC_Init+0xc2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d102      	bne.n	8002e30 <HAL_ADC_Init+0xc8>
 8002e2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e2e:	e000      	b.n	8002e32 <HAL_ADC_Init+0xca>
 8002e30:	2300      	movs	r3, #0
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7d1b      	ldrb	r3, [r3, #20]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d119      	bne.n	8002e74 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7b1b      	ldrb	r3, [r3, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	035a      	lsls	r2, r3, #13
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e00b      	b.n	8002e74 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	4b29      	ldr	r3, [pc, #164]	@ (8002f34 <HAL_ADC_Init+0x1cc>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea4:	d003      	beq.n	8002eae <HAL_ADC_Init+0x146>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d104      	bne.n	8002eb8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	051b      	lsls	r3, r3, #20
 8002eb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <HAL_ADC_Init+0x1d0>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d10b      	bne.n	8002ef4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ef2:	e018      	b.n	8002f26 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	f023 0312 	bic.w	r3, r3, #18
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f14:	e007      	b.n	8002f26 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	f043 0210 	orr.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40013c00 	.word	0x40013c00
 8002f34:	ffe1f7fd 	.word	0xffe1f7fd
 8002f38:	ff1f0efe 	.word	0xff1f0efe

08002f3c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x20>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0dc      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1da>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d81c      	bhi.n	8002fa6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b05      	subs	r3, #5
 8002f7e:	221f      	movs	r2, #31
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	4019      	ands	r1, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	3b05      	subs	r3, #5
 8002f98:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fa4:	e03c      	b.n	8003020 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d81c      	bhi.n	8002fe8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3b23      	subs	r3, #35	@ 0x23
 8002fc0:	221f      	movs	r2, #31
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	4019      	ands	r1, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b23      	subs	r3, #35	@ 0x23
 8002fda:	fa00 f203 	lsl.w	r2, r0, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fe6:	e01b      	b.n	8003020 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b41      	subs	r3, #65	@ 0x41
 8002ffa:	221f      	movs	r2, #31
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	4019      	ands	r1, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	3b41      	subs	r3, #65	@ 0x41
 8003014:	fa00 f203 	lsl.w	r2, r0, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b09      	cmp	r3, #9
 8003026:	d91c      	bls.n	8003062 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68d9      	ldr	r1, [r3, #12]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	3b1e      	subs	r3, #30
 800303a:	2207      	movs	r2, #7
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	4019      	ands	r1, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6898      	ldr	r0, [r3, #8]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	3b1e      	subs	r3, #30
 8003054:	fa00 f203 	lsl.w	r2, r0, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	e019      	b.n	8003096 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6919      	ldr	r1, [r3, #16]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	2207      	movs	r2, #7
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	4019      	ands	r1, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6898      	ldr	r0, [r3, #8]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	fa00 f203 	lsl.w	r2, r0, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b10      	cmp	r3, #16
 800309c:	d003      	beq.n	80030a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030a2:	2b11      	cmp	r3, #17
 80030a4:	d132      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003120 <HAL_ADC_ConfigChannel+0x1e4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d125      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d126      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80030cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d11a      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030d6:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <HAL_ADC_ConfigChannel+0x1e8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a13      	ldr	r2, [pc, #76]	@ (8003128 <HAL_ADC_ConfigChannel+0x1ec>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	0c9a      	lsrs	r2, r3, #18
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030ec:	e002      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f9      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x1b2>
 80030fa:	e007      	b.n	800310c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	40012400 	.word	0x40012400
 8003124:	20000000 	.word	0x20000000
 8003128:	431bde83 	.word	0x431bde83

0800312c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d12e      	bne.n	80031a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0201 	bic.w	r2, r2, #1
 8003154:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003156:	f7ff fdfd 	bl	8002d54 <HAL_GetTick>
 800315a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800315c:	e01b      	b.n	8003196 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800315e:	f7ff fdf9 	bl	8002d54 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d914      	bls.n	8003196 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10d      	bne.n	8003196 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	f043 0210 	orr.w	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e007      	b.n	80031a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d0dc      	beq.n	800315e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c0:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031cc:	4013      	ands	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e2:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	60d3      	str	r3, [r2, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <__NVIC_GetPriorityGrouping+0x18>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 0307 	and.w	r3, r3, #7
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	2b00      	cmp	r3, #0
 8003224:	db0b      	blt.n	800323e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	4906      	ldr	r1, [pc, #24]	@ (8003248 <__NVIC_EnableIRQ+0x34>)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2001      	movs	r0, #1
 8003236:	fa00 f202 	lsl.w	r2, r0, r2
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	e000e100 	.word	0xe000e100

0800324c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db0a      	blt.n	8003276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	490c      	ldr	r1, [pc, #48]	@ (8003298 <__NVIC_SetPriority+0x4c>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	440b      	add	r3, r1
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003274:	e00a      	b.n	800328c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4908      	ldr	r1, [pc, #32]	@ (800329c <__NVIC_SetPriority+0x50>)
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3b04      	subs	r3, #4
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	440b      	add	r3, r1
 800328a:	761a      	strb	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	@ 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f1c3 0307 	rsb	r3, r3, #7
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	bf28      	it	cs
 80032be:	2304      	movcs	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d902      	bls.n	80032d0 <NVIC_EncodePriority+0x30>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3b03      	subs	r3, #3
 80032ce:	e000      	b.n	80032d2 <NVIC_EncodePriority+0x32>
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	401a      	ands	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	4313      	orrs	r3, r2
         );
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	@ 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003314:	d301      	bcc.n	800331a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003316:	2301      	movs	r3, #1
 8003318:	e00f      	b.n	800333a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331a:	4a0a      	ldr	r2, [pc, #40]	@ (8003344 <SysTick_Config+0x40>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003322:	210f      	movs	r1, #15
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	f7ff ff90 	bl	800324c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800332c:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <SysTick_Config+0x40>)
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003332:	4b04      	ldr	r3, [pc, #16]	@ (8003344 <SysTick_Config+0x40>)
 8003334:	2207      	movs	r2, #7
 8003336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	e000e010 	.word	0xe000e010

08003348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff ff2d 	bl	80031b0 <__NVIC_SetPriorityGrouping>
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af00      	add	r7, sp, #0
 8003364:	4603      	mov	r3, r0
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003370:	f7ff ff42 	bl	80031f8 <__NVIC_GetPriorityGrouping>
 8003374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	f7ff ff90 	bl	80032a0 <NVIC_EncodePriority>
 8003380:	4602      	mov	r2, r0
 8003382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff5f 	bl	800324c <__NVIC_SetPriority>
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff35 	bl	8003214 <__NVIC_EnableIRQ>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ffa2 	bl	8003304 <SysTick_Config>
 80033c0:	4603      	mov	r3, r0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e059      	b.n	8003496 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b2d      	ldr	r3, [pc, #180]	@ (80034a0 <HAL_DMA_Init+0xd4>)
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d80f      	bhi.n	800340e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b2b      	ldr	r3, [pc, #172]	@ (80034a4 <HAL_DMA_Init+0xd8>)
 80033f6:	4413      	add	r3, r2
 80033f8:	4a2b      	ldr	r2, [pc, #172]	@ (80034a8 <HAL_DMA_Init+0xdc>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	009a      	lsls	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a28      	ldr	r2, [pc, #160]	@ (80034ac <HAL_DMA_Init+0xe0>)
 800340a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800340c:	e00e      	b.n	800342c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4b26      	ldr	r3, [pc, #152]	@ (80034b0 <HAL_DMA_Init+0xe4>)
 8003416:	4413      	add	r3, r2
 8003418:	4a23      	ldr	r2, [pc, #140]	@ (80034a8 <HAL_DMA_Init+0xdc>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a22      	ldr	r2, [pc, #136]	@ (80034b4 <HAL_DMA_Init+0xe8>)
 800342a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003442:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003446:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40020407 	.word	0x40020407
 80034a4:	bffdfff8 	.word	0xbffdfff8
 80034a8:	cccccccd 	.word	0xcccccccd
 80034ac:	40020000 	.word	0x40020000
 80034b0:	bffdfbf8 	.word	0xbffdfbf8
 80034b4:	40020400 	.word	0x40020400

080034b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_DMA_Start_IT+0x20>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e04b      	b.n	8003570 <HAL_DMA_Start_IT+0xb8>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d13a      	bne.n	8003562 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fbb1 	bl	8003c78 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 020e 	orr.w	r2, r2, #14
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e00f      	b.n	8003550 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0204 	bic.w	r2, r2, #4
 800353e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 020a 	orr.w	r2, r2, #10
 800354e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e005      	b.n	800356e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800356a:	2302      	movs	r3, #2
 800356c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800356e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d008      	beq.n	80035a2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2204      	movs	r2, #4
 8003594:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e020      	b.n	80035e4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 020e 	bic.w	r2, r2, #14
 80035b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ca:	2101      	movs	r1, #1
 80035cc:	fa01 f202 	lsl.w	r2, r1, r2
 80035d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d005      	beq.n	8003614 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2204      	movs	r2, #4
 800360c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	e0d6      	b.n	80037c2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 020e 	bic.w	r2, r2, #14
 8003622:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	4b64      	ldr	r3, [pc, #400]	@ (80037cc <HAL_DMA_Abort_IT+0x1dc>)
 800363c:	429a      	cmp	r2, r3
 800363e:	d958      	bls.n	80036f2 <HAL_DMA_Abort_IT+0x102>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a62      	ldr	r2, [pc, #392]	@ (80037d0 <HAL_DMA_Abort_IT+0x1e0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d04f      	beq.n	80036ea <HAL_DMA_Abort_IT+0xfa>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a61      	ldr	r2, [pc, #388]	@ (80037d4 <HAL_DMA_Abort_IT+0x1e4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d048      	beq.n	80036e6 <HAL_DMA_Abort_IT+0xf6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a5f      	ldr	r2, [pc, #380]	@ (80037d8 <HAL_DMA_Abort_IT+0x1e8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d040      	beq.n	80036e0 <HAL_DMA_Abort_IT+0xf0>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5e      	ldr	r2, [pc, #376]	@ (80037dc <HAL_DMA_Abort_IT+0x1ec>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d038      	beq.n	80036da <HAL_DMA_Abort_IT+0xea>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a5c      	ldr	r2, [pc, #368]	@ (80037e0 <HAL_DMA_Abort_IT+0x1f0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d030      	beq.n	80036d4 <HAL_DMA_Abort_IT+0xe4>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a5b      	ldr	r2, [pc, #364]	@ (80037e4 <HAL_DMA_Abort_IT+0x1f4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d028      	beq.n	80036ce <HAL_DMA_Abort_IT+0xde>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a52      	ldr	r2, [pc, #328]	@ (80037cc <HAL_DMA_Abort_IT+0x1dc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d020      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xd8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a57      	ldr	r2, [pc, #348]	@ (80037e8 <HAL_DMA_Abort_IT+0x1f8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d019      	beq.n	80036c4 <HAL_DMA_Abort_IT+0xd4>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a55      	ldr	r2, [pc, #340]	@ (80037ec <HAL_DMA_Abort_IT+0x1fc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d012      	beq.n	80036c0 <HAL_DMA_Abort_IT+0xd0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a54      	ldr	r2, [pc, #336]	@ (80037f0 <HAL_DMA_Abort_IT+0x200>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00a      	beq.n	80036ba <HAL_DMA_Abort_IT+0xca>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a52      	ldr	r2, [pc, #328]	@ (80037f4 <HAL_DMA_Abort_IT+0x204>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d102      	bne.n	80036b4 <HAL_DMA_Abort_IT+0xc4>
 80036ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036b2:	e01b      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036b8:	e018      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036be:	e015      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036c0:	2310      	movs	r3, #16
 80036c2:	e013      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e011      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036cc:	e00e      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80036d2:	e00b      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036d8:	e008      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036de:	e005      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036e4:	e002      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036e6:	2310      	movs	r3, #16
 80036e8:	e000      	b.n	80036ec <HAL_DMA_Abort_IT+0xfc>
 80036ea:	2301      	movs	r3, #1
 80036ec:	4a42      	ldr	r2, [pc, #264]	@ (80037f8 <HAL_DMA_Abort_IT+0x208>)
 80036ee:	6053      	str	r3, [r2, #4]
 80036f0:	e057      	b.n	80037a2 <HAL_DMA_Abort_IT+0x1b2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a36      	ldr	r2, [pc, #216]	@ (80037d0 <HAL_DMA_Abort_IT+0x1e0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d04f      	beq.n	800379c <HAL_DMA_Abort_IT+0x1ac>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a34      	ldr	r2, [pc, #208]	@ (80037d4 <HAL_DMA_Abort_IT+0x1e4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d048      	beq.n	8003798 <HAL_DMA_Abort_IT+0x1a8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a33      	ldr	r2, [pc, #204]	@ (80037d8 <HAL_DMA_Abort_IT+0x1e8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d040      	beq.n	8003792 <HAL_DMA_Abort_IT+0x1a2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a31      	ldr	r2, [pc, #196]	@ (80037dc <HAL_DMA_Abort_IT+0x1ec>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d038      	beq.n	800378c <HAL_DMA_Abort_IT+0x19c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a30      	ldr	r2, [pc, #192]	@ (80037e0 <HAL_DMA_Abort_IT+0x1f0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d030      	beq.n	8003786 <HAL_DMA_Abort_IT+0x196>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2e      	ldr	r2, [pc, #184]	@ (80037e4 <HAL_DMA_Abort_IT+0x1f4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d028      	beq.n	8003780 <HAL_DMA_Abort_IT+0x190>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a26      	ldr	r2, [pc, #152]	@ (80037cc <HAL_DMA_Abort_IT+0x1dc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d020      	beq.n	800377a <HAL_DMA_Abort_IT+0x18a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2a      	ldr	r2, [pc, #168]	@ (80037e8 <HAL_DMA_Abort_IT+0x1f8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d019      	beq.n	8003776 <HAL_DMA_Abort_IT+0x186>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a29      	ldr	r2, [pc, #164]	@ (80037ec <HAL_DMA_Abort_IT+0x1fc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d012      	beq.n	8003772 <HAL_DMA_Abort_IT+0x182>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a27      	ldr	r2, [pc, #156]	@ (80037f0 <HAL_DMA_Abort_IT+0x200>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00a      	beq.n	800376c <HAL_DMA_Abort_IT+0x17c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a26      	ldr	r2, [pc, #152]	@ (80037f4 <HAL_DMA_Abort_IT+0x204>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d102      	bne.n	8003766 <HAL_DMA_Abort_IT+0x176>
 8003760:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003764:	e01b      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 8003766:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800376a:	e018      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 800376c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003770:	e015      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 8003772:	2310      	movs	r3, #16
 8003774:	e013      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 8003776:	2301      	movs	r3, #1
 8003778:	e011      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 800377a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800377e:	e00e      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 8003780:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003784:	e00b      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 8003786:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800378a:	e008      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 800378c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003790:	e005      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 8003792:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003796:	e002      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 8003798:	2310      	movs	r3, #16
 800379a:	e000      	b.n	800379e <HAL_DMA_Abort_IT+0x1ae>
 800379c:	2301      	movs	r3, #1
 800379e:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <HAL_DMA_Abort_IT+0x20c>)
 80037a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
    } 
  }
  return status;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40020080 	.word	0x40020080
 80037d0:	40020008 	.word	0x40020008
 80037d4:	4002001c 	.word	0x4002001c
 80037d8:	40020030 	.word	0x40020030
 80037dc:	40020044 	.word	0x40020044
 80037e0:	40020058 	.word	0x40020058
 80037e4:	4002006c 	.word	0x4002006c
 80037e8:	40020408 	.word	0x40020408
 80037ec:	4002041c 	.word	0x4002041c
 80037f0:	40020430 	.word	0x40020430
 80037f4:	40020444 	.word	0x40020444
 80037f8:	40020400 	.word	0x40020400
 80037fc:	40020000 	.word	0x40020000

08003800 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	2204      	movs	r2, #4
 800381e:	409a      	lsls	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80f1 	beq.w	8003a0c <HAL_DMA_IRQHandler+0x20c>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80eb 	beq.w	8003a0c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d107      	bne.n	8003854 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0204 	bic.w	r2, r2, #4
 8003852:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	4b5f      	ldr	r3, [pc, #380]	@ (80039d8 <HAL_DMA_IRQHandler+0x1d8>)
 800385c:	429a      	cmp	r2, r3
 800385e:	d958      	bls.n	8003912 <HAL_DMA_IRQHandler+0x112>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5d      	ldr	r2, [pc, #372]	@ (80039dc <HAL_DMA_IRQHandler+0x1dc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d04f      	beq.n	800390a <HAL_DMA_IRQHandler+0x10a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5c      	ldr	r2, [pc, #368]	@ (80039e0 <HAL_DMA_IRQHandler+0x1e0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d048      	beq.n	8003906 <HAL_DMA_IRQHandler+0x106>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5a      	ldr	r2, [pc, #360]	@ (80039e4 <HAL_DMA_IRQHandler+0x1e4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d040      	beq.n	8003900 <HAL_DMA_IRQHandler+0x100>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a59      	ldr	r2, [pc, #356]	@ (80039e8 <HAL_DMA_IRQHandler+0x1e8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d038      	beq.n	80038fa <HAL_DMA_IRQHandler+0xfa>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a57      	ldr	r2, [pc, #348]	@ (80039ec <HAL_DMA_IRQHandler+0x1ec>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d030      	beq.n	80038f4 <HAL_DMA_IRQHandler+0xf4>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a56      	ldr	r2, [pc, #344]	@ (80039f0 <HAL_DMA_IRQHandler+0x1f0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d028      	beq.n	80038ee <HAL_DMA_IRQHandler+0xee>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a4d      	ldr	r2, [pc, #308]	@ (80039d8 <HAL_DMA_IRQHandler+0x1d8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d020      	beq.n	80038e8 <HAL_DMA_IRQHandler+0xe8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a52      	ldr	r2, [pc, #328]	@ (80039f4 <HAL_DMA_IRQHandler+0x1f4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d019      	beq.n	80038e4 <HAL_DMA_IRQHandler+0xe4>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a50      	ldr	r2, [pc, #320]	@ (80039f8 <HAL_DMA_IRQHandler+0x1f8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d012      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xe0>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a4f      	ldr	r2, [pc, #316]	@ (80039fc <HAL_DMA_IRQHandler+0x1fc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00a      	beq.n	80038da <HAL_DMA_IRQHandler+0xda>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003a00 <HAL_DMA_IRQHandler+0x200>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d102      	bne.n	80038d4 <HAL_DMA_IRQHandler+0xd4>
 80038ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80038d2:	e01b      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 80038d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80038d8:	e018      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 80038da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038de:	e015      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 80038e0:	2340      	movs	r3, #64	@ 0x40
 80038e2:	e013      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 80038e4:	2304      	movs	r3, #4
 80038e6:	e011      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 80038e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80038ec:	e00e      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 80038ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80038f2:	e00b      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 80038f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80038f8:	e008      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 80038fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80038fe:	e005      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 8003900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003904:	e002      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 8003906:	2340      	movs	r3, #64	@ 0x40
 8003908:	e000      	b.n	800390c <HAL_DMA_IRQHandler+0x10c>
 800390a:	2304      	movs	r3, #4
 800390c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a04 <HAL_DMA_IRQHandler+0x204>)
 800390e:	6053      	str	r3, [r2, #4]
 8003910:	e057      	b.n	80039c2 <HAL_DMA_IRQHandler+0x1c2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a31      	ldr	r2, [pc, #196]	@ (80039dc <HAL_DMA_IRQHandler+0x1dc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d04f      	beq.n	80039bc <HAL_DMA_IRQHandler+0x1bc>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2f      	ldr	r2, [pc, #188]	@ (80039e0 <HAL_DMA_IRQHandler+0x1e0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d048      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x1b8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2e      	ldr	r2, [pc, #184]	@ (80039e4 <HAL_DMA_IRQHandler+0x1e4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d040      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x1b2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a2c      	ldr	r2, [pc, #176]	@ (80039e8 <HAL_DMA_IRQHandler+0x1e8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d038      	beq.n	80039ac <HAL_DMA_IRQHandler+0x1ac>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2b      	ldr	r2, [pc, #172]	@ (80039ec <HAL_DMA_IRQHandler+0x1ec>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d030      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x1a6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a29      	ldr	r2, [pc, #164]	@ (80039f0 <HAL_DMA_IRQHandler+0x1f0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d028      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x1a0>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a21      	ldr	r2, [pc, #132]	@ (80039d8 <HAL_DMA_IRQHandler+0x1d8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d020      	beq.n	800399a <HAL_DMA_IRQHandler+0x19a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a25      	ldr	r2, [pc, #148]	@ (80039f4 <HAL_DMA_IRQHandler+0x1f4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d019      	beq.n	8003996 <HAL_DMA_IRQHandler+0x196>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a24      	ldr	r2, [pc, #144]	@ (80039f8 <HAL_DMA_IRQHandler+0x1f8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d012      	beq.n	8003992 <HAL_DMA_IRQHandler+0x192>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a22      	ldr	r2, [pc, #136]	@ (80039fc <HAL_DMA_IRQHandler+0x1fc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00a      	beq.n	800398c <HAL_DMA_IRQHandler+0x18c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a21      	ldr	r2, [pc, #132]	@ (8003a00 <HAL_DMA_IRQHandler+0x200>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d102      	bne.n	8003986 <HAL_DMA_IRQHandler+0x186>
 8003980:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003984:	e01b      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 8003986:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800398a:	e018      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 800398c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003990:	e015      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 8003992:	2340      	movs	r3, #64	@ 0x40
 8003994:	e013      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 8003996:	2304      	movs	r3, #4
 8003998:	e011      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 800399a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800399e:	e00e      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 80039a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80039a4:	e00b      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 80039a6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80039aa:	e008      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 80039ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039b0:	e005      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 80039b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039b6:	e002      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 80039b8:	2340      	movs	r3, #64	@ 0x40
 80039ba:	e000      	b.n	80039be <HAL_DMA_IRQHandler+0x1be>
 80039bc:	2304      	movs	r3, #4
 80039be:	4a12      	ldr	r2, [pc, #72]	@ (8003a08 <HAL_DMA_IRQHandler+0x208>)
 80039c0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 8136 	beq.w	8003c38 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80039d4:	e130      	b.n	8003c38 <HAL_DMA_IRQHandler+0x438>
 80039d6:	bf00      	nop
 80039d8:	40020080 	.word	0x40020080
 80039dc:	40020008 	.word	0x40020008
 80039e0:	4002001c 	.word	0x4002001c
 80039e4:	40020030 	.word	0x40020030
 80039e8:	40020044 	.word	0x40020044
 80039ec:	40020058 	.word	0x40020058
 80039f0:	4002006c 	.word	0x4002006c
 80039f4:	40020408 	.word	0x40020408
 80039f8:	4002041c 	.word	0x4002041c
 80039fc:	40020430 	.word	0x40020430
 8003a00:	40020444 	.word	0x40020444
 8003a04:	40020400 	.word	0x40020400
 8003a08:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	2202      	movs	r2, #2
 8003a12:	409a      	lsls	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80dd 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0x3d8>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80d7 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 020a 	bic.w	r2, r2, #10
 8003a46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b7b      	ldr	r3, [pc, #492]	@ (8003c44 <HAL_DMA_IRQHandler+0x444>)
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d958      	bls.n	8003b0e <HAL_DMA_IRQHandler+0x30e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a79      	ldr	r2, [pc, #484]	@ (8003c48 <HAL_DMA_IRQHandler+0x448>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d04f      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x306>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a78      	ldr	r2, [pc, #480]	@ (8003c4c <HAL_DMA_IRQHandler+0x44c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d048      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x302>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a76      	ldr	r2, [pc, #472]	@ (8003c50 <HAL_DMA_IRQHandler+0x450>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d040      	beq.n	8003afc <HAL_DMA_IRQHandler+0x2fc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a75      	ldr	r2, [pc, #468]	@ (8003c54 <HAL_DMA_IRQHandler+0x454>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d038      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x2f6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a73      	ldr	r2, [pc, #460]	@ (8003c58 <HAL_DMA_IRQHandler+0x458>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d030      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2f0>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a72      	ldr	r2, [pc, #456]	@ (8003c5c <HAL_DMA_IRQHandler+0x45c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d028      	beq.n	8003aea <HAL_DMA_IRQHandler+0x2ea>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a69      	ldr	r2, [pc, #420]	@ (8003c44 <HAL_DMA_IRQHandler+0x444>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d020      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x2e4>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8003c60 <HAL_DMA_IRQHandler+0x460>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d019      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x2e0>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a6c      	ldr	r2, [pc, #432]	@ (8003c64 <HAL_DMA_IRQHandler+0x464>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d012      	beq.n	8003adc <HAL_DMA_IRQHandler+0x2dc>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6b      	ldr	r2, [pc, #428]	@ (8003c68 <HAL_DMA_IRQHandler+0x468>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00a      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x2d6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a69      	ldr	r2, [pc, #420]	@ (8003c6c <HAL_DMA_IRQHandler+0x46c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d102      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x2d0>
 8003aca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ace:	e01b      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003ad0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ad4:	e018      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ada:	e015      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003adc:	2320      	movs	r3, #32
 8003ade:	e013      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e011      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003ae4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ae8:	e00e      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003aea:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003aee:	e00b      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003af0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003af4:	e008      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003afa:	e005      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003afc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b00:	e002      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003b02:	2320      	movs	r3, #32
 8003b04:	e000      	b.n	8003b08 <HAL_DMA_IRQHandler+0x308>
 8003b06:	2302      	movs	r3, #2
 8003b08:	4a59      	ldr	r2, [pc, #356]	@ (8003c70 <HAL_DMA_IRQHandler+0x470>)
 8003b0a:	6053      	str	r3, [r2, #4]
 8003b0c:	e057      	b.n	8003bbe <HAL_DMA_IRQHandler+0x3be>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a4d      	ldr	r2, [pc, #308]	@ (8003c48 <HAL_DMA_IRQHandler+0x448>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d04f      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x3b8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c4c <HAL_DMA_IRQHandler+0x44c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d048      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x3b4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a4a      	ldr	r2, [pc, #296]	@ (8003c50 <HAL_DMA_IRQHandler+0x450>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d040      	beq.n	8003bae <HAL_DMA_IRQHandler+0x3ae>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a48      	ldr	r2, [pc, #288]	@ (8003c54 <HAL_DMA_IRQHandler+0x454>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d038      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x3a8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a47      	ldr	r2, [pc, #284]	@ (8003c58 <HAL_DMA_IRQHandler+0x458>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d030      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x3a2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a45      	ldr	r2, [pc, #276]	@ (8003c5c <HAL_DMA_IRQHandler+0x45c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d028      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x39c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c44 <HAL_DMA_IRQHandler+0x444>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d020      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x396>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a41      	ldr	r2, [pc, #260]	@ (8003c60 <HAL_DMA_IRQHandler+0x460>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d019      	beq.n	8003b92 <HAL_DMA_IRQHandler+0x392>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a40      	ldr	r2, [pc, #256]	@ (8003c64 <HAL_DMA_IRQHandler+0x464>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d012      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x38e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3e      	ldr	r2, [pc, #248]	@ (8003c68 <HAL_DMA_IRQHandler+0x468>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00a      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x388>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a3d      	ldr	r2, [pc, #244]	@ (8003c6c <HAL_DMA_IRQHandler+0x46c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d102      	bne.n	8003b82 <HAL_DMA_IRQHandler+0x382>
 8003b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b80:	e01b      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003b82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b86:	e018      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b8c:	e015      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003b8e:	2320      	movs	r3, #32
 8003b90:	e013      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e011      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003b96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b9a:	e00e      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003b9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003ba0:	e00b      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003ba2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ba6:	e008      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bac:	e005      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003bae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bb2:	e002      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	e000      	b.n	8003bba <HAL_DMA_IRQHandler+0x3ba>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	4a2e      	ldr	r2, [pc, #184]	@ (8003c74 <HAL_DMA_IRQHandler+0x474>)
 8003bbc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d034      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bd6:	e02f      	b.n	8003c38 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	2208      	movs	r2, #8
 8003bde:	409a      	lsls	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d028      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x43a>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d023      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 020e 	bic.w	r2, r2, #14
 8003c00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c10:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
    }
  }
  return;
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
}
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40020080 	.word	0x40020080
 8003c48:	40020008 	.word	0x40020008
 8003c4c:	4002001c 	.word	0x4002001c
 8003c50:	40020030 	.word	0x40020030
 8003c54:	40020044 	.word	0x40020044
 8003c58:	40020058 	.word	0x40020058
 8003c5c:	4002006c 	.word	0x4002006c
 8003c60:	40020408 	.word	0x40020408
 8003c64:	4002041c 	.word	0x4002041c
 8003c68:	40020430 	.word	0x40020430
 8003c6c:	40020444 	.word	0x40020444
 8003c70:	40020400 	.word	0x40020400
 8003c74:	40020000 	.word	0x40020000

08003c78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8e:	2101      	movs	r1, #1
 8003c90:	fa01 f202 	lsl.w	r2, r1, r2
 8003c94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d108      	bne.n	8003cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cb6:	e007      	b.n	8003cc8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b08b      	sub	sp, #44	@ 0x2c
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ce6:	e179      	b.n	8003fdc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ce8:	2201      	movs	r2, #1
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f040 8168 	bne.w	8003fd6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4a96      	ldr	r2, [pc, #600]	@ (8003f64 <HAL_GPIO_Init+0x290>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d05e      	beq.n	8003dce <HAL_GPIO_Init+0xfa>
 8003d10:	4a94      	ldr	r2, [pc, #592]	@ (8003f64 <HAL_GPIO_Init+0x290>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d875      	bhi.n	8003e02 <HAL_GPIO_Init+0x12e>
 8003d16:	4a94      	ldr	r2, [pc, #592]	@ (8003f68 <HAL_GPIO_Init+0x294>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d058      	beq.n	8003dce <HAL_GPIO_Init+0xfa>
 8003d1c:	4a92      	ldr	r2, [pc, #584]	@ (8003f68 <HAL_GPIO_Init+0x294>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d86f      	bhi.n	8003e02 <HAL_GPIO_Init+0x12e>
 8003d22:	4a92      	ldr	r2, [pc, #584]	@ (8003f6c <HAL_GPIO_Init+0x298>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d052      	beq.n	8003dce <HAL_GPIO_Init+0xfa>
 8003d28:	4a90      	ldr	r2, [pc, #576]	@ (8003f6c <HAL_GPIO_Init+0x298>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d869      	bhi.n	8003e02 <HAL_GPIO_Init+0x12e>
 8003d2e:	4a90      	ldr	r2, [pc, #576]	@ (8003f70 <HAL_GPIO_Init+0x29c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d04c      	beq.n	8003dce <HAL_GPIO_Init+0xfa>
 8003d34:	4a8e      	ldr	r2, [pc, #568]	@ (8003f70 <HAL_GPIO_Init+0x29c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d863      	bhi.n	8003e02 <HAL_GPIO_Init+0x12e>
 8003d3a:	4a8e      	ldr	r2, [pc, #568]	@ (8003f74 <HAL_GPIO_Init+0x2a0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d046      	beq.n	8003dce <HAL_GPIO_Init+0xfa>
 8003d40:	4a8c      	ldr	r2, [pc, #560]	@ (8003f74 <HAL_GPIO_Init+0x2a0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d85d      	bhi.n	8003e02 <HAL_GPIO_Init+0x12e>
 8003d46:	2b12      	cmp	r3, #18
 8003d48:	d82a      	bhi.n	8003da0 <HAL_GPIO_Init+0xcc>
 8003d4a:	2b12      	cmp	r3, #18
 8003d4c:	d859      	bhi.n	8003e02 <HAL_GPIO_Init+0x12e>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <HAL_GPIO_Init+0x80>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003dcf 	.word	0x08003dcf
 8003d58:	08003da9 	.word	0x08003da9
 8003d5c:	08003dbb 	.word	0x08003dbb
 8003d60:	08003dfd 	.word	0x08003dfd
 8003d64:	08003e03 	.word	0x08003e03
 8003d68:	08003e03 	.word	0x08003e03
 8003d6c:	08003e03 	.word	0x08003e03
 8003d70:	08003e03 	.word	0x08003e03
 8003d74:	08003e03 	.word	0x08003e03
 8003d78:	08003e03 	.word	0x08003e03
 8003d7c:	08003e03 	.word	0x08003e03
 8003d80:	08003e03 	.word	0x08003e03
 8003d84:	08003e03 	.word	0x08003e03
 8003d88:	08003e03 	.word	0x08003e03
 8003d8c:	08003e03 	.word	0x08003e03
 8003d90:	08003e03 	.word	0x08003e03
 8003d94:	08003e03 	.word	0x08003e03
 8003d98:	08003db1 	.word	0x08003db1
 8003d9c:	08003dc5 	.word	0x08003dc5
 8003da0:	4a75      	ldr	r2, [pc, #468]	@ (8003f78 <HAL_GPIO_Init+0x2a4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d013      	beq.n	8003dce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003da6:	e02c      	b.n	8003e02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	623b      	str	r3, [r7, #32]
          break;
 8003dae:	e029      	b.n	8003e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	3304      	adds	r3, #4
 8003db6:	623b      	str	r3, [r7, #32]
          break;
 8003db8:	e024      	b.n	8003e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	623b      	str	r3, [r7, #32]
          break;
 8003dc2:	e01f      	b.n	8003e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	623b      	str	r3, [r7, #32]
          break;
 8003dcc:	e01a      	b.n	8003e04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	623b      	str	r3, [r7, #32]
          break;
 8003dda:	e013      	b.n	8003e04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d105      	bne.n	8003df0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003de4:	2308      	movs	r3, #8
 8003de6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	611a      	str	r2, [r3, #16]
          break;
 8003dee:	e009      	b.n	8003e04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003df0:	2308      	movs	r3, #8
 8003df2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	615a      	str	r2, [r3, #20]
          break;
 8003dfa:	e003      	b.n	8003e04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	623b      	str	r3, [r7, #32]
          break;
 8003e00:	e000      	b.n	8003e04 <HAL_GPIO_Init+0x130>
          break;
 8003e02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2bff      	cmp	r3, #255	@ 0xff
 8003e08:	d801      	bhi.n	8003e0e <HAL_GPIO_Init+0x13a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	e001      	b.n	8003e12 <HAL_GPIO_Init+0x13e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2bff      	cmp	r3, #255	@ 0xff
 8003e18:	d802      	bhi.n	8003e20 <HAL_GPIO_Init+0x14c>
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	e002      	b.n	8003e26 <HAL_GPIO_Init+0x152>
 8003e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e22:	3b08      	subs	r3, #8
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	210f      	movs	r1, #15
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	6a39      	ldr	r1, [r7, #32]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	431a      	orrs	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80c1 	beq.w	8003fd6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e54:	4b49      	ldr	r3, [pc, #292]	@ (8003f7c <HAL_GPIO_Init+0x2a8>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	4a48      	ldr	r2, [pc, #288]	@ (8003f7c <HAL_GPIO_Init+0x2a8>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6193      	str	r3, [r2, #24]
 8003e60:	4b46      	ldr	r3, [pc, #280]	@ (8003f7c <HAL_GPIO_Init+0x2a8>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e6c:	4a44      	ldr	r2, [pc, #272]	@ (8003f80 <HAL_GPIO_Init+0x2ac>)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	3302      	adds	r3, #2
 8003e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	220f      	movs	r2, #15
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3c      	ldr	r2, [pc, #240]	@ (8003f84 <HAL_GPIO_Init+0x2b0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d01f      	beq.n	8003ed8 <HAL_GPIO_Init+0x204>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f88 <HAL_GPIO_Init+0x2b4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d019      	beq.n	8003ed4 <HAL_GPIO_Init+0x200>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3a      	ldr	r2, [pc, #232]	@ (8003f8c <HAL_GPIO_Init+0x2b8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <HAL_GPIO_Init+0x1fc>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a39      	ldr	r2, [pc, #228]	@ (8003f90 <HAL_GPIO_Init+0x2bc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00d      	beq.n	8003ecc <HAL_GPIO_Init+0x1f8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a38      	ldr	r2, [pc, #224]	@ (8003f94 <HAL_GPIO_Init+0x2c0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <HAL_GPIO_Init+0x1f4>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a37      	ldr	r2, [pc, #220]	@ (8003f98 <HAL_GPIO_Init+0x2c4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_GPIO_Init+0x1f0>
 8003ec0:	2305      	movs	r3, #5
 8003ec2:	e00a      	b.n	8003eda <HAL_GPIO_Init+0x206>
 8003ec4:	2306      	movs	r3, #6
 8003ec6:	e008      	b.n	8003eda <HAL_GPIO_Init+0x206>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	e006      	b.n	8003eda <HAL_GPIO_Init+0x206>
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e004      	b.n	8003eda <HAL_GPIO_Init+0x206>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e002      	b.n	8003eda <HAL_GPIO_Init+0x206>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <HAL_GPIO_Init+0x206>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003edc:	f002 0203 	and.w	r2, r2, #3
 8003ee0:	0092      	lsls	r2, r2, #2
 8003ee2:	4093      	lsls	r3, r2
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003eea:	4925      	ldr	r1, [pc, #148]	@ (8003f80 <HAL_GPIO_Init+0x2ac>)
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	089b      	lsrs	r3, r3, #2
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d006      	beq.n	8003f12 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f04:	4b25      	ldr	r3, [pc, #148]	@ (8003f9c <HAL_GPIO_Init+0x2c8>)
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	4924      	ldr	r1, [pc, #144]	@ (8003f9c <HAL_GPIO_Init+0x2c8>)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	608b      	str	r3, [r1, #8]
 8003f10:	e006      	b.n	8003f20 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f12:	4b22      	ldr	r3, [pc, #136]	@ (8003f9c <HAL_GPIO_Init+0x2c8>)
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	4920      	ldr	r1, [pc, #128]	@ (8003f9c <HAL_GPIO_Init+0x2c8>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <HAL_GPIO_Init+0x2c8>)
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	491a      	ldr	r1, [pc, #104]	@ (8003f9c <HAL_GPIO_Init+0x2c8>)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60cb      	str	r3, [r1, #12]
 8003f38:	e006      	b.n	8003f48 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f3a:	4b18      	ldr	r3, [pc, #96]	@ (8003f9c <HAL_GPIO_Init+0x2c8>)
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	4916      	ldr	r1, [pc, #88]	@ (8003f9c <HAL_GPIO_Init+0x2c8>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d025      	beq.n	8003fa0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f54:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <HAL_GPIO_Init+0x2c8>)
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4910      	ldr	r1, [pc, #64]	@ (8003f9c <HAL_GPIO_Init+0x2c8>)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
 8003f60:	e025      	b.n	8003fae <HAL_GPIO_Init+0x2da>
 8003f62:	bf00      	nop
 8003f64:	10320000 	.word	0x10320000
 8003f68:	10310000 	.word	0x10310000
 8003f6c:	10220000 	.word	0x10220000
 8003f70:	10210000 	.word	0x10210000
 8003f74:	10120000 	.word	0x10120000
 8003f78:	10110000 	.word	0x10110000
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40010800 	.word	0x40010800
 8003f88:	40010c00 	.word	0x40010c00
 8003f8c:	40011000 	.word	0x40011000
 8003f90:	40011400 	.word	0x40011400
 8003f94:	40011800 	.word	0x40011800
 8003f98:	40011c00 	.word	0x40011c00
 8003f9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003fa0:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <HAL_GPIO_Init+0x324>)
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	4913      	ldr	r1, [pc, #76]	@ (8003ff8 <HAL_GPIO_Init+0x324>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d006      	beq.n	8003fc8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fba:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff8 <HAL_GPIO_Init+0x324>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	490e      	ldr	r1, [pc, #56]	@ (8003ff8 <HAL_GPIO_Init+0x324>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
 8003fc6:	e006      	b.n	8003fd6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff8 <HAL_GPIO_Init+0x324>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	4909      	ldr	r1, [pc, #36]	@ (8003ff8 <HAL_GPIO_Init+0x324>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	3301      	adds	r3, #1
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f47f ae7e 	bne.w	8003ce8 <HAL_GPIO_Init+0x14>
  }
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	372c      	adds	r7, #44	@ 0x2c
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	40010400 	.word	0x40010400

08003ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	887b      	ldrh	r3, [r7, #2]
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	e001      	b.n	800401e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800401e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	807b      	strh	r3, [r7, #2]
 8004036:	4613      	mov	r3, r2
 8004038:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800403a:	787b      	ldrb	r3, [r7, #1]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004040:	887a      	ldrh	r2, [r7, #2]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004046:	e003      	b.n	8004050 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004048:	887b      	ldrh	r3, [r7, #2]
 800404a:	041a      	lsls	r2, r3, #16
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	611a      	str	r2, [r3, #16]
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
	...

0800405c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e12b      	b.n	80042c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd ff4c 	bl	8001f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	@ 0x24
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040c0:	f000 fcdc 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 80040c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4a81      	ldr	r2, [pc, #516]	@ (80042d0 <HAL_I2C_Init+0x274>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d807      	bhi.n	80040e0 <HAL_I2C_Init+0x84>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a80      	ldr	r2, [pc, #512]	@ (80042d4 <HAL_I2C_Init+0x278>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	bf94      	ite	ls
 80040d8:	2301      	movls	r3, #1
 80040da:	2300      	movhi	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e006      	b.n	80040ee <HAL_I2C_Init+0x92>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a7d      	ldr	r2, [pc, #500]	@ (80042d8 <HAL_I2C_Init+0x27c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	bf94      	ite	ls
 80040e8:	2301      	movls	r3, #1
 80040ea:	2300      	movhi	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0e7      	b.n	80042c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a78      	ldr	r2, [pc, #480]	@ (80042dc <HAL_I2C_Init+0x280>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0c9b      	lsrs	r3, r3, #18
 8004100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a6a      	ldr	r2, [pc, #424]	@ (80042d0 <HAL_I2C_Init+0x274>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d802      	bhi.n	8004130 <HAL_I2C_Init+0xd4>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	3301      	adds	r3, #1
 800412e:	e009      	b.n	8004144 <HAL_I2C_Init+0xe8>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	4a69      	ldr	r2, [pc, #420]	@ (80042e0 <HAL_I2C_Init+0x284>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	099b      	lsrs	r3, r3, #6
 8004142:	3301      	adds	r3, #1
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	430b      	orrs	r3, r1
 800414a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004156:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	495c      	ldr	r1, [pc, #368]	@ (80042d0 <HAL_I2C_Init+0x274>)
 8004160:	428b      	cmp	r3, r1
 8004162:	d819      	bhi.n	8004198 <HAL_I2C_Init+0x13c>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1e59      	subs	r1, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004172:	1c59      	adds	r1, r3, #1
 8004174:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004178:	400b      	ands	r3, r1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_I2C_Init+0x138>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1e59      	subs	r1, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	fbb1 f3f3 	udiv	r3, r1, r3
 800418c:	3301      	adds	r3, #1
 800418e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004192:	e051      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 8004194:	2304      	movs	r3, #4
 8004196:	e04f      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d111      	bne.n	80041c4 <HAL_I2C_Init+0x168>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e58      	subs	r0, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	440b      	add	r3, r1
 80041ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b2:	3301      	adds	r3, #1
 80041b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	e012      	b.n	80041ea <HAL_I2C_Init+0x18e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1e58      	subs	r0, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	0099      	lsls	r1, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Init+0x196>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e022      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10e      	bne.n	8004218 <HAL_I2C_Init+0x1bc>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1e58      	subs	r0, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	440b      	add	r3, r1
 8004208:	fbb0 f3f3 	udiv	r3, r0, r3
 800420c:	3301      	adds	r3, #1
 800420e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004216:	e00f      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1e58      	subs	r0, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	0099      	lsls	r1, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	fbb0 f3f3 	udiv	r3, r0, r3
 800422e:	3301      	adds	r3, #1
 8004230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	6809      	ldr	r1, [r1, #0]
 800423c:	4313      	orrs	r3, r2
 800423e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004266:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6911      	ldr	r1, [r2, #16]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68d2      	ldr	r2, [r2, #12]
 8004272:	4311      	orrs	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	000186a0 	.word	0x000186a0
 80042d4:	001e847f 	.word	0x001e847f
 80042d8:	003d08ff 	.word	0x003d08ff
 80042dc:	431bde83 	.word	0x431bde83
 80042e0:	10624dd3 	.word	0x10624dd3

080042e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e272      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8087 	beq.w	8004412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004304:	4b92      	ldr	r3, [pc, #584]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b04      	cmp	r3, #4
 800430e:	d00c      	beq.n	800432a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004310:	4b8f      	ldr	r3, [pc, #572]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b08      	cmp	r3, #8
 800431a:	d112      	bne.n	8004342 <HAL_RCC_OscConfig+0x5e>
 800431c:	4b8c      	ldr	r3, [pc, #560]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004328:	d10b      	bne.n	8004342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432a:	4b89      	ldr	r3, [pc, #548]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d06c      	beq.n	8004410 <HAL_RCC_OscConfig+0x12c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d168      	bne.n	8004410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e24c      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x76>
 800434c:	4b80      	ldr	r3, [pc, #512]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a7f      	ldr	r2, [pc, #508]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	e02e      	b.n	80043b8 <HAL_RCC_OscConfig+0xd4>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x98>
 8004362:	4b7b      	ldr	r3, [pc, #492]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a7a      	ldr	r2, [pc, #488]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b78      	ldr	r3, [pc, #480]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a77      	ldr	r2, [pc, #476]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004374:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e01d      	b.n	80043b8 <HAL_RCC_OscConfig+0xd4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0xbc>
 8004386:	4b72      	ldr	r3, [pc, #456]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a71      	ldr	r2, [pc, #452]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b6f      	ldr	r3, [pc, #444]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6e      	ldr	r2, [pc, #440]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0xd4>
 80043a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b68      	ldr	r3, [pc, #416]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a67      	ldr	r2, [pc, #412]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 80043b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fe fcc8 	bl	8002d54 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fe fcc4 	bl	8002d54 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	@ 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e200      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b5d      	ldr	r3, [pc, #372]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0xe4>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fe fcb4 	bl	8002d54 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fe fcb0 	bl	8002d54 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	@ 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1ec      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	4b53      	ldr	r3, [pc, #332]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x10c>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d063      	beq.n	80044e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800441e:	4b4c      	ldr	r3, [pc, #304]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800442a:	4b49      	ldr	r3, [pc, #292]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b08      	cmp	r3, #8
 8004434:	d11c      	bne.n	8004470 <HAL_RCC_OscConfig+0x18c>
 8004436:	4b46      	ldr	r3, [pc, #280]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	4b43      	ldr	r3, [pc, #268]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x176>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e1c0      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445a:	4b3d      	ldr	r3, [pc, #244]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4939      	ldr	r1, [pc, #228]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	e03a      	b.n	80044e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004478:	4b36      	ldr	r3, [pc, #216]	@ (8004554 <HAL_RCC_OscConfig+0x270>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fe fc69 	bl	8002d54 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004486:	f7fe fc65 	bl	8002d54 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e1a1      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	4b2d      	ldr	r3, [pc, #180]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4927      	ldr	r1, [pc, #156]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]
 80044b8:	e015      	b.n	80044e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	4b26      	ldr	r3, [pc, #152]	@ (8004554 <HAL_RCC_OscConfig+0x270>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fe fc48 	bl	8002d54 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c8:	f7fe fc44 	bl	8002d54 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e180      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044da:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d03a      	beq.n	8004568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d019      	beq.n	800452e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fa:	4b17      	ldr	r3, [pc, #92]	@ (8004558 <HAL_RCC_OscConfig+0x274>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004500:	f7fe fc28 	bl	8002d54 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004508:	f7fe fc24 	bl	8002d54 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e160      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451a:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <HAL_RCC_OscConfig+0x26c>)
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004526:	2001      	movs	r0, #1
 8004528:	f000 fad0 	bl	8004acc <RCC_Delay>
 800452c:	e01c      	b.n	8004568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800452e:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <HAL_RCC_OscConfig+0x274>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004534:	f7fe fc0e 	bl	8002d54 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800453a:	e00f      	b.n	800455c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800453c:	f7fe fc0a 	bl	8002d54 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d908      	bls.n	800455c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e146      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	42420000 	.word	0x42420000
 8004558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455c:	4b92      	ldr	r3, [pc, #584]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e9      	bne.n	800453c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a6 	beq.w	80046c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457a:	4b8b      	ldr	r3, [pc, #556]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	4b88      	ldr	r3, [pc, #544]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4a87      	ldr	r2, [pc, #540]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004590:	61d3      	str	r3, [r2, #28]
 8004592:	4b85      	ldr	r3, [pc, #532]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a2:	4b82      	ldr	r3, [pc, #520]	@ (80047ac <HAL_RCC_OscConfig+0x4c8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d118      	bne.n	80045e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ae:	4b7f      	ldr	r3, [pc, #508]	@ (80047ac <HAL_RCC_OscConfig+0x4c8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7e      	ldr	r2, [pc, #504]	@ (80047ac <HAL_RCC_OscConfig+0x4c8>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ba:	f7fe fbcb 	bl	8002d54 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fe fbc7 	bl	8002d54 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	@ 0x64
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e103      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	4b75      	ldr	r3, [pc, #468]	@ (80047ac <HAL_RCC_OscConfig+0x4c8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d106      	bne.n	80045f6 <HAL_RCC_OscConfig+0x312>
 80045e8:	4b6f      	ldr	r3, [pc, #444]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4a6e      	ldr	r2, [pc, #440]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6213      	str	r3, [r2, #32]
 80045f4:	e02d      	b.n	8004652 <HAL_RCC_OscConfig+0x36e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x334>
 80045fe:	4b6a      	ldr	r3, [pc, #424]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	4a69      	ldr	r2, [pc, #420]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	6213      	str	r3, [r2, #32]
 800460a:	4b67      	ldr	r3, [pc, #412]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4a66      	ldr	r2, [pc, #408]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	6213      	str	r3, [r2, #32]
 8004616:	e01c      	b.n	8004652 <HAL_RCC_OscConfig+0x36e>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b05      	cmp	r3, #5
 800461e:	d10c      	bne.n	800463a <HAL_RCC_OscConfig+0x356>
 8004620:	4b61      	ldr	r3, [pc, #388]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	4a60      	ldr	r2, [pc, #384]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004626:	f043 0304 	orr.w	r3, r3, #4
 800462a:	6213      	str	r3, [r2, #32]
 800462c:	4b5e      	ldr	r3, [pc, #376]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	4a5d      	ldr	r2, [pc, #372]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6213      	str	r3, [r2, #32]
 8004638:	e00b      	b.n	8004652 <HAL_RCC_OscConfig+0x36e>
 800463a:	4b5b      	ldr	r3, [pc, #364]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	4a5a      	ldr	r2, [pc, #360]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	6213      	str	r3, [r2, #32]
 8004646:	4b58      	ldr	r3, [pc, #352]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	4a57      	ldr	r2, [pc, #348]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d015      	beq.n	8004686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465a:	f7fe fb7b 	bl	8002d54 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fe fb77 	bl	8002d54 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0b1      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	4b4b      	ldr	r3, [pc, #300]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ee      	beq.n	8004662 <HAL_RCC_OscConfig+0x37e>
 8004684:	e014      	b.n	80046b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004686:	f7fe fb65 	bl	8002d54 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fe fb61 	bl	8002d54 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e09b      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a4:	4b40      	ldr	r3, [pc, #256]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ee      	bne.n	800468e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d105      	bne.n	80046c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b6:	4b3c      	ldr	r3, [pc, #240]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4a3b      	ldr	r2, [pc, #236]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 8087 	beq.w	80047da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046cc:	4b36      	ldr	r3, [pc, #216]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d061      	beq.n	800479c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d146      	bne.n	800476e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e0:	4b33      	ldr	r3, [pc, #204]	@ (80047b0 <HAL_RCC_OscConfig+0x4cc>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e6:	f7fe fb35 	bl	8002d54 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ee:	f7fe fb31 	bl	8002d54 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e06d      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004700:	4b29      	ldr	r3, [pc, #164]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004714:	d108      	bne.n	8004728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004716:	4b24      	ldr	r3, [pc, #144]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	4921      	ldr	r1, [pc, #132]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004728:	4b1f      	ldr	r3, [pc, #124]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a19      	ldr	r1, [r3, #32]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	430b      	orrs	r3, r1
 800473a:	491b      	ldr	r1, [pc, #108]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004740:	4b1b      	ldr	r3, [pc, #108]	@ (80047b0 <HAL_RCC_OscConfig+0x4cc>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fe fb05 	bl	8002d54 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474e:	f7fe fb01 	bl	8002d54 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e03d      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004760:	4b11      	ldr	r3, [pc, #68]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x46a>
 800476c:	e035      	b.n	80047da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476e:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <HAL_RCC_OscConfig+0x4cc>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fe faee 	bl	8002d54 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477c:	f7fe faea 	bl	8002d54 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e026      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <HAL_RCC_OscConfig+0x4c4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x498>
 800479a:	e01e      	b.n	80047da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e019      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40007000 	.word	0x40007000
 80047b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047b4:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <HAL_RCC_OscConfig+0x500>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d001      	beq.n	80047da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40021000 	.word	0x40021000

080047e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0d0      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047fc:	4b6a      	ldr	r3, [pc, #424]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d910      	bls.n	800482c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b67      	ldr	r3, [pc, #412]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 0207 	bic.w	r2, r3, #7
 8004812:	4965      	ldr	r1, [pc, #404]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b63      	ldr	r3, [pc, #396]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0b8      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004844:	4b59      	ldr	r3, [pc, #356]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a58      	ldr	r2, [pc, #352]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800484e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800485c:	4b53      	ldr	r3, [pc, #332]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a52      	ldr	r2, [pc, #328]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b50      	ldr	r3, [pc, #320]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	494d      	ldr	r1, [pc, #308]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d040      	beq.n	8004908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	4b47      	ldr	r3, [pc, #284]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d115      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e07f      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a6:	4b41      	ldr	r3, [pc, #260]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e073      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b6:	4b3d      	ldr	r3, [pc, #244]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e06b      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048c6:	4b39      	ldr	r3, [pc, #228]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f023 0203 	bic.w	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4936      	ldr	r1, [pc, #216]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048d8:	f7fe fa3c 	bl	8002d54 <HAL_GetTick>
 80048dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e0:	f7fe fa38 	bl	8002d54 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e053      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	4b2d      	ldr	r3, [pc, #180]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 020c 	and.w	r2, r3, #12
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	429a      	cmp	r2, r3
 8004906:	d1eb      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004908:	4b27      	ldr	r3, [pc, #156]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d210      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004916:	4b24      	ldr	r3, [pc, #144]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 0207 	bic.w	r2, r3, #7
 800491e:	4922      	ldr	r1, [pc, #136]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e032      	b.n	800499e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004944:	4b19      	ldr	r3, [pc, #100]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4916      	ldr	r1, [pc, #88]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004962:	4b12      	ldr	r3, [pc, #72]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	490e      	ldr	r1, [pc, #56]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	4313      	orrs	r3, r2
 8004974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004976:	f000 f821 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 800497a:	4602      	mov	r2, r0
 800497c:	4b0b      	ldr	r3, [pc, #44]	@ (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	490a      	ldr	r1, [pc, #40]	@ (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004988:	5ccb      	ldrb	r3, [r1, r3]
 800498a:	fa22 f303 	lsr.w	r3, r2, r3
 800498e:	4a09      	ldr	r2, [pc, #36]	@ (80049b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004992:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe f99a 	bl	8002cd0 <HAL_InitTick>

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40022000 	.word	0x40022000
 80049ac:	40021000 	.word	0x40021000
 80049b0:	080088f8 	.word	0x080088f8
 80049b4:	20000000 	.word	0x20000000
 80049b8:	20000004 	.word	0x20000004

080049bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	2300      	movs	r3, #0
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x94>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d002      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x30>
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d003      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x36>
 80049ea:	e027      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049ec:	4b19      	ldr	r3, [pc, #100]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ee:	613b      	str	r3, [r7, #16]
      break;
 80049f0:	e027      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	0c9b      	lsrs	r3, r3, #18
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	4a17      	ldr	r2, [pc, #92]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049fc:	5cd3      	ldrb	r3, [r2, r3]
 80049fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a0a:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	0c5b      	lsrs	r3, r3, #17
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	4a11      	ldr	r2, [pc, #68]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a16:	5cd3      	ldrb	r3, [r2, r3]
 8004a18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a1e:	fb03 f202 	mul.w	r2, r3, r2
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e004      	b.n	8004a36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a30:	fb02 f303 	mul.w	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	613b      	str	r3, [r7, #16]
      break;
 8004a3a:	e002      	b.n	8004a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b09      	ldr	r3, [pc, #36]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004a3e:	613b      	str	r3, [r7, #16]
      break;
 8004a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a42:	693b      	ldr	r3, [r7, #16]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40021000 	.word	0x40021000
 8004a54:	00b71b00 	.word	0x00b71b00
 8004a58:	08008910 	.word	0x08008910
 8004a5c:	08008920 	.word	0x08008920
 8004a60:	003d0900 	.word	0x003d0900
 8004a64:	007a1200 	.word	0x007a1200

08004a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a6c:	4b02      	ldr	r3, [pc, #8]	@ (8004a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	20000000 	.word	0x20000000

08004a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a80:	f7ff fff2 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	0a1b      	lsrs	r3, r3, #8
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	4903      	ldr	r1, [pc, #12]	@ (8004aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a92:	5ccb      	ldrb	r3, [r1, r3]
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	08008908 	.word	0x08008908

08004aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aa8:	f7ff ffde 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	0adb      	lsrs	r3, r3, #11
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4903      	ldr	r1, [pc, #12]	@ (8004ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	08008908 	.word	0x08008908

08004acc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <RCC_Delay+0x34>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8004b04 <RCC_Delay+0x38>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0a5b      	lsrs	r3, r3, #9
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ae8:	bf00      	nop
  }
  while (Delay --);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1e5a      	subs	r2, r3, #1
 8004aee:	60fa      	str	r2, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f9      	bne.n	8004ae8 <RCC_Delay+0x1c>
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr
 8004b00:	20000000 	.word	0x20000000
 8004b04:	10624dd3 	.word	0x10624dd3

08004b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d07d      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b24:	2300      	movs	r3, #0
 8004b26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b28:	4b4f      	ldr	r3, [pc, #316]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10d      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b34:	4b4c      	ldr	r3, [pc, #304]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	4a4b      	ldr	r2, [pc, #300]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	61d3      	str	r3, [r2, #28]
 8004b40:	4b49      	ldr	r3, [pc, #292]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b50:	4b46      	ldr	r3, [pc, #280]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d118      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b5c:	4b43      	ldr	r3, [pc, #268]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a42      	ldr	r2, [pc, #264]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b68:	f7fe f8f4 	bl	8002d54 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6e:	e008      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b70:	f7fe f8f0 	bl	8002d54 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	@ 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e06d      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b82:	4b3a      	ldr	r3, [pc, #232]	@ (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b8e:	4b36      	ldr	r3, [pc, #216]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02e      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d027      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bac:	4b2e      	ldr	r3, [pc, #184]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bc2:	4a29      	ldr	r2, [pc, #164]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d014      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd2:	f7fe f8bf 	bl	8002d54 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bda:	f7fe f8bb 	bl	8002d54 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e036      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0ee      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	4917      	ldr	r1, [pc, #92]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c14:	4b14      	ldr	r3, [pc, #80]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	4a13      	ldr	r2, [pc, #76]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	490b      	ldr	r1, [pc, #44]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c4a:	4b07      	ldr	r3, [pc, #28]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	4904      	ldr	r1, [pc, #16]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40007000 	.word	0x40007000
 8004c70:	42420440 	.word	0x42420440

08004c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e041      	b.n	8004d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fd fca4 	bl	80025e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f000 fdb4 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d001      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e04e      	b.n	8004dca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a22      	ldr	r2, [pc, #136]	@ (8004dd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d022      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a21      	ldr	r2, [pc, #132]	@ (8004dd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d01d      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d60:	d018      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1d      	ldr	r2, [pc, #116]	@ (8004ddc <HAL_TIM_Base_Start_IT+0xc8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1b      	ldr	r2, [pc, #108]	@ (8004de0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00e      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004de4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a18      	ldr	r2, [pc, #96]	@ (8004de8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x80>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a17      	ldr	r2, [pc, #92]	@ (8004dec <HAL_TIM_Base_Start_IT+0xd8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d111      	bne.n	8004db8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d010      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	e007      	b.n	8004dc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40014c00 	.word	0x40014c00
 8004dec:	40001800 	.word	0x40001800

08004df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e041      	b.n	8004e86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fd fc48 	bl	80026ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f000 fcf6 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e041      	b.n	8004f24 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f839 	bl	8004f2c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f000 fca7 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_IC_Start_IT+0x1e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	e013      	b.n	8004f86 <HAL_TIM_IC_Start_IT+0x46>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_IC_Start_IT+0x2e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	e00b      	b.n	8004f86 <HAL_TIM_IC_Start_IT+0x46>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_IC_Start_IT+0x3e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	e003      	b.n	8004f86 <HAL_TIM_IC_Start_IT+0x46>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d104      	bne.n	8004f98 <HAL_TIM_IC_Start_IT+0x58>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e013      	b.n	8004fc0 <HAL_TIM_IC_Start_IT+0x80>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d104      	bne.n	8004fa8 <HAL_TIM_IC_Start_IT+0x68>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	e00b      	b.n	8004fc0 <HAL_TIM_IC_Start_IT+0x80>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d104      	bne.n	8004fb8 <HAL_TIM_IC_Start_IT+0x78>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	e003      	b.n	8004fc0 <HAL_TIM_IC_Start_IT+0x80>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fc2:	7bbb      	ldrb	r3, [r7, #14]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d102      	bne.n	8004fce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fc8:	7b7b      	ldrb	r3, [r7, #13]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d001      	beq.n	8004fd2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0cc      	b.n	800516c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d104      	bne.n	8004fe2 <HAL_TIM_IC_Start_IT+0xa2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe0:	e013      	b.n	800500a <HAL_TIM_IC_Start_IT+0xca>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d104      	bne.n	8004ff2 <HAL_TIM_IC_Start_IT+0xb2>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ff0:	e00b      	b.n	800500a <HAL_TIM_IC_Start_IT+0xca>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_IC_Start_IT+0xc2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005000:	e003      	b.n	800500a <HAL_TIM_IC_Start_IT+0xca>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <HAL_TIM_IC_Start_IT+0xda>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005018:	e013      	b.n	8005042 <HAL_TIM_IC_Start_IT+0x102>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b04      	cmp	r3, #4
 800501e:	d104      	bne.n	800502a <HAL_TIM_IC_Start_IT+0xea>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005028:	e00b      	b.n	8005042 <HAL_TIM_IC_Start_IT+0x102>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d104      	bne.n	800503a <HAL_TIM_IC_Start_IT+0xfa>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005038:	e003      	b.n	8005042 <HAL_TIM_IC_Start_IT+0x102>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b0c      	cmp	r3, #12
 8005046:	d841      	bhi.n	80050cc <HAL_TIM_IC_Start_IT+0x18c>
 8005048:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <HAL_TIM_IC_Start_IT+0x110>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	08005085 	.word	0x08005085
 8005054:	080050cd 	.word	0x080050cd
 8005058:	080050cd 	.word	0x080050cd
 800505c:	080050cd 	.word	0x080050cd
 8005060:	08005097 	.word	0x08005097
 8005064:	080050cd 	.word	0x080050cd
 8005068:	080050cd 	.word	0x080050cd
 800506c:	080050cd 	.word	0x080050cd
 8005070:	080050a9 	.word	0x080050a9
 8005074:	080050cd 	.word	0x080050cd
 8005078:	080050cd 	.word	0x080050cd
 800507c:	080050cd 	.word	0x080050cd
 8005080:	080050bb 	.word	0x080050bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0202 	orr.w	r2, r2, #2
 8005092:	60da      	str	r2, [r3, #12]
      break;
 8005094:	e01d      	b.n	80050d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0204 	orr.w	r2, r2, #4
 80050a4:	60da      	str	r2, [r3, #12]
      break;
 80050a6:	e014      	b.n	80050d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	60da      	str	r2, [r3, #12]
      break;
 80050b8:	e00b      	b.n	80050d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0210 	orr.w	r2, r2, #16
 80050c8:	60da      	str	r2, [r3, #12]
      break;
 80050ca:	e002      	b.n	80050d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	73fb      	strb	r3, [r7, #15]
      break;
 80050d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d148      	bne.n	800516a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2201      	movs	r2, #1
 80050de:	6839      	ldr	r1, [r7, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 ffa2 	bl	800602a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a22      	ldr	r2, [pc, #136]	@ (8005174 <HAL_TIM_IC_Start_IT+0x234>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d022      	beq.n	8005136 <HAL_TIM_IC_Start_IT+0x1f6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a20      	ldr	r2, [pc, #128]	@ (8005178 <HAL_TIM_IC_Start_IT+0x238>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01d      	beq.n	8005136 <HAL_TIM_IC_Start_IT+0x1f6>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005102:	d018      	beq.n	8005136 <HAL_TIM_IC_Start_IT+0x1f6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1c      	ldr	r2, [pc, #112]	@ (800517c <HAL_TIM_IC_Start_IT+0x23c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_TIM_IC_Start_IT+0x1f6>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <HAL_TIM_IC_Start_IT+0x240>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_TIM_IC_Start_IT+0x1f6>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a19      	ldr	r2, [pc, #100]	@ (8005184 <HAL_TIM_IC_Start_IT+0x244>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_TIM_IC_Start_IT+0x1f6>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <HAL_TIM_IC_Start_IT+0x248>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_TIM_IC_Start_IT+0x1f6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a16      	ldr	r2, [pc, #88]	@ (800518c <HAL_TIM_IC_Start_IT+0x24c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d111      	bne.n	800515a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b06      	cmp	r3, #6
 8005146:	d010      	beq.n	800516a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	e007      	b.n	800516a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800516a:	7bfb      	ldrb	r3, [r7, #15]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40013400 	.word	0x40013400
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800
 8005184:	40000c00 	.word	0x40000c00
 8005188:	40014c00 	.word	0x40014c00
 800518c:	40001800 	.word	0x40001800

08005190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d122      	bne.n	80051ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d11b      	bne.n	80051ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0202 	mvn.w	r2, #2
 80051bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fd f840 	bl	8002258 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fb05 	bl	80057ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fb0b 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d122      	bne.n	8005240 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b04      	cmp	r3, #4
 8005206:	d11b      	bne.n	8005240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0204 	mvn.w	r2, #4
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fd f816 	bl	8002258 <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fadb 	bl	80057ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fae1 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b08      	cmp	r3, #8
 800524c:	d122      	bne.n	8005294 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d11b      	bne.n	8005294 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0208 	mvn.w	r2, #8
 8005264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2204      	movs	r2, #4
 800526a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fc ffec 	bl	8002258 <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fab1 	bl	80057ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fab7 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d122      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0210 	mvn.w	r2, #16
 80052b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2208      	movs	r2, #8
 80052be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fc ffc2 	bl	8002258 <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa87 	bl	80057ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fa8d 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d10e      	bne.n	8005314 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d107      	bne.n	8005314 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0201 	mvn.w	r2, #1
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fc fc7e 	bl	8001c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	2b80      	cmp	r3, #128	@ 0x80
 8005320:	d10e      	bne.n	8005340 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532c:	2b80      	cmp	r3, #128	@ 0x80
 800532e:	d107      	bne.n	8005340 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 ff1d 	bl	800617a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534a:	2b40      	cmp	r3, #64	@ 0x40
 800534c:	d10e      	bne.n	800536c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005358:	2b40      	cmp	r3, #64	@ 0x40
 800535a:	d107      	bne.n	800536c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fa51 	bl	800580e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b20      	cmp	r3, #32
 8005378:	d10e      	bne.n	8005398 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b20      	cmp	r3, #32
 8005386:	d107      	bne.n	8005398 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0220 	mvn.w	r2, #32
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fee8 	bl	8006168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_TIM_IC_ConfigChannel+0x1e>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e088      	b.n	80054d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d11b      	bne.n	8005404 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80053dc:	f000 fc6a 	bl	8005cb4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 020c 	bic.w	r2, r2, #12
 80053ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6999      	ldr	r1, [r3, #24]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	619a      	str	r2, [r3, #24]
 8005402:	e060      	b.n	80054c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b04      	cmp	r3, #4
 8005408:	d11c      	bne.n	8005444 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800541a:	f000 fceb 	bl	8005df4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800542c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6999      	ldr	r1, [r3, #24]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	021a      	lsls	r2, r3, #8
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	619a      	str	r2, [r3, #24]
 8005442:	e040      	b.n	80054c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b08      	cmp	r3, #8
 8005448:	d11b      	bne.n	8005482 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800545a:	f000 fd36 	bl	8005eca <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 020c 	bic.w	r2, r2, #12
 800546c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69d9      	ldr	r1, [r3, #28]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	61da      	str	r2, [r3, #28]
 8005480:	e021      	b.n	80054c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b0c      	cmp	r3, #12
 8005486:	d11c      	bne.n	80054c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005498:	f000 fd52 	bl	8005f40 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69da      	ldr	r2, [r3, #28]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80054aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69d9      	ldr	r1, [r3, #28]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	021a      	lsls	r2, r3, #8
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	61da      	str	r2, [r3, #28]
 80054c0:	e001      	b.n	80054c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e0ae      	b.n	8005654 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b0c      	cmp	r3, #12
 8005502:	f200 809f 	bhi.w	8005644 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005506:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005541 	.word	0x08005541
 8005510:	08005645 	.word	0x08005645
 8005514:	08005645 	.word	0x08005645
 8005518:	08005645 	.word	0x08005645
 800551c:	08005581 	.word	0x08005581
 8005520:	08005645 	.word	0x08005645
 8005524:	08005645 	.word	0x08005645
 8005528:	08005645 	.word	0x08005645
 800552c:	080055c3 	.word	0x080055c3
 8005530:	08005645 	.word	0x08005645
 8005534:	08005645 	.word	0x08005645
 8005538:	08005645 	.word	0x08005645
 800553c:	08005603 	.word	0x08005603
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fa08 	bl	800595c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0208 	orr.w	r2, r2, #8
 800555a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0204 	bic.w	r2, r2, #4
 800556a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6999      	ldr	r1, [r3, #24]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	619a      	str	r2, [r3, #24]
      break;
 800557e:	e064      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fa58 	bl	8005a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800559a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6999      	ldr	r1, [r3, #24]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	021a      	lsls	r2, r3, #8
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	619a      	str	r2, [r3, #24]
      break;
 80055c0:	e043      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 faab 	bl	8005b24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0208 	orr.w	r2, r2, #8
 80055dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0204 	bic.w	r2, r2, #4
 80055ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69d9      	ldr	r1, [r3, #28]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	61da      	str	r2, [r3, #28]
      break;
 8005600:	e023      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 faff 	bl	8005c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800561c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800562c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69d9      	ldr	r1, [r3, #28]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	021a      	lsls	r2, r3, #8
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	61da      	str	r2, [r3, #28]
      break;
 8005642:	e002      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	75fb      	strb	r3, [r7, #23]
      break;
 8005648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIM_ConfigClockSource+0x1c>
 8005674:	2302      	movs	r3, #2
 8005676:	e0b4      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x186>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800569e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056b0:	d03e      	beq.n	8005730 <HAL_TIM_ConfigClockSource+0xd4>
 80056b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056b6:	f200 8087 	bhi.w	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056be:	f000 8086 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x172>
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c6:	d87f      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056c8:	2b70      	cmp	r3, #112	@ 0x70
 80056ca:	d01a      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0xa6>
 80056cc:	2b70      	cmp	r3, #112	@ 0x70
 80056ce:	d87b      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d0:	2b60      	cmp	r3, #96	@ 0x60
 80056d2:	d050      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x11a>
 80056d4:	2b60      	cmp	r3, #96	@ 0x60
 80056d6:	d877      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d8:	2b50      	cmp	r3, #80	@ 0x50
 80056da:	d03c      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xfa>
 80056dc:	2b50      	cmp	r3, #80	@ 0x50
 80056de:	d873      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e0:	2b40      	cmp	r3, #64	@ 0x40
 80056e2:	d058      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x13a>
 80056e4:	2b40      	cmp	r3, #64	@ 0x40
 80056e6:	d86f      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e8:	2b30      	cmp	r3, #48	@ 0x30
 80056ea:	d064      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15a>
 80056ec:	2b30      	cmp	r3, #48	@ 0x30
 80056ee:	d86b      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d060      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15a>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d867      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d05c      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15a>
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d05a      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15a>
 8005700:	e062      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005712:	f000 fc6b 	bl	8005fec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	609a      	str	r2, [r3, #8]
      break;
 800572e:	e04f      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005740:	f000 fc54 	bl	8005fec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005752:	609a      	str	r2, [r3, #8]
      break;
 8005754:	e03c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005762:	461a      	mov	r2, r3
 8005764:	f000 fb18 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2150      	movs	r1, #80	@ 0x50
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fc22 	bl	8005fb8 <TIM_ITRx_SetConfig>
      break;
 8005774:	e02c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005782:	461a      	mov	r2, r3
 8005784:	f000 fb72 	bl	8005e6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2160      	movs	r1, #96	@ 0x60
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fc12 	bl	8005fb8 <TIM_ITRx_SetConfig>
      break;
 8005794:	e01c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a2:	461a      	mov	r2, r3
 80057a4:	f000 faf8 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2140      	movs	r1, #64	@ 0x40
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fc02 	bl	8005fb8 <TIM_ITRx_SetConfig>
      break;
 80057b4:	e00c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f000 fbf9 	bl	8005fb8 <TIM_ITRx_SetConfig>
      break;
 80057c6:	e003      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      break;
 80057cc:	e000      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a3f      	ldr	r2, [pc, #252]	@ (8005930 <TIM_Base_SetConfig+0x110>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3e      	ldr	r2, [pc, #248]	@ (8005934 <TIM_Base_SetConfig+0x114>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3b      	ldr	r2, [pc, #236]	@ (8005938 <TIM_Base_SetConfig+0x118>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3a      	ldr	r2, [pc, #232]	@ (800593c <TIM_Base_SetConfig+0x11c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a39      	ldr	r2, [pc, #228]	@ (8005940 <TIM_Base_SetConfig+0x120>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2e      	ldr	r2, [pc, #184]	@ (8005930 <TIM_Base_SetConfig+0x110>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d02b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2d      	ldr	r2, [pc, #180]	@ (8005934 <TIM_Base_SetConfig+0x114>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d027      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005888:	d023      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2a      	ldr	r2, [pc, #168]	@ (8005938 <TIM_Base_SetConfig+0x118>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a29      	ldr	r2, [pc, #164]	@ (800593c <TIM_Base_SetConfig+0x11c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a28      	ldr	r2, [pc, #160]	@ (8005940 <TIM_Base_SetConfig+0x120>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d017      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a27      	ldr	r2, [pc, #156]	@ (8005944 <TIM_Base_SetConfig+0x124>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a26      	ldr	r2, [pc, #152]	@ (8005948 <TIM_Base_SetConfig+0x128>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a25      	ldr	r2, [pc, #148]	@ (800594c <TIM_Base_SetConfig+0x12c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a24      	ldr	r2, [pc, #144]	@ (8005950 <TIM_Base_SetConfig+0x130>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a23      	ldr	r2, [pc, #140]	@ (8005954 <TIM_Base_SetConfig+0x134>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a22      	ldr	r2, [pc, #136]	@ (8005958 <TIM_Base_SetConfig+0x138>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a09      	ldr	r2, [pc, #36]	@ (8005930 <TIM_Base_SetConfig+0x110>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_Base_SetConfig+0xf8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a08      	ldr	r2, [pc, #32]	@ (8005934 <TIM_Base_SetConfig+0x114>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d103      	bne.n	8005920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	615a      	str	r2, [r3, #20]
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40013400 	.word	0x40013400
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800
 8005940:	40000c00 	.word	0x40000c00
 8005944:	40014c00 	.word	0x40014c00
 8005948:	40015000 	.word	0x40015000
 800594c:	40015400 	.word	0x40015400
 8005950:	40001800 	.word	0x40001800
 8005954:	40001c00 	.word	0x40001c00
 8005958:	40002000 	.word	0x40002000

0800595c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	f023 0201 	bic.w	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f023 0302 	bic.w	r3, r3, #2
 80059a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a20      	ldr	r2, [pc, #128]	@ (8005a34 <TIM_OC1_SetConfig+0xd8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC1_SetConfig+0x64>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005a38 <TIM_OC1_SetConfig+0xdc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d10c      	bne.n	80059da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f023 0308 	bic.w	r3, r3, #8
 80059c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f023 0304 	bic.w	r3, r3, #4
 80059d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a15      	ldr	r2, [pc, #84]	@ (8005a34 <TIM_OC1_SetConfig+0xd8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_OC1_SetConfig+0x8e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a14      	ldr	r2, [pc, #80]	@ (8005a38 <TIM_OC1_SetConfig+0xdc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d111      	bne.n	8005a0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	621a      	str	r2, [r3, #32]
}
 8005a28:	bf00      	nop
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40012c00 	.word	0x40012c00
 8005a38:	40013400 	.word	0x40013400

08005a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f023 0210 	bic.w	r2, r3, #16
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0320 	bic.w	r3, r3, #32
 8005a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a21      	ldr	r2, [pc, #132]	@ (8005b1c <TIM_OC2_SetConfig+0xe0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_OC2_SetConfig+0x68>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a20      	ldr	r2, [pc, #128]	@ (8005b20 <TIM_OC2_SetConfig+0xe4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10d      	bne.n	8005ac0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a16      	ldr	r2, [pc, #88]	@ (8005b1c <TIM_OC2_SetConfig+0xe0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC2_SetConfig+0x94>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a15      	ldr	r2, [pc, #84]	@ (8005b20 <TIM_OC2_SetConfig+0xe4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d113      	bne.n	8005af8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ad6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ade:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40013400 	.word	0x40013400

08005b24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a21      	ldr	r2, [pc, #132]	@ (8005c04 <TIM_OC3_SetConfig+0xe0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_OC3_SetConfig+0x66>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a20      	ldr	r2, [pc, #128]	@ (8005c08 <TIM_OC3_SetConfig+0xe4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d10d      	bne.n	8005ba6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a16      	ldr	r2, [pc, #88]	@ (8005c04 <TIM_OC3_SetConfig+0xe0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_OC3_SetConfig+0x92>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	@ (8005c08 <TIM_OC3_SetConfig+0xe4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d113      	bne.n	8005bde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40013400 	.word	0x40013400

08005c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	031b      	lsls	r3, r3, #12
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a11      	ldr	r2, [pc, #68]	@ (8005cac <TIM_OC4_SetConfig+0xa0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_OC4_SetConfig+0x68>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a10      	ldr	r2, [pc, #64]	@ (8005cb0 <TIM_OC4_SetConfig+0xa4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d109      	bne.n	8005c88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	019b      	lsls	r3, r3, #6
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40013400 	.word	0x40013400

08005cb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f023 0201 	bic.w	r2, r3, #1
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a27      	ldr	r2, [pc, #156]	@ (8005d7c <TIM_TI1_SetConfig+0xc8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d01b      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	@ (8005d80 <TIM_TI1_SetConfig+0xcc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d017      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf0:	d013      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a23      	ldr	r2, [pc, #140]	@ (8005d84 <TIM_TI1_SetConfig+0xd0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00f      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a22      	ldr	r2, [pc, #136]	@ (8005d88 <TIM_TI1_SetConfig+0xd4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4a21      	ldr	r2, [pc, #132]	@ (8005d8c <TIM_TI1_SetConfig+0xd8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d007      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4a20      	ldr	r2, [pc, #128]	@ (8005d90 <TIM_TI1_SetConfig+0xdc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_TI1_SetConfig+0x66>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a1f      	ldr	r2, [pc, #124]	@ (8005d94 <TIM_TI1_SetConfig+0xe0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d101      	bne.n	8005d1e <TIM_TI1_SetConfig+0x6a>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <TIM_TI1_SetConfig+0x6c>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	e003      	b.n	8005d3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f023 030a 	bic.w	r3, r3, #10
 8005d58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f003 030a 	and.w	r3, r3, #10
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40013400 	.word	0x40013400
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00
 8005d90:	40014c00 	.word	0x40014c00
 8005d94:	40001800 	.word	0x40001800

08005d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0201 	bic.w	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 030a 	bic.w	r3, r3, #10
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f023 0210 	bic.w	r2, r3, #16
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	031b      	lsls	r3, r3, #12
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f023 0210 	bic.w	r2, r3, #16
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	031b      	lsls	r3, r3, #12
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	621a      	str	r2, [r3, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr

08005eca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b087      	sub	sp, #28
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr

08005f40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	031b      	lsls	r3, r3, #12
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	031b      	lsls	r3, r3, #12
 8005f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr

08005fb8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f043 0307 	orr.w	r3, r3, #7
 8005fda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	609a      	str	r2, [r3, #8]
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	021a      	lsls	r2, r3, #8
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	431a      	orrs	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4313      	orrs	r3, r2
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800602a:	b480      	push	{r7}
 800602c:	b087      	sub	sp, #28
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2201      	movs	r2, #1
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1a      	ldr	r2, [r3, #32]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	43db      	mvns	r3, r3
 800604c:	401a      	ands	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1a      	ldr	r2, [r3, #32]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	431a      	orrs	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
	...

08006074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006088:	2302      	movs	r3, #2
 800608a:	e05a      	b.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a20      	ldr	r2, [pc, #128]	@ (800614c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d022      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1e      	ldr	r2, [pc, #120]	@ (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d01d      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e2:	d018      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d013      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a19      	ldr	r2, [pc, #100]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00e      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a17      	ldr	r2, [pc, #92]	@ (800615c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d009      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a16      	ldr	r2, [pc, #88]	@ (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d004      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a14      	ldr	r2, [pc, #80]	@ (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d10c      	bne.n	8006130 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800611c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	4313      	orrs	r3, r2
 8006126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40013400 	.word	0x40013400
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40014c00 	.word	0x40014c00
 8006164:	40001800 	.word	0x40001800

08006168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr

0800617a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e042      	b.n	8006224 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fc fbb8 	bl	8002928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2224      	movs	r2, #36	@ 0x24
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 ffdf 	bl	8007194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	@ 0x28
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b20      	cmp	r3, #32
 800624a:	d16d      	bne.n	8006328 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <HAL_UART_Transmit+0x2c>
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e066      	b.n	800632a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2221      	movs	r2, #33	@ 0x21
 8006266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800626a:	f7fc fd73 	bl	8002d54 <HAL_GetTick>
 800626e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	88fa      	ldrh	r2, [r7, #6]
 800627a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006284:	d108      	bne.n	8006298 <HAL_UART_Transmit+0x6c>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	e003      	b.n	80062a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062a0:	e02a      	b.n	80062f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2200      	movs	r2, #0
 80062aa:	2180      	movs	r1, #128	@ 0x80
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fc6e 	bl	8006b8e <UART_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e036      	b.n	800632a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10b      	bne.n	80062da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	3302      	adds	r3, #2
 80062d6:	61bb      	str	r3, [r7, #24]
 80062d8:	e007      	b.n	80062ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	781a      	ldrb	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	3301      	adds	r3, #1
 80062e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1cf      	bne.n	80062a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	2140      	movs	r1, #64	@ 0x40
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fc3e 	bl	8006b8e <UART_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e006      	b.n	800632a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	e000      	b.n	800632a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006328:	2302      	movs	r3, #2
  }
}
 800632a:	4618      	mov	r0, r3
 800632c:	3720      	adds	r7, #32
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b20      	cmp	r3, #32
 800634a:	d112      	bne.n	8006372 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <HAL_UART_Receive_IT+0x26>
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e00b      	b.n	8006374 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	461a      	mov	r2, r3
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fc7e 	bl	8006c6a <UART_Start_Receive_IT>
 800636e:	4603      	mov	r3, r0
 8006370:	e000      	b.n	8006374 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006372:	2302      	movs	r3, #2
  }
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08c      	sub	sp, #48	@ 0x30
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b20      	cmp	r3, #32
 8006394:	d14a      	bne.n	800642c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e043      	b.n	800642e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	461a      	mov	r2, r3
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fc8f 	bl	8006cdc <UART_Start_Receive_DMA>
 80063be:	4603      	mov	r3, r0
 80063c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80063c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d12c      	bne.n	8006426 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d125      	bne.n	8006420 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	617b      	str	r3, [r7, #20]
   return(result);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f043 0310 	orr.w	r3, r3, #16
 8006400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800640a:	627a      	str	r2, [r7, #36]	@ 0x24
 800640c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	6a39      	ldr	r1, [r7, #32]
 8006410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	61fb      	str	r3, [r7, #28]
   return(result);
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e5      	bne.n	80063ea <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800641e:	e002      	b.n	8006426 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006426:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800642a:	e000      	b.n	800642e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3730      	adds	r7, #48	@ 0x30
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b0ba      	sub	sp, #232	@ 0xe8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800645e:	2300      	movs	r3, #0
 8006460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006464:	2300      	movs	r3, #0
 8006466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800646a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800647e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_UART_IRQHandler+0x66>
 800648a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fdbe 	bl	8007018 <UART_Receive_IT>
      return;
 800649c:	e25b      	b.n	8006956 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800649e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 80de 	beq.w	8006664 <HAL_UART_IRQHandler+0x22c>
 80064a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80d1 	beq.w	8006664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <HAL_UART_IRQHandler+0xae>
 80064ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064de:	f043 0201 	orr.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_UART_IRQHandler+0xd2>
 80064f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	f043 0202 	orr.w	r2, r3, #2
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800650a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00b      	beq.n	800652e <HAL_UART_IRQHandler+0xf6>
 8006516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006526:	f043 0204 	orr.w	r2, r3, #4
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d011      	beq.n	800655e <HAL_UART_IRQHandler+0x126>
 800653a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d105      	bne.n	8006552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006556:	f043 0208 	orr.w	r2, r3, #8
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 81f2 	beq.w	800694c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <HAL_UART_IRQHandler+0x14e>
 8006574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fd49 	bl	8007018 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <HAL_UART_IRQHandler+0x17a>
 80065aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d04f      	beq.n	8006652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fc53 	bl	8006e5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d041      	beq.n	800664a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3314      	adds	r3, #20
 80065cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3314      	adds	r3, #20
 80065ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80065fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800660a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1d9      	bne.n	80065c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d013      	beq.n	8006642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661e:	4a7e      	ldr	r2, [pc, #504]	@ (8006818 <HAL_UART_IRQHandler+0x3e0>)
 8006620:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006626:	4618      	mov	r0, r3
 8006628:	f7fc ffe2 	bl	80035f0 <HAL_DMA_Abort_IT>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d016      	beq.n	8006660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800663c:	4610      	mov	r0, r2
 800663e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006640:	e00e      	b.n	8006660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f99c 	bl	8006980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006648:	e00a      	b.n	8006660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f998 	bl	8006980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006650:	e006      	b.n	8006660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f994 	bl	8006980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800665e:	e175      	b.n	800694c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006660:	bf00      	nop
    return;
 8006662:	e173      	b.n	800694c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006668:	2b01      	cmp	r3, #1
 800666a:	f040 814f 	bne.w	800690c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 8148 	beq.w	800690c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800667c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8141 	beq.w	800690c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800668a:	2300      	movs	r3, #0
 800668c:	60bb      	str	r3, [r7, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60bb      	str	r3, [r7, #8]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 80b6 	beq.w	800681c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8145 	beq.w	8006950 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066ce:	429a      	cmp	r2, r3
 80066d0:	f080 813e 	bcs.w	8006950 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	f000 8088 	beq.w	80067f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006702:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006706:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	330c      	adds	r3, #12
 8006710:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006714:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006718:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006720:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800672c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1d9      	bne.n	80066e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3314      	adds	r3, #20
 800673a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006744:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006746:	f023 0301 	bic.w	r3, r3, #1
 800674a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3314      	adds	r3, #20
 8006754:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006758:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800675c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006760:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800676a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e1      	bne.n	8006734 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3314      	adds	r3, #20
 8006776:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3314      	adds	r3, #20
 8006790:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006794:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006796:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800679a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e3      	bne.n	8006770 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067c8:	f023 0310 	bic.w	r3, r3, #16
 80067cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80067da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80067dc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e3      	bne.n	80067b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fc fec0 	bl	8003578 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006806:	b29b      	uxth	r3, r3
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	b29b      	uxth	r3, r3
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fb f9ec 	bl	8001bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006814:	e09c      	b.n	8006950 <HAL_UART_IRQHandler+0x518>
 8006816:	bf00      	nop
 8006818:	08006f23 	.word	0x08006f23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006824:	b29b      	uxth	r3, r3
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 808e 	beq.w	8006954 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8089 	beq.w	8006954 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	330c      	adds	r3, #12
 8006848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006858:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	330c      	adds	r3, #12
 8006862:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006866:	647a      	str	r2, [r7, #68]	@ 0x44
 8006868:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800686c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e3      	bne.n	8006842 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3314      	adds	r3, #20
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	623b      	str	r3, [r7, #32]
   return(result);
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	f023 0301 	bic.w	r3, r3, #1
 8006890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3314      	adds	r3, #20
 800689a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800689e:	633a      	str	r2, [r7, #48]	@ 0x30
 80068a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e3      	bne.n	800687a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 0310 	bic.w	r3, r3, #16
 80068d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80068e4:	61fa      	str	r2, [r7, #28]
 80068e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	69b9      	ldr	r1, [r7, #24]
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	617b      	str	r3, [r7, #20]
   return(result);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e3      	bne.n	80068c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7fb f971 	bl	8001bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800690a:	e023      	b.n	8006954 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800690c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <HAL_UART_IRQHandler+0x4f4>
 8006918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800691c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fb10 	bl	8006f4a <UART_Transmit_IT>
    return;
 800692a:	e014      	b.n	8006956 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800692c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00e      	beq.n	8006956 <HAL_UART_IRQHandler+0x51e>
 8006938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800693c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fb4f 	bl	8006fe8 <UART_EndTransmit_IT>
    return;
 800694a:	e004      	b.n	8006956 <HAL_UART_IRQHandler+0x51e>
    return;
 800694c:	bf00      	nop
 800694e:	e002      	b.n	8006956 <HAL_UART_IRQHandler+0x51e>
      return;
 8006950:	bf00      	nop
 8006952:	e000      	b.n	8006956 <HAL_UART_IRQHandler+0x51e>
      return;
 8006954:	bf00      	nop
  }
}
 8006956:	37e8      	adds	r7, #232	@ 0xe8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr

0800696e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr

08006980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr

08006992 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b09c      	sub	sp, #112	@ 0x70
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d172      	bne.n	8006a94 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80069ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069b0:	2200      	movs	r2, #0
 80069b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80069d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e5      	bne.n	80069b4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3314      	adds	r3, #20
 80069ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	f023 0301 	bic.w	r3, r3, #1
 80069fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3314      	adds	r3, #20
 8006a06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a08:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e5      	bne.n	80069e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3314      	adds	r3, #20
 8006a22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a32:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a52:	2220      	movs	r2, #32
 8006a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d119      	bne.n	8006a94 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0310 	bic.w	r3, r3, #16
 8006a76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a80:	61fa      	str	r2, [r7, #28]
 8006a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	69b9      	ldr	r1, [r7, #24]
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e5      	bne.n	8006a60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a96:	2200      	movs	r2, #0
 8006a98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d106      	bne.n	8006ab0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006aaa:	f7fb f89f 	bl	8001bec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006aae:	e002      	b.n	8006ab6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006ab0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ab2:	f7fb f889 	bl	8001bc8 <HAL_UART_RxCpltCallback>
}
 8006ab6:	bf00      	nop
 8006ab8:	3770      	adds	r7, #112	@ 0x70
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d108      	bne.n	8006aec <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7fb f881 	bl	8001bec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006aea:	e002      	b.n	8006af2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7ff ff3e 	bl	800696e <HAL_UART_RxHalfCpltCallback>
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bf14      	ite	ne
 8006b1a:	2301      	movne	r3, #1
 8006b1c:	2300      	moveq	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b21      	cmp	r3, #33	@ 0x21
 8006b2c:	d108      	bne.n	8006b40 <UART_DMAError+0x46>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006b3a:	68b8      	ldr	r0, [r7, #8]
 8006b3c:	f000 f968 	bl	8006e10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bf14      	ite	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	2300      	moveq	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b22      	cmp	r3, #34	@ 0x22
 8006b60:	d108      	bne.n	8006b74 <UART_DMAError+0x7a>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006b6e:	68b8      	ldr	r0, [r7, #8]
 8006b70:	f000 f975 	bl	8006e5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b78:	f043 0210 	orr.w	r2, r3, #16
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b80:	68b8      	ldr	r0, [r7, #8]
 8006b82:	f7ff fefd 	bl	8006980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b86:	bf00      	nop
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b090      	sub	sp, #64	@ 0x40
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9e:	e050      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d04c      	beq.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d007      	beq.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x30>
 8006bae:	f7fc f8d1 	bl	8002d54 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d241      	bcs.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006bde:	637a      	str	r2, [r7, #52]	@ 0x34
 8006be0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006be4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e5      	bne.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3314      	adds	r3, #20
 8006bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	613b      	str	r3, [r7, #16]
   return(result);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3314      	adds	r3, #20
 8006c10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c12:	623a      	str	r2, [r7, #32]
 8006c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	69f9      	ldr	r1, [r7, #28]
 8006c18:	6a3a      	ldr	r2, [r7, #32]
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e5      	bne.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e00f      	b.n	8006c62 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	bf0c      	ite	eq
 8006c52:	2301      	moveq	r3, #1
 8006c54:	2300      	movne	r3, #0
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d09f      	beq.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3740      	adds	r7, #64	@ 0x40
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	4613      	mov	r3, r2
 8006c76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	88fa      	ldrh	r2, [r7, #6]
 8006c88:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2222      	movs	r2, #34	@ 0x22
 8006c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d007      	beq.n	8006cb0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695a      	ldr	r2, [r3, #20]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0220 	orr.w	r2, r2, #32
 8006cce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr

08006cdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b098      	sub	sp, #96	@ 0x60
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	88fa      	ldrh	r2, [r7, #6]
 8006cf4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2222      	movs	r2, #34	@ 0x22
 8006d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d08:	4a3e      	ldr	r2, [pc, #248]	@ (8006e04 <UART_Start_Receive_DMA+0x128>)
 8006d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d10:	4a3d      	ldr	r2, [pc, #244]	@ (8006e08 <UART_Start_Receive_DMA+0x12c>)
 8006d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d18:	4a3c      	ldr	r2, [pc, #240]	@ (8006e0c <UART_Start_Receive_DMA+0x130>)
 8006d1a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d20:	2200      	movs	r2, #0
 8006d22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006d24:	f107 0308 	add.w	r3, r7, #8
 8006d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3304      	adds	r3, #4
 8006d34:	4619      	mov	r1, r3
 8006d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	f7fc fbbc 	bl	80034b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006d40:	2300      	movs	r3, #0
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d019      	beq.n	8006d92 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	330c      	adds	r3, #12
 8006d64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d7e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e5      	bne.n	8006d5e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3314      	adds	r3, #20
 8006d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3314      	adds	r3, #20
 8006db0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006db2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006db4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006db8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e5      	bne.n	8006d92 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3314      	adds	r3, #20
 8006dcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ddc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3314      	adds	r3, #20
 8006de4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006de6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6a39      	ldr	r1, [r7, #32]
 8006dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e5      	bne.n	8006dc6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3760      	adds	r7, #96	@ 0x60
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	08006993 	.word	0x08006993
 8006e08:	08006abf 	.word	0x08006abf
 8006e0c:	08006afb 	.word	0x08006afb

08006e10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b089      	sub	sp, #36	@ 0x24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	61ba      	str	r2, [r7, #24]
 8006e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6979      	ldr	r1, [r7, #20]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	613b      	str	r3, [r7, #16]
   return(result);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e5      	bne.n	8006e18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006e54:	bf00      	nop
 8006e56:	3724      	adds	r7, #36	@ 0x24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bc80      	pop	{r7}
 8006e5c:	4770      	bx	lr

08006e5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b095      	sub	sp, #84	@ 0x54
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e86:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3314      	adds	r3, #20
 8006ea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3314      	adds	r3, #20
 8006eb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e5      	bne.n	8006e9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d119      	bne.n	8006f0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	330c      	adds	r3, #12
 8006edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f023 0310 	bic.w	r3, r3, #16
 8006eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ef6:	61ba      	str	r2, [r7, #24]
 8006ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6979      	ldr	r1, [r7, #20]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	613b      	str	r3, [r7, #16]
   return(result);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e5      	bne.n	8006ed6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f18:	bf00      	nop
 8006f1a:	3754      	adds	r7, #84	@ 0x54
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff fd1f 	bl	8006980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b085      	sub	sp, #20
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b21      	cmp	r3, #33	@ 0x21
 8006f5c:	d13e      	bne.n	8006fdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f66:	d114      	bne.n	8006f92 <UART_Transmit_IT+0x48>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d110      	bne.n	8006f92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	1c9a      	adds	r2, r3, #2
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	621a      	str	r2, [r3, #32]
 8006f90:	e008      	b.n	8006fa4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	1c59      	adds	r1, r3, #1
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6211      	str	r1, [r2, #32]
 8006f9c:	781a      	ldrb	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10f      	bne.n	8006fd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e000      	b.n	8006fde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fdc:	2302      	movs	r3, #2
  }
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr

08006fe8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ffe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2220      	movs	r2, #32
 8007004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff fca7 	bl	800695c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08c      	sub	sp, #48	@ 0x30
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b22      	cmp	r3, #34	@ 0x22
 800702a:	f040 80ae 	bne.w	800718a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007036:	d117      	bne.n	8007068 <UART_Receive_IT+0x50>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d113      	bne.n	8007068 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007040:	2300      	movs	r3, #0
 8007042:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007048:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	b29b      	uxth	r3, r3
 8007052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007056:	b29a      	uxth	r2, r3
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	1c9a      	adds	r2, r3, #2
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	629a      	str	r2, [r3, #40]	@ 0x28
 8007066:	e026      	b.n	80070b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707a:	d007      	beq.n	800708c <UART_Receive_IT+0x74>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <UART_Receive_IT+0x82>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d106      	bne.n	800709a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	b2da      	uxtb	r2, r3
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e008      	b.n	80070ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29b      	uxth	r3, r3
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	4619      	mov	r1, r3
 80070c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d15d      	bne.n	8007186 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0220 	bic.w	r2, r2, #32
 80070d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	695a      	ldr	r2, [r3, #20]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0201 	bic.w	r2, r2, #1
 80070f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710c:	2b01      	cmp	r3, #1
 800710e:	d135      	bne.n	800717c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	613b      	str	r3, [r7, #16]
   return(result);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f023 0310 	bic.w	r3, r3, #16
 800712c:	627b      	str	r3, [r7, #36]	@ 0x24
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	330c      	adds	r3, #12
 8007134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007136:	623a      	str	r2, [r7, #32]
 8007138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	69f9      	ldr	r1, [r7, #28]
 800713c:	6a3a      	ldr	r2, [r7, #32]
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	61bb      	str	r3, [r7, #24]
   return(result);
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e5      	bne.n	8007116 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b10      	cmp	r3, #16
 8007156:	d10a      	bne.n	800716e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7fa fd39 	bl	8001bec <HAL_UARTEx_RxEventCallback>
 800717a:	e002      	b.n	8007182 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7fa fd23 	bl	8001bc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	e002      	b.n	800718c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	e000      	b.n	800718c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800718a:	2302      	movs	r3, #2
  }
}
 800718c:	4618      	mov	r0, r3
 800718e:	3730      	adds	r7, #48	@ 0x30
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80071ce:	f023 030c 	bic.w	r3, r3, #12
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6812      	ldr	r2, [r2, #0]
 80071d6:	68b9      	ldr	r1, [r7, #8]
 80071d8:	430b      	orrs	r3, r1
 80071da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a2c      	ldr	r2, [pc, #176]	@ (80072a8 <UART_SetConfig+0x114>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d103      	bne.n	8007204 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80071fc:	f7fd fc52 	bl	8004aa4 <HAL_RCC_GetPCLK2Freq>
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	e002      	b.n	800720a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007204:	f7fd fc3a 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 8007208:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	009a      	lsls	r2, r3, #2
 8007214:	441a      	add	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	4a22      	ldr	r2, [pc, #136]	@ (80072ac <UART_SetConfig+0x118>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	0119      	lsls	r1, r3, #4
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4613      	mov	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	009a      	lsls	r2, r3, #2
 8007234:	441a      	add	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007240:	4b1a      	ldr	r3, [pc, #104]	@ (80072ac <UART_SetConfig+0x118>)
 8007242:	fba3 0302 	umull	r0, r3, r3, r2
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	2064      	movs	r0, #100	@ 0x64
 800724a:	fb00 f303 	mul.w	r3, r0, r3
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	3332      	adds	r3, #50	@ 0x32
 8007254:	4a15      	ldr	r2, [pc, #84]	@ (80072ac <UART_SetConfig+0x118>)
 8007256:	fba2 2303 	umull	r2, r3, r2, r3
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007260:	4419      	add	r1, r3
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	009a      	lsls	r2, r3, #2
 800726c:	441a      	add	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	fbb2 f2f3 	udiv	r2, r2, r3
 8007278:	4b0c      	ldr	r3, [pc, #48]	@ (80072ac <UART_SetConfig+0x118>)
 800727a:	fba3 0302 	umull	r0, r3, r3, r2
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	2064      	movs	r0, #100	@ 0x64
 8007282:	fb00 f303 	mul.w	r3, r0, r3
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	011b      	lsls	r3, r3, #4
 800728a:	3332      	adds	r3, #50	@ 0x32
 800728c:	4a07      	ldr	r2, [pc, #28]	@ (80072ac <UART_SetConfig+0x118>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	f003 020f 	and.w	r2, r3, #15
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	440a      	add	r2, r1
 800729e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072a0:	bf00      	nop
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40013800 	.word	0x40013800
 80072ac:	51eb851f 	.word	0x51eb851f

080072b0 <__io_putchar>:
//   return ch;
// }

// �ض��� printf
int __io_putchar(int ch)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, 0xffff);
 80072b8:	1d39      	adds	r1, r7, #4
 80072ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072be:	2201      	movs	r2, #1
 80072c0:	4803      	ldr	r0, [pc, #12]	@ (80072d0 <__io_putchar+0x20>)
 80072c2:	f7fe ffb3 	bl	800622c <HAL_UART_Transmit>
  return ch;
 80072c6:	687b      	ldr	r3, [r7, #4]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000388 	.word	0x20000388

080072d4 <motor_move>:
// #define SET_MOVE_RESET() \
//   do {                   \
//     s_State = START;     \
//   } while (0)

FSM_STATE_t motor_move(void) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
    START = 0,
    SET_SPEED,
    SET_MOVE,
  } s_State = {START};

  switch (s_State) {
 80072d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007350 <motor_move+0x7c>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d01d      	beq.n	800731c <motor_move+0x48>
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	dc31      	bgt.n	8007348 <motor_move+0x74>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <motor_move+0x1a>
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d003      	beq.n	80072f4 <motor_move+0x20>
 80072ec:	e02c      	b.n	8007348 <motor_move+0x74>
    case START:
      s_State = SET_SPEED;
 80072ee:	4b18      	ldr	r3, [pc, #96]	@ (8007350 <motor_move+0x7c>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	701a      	strb	r2, [r3, #0]
    case SET_SPEED:
      if (!moter_speed_set()) {
 80072f4:	f000 f834 	bl	8007360 <moter_speed_set>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10b      	bne.n	8007316 <motor_move+0x42>
        // SET_SPEED_RESET();
        LOGE("wait speed set");
 80072fe:	f7fb fd29 	bl	8002d54 <HAL_GetTick>
 8007302:	4603      	mov	r3, r0
 8007304:	4a13      	ldr	r2, [pc, #76]	@ (8007354 <motor_move+0x80>)
 8007306:	4619      	mov	r1, r3
 8007308:	4813      	ldr	r0, [pc, #76]	@ (8007358 <motor_move+0x84>)
 800730a:	f000 faf5 	bl	80078f8 <iprintf>
        s_State = SET_SPEED;
 800730e:	4b10      	ldr	r3, [pc, #64]	@ (8007350 <motor_move+0x7c>)
 8007310:	2201      	movs	r2, #1
 8007312:	701a      	strb	r2, [r3, #0]
        break;
 8007314:	e018      	b.n	8007348 <motor_move+0x74>
      }
      s_State = SET_MOVE;
 8007316:	4b0e      	ldr	r3, [pc, #56]	@ (8007350 <motor_move+0x7c>)
 8007318:	2202      	movs	r2, #2
 800731a:	701a      	strb	r2, [r3, #0]
    case SET_MOVE:
      if (!moter_set_move()) {
 800731c:	f000 f880 	bl	8007420 <moter_set_move>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10b      	bne.n	800733e <motor_move+0x6a>
        LOGE("wait move set");
 8007326:	f7fb fd15 	bl	8002d54 <HAL_GetTick>
 800732a:	4603      	mov	r3, r0
 800732c:	4a09      	ldr	r2, [pc, #36]	@ (8007354 <motor_move+0x80>)
 800732e:	4619      	mov	r1, r3
 8007330:	480a      	ldr	r0, [pc, #40]	@ (800735c <motor_move+0x88>)
 8007332:	f000 fae1 	bl	80078f8 <iprintf>
        s_State = SET_MOVE;
 8007336:	4b06      	ldr	r3, [pc, #24]	@ (8007350 <motor_move+0x7c>)
 8007338:	2202      	movs	r2, #2
 800733a:	701a      	strb	r2, [r3, #0]
        break;
 800733c:	e004      	b.n	8007348 <motor_move+0x74>
      }
      s_State = START;
 800733e:	4b04      	ldr	r3, [pc, #16]	@ (8007350 <motor_move+0x7c>)
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <motor_move+0x76>
  }

  return fsm_onging;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	200004f0 	.word	0x200004f0
 8007354:	08008924 	.word	0x08008924
 8007358:	080086d0 	.word	0x080086d0
 800735c:	080086fc 	.word	0x080086fc

08007360 <moter_speed_set>:

FSM_STATE_t moter_speed_set(void) {
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
    SEND_SPEED_CMD,
    IS_SUCESS,
  } s_State = {START};

  static uint8_t* ack;
  switch (s_State) {
 8007364:	4b28      	ldr	r3, [pc, #160]	@ (8007408 <moter_speed_set+0xa8>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d011      	beq.n	8007390 <moter_speed_set+0x30>
 800736c:	2b02      	cmp	r3, #2
 800736e:	dc3f      	bgt.n	80073f0 <moter_speed_set+0x90>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <moter_speed_set+0x1a>
 8007374:	2b01      	cmp	r3, #1
 8007376:	d003      	beq.n	8007380 <moter_speed_set+0x20>
 8007378:	e03a      	b.n	80073f0 <moter_speed_set+0x90>
    case START:
      s_State = SEND_SPEED_CMD;
 800737a:	4b23      	ldr	r3, [pc, #140]	@ (8007408 <moter_speed_set+0xa8>)
 800737c:	2201      	movs	r2, #1
 800737e:	701a      	strb	r2, [r3, #0]
    case SEND_SPEED_CMD:
      Uart_Send_MovementRegister_ServoMotor(3, 1);  // 设置速度
 8007380:	2101      	movs	r1, #1
 8007382:	2003      	movs	r0, #3
 8007384:	f7f9 fec4 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
      s_State = IS_SUCESS;
 8007388:	4b1f      	ldr	r3, [pc, #124]	@ (8007408 <moter_speed_set+0xa8>)
 800738a:	2202      	movs	r2, #2
 800738c:	701a      	strb	r2, [r3, #0]
      break;
 800738e:	e02f      	b.n	80073f0 <moter_speed_set+0x90>
    case IS_SUCESS:
      if (NULL == (ack = GetMoterAck())) {
 8007390:	f7f8 ff7a 	bl	8000288 <GetMoterAck>
 8007394:	4603      	mov	r3, r0
 8007396:	4a1d      	ldr	r2, [pc, #116]	@ (800740c <moter_speed_set+0xac>)
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	4b1c      	ldr	r3, [pc, #112]	@ (800740c <moter_speed_set+0xac>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10d      	bne.n	80073be <moter_speed_set+0x5e>
        LOGE("ack is null");
 80073a2:	f7fb fcd7 	bl	8002d54 <HAL_GetTick>
 80073a6:	4603      	mov	r3, r0
 80073a8:	4a19      	ldr	r2, [pc, #100]	@ (8007410 <moter_speed_set+0xb0>)
 80073aa:	4619      	mov	r1, r3
 80073ac:	4819      	ldr	r0, [pc, #100]	@ (8007414 <moter_speed_set+0xb4>)
 80073ae:	f000 faa3 	bl	80078f8 <iprintf>
        IS_SUCESS_RESET();
 80073b2:	4b15      	ldr	r3, [pc, #84]	@ (8007408 <moter_speed_set+0xa8>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	701a      	strb	r2, [r3, #0]
        return fsm_error;
 80073b8:	f04f 33ff 	mov.w	r3, #4294967295
 80073bc:	e021      	b.n	8007402 <moter_speed_set+0xa2>
      }

      if (0x00 == ack[0] && 0x01 == ack[1]) {
 80073be:	4b13      	ldr	r3, [pc, #76]	@ (800740c <moter_speed_set+0xac>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10f      	bne.n	80073e8 <moter_speed_set+0x88>
 80073c8:	4b10      	ldr	r3, [pc, #64]	@ (800740c <moter_speed_set+0xac>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d109      	bne.n	80073e8 <moter_speed_set+0x88>
        LOGI("speed sucess");
 80073d4:	f7fb fcbe 	bl	8002d54 <HAL_GetTick>
 80073d8:	4603      	mov	r3, r0
 80073da:	4a0d      	ldr	r2, [pc, #52]	@ (8007410 <moter_speed_set+0xb0>)
 80073dc:	4619      	mov	r1, r3
 80073de:	480e      	ldr	r0, [pc, #56]	@ (8007418 <moter_speed_set+0xb8>)
 80073e0:	f000 fa8a 	bl	80078f8 <iprintf>
        return fsm_cpl;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e00c      	b.n	8007402 <moter_speed_set+0xa2>
      }

      s_State = SEND_SPEED_CMD;
 80073e8:	4b07      	ldr	r3, [pc, #28]	@ (8007408 <moter_speed_set+0xa8>)
 80073ea:	2201      	movs	r2, #1
 80073ec:	701a      	strb	r2, [r3, #0]
      break;
 80073ee:	bf00      	nop
  }
  LOGI("onging");
 80073f0:	f7fb fcb0 	bl	8002d54 <HAL_GetTick>
 80073f4:	4603      	mov	r3, r0
 80073f6:	4a06      	ldr	r2, [pc, #24]	@ (8007410 <moter_speed_set+0xb0>)
 80073f8:	4619      	mov	r1, r3
 80073fa:	4808      	ldr	r0, [pc, #32]	@ (800741c <moter_speed_set+0xbc>)
 80073fc:	f000 fa7c 	bl	80078f8 <iprintf>
  return fsm_onging;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	200004f1 	.word	0x200004f1
 800740c:	200004f4 	.word	0x200004f4
 8007410:	08008930 	.word	0x08008930
 8007414:	08008728 	.word	0x08008728
 8007418:	08008750 	.word	0x08008750
 800741c:	08008778 	.word	0x08008778

08007420 <moter_set_move>:

FSM_STATE_t moter_set_move(void) {
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
    SEND_MOVE_CMD,
    IS_SUCESS,
  } s_State = {START};

  static uint8_t* ack;
  switch (s_State) {
 8007424:	4b31      	ldr	r3, [pc, #196]	@ (80074ec <moter_set_move+0xcc>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d022      	beq.n	8007472 <moter_set_move+0x52>
 800742c:	2b02      	cmp	r3, #2
 800742e:	dc59      	bgt.n	80074e4 <moter_set_move+0xc4>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <moter_set_move+0x1a>
 8007434:	2b01      	cmp	r3, #1
 8007436:	d003      	beq.n	8007440 <moter_set_move+0x20>
 8007438:	e054      	b.n	80074e4 <moter_set_move+0xc4>
    case START:
      s_State = SEND_MOVE_CMD;
 800743a:	4b2c      	ldr	r3, [pc, #176]	@ (80074ec <moter_set_move+0xcc>)
 800743c:	2201      	movs	r2, #1
 800743e:	701a      	strb	r2, [r3, #0]
    case SEND_MOVE_CMD:
      if (ON_LEFT == GetMoterOnPos()) {
 8007440:	f7f8 ff2c 	bl	800029c <GetMoterOnPos>
 8007444:	4603      	mov	r3, r0
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	d105      	bne.n	8007458 <moter_set_move+0x38>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);
 800744c:	f241 3186 	movw	r1, #4998	@ 0x1386
 8007450:	2003      	movs	r0, #3
 8007452:	f7f9 fe5d 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
 8007456:	e009      	b.n	800746c <moter_set_move+0x4c>
      } else if (ON_RIGHT == GetMoterOnPos()) {
 8007458:	f7f8 ff20 	bl	800029c <GetMoterOnPos>
 800745c:	4603      	mov	r3, r0
 800745e:	2b01      	cmp	r3, #1
 8007460:	d104      	bne.n	800746c <moter_set_move+0x4c>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);
 8007462:	f241 3187 	movw	r1, #4999	@ 0x1387
 8007466:	2003      	movs	r0, #3
 8007468:	f7f9 fe52 	bl	8001110 <Uart_Send_MovementRegister_ServoMotor>
      }
      s_State = IS_SUCESS;
 800746c:	4b1f      	ldr	r3, [pc, #124]	@ (80074ec <moter_set_move+0xcc>)
 800746e:	2202      	movs	r2, #2
 8007470:	701a      	strb	r2, [r3, #0]
    case IS_SUCESS:
      if (NULL == (ack = GetMoterAck())) {
 8007472:	f7f8 ff09 	bl	8000288 <GetMoterAck>
 8007476:	4603      	mov	r3, r0
 8007478:	4a1d      	ldr	r2, [pc, #116]	@ (80074f0 <moter_set_move+0xd0>)
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	4b1c      	ldr	r3, [pc, #112]	@ (80074f0 <moter_set_move+0xd0>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10d      	bne.n	80074a0 <moter_set_move+0x80>
        LOGE("ack is null");
 8007484:	f7fb fc66 	bl	8002d54 <HAL_GetTick>
 8007488:	4603      	mov	r3, r0
 800748a:	4a1a      	ldr	r2, [pc, #104]	@ (80074f4 <moter_set_move+0xd4>)
 800748c:	4619      	mov	r1, r3
 800748e:	481a      	ldr	r0, [pc, #104]	@ (80074f8 <moter_set_move+0xd8>)
 8007490:	f000 fa32 	bl	80078f8 <iprintf>
        IS_SUCESS_RESET();
 8007494:	4b15      	ldr	r3, [pc, #84]	@ (80074ec <moter_set_move+0xcc>)
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
        return fsm_error;
 800749a:	f04f 33ff 	mov.w	r3, #4294967295
 800749e:	e022      	b.n	80074e6 <moter_set_move+0xc6>
      }

      if (JOGmode_Data_CCW == (((uint16_t)ack[4] << 8) | ack[5]) ||  //
 80074a0:	4b13      	ldr	r3, [pc, #76]	@ (80074f0 <moter_set_move+0xd0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3304      	adds	r3, #4
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	021b      	lsls	r3, r3, #8
 80074aa:	4a11      	ldr	r2, [pc, #68]	@ (80074f0 <moter_set_move+0xd0>)
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	3205      	adds	r2, #5
 80074b0:	7812      	ldrb	r2, [r2, #0]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f241 3286 	movw	r2, #4998	@ 0x1386
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00d      	beq.n	80074d8 <moter_set_move+0xb8>
          JOGmode_Data_CW == (((uint16_t)ack[4] << 8) | ack[5])) {
 80074bc:	4b0c      	ldr	r3, [pc, #48]	@ (80074f0 <moter_set_move+0xd0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3304      	adds	r3, #4
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	4a0a      	ldr	r2, [pc, #40]	@ (80074f0 <moter_set_move+0xd0>)
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	3205      	adds	r2, #5
 80074cc:	7812      	ldrb	r2, [r2, #0]
 80074ce:	4313      	orrs	r3, r2
      if (JOGmode_Data_CCW == (((uint16_t)ack[4] << 8) | ack[5]) ||  //
 80074d0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d101      	bne.n	80074dc <moter_set_move+0xbc>
        return fsm_cpl;
 80074d8:	2301      	movs	r3, #1
 80074da:	e004      	b.n	80074e6 <moter_set_move+0xc6>
      }

      s_State = SEND_MOVE_CMD;
 80074dc:	4b03      	ldr	r3, [pc, #12]	@ (80074ec <moter_set_move+0xcc>)
 80074de:	2201      	movs	r2, #1
 80074e0:	701a      	strb	r2, [r3, #0]
      break;
 80074e2:	bf00      	nop
  }

  return fsm_onging;
 80074e4:	2300      	movs	r3, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	200004f8 	.word	0x200004f8
 80074f0:	200004fc 	.word	0x200004fc
 80074f4:	08008940 	.word	0x08008940
 80074f8:	08008728 	.word	0x08008728

080074fc <wireless_reg_handle>:
static uint8_t cmd;
static Event_t wireless_event;

static void wireless_packet_analys(void);

void wireless_reg_handle(UART_HandleTypeDef *h_uart, DMA_HandleTypeDef *h_dma) {
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  m_uart = h_uart;
 8007506:	4a05      	ldr	r2, [pc, #20]	@ (800751c <wireless_reg_handle+0x20>)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6013      	str	r3, [r2, #0]
  m_dma  = h_dma;
 800750c:	4a04      	ldr	r2, [pc, #16]	@ (8007520 <wireless_reg_handle+0x24>)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	6013      	str	r3, [r2, #0]
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr
 800751c:	20000500 	.word	0x20000500
 8007520:	20000504 	.word	0x20000504

08007524 <wireless_event_init>:
void wireless_event_init(void) {
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  wireless_event.type = kPackIdle;
 8007528:	4b04      	ldr	r3, [pc, #16]	@ (800753c <wireless_event_init+0x18>)
 800752a:	2200      	movs	r2, #0
 800752c:	701a      	strb	r2, [r3, #0]
  wireless_event.func = wireless_packet_analys;
 800752e:	4b03      	ldr	r3, [pc, #12]	@ (800753c <wireless_event_init+0x18>)
 8007530:	4a03      	ldr	r2, [pc, #12]	@ (8007540 <wireless_event_init+0x1c>)
 8007532:	605a      	str	r2, [r3, #4]
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	bc80      	pop	{r7}
 800753a:	4770      	bx	lr
 800753c:	2000058c 	.word	0x2000058c
 8007540:	080075b9 	.word	0x080075b9

08007544 <wireless_init>:

void wireless_init(void) {
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  wireless_event_init();  // 无线事件初始化
 8007548:	f7ff ffec 	bl	8007524 <wireless_event_init>
  reg_event(&wireless_event);
 800754c:	480a      	ldr	r0, [pc, #40]	@ (8007578 <wireless_init+0x34>)
 800754e:	f000 f8a9 	bl	80076a4 <reg_event>

  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口中断+dma
 8007552:	4b0a      	ldr	r3, [pc, #40]	@ (800757c <wireless_init+0x38>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2280      	movs	r2, #128	@ 0x80
 8007558:	4909      	ldr	r1, [pc, #36]	@ (8007580 <wireless_init+0x3c>)
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe ff0e 	bl	800637c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满中断函数
 8007560:	4b08      	ldr	r3, [pc, #32]	@ (8007584 <wireless_init+0x40>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	4b06      	ldr	r3, [pc, #24]	@ (8007584 <wireless_init+0x40>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0204 	bic.w	r2, r2, #4
 8007572:	601a      	str	r2, [r3, #0]
}
 8007574:	bf00      	nop
 8007576:	bd80      	pop	{r7, pc}
 8007578:	2000058c 	.word	0x2000058c
 800757c:	20000500 	.word	0x20000500
 8007580:	20000508 	.word	0x20000508
 8007584:	20000504 	.word	0x20000504

08007588 <GetWireLessHandle>:

UART_HandleTypeDef *GetWireLessHandle(void) {
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  if (m_uart == NULL) LOGW("not get m_uart");
 800758c:	4b07      	ldr	r3, [pc, #28]	@ (80075ac <GetWireLessHandle+0x24>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d107      	bne.n	80075a4 <GetWireLessHandle+0x1c>
 8007594:	f7fb fbde 	bl	8002d54 <HAL_GetTick>
 8007598:	4603      	mov	r3, r0
 800759a:	4a05      	ldr	r2, [pc, #20]	@ (80075b0 <GetWireLessHandle+0x28>)
 800759c:	4619      	mov	r1, r3
 800759e:	4805      	ldr	r0, [pc, #20]	@ (80075b4 <GetWireLessHandle+0x2c>)
 80075a0:	f000 f9aa 	bl	80078f8 <iprintf>
  return m_uart;
 80075a4:	4b01      	ldr	r3, [pc, #4]	@ (80075ac <GetWireLessHandle+0x24>)
 80075a6:	681b      	ldr	r3, [r3, #0]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000500 	.word	0x20000500
 80075b0:	08008950 	.word	0x08008950
 80075b4:	0800879c 	.word	0x0800879c

080075b8 <wireless_packet_analys>:

void wireless_send(uint8_t *data, uint8_t len) { HAL_UART_Transmit(m_uart, data, len, 100); }

void wireless_packet_analys(void) {
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
  // RecvPackHead_t *head;
  // head
  if (rx_len == 5) {
 80075bc:	4b05      	ldr	r3, [pc, #20]	@ (80075d4 <wireless_packet_analys+0x1c>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b05      	cmp	r3, #5
 80075c2:	d103      	bne.n	80075cc <wireless_packet_analys+0x14>
    cmd = rx_buf[3];
 80075c4:	4b04      	ldr	r3, [pc, #16]	@ (80075d8 <wireless_packet_analys+0x20>)
 80075c6:	78da      	ldrb	r2, [r3, #3]
 80075c8:	4b04      	ldr	r3, [pc, #16]	@ (80075dc <wireless_packet_analys+0x24>)
 80075ca:	701a      	strb	r2, [r3, #0]
  }
  // LOGI("EVENT FUNC success");
}
 80075cc:	bf00      	nop
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bc80      	pop	{r7}
 80075d2:	4770      	bx	lr
 80075d4:	20000588 	.word	0x20000588
 80075d8:	20000508 	.word	0x20000508
 80075dc:	2000058a 	.word	0x2000058a

080075e0 <GetCmdType>:
    // LOGI("%02x", wireless_packet_analys())
    flag = false;
  }
}

uint8_t GetCmdType(void) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  if (flag) {
 80075e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007610 <GetCmdType+0x30>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00e      	beq.n	800760a <GetCmdType+0x2a>
    LOGI("Cmd is : %02x", cmd);
 80075ec:	f7fb fbb2 	bl	8002d54 <HAL_GetTick>
 80075f0:	4601      	mov	r1, r0
 80075f2:	4b08      	ldr	r3, [pc, #32]	@ (8007614 <GetCmdType+0x34>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	4a08      	ldr	r2, [pc, #32]	@ (8007618 <GetCmdType+0x38>)
 80075f8:	4808      	ldr	r0, [pc, #32]	@ (800761c <GetCmdType+0x3c>)
 80075fa:	f000 f97d 	bl	80078f8 <iprintf>
    flag = false;
 80075fe:	4b04      	ldr	r3, [pc, #16]	@ (8007610 <GetCmdType+0x30>)
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
    return cmd;
 8007604:	4b03      	ldr	r3, [pc, #12]	@ (8007614 <GetCmdType+0x34>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	e000      	b.n	800760c <GetCmdType+0x2c>
  }
  return 10;
 800760a:	230a      	movs	r3, #10
}
 800760c:	4618      	mov	r0, r3
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20000589 	.word	0x20000589
 8007614:	2000058a 	.word	0x2000058a
 8007618:	08008964 	.word	0x08008964
 800761c:	080087e8 	.word	0x080087e8

08007620 <receive_rx_data>:

void receive_rx_data(void) {
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
  flag                = true;
 8007624:	4b16      	ldr	r3, [pc, #88]	@ (8007680 <receive_rx_data+0x60>)
 8007626:	2201      	movs	r2, #1
 8007628:	701a      	strb	r2, [r3, #0]
  wireless_event.type = kWireLess;
 800762a:	4b16      	ldr	r3, [pc, #88]	@ (8007684 <receive_rx_data+0x64>)
 800762c:	2201      	movs	r2, #1
 800762e:	701a      	strb	r2, [r3, #0]
  LOGI("TEST");
 8007630:	f7fb fb90 	bl	8002d54 <HAL_GetTick>
 8007634:	4603      	mov	r3, r0
 8007636:	4a14      	ldr	r2, [pc, #80]	@ (8007688 <receive_rx_data+0x68>)
 8007638:	4619      	mov	r1, r3
 800763a:	4814      	ldr	r0, [pc, #80]	@ (800768c <receive_rx_data+0x6c>)
 800763c:	f000 f95c 	bl	80078f8 <iprintf>
  rx_len = WIRELESS_MAX_BUF_LEN - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8007640:	4b13      	ldr	r3, [pc, #76]	@ (8007690 <receive_rx_data+0x70>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	b2da      	uxtb	r2, r3
 8007648:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800764c:	1a9b      	subs	r3, r3, r2
 800764e:	b2da      	uxtb	r2, r3
 8007650:	4b10      	ldr	r3, [pc, #64]	@ (8007694 <receive_rx_data+0x74>)
 8007652:	701a      	strb	r2, [r3, #0]
  wireless_packet_analys();
 8007654:	f7ff ffb0 	bl	80075b8 <wireless_packet_analys>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口中断+dma
 8007658:	4b0f      	ldr	r3, [pc, #60]	@ (8007698 <receive_rx_data+0x78>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2280      	movs	r2, #128	@ 0x80
 800765e:	490f      	ldr	r1, [pc, #60]	@ (800769c <receive_rx_data+0x7c>)
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe fe8b 	bl	800637c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满中断函数
 8007666:	4b0e      	ldr	r3, [pc, #56]	@ (80076a0 <receive_rx_data+0x80>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4b0c      	ldr	r3, [pc, #48]	@ (80076a0 <receive_rx_data+0x80>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0204 	bic.w	r2, r2, #4
 8007678:	601a      	str	r2, [r3, #0]
}
 800767a:	bf00      	nop
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000589 	.word	0x20000589
 8007684:	2000058c 	.word	0x2000058c
 8007688:	08008970 	.word	0x08008970
 800768c:	08008814 	.word	0x08008814
 8007690:	200004a8 	.word	0x200004a8
 8007694:	20000588 	.word	0x20000588
 8007698:	20000500 	.word	0x20000500
 800769c:	20000508 	.word	0x20000508
 80076a0:	20000504 	.word	0x20000504

080076a4 <reg_event>:
// #include "module_driver/driver_wireless.h"

static Event_t *event[EVENT_NUM];
static uint8_t  index_event;

void reg_event(Event_t *h_event) {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  // event
  if (index_event >= EVENT_NUM) {
 80076ac:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <reg_event+0x44>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b0f      	cmp	r3, #15
 80076b2:	d908      	bls.n	80076c6 <reg_event+0x22>
    LOGI("event num overflow");
 80076b4:	f7fb fb4e 	bl	8002d54 <HAL_GetTick>
 80076b8:	4603      	mov	r3, r0
 80076ba:	4a0c      	ldr	r2, [pc, #48]	@ (80076ec <reg_event+0x48>)
 80076bc:	4619      	mov	r1, r3
 80076be:	480c      	ldr	r0, [pc, #48]	@ (80076f0 <reg_event+0x4c>)
 80076c0:	f000 f91a 	bl	80078f8 <iprintf>
    return;
 80076c4:	e00c      	b.n	80076e0 <reg_event+0x3c>
  }

  event[index_event] = h_event;
 80076c6:	4b08      	ldr	r3, [pc, #32]	@ (80076e8 <reg_event+0x44>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	4619      	mov	r1, r3
 80076cc:	4a09      	ldr	r2, [pc, #36]	@ (80076f4 <reg_event+0x50>)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  index_event++;
 80076d4:	4b04      	ldr	r3, [pc, #16]	@ (80076e8 <reg_event+0x44>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	3301      	adds	r3, #1
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	4b02      	ldr	r3, [pc, #8]	@ (80076e8 <reg_event+0x44>)
 80076de:	701a      	strb	r2, [r3, #0]
}
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	200005d4 	.word	0x200005d4
 80076ec:	08008980 	.word	0x08008980
 80076f0:	08008834 	.word	0x08008834
 80076f4:	20000594 	.word	0x20000594

080076f8 <event_datapack_process>:

void event_datapack_process(void) {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
  for (int i = 0; i < index_event; i++) {
 80076fe:	2300      	movs	r3, #0
 8007700:	607b      	str	r3, [r7, #4]
 8007702:	e025      	b.n	8007750 <event_datapack_process+0x58>
    if (kPackIdle != event[i]->type) {
 8007704:	4a17      	ldr	r2, [pc, #92]	@ (8007764 <event_datapack_process+0x6c>)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d01b      	beq.n	800774a <event_datapack_process+0x52>
      if (NULL == event[i]->func) {
 8007712:	4a14      	ldr	r2, [pc, #80]	@ (8007764 <event_datapack_process+0x6c>)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d108      	bne.n	8007732 <event_datapack_process+0x3a>
        LOGE("event func is empty: %d", i);
 8007720:	f7fb fb18 	bl	8002d54 <HAL_GetTick>
 8007724:	4601      	mov	r1, r0
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a0f      	ldr	r2, [pc, #60]	@ (8007768 <event_datapack_process+0x70>)
 800772a:	4810      	ldr	r0, [pc, #64]	@ (800776c <event_datapack_process+0x74>)
 800772c:	f000 f8e4 	bl	80078f8 <iprintf>
        return;
 8007730:	e014      	b.n	800775c <event_datapack_process+0x64>
      }
      // 相对应的函数
      event[i]->func();
 8007732:	4a0c      	ldr	r2, [pc, #48]	@ (8007764 <event_datapack_process+0x6c>)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	4798      	blx	r3
      event[i]->type = kPackIdle;
 800773e:	4a09      	ldr	r2, [pc, #36]	@ (8007764 <event_datapack_process+0x6c>)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < index_event; i++) {
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3301      	adds	r3, #1
 800774e:	607b      	str	r3, [r7, #4]
 8007750:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <event_datapack_process+0x78>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4293      	cmp	r3, r2
 800775a:	dbd3      	blt.n	8007704 <event_datapack_process+0xc>
    }
  }
}
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000594 	.word	0x20000594
 8007768:	0800898c 	.word	0x0800898c
 800776c:	08008864 	.word	0x08008864
 8007770:	200005d4 	.word	0x200005d4

08007774 <std>:
 8007774:	2300      	movs	r3, #0
 8007776:	b510      	push	{r4, lr}
 8007778:	4604      	mov	r4, r0
 800777a:	e9c0 3300 	strd	r3, r3, [r0]
 800777e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007782:	6083      	str	r3, [r0, #8]
 8007784:	8181      	strh	r1, [r0, #12]
 8007786:	6643      	str	r3, [r0, #100]	@ 0x64
 8007788:	81c2      	strh	r2, [r0, #14]
 800778a:	6183      	str	r3, [r0, #24]
 800778c:	4619      	mov	r1, r3
 800778e:	2208      	movs	r2, #8
 8007790:	305c      	adds	r0, #92	@ 0x5c
 8007792:	f000 f906 	bl	80079a2 <memset>
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <std+0x58>)
 8007798:	6224      	str	r4, [r4, #32]
 800779a:	6263      	str	r3, [r4, #36]	@ 0x24
 800779c:	4b0c      	ldr	r3, [pc, #48]	@ (80077d0 <std+0x5c>)
 800779e:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077a0:	4b0c      	ldr	r3, [pc, #48]	@ (80077d4 <std+0x60>)
 80077a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077a4:	4b0c      	ldr	r3, [pc, #48]	@ (80077d8 <std+0x64>)
 80077a6:	6323      	str	r3, [r4, #48]	@ 0x30
 80077a8:	4b0c      	ldr	r3, [pc, #48]	@ (80077dc <std+0x68>)
 80077aa:	429c      	cmp	r4, r3
 80077ac:	d006      	beq.n	80077bc <std+0x48>
 80077ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077b2:	4294      	cmp	r4, r2
 80077b4:	d002      	beq.n	80077bc <std+0x48>
 80077b6:	33d0      	adds	r3, #208	@ 0xd0
 80077b8:	429c      	cmp	r4, r3
 80077ba:	d105      	bne.n	80077c8 <std+0x54>
 80077bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c4:	f000 b966 	b.w	8007a94 <__retarget_lock_init_recursive>
 80077c8:	bd10      	pop	{r4, pc}
 80077ca:	bf00      	nop
 80077cc:	0800791d 	.word	0x0800791d
 80077d0:	0800793f 	.word	0x0800793f
 80077d4:	08007977 	.word	0x08007977
 80077d8:	0800799b 	.word	0x0800799b
 80077dc:	200005d8 	.word	0x200005d8

080077e0 <stdio_exit_handler>:
 80077e0:	4a02      	ldr	r2, [pc, #8]	@ (80077ec <stdio_exit_handler+0xc>)
 80077e2:	4903      	ldr	r1, [pc, #12]	@ (80077f0 <stdio_exit_handler+0x10>)
 80077e4:	4803      	ldr	r0, [pc, #12]	@ (80077f4 <stdio_exit_handler+0x14>)
 80077e6:	f000 b869 	b.w	80078bc <_fwalk_sglue>
 80077ea:	bf00      	nop
 80077ec:	2000000c 	.word	0x2000000c
 80077f0:	0800832d 	.word	0x0800832d
 80077f4:	2000001c 	.word	0x2000001c

080077f8 <cleanup_stdio>:
 80077f8:	6841      	ldr	r1, [r0, #4]
 80077fa:	4b0c      	ldr	r3, [pc, #48]	@ (800782c <cleanup_stdio+0x34>)
 80077fc:	b510      	push	{r4, lr}
 80077fe:	4299      	cmp	r1, r3
 8007800:	4604      	mov	r4, r0
 8007802:	d001      	beq.n	8007808 <cleanup_stdio+0x10>
 8007804:	f000 fd92 	bl	800832c <_fflush_r>
 8007808:	68a1      	ldr	r1, [r4, #8]
 800780a:	4b09      	ldr	r3, [pc, #36]	@ (8007830 <cleanup_stdio+0x38>)
 800780c:	4299      	cmp	r1, r3
 800780e:	d002      	beq.n	8007816 <cleanup_stdio+0x1e>
 8007810:	4620      	mov	r0, r4
 8007812:	f000 fd8b 	bl	800832c <_fflush_r>
 8007816:	68e1      	ldr	r1, [r4, #12]
 8007818:	4b06      	ldr	r3, [pc, #24]	@ (8007834 <cleanup_stdio+0x3c>)
 800781a:	4299      	cmp	r1, r3
 800781c:	d004      	beq.n	8007828 <cleanup_stdio+0x30>
 800781e:	4620      	mov	r0, r4
 8007820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007824:	f000 bd82 	b.w	800832c <_fflush_r>
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop
 800782c:	200005d8 	.word	0x200005d8
 8007830:	20000640 	.word	0x20000640
 8007834:	200006a8 	.word	0x200006a8

08007838 <global_stdio_init.part.0>:
 8007838:	b510      	push	{r4, lr}
 800783a:	4b0b      	ldr	r3, [pc, #44]	@ (8007868 <global_stdio_init.part.0+0x30>)
 800783c:	4c0b      	ldr	r4, [pc, #44]	@ (800786c <global_stdio_init.part.0+0x34>)
 800783e:	4a0c      	ldr	r2, [pc, #48]	@ (8007870 <global_stdio_init.part.0+0x38>)
 8007840:	4620      	mov	r0, r4
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	2104      	movs	r1, #4
 8007846:	2200      	movs	r2, #0
 8007848:	f7ff ff94 	bl	8007774 <std>
 800784c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007850:	2201      	movs	r2, #1
 8007852:	2109      	movs	r1, #9
 8007854:	f7ff ff8e 	bl	8007774 <std>
 8007858:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800785c:	2202      	movs	r2, #2
 800785e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007862:	2112      	movs	r1, #18
 8007864:	f7ff bf86 	b.w	8007774 <std>
 8007868:	20000710 	.word	0x20000710
 800786c:	200005d8 	.word	0x200005d8
 8007870:	080077e1 	.word	0x080077e1

08007874 <__sfp_lock_acquire>:
 8007874:	4801      	ldr	r0, [pc, #4]	@ (800787c <__sfp_lock_acquire+0x8>)
 8007876:	f000 b90e 	b.w	8007a96 <__retarget_lock_acquire_recursive>
 800787a:	bf00      	nop
 800787c:	20000719 	.word	0x20000719

08007880 <__sfp_lock_release>:
 8007880:	4801      	ldr	r0, [pc, #4]	@ (8007888 <__sfp_lock_release+0x8>)
 8007882:	f000 b909 	b.w	8007a98 <__retarget_lock_release_recursive>
 8007886:	bf00      	nop
 8007888:	20000719 	.word	0x20000719

0800788c <__sinit>:
 800788c:	b510      	push	{r4, lr}
 800788e:	4604      	mov	r4, r0
 8007890:	f7ff fff0 	bl	8007874 <__sfp_lock_acquire>
 8007894:	6a23      	ldr	r3, [r4, #32]
 8007896:	b11b      	cbz	r3, 80078a0 <__sinit+0x14>
 8007898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800789c:	f7ff bff0 	b.w	8007880 <__sfp_lock_release>
 80078a0:	4b04      	ldr	r3, [pc, #16]	@ (80078b4 <__sinit+0x28>)
 80078a2:	6223      	str	r3, [r4, #32]
 80078a4:	4b04      	ldr	r3, [pc, #16]	@ (80078b8 <__sinit+0x2c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f5      	bne.n	8007898 <__sinit+0xc>
 80078ac:	f7ff ffc4 	bl	8007838 <global_stdio_init.part.0>
 80078b0:	e7f2      	b.n	8007898 <__sinit+0xc>
 80078b2:	bf00      	nop
 80078b4:	080077f9 	.word	0x080077f9
 80078b8:	20000710 	.word	0x20000710

080078bc <_fwalk_sglue>:
 80078bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c0:	4607      	mov	r7, r0
 80078c2:	4688      	mov	r8, r1
 80078c4:	4614      	mov	r4, r2
 80078c6:	2600      	movs	r6, #0
 80078c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078cc:	f1b9 0901 	subs.w	r9, r9, #1
 80078d0:	d505      	bpl.n	80078de <_fwalk_sglue+0x22>
 80078d2:	6824      	ldr	r4, [r4, #0]
 80078d4:	2c00      	cmp	r4, #0
 80078d6:	d1f7      	bne.n	80078c8 <_fwalk_sglue+0xc>
 80078d8:	4630      	mov	r0, r6
 80078da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d907      	bls.n	80078f4 <_fwalk_sglue+0x38>
 80078e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078e8:	3301      	adds	r3, #1
 80078ea:	d003      	beq.n	80078f4 <_fwalk_sglue+0x38>
 80078ec:	4629      	mov	r1, r5
 80078ee:	4638      	mov	r0, r7
 80078f0:	47c0      	blx	r8
 80078f2:	4306      	orrs	r6, r0
 80078f4:	3568      	adds	r5, #104	@ 0x68
 80078f6:	e7e9      	b.n	80078cc <_fwalk_sglue+0x10>

080078f8 <iprintf>:
 80078f8:	b40f      	push	{r0, r1, r2, r3}
 80078fa:	b507      	push	{r0, r1, r2, lr}
 80078fc:	4906      	ldr	r1, [pc, #24]	@ (8007918 <iprintf+0x20>)
 80078fe:	ab04      	add	r3, sp, #16
 8007900:	6808      	ldr	r0, [r1, #0]
 8007902:	f853 2b04 	ldr.w	r2, [r3], #4
 8007906:	6881      	ldr	r1, [r0, #8]
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	f000 f9e5 	bl	8007cd8 <_vfiprintf_r>
 800790e:	b003      	add	sp, #12
 8007910:	f85d eb04 	ldr.w	lr, [sp], #4
 8007914:	b004      	add	sp, #16
 8007916:	4770      	bx	lr
 8007918:	20000018 	.word	0x20000018

0800791c <__sread>:
 800791c:	b510      	push	{r4, lr}
 800791e:	460c      	mov	r4, r1
 8007920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007924:	f000 f868 	bl	80079f8 <_read_r>
 8007928:	2800      	cmp	r0, #0
 800792a:	bfab      	itete	ge
 800792c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800792e:	89a3      	ldrhlt	r3, [r4, #12]
 8007930:	181b      	addge	r3, r3, r0
 8007932:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007936:	bfac      	ite	ge
 8007938:	6563      	strge	r3, [r4, #84]	@ 0x54
 800793a:	81a3      	strhlt	r3, [r4, #12]
 800793c:	bd10      	pop	{r4, pc}

0800793e <__swrite>:
 800793e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007942:	461f      	mov	r7, r3
 8007944:	898b      	ldrh	r3, [r1, #12]
 8007946:	4605      	mov	r5, r0
 8007948:	05db      	lsls	r3, r3, #23
 800794a:	460c      	mov	r4, r1
 800794c:	4616      	mov	r6, r2
 800794e:	d505      	bpl.n	800795c <__swrite+0x1e>
 8007950:	2302      	movs	r3, #2
 8007952:	2200      	movs	r2, #0
 8007954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007958:	f000 f83c 	bl	80079d4 <_lseek_r>
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	4632      	mov	r2, r6
 8007960:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007964:	81a3      	strh	r3, [r4, #12]
 8007966:	4628      	mov	r0, r5
 8007968:	463b      	mov	r3, r7
 800796a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800796e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007972:	f000 b853 	b.w	8007a1c <_write_r>

08007976 <__sseek>:
 8007976:	b510      	push	{r4, lr}
 8007978:	460c      	mov	r4, r1
 800797a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797e:	f000 f829 	bl	80079d4 <_lseek_r>
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	bf15      	itete	ne
 8007988:	6560      	strne	r0, [r4, #84]	@ 0x54
 800798a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800798e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007992:	81a3      	strheq	r3, [r4, #12]
 8007994:	bf18      	it	ne
 8007996:	81a3      	strhne	r3, [r4, #12]
 8007998:	bd10      	pop	{r4, pc}

0800799a <__sclose>:
 800799a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800799e:	f000 b809 	b.w	80079b4 <_close_r>

080079a2 <memset>:
 80079a2:	4603      	mov	r3, r0
 80079a4:	4402      	add	r2, r0
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d100      	bne.n	80079ac <memset+0xa>
 80079aa:	4770      	bx	lr
 80079ac:	f803 1b01 	strb.w	r1, [r3], #1
 80079b0:	e7f9      	b.n	80079a6 <memset+0x4>
	...

080079b4 <_close_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	2300      	movs	r3, #0
 80079b8:	4d05      	ldr	r5, [pc, #20]	@ (80079d0 <_close_r+0x1c>)
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	602b      	str	r3, [r5, #0]
 80079c0:	f7fa fc8c 	bl	80022dc <_close>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_close_r+0x1a>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_close_r+0x1a>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	20000714 	.word	0x20000714

080079d4 <_lseek_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	2200      	movs	r2, #0
 80079de:	4d05      	ldr	r5, [pc, #20]	@ (80079f4 <_lseek_r+0x20>)
 80079e0:	602a      	str	r2, [r5, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	f7fa fc9e 	bl	8002324 <_lseek>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_lseek_r+0x1e>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_lseek_r+0x1e>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	20000714 	.word	0x20000714

080079f8 <_read_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	4611      	mov	r1, r2
 8007a00:	2200      	movs	r2, #0
 8007a02:	4d05      	ldr	r5, [pc, #20]	@ (8007a18 <_read_r+0x20>)
 8007a04:	602a      	str	r2, [r5, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f7fa fc2f 	bl	800226a <_read>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_read_r+0x1e>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_read_r+0x1e>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	20000714 	.word	0x20000714

08007a1c <_write_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4604      	mov	r4, r0
 8007a20:	4608      	mov	r0, r1
 8007a22:	4611      	mov	r1, r2
 8007a24:	2200      	movs	r2, #0
 8007a26:	4d05      	ldr	r5, [pc, #20]	@ (8007a3c <_write_r+0x20>)
 8007a28:	602a      	str	r2, [r5, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f7fa fc3a 	bl	80022a4 <_write>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_write_r+0x1e>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_write_r+0x1e>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20000714 	.word	0x20000714

08007a40 <__errno>:
 8007a40:	4b01      	ldr	r3, [pc, #4]	@ (8007a48 <__errno+0x8>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	20000018 	.word	0x20000018

08007a4c <__libc_init_array>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	2600      	movs	r6, #0
 8007a50:	4d0c      	ldr	r5, [pc, #48]	@ (8007a84 <__libc_init_array+0x38>)
 8007a52:	4c0d      	ldr	r4, [pc, #52]	@ (8007a88 <__libc_init_array+0x3c>)
 8007a54:	1b64      	subs	r4, r4, r5
 8007a56:	10a4      	asrs	r4, r4, #2
 8007a58:	42a6      	cmp	r6, r4
 8007a5a:	d109      	bne.n	8007a70 <__libc_init_array+0x24>
 8007a5c:	f000 fdc4 	bl	80085e8 <_init>
 8007a60:	2600      	movs	r6, #0
 8007a62:	4d0a      	ldr	r5, [pc, #40]	@ (8007a8c <__libc_init_array+0x40>)
 8007a64:	4c0a      	ldr	r4, [pc, #40]	@ (8007a90 <__libc_init_array+0x44>)
 8007a66:	1b64      	subs	r4, r4, r5
 8007a68:	10a4      	asrs	r4, r4, #2
 8007a6a:	42a6      	cmp	r6, r4
 8007a6c:	d105      	bne.n	8007a7a <__libc_init_array+0x2e>
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a74:	4798      	blx	r3
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7ee      	b.n	8007a58 <__libc_init_array+0xc>
 8007a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7e:	4798      	blx	r3
 8007a80:	3601      	adds	r6, #1
 8007a82:	e7f2      	b.n	8007a6a <__libc_init_array+0x1e>
 8007a84:	080089d8 	.word	0x080089d8
 8007a88:	080089d8 	.word	0x080089d8
 8007a8c:	080089d8 	.word	0x080089d8
 8007a90:	080089dc 	.word	0x080089dc

08007a94 <__retarget_lock_init_recursive>:
 8007a94:	4770      	bx	lr

08007a96 <__retarget_lock_acquire_recursive>:
 8007a96:	4770      	bx	lr

08007a98 <__retarget_lock_release_recursive>:
 8007a98:	4770      	bx	lr
	...

08007a9c <_free_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	d040      	beq.n	8007b26 <_free_r+0x8a>
 8007aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa8:	1f0c      	subs	r4, r1, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfb8      	it	lt
 8007aae:	18e4      	addlt	r4, r4, r3
 8007ab0:	f000 f8de 	bl	8007c70 <__malloc_lock>
 8007ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b28 <_free_r+0x8c>)
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	b933      	cbnz	r3, 8007ac8 <_free_r+0x2c>
 8007aba:	6063      	str	r3, [r4, #4]
 8007abc:	6014      	str	r4, [r2, #0]
 8007abe:	4628      	mov	r0, r5
 8007ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac4:	f000 b8da 	b.w	8007c7c <__malloc_unlock>
 8007ac8:	42a3      	cmp	r3, r4
 8007aca:	d908      	bls.n	8007ade <_free_r+0x42>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	1821      	adds	r1, r4, r0
 8007ad0:	428b      	cmp	r3, r1
 8007ad2:	bf01      	itttt	eq
 8007ad4:	6819      	ldreq	r1, [r3, #0]
 8007ad6:	685b      	ldreq	r3, [r3, #4]
 8007ad8:	1809      	addeq	r1, r1, r0
 8007ada:	6021      	streq	r1, [r4, #0]
 8007adc:	e7ed      	b.n	8007aba <_free_r+0x1e>
 8007ade:	461a      	mov	r2, r3
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	b10b      	cbz	r3, 8007ae8 <_free_r+0x4c>
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	d9fa      	bls.n	8007ade <_free_r+0x42>
 8007ae8:	6811      	ldr	r1, [r2, #0]
 8007aea:	1850      	adds	r0, r2, r1
 8007aec:	42a0      	cmp	r0, r4
 8007aee:	d10b      	bne.n	8007b08 <_free_r+0x6c>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	4401      	add	r1, r0
 8007af4:	1850      	adds	r0, r2, r1
 8007af6:	4283      	cmp	r3, r0
 8007af8:	6011      	str	r1, [r2, #0]
 8007afa:	d1e0      	bne.n	8007abe <_free_r+0x22>
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	4408      	add	r0, r1
 8007b02:	6010      	str	r0, [r2, #0]
 8007b04:	6053      	str	r3, [r2, #4]
 8007b06:	e7da      	b.n	8007abe <_free_r+0x22>
 8007b08:	d902      	bls.n	8007b10 <_free_r+0x74>
 8007b0a:	230c      	movs	r3, #12
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	e7d6      	b.n	8007abe <_free_r+0x22>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	1821      	adds	r1, r4, r0
 8007b14:	428b      	cmp	r3, r1
 8007b16:	bf01      	itttt	eq
 8007b18:	6819      	ldreq	r1, [r3, #0]
 8007b1a:	685b      	ldreq	r3, [r3, #4]
 8007b1c:	1809      	addeq	r1, r1, r0
 8007b1e:	6021      	streq	r1, [r4, #0]
 8007b20:	6063      	str	r3, [r4, #4]
 8007b22:	6054      	str	r4, [r2, #4]
 8007b24:	e7cb      	b.n	8007abe <_free_r+0x22>
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20000720 	.word	0x20000720

08007b2c <sbrk_aligned>:
 8007b2c:	b570      	push	{r4, r5, r6, lr}
 8007b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007b6c <sbrk_aligned+0x40>)
 8007b30:	460c      	mov	r4, r1
 8007b32:	6831      	ldr	r1, [r6, #0]
 8007b34:	4605      	mov	r5, r0
 8007b36:	b911      	cbnz	r1, 8007b3e <sbrk_aligned+0x12>
 8007b38:	f000 fcb4 	bl	80084a4 <_sbrk_r>
 8007b3c:	6030      	str	r0, [r6, #0]
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4628      	mov	r0, r5
 8007b42:	f000 fcaf 	bl	80084a4 <_sbrk_r>
 8007b46:	1c43      	adds	r3, r0, #1
 8007b48:	d103      	bne.n	8007b52 <sbrk_aligned+0x26>
 8007b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007b4e:	4620      	mov	r0, r4
 8007b50:	bd70      	pop	{r4, r5, r6, pc}
 8007b52:	1cc4      	adds	r4, r0, #3
 8007b54:	f024 0403 	bic.w	r4, r4, #3
 8007b58:	42a0      	cmp	r0, r4
 8007b5a:	d0f8      	beq.n	8007b4e <sbrk_aligned+0x22>
 8007b5c:	1a21      	subs	r1, r4, r0
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f000 fca0 	bl	80084a4 <_sbrk_r>
 8007b64:	3001      	adds	r0, #1
 8007b66:	d1f2      	bne.n	8007b4e <sbrk_aligned+0x22>
 8007b68:	e7ef      	b.n	8007b4a <sbrk_aligned+0x1e>
 8007b6a:	bf00      	nop
 8007b6c:	2000071c 	.word	0x2000071c

08007b70 <_malloc_r>:
 8007b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b74:	1ccd      	adds	r5, r1, #3
 8007b76:	f025 0503 	bic.w	r5, r5, #3
 8007b7a:	3508      	adds	r5, #8
 8007b7c:	2d0c      	cmp	r5, #12
 8007b7e:	bf38      	it	cc
 8007b80:	250c      	movcc	r5, #12
 8007b82:	2d00      	cmp	r5, #0
 8007b84:	4606      	mov	r6, r0
 8007b86:	db01      	blt.n	8007b8c <_malloc_r+0x1c>
 8007b88:	42a9      	cmp	r1, r5
 8007b8a:	d904      	bls.n	8007b96 <_malloc_r+0x26>
 8007b8c:	230c      	movs	r3, #12
 8007b8e:	6033      	str	r3, [r6, #0]
 8007b90:	2000      	movs	r0, #0
 8007b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c6c <_malloc_r+0xfc>
 8007b9a:	f000 f869 	bl	8007c70 <__malloc_lock>
 8007b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007ba2:	461c      	mov	r4, r3
 8007ba4:	bb44      	cbnz	r4, 8007bf8 <_malloc_r+0x88>
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f7ff ffbf 	bl	8007b2c <sbrk_aligned>
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	d158      	bne.n	8007c66 <_malloc_r+0xf6>
 8007bb4:	f8d8 4000 	ldr.w	r4, [r8]
 8007bb8:	4627      	mov	r7, r4
 8007bba:	2f00      	cmp	r7, #0
 8007bbc:	d143      	bne.n	8007c46 <_malloc_r+0xd6>
 8007bbe:	2c00      	cmp	r4, #0
 8007bc0:	d04b      	beq.n	8007c5a <_malloc_r+0xea>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	eb04 0903 	add.w	r9, r4, r3
 8007bcc:	f000 fc6a 	bl	80084a4 <_sbrk_r>
 8007bd0:	4581      	cmp	r9, r0
 8007bd2:	d142      	bne.n	8007c5a <_malloc_r+0xea>
 8007bd4:	6821      	ldr	r1, [r4, #0]
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	1a6d      	subs	r5, r5, r1
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f7ff ffa6 	bl	8007b2c <sbrk_aligned>
 8007be0:	3001      	adds	r0, #1
 8007be2:	d03a      	beq.n	8007c5a <_malloc_r+0xea>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	442b      	add	r3, r5
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	f8d8 3000 	ldr.w	r3, [r8]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	bb62      	cbnz	r2, 8007c4c <_malloc_r+0xdc>
 8007bf2:	f8c8 7000 	str.w	r7, [r8]
 8007bf6:	e00f      	b.n	8007c18 <_malloc_r+0xa8>
 8007bf8:	6822      	ldr	r2, [r4, #0]
 8007bfa:	1b52      	subs	r2, r2, r5
 8007bfc:	d420      	bmi.n	8007c40 <_malloc_r+0xd0>
 8007bfe:	2a0b      	cmp	r2, #11
 8007c00:	d917      	bls.n	8007c32 <_malloc_r+0xc2>
 8007c02:	1961      	adds	r1, r4, r5
 8007c04:	42a3      	cmp	r3, r4
 8007c06:	6025      	str	r5, [r4, #0]
 8007c08:	bf18      	it	ne
 8007c0a:	6059      	strne	r1, [r3, #4]
 8007c0c:	6863      	ldr	r3, [r4, #4]
 8007c0e:	bf08      	it	eq
 8007c10:	f8c8 1000 	streq.w	r1, [r8]
 8007c14:	5162      	str	r2, [r4, r5]
 8007c16:	604b      	str	r3, [r1, #4]
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f000 f82f 	bl	8007c7c <__malloc_unlock>
 8007c1e:	f104 000b 	add.w	r0, r4, #11
 8007c22:	1d23      	adds	r3, r4, #4
 8007c24:	f020 0007 	bic.w	r0, r0, #7
 8007c28:	1ac2      	subs	r2, r0, r3
 8007c2a:	bf1c      	itt	ne
 8007c2c:	1a1b      	subne	r3, r3, r0
 8007c2e:	50a3      	strne	r3, [r4, r2]
 8007c30:	e7af      	b.n	8007b92 <_malloc_r+0x22>
 8007c32:	6862      	ldr	r2, [r4, #4]
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	bf0c      	ite	eq
 8007c38:	f8c8 2000 	streq.w	r2, [r8]
 8007c3c:	605a      	strne	r2, [r3, #4]
 8007c3e:	e7eb      	b.n	8007c18 <_malloc_r+0xa8>
 8007c40:	4623      	mov	r3, r4
 8007c42:	6864      	ldr	r4, [r4, #4]
 8007c44:	e7ae      	b.n	8007ba4 <_malloc_r+0x34>
 8007c46:	463c      	mov	r4, r7
 8007c48:	687f      	ldr	r7, [r7, #4]
 8007c4a:	e7b6      	b.n	8007bba <_malloc_r+0x4a>
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	d1fb      	bne.n	8007c4c <_malloc_r+0xdc>
 8007c54:	2300      	movs	r3, #0
 8007c56:	6053      	str	r3, [r2, #4]
 8007c58:	e7de      	b.n	8007c18 <_malloc_r+0xa8>
 8007c5a:	230c      	movs	r3, #12
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	6033      	str	r3, [r6, #0]
 8007c60:	f000 f80c 	bl	8007c7c <__malloc_unlock>
 8007c64:	e794      	b.n	8007b90 <_malloc_r+0x20>
 8007c66:	6005      	str	r5, [r0, #0]
 8007c68:	e7d6      	b.n	8007c18 <_malloc_r+0xa8>
 8007c6a:	bf00      	nop
 8007c6c:	20000720 	.word	0x20000720

08007c70 <__malloc_lock>:
 8007c70:	4801      	ldr	r0, [pc, #4]	@ (8007c78 <__malloc_lock+0x8>)
 8007c72:	f7ff bf10 	b.w	8007a96 <__retarget_lock_acquire_recursive>
 8007c76:	bf00      	nop
 8007c78:	20000718 	.word	0x20000718

08007c7c <__malloc_unlock>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	@ (8007c84 <__malloc_unlock+0x8>)
 8007c7e:	f7ff bf0b 	b.w	8007a98 <__retarget_lock_release_recursive>
 8007c82:	bf00      	nop
 8007c84:	20000718 	.word	0x20000718

08007c88 <__sfputc_r>:
 8007c88:	6893      	ldr	r3, [r2, #8]
 8007c8a:	b410      	push	{r4}
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	6093      	str	r3, [r2, #8]
 8007c92:	da07      	bge.n	8007ca4 <__sfputc_r+0x1c>
 8007c94:	6994      	ldr	r4, [r2, #24]
 8007c96:	42a3      	cmp	r3, r4
 8007c98:	db01      	blt.n	8007c9e <__sfputc_r+0x16>
 8007c9a:	290a      	cmp	r1, #10
 8007c9c:	d102      	bne.n	8007ca4 <__sfputc_r+0x1c>
 8007c9e:	bc10      	pop	{r4}
 8007ca0:	f000 bb6c 	b.w	800837c <__swbuf_r>
 8007ca4:	6813      	ldr	r3, [r2, #0]
 8007ca6:	1c58      	adds	r0, r3, #1
 8007ca8:	6010      	str	r0, [r2, #0]
 8007caa:	7019      	strb	r1, [r3, #0]
 8007cac:	4608      	mov	r0, r1
 8007cae:	bc10      	pop	{r4}
 8007cb0:	4770      	bx	lr

08007cb2 <__sfputs_r>:
 8007cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	460f      	mov	r7, r1
 8007cb8:	4614      	mov	r4, r2
 8007cba:	18d5      	adds	r5, r2, r3
 8007cbc:	42ac      	cmp	r4, r5
 8007cbe:	d101      	bne.n	8007cc4 <__sfputs_r+0x12>
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	e007      	b.n	8007cd4 <__sfputs_r+0x22>
 8007cc4:	463a      	mov	r2, r7
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ccc:	f7ff ffdc 	bl	8007c88 <__sfputc_r>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d1f3      	bne.n	8007cbc <__sfputs_r+0xa>
 8007cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cd8 <_vfiprintf_r>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	460d      	mov	r5, r1
 8007cde:	4614      	mov	r4, r2
 8007ce0:	4698      	mov	r8, r3
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	b09d      	sub	sp, #116	@ 0x74
 8007ce6:	b118      	cbz	r0, 8007cf0 <_vfiprintf_r+0x18>
 8007ce8:	6a03      	ldr	r3, [r0, #32]
 8007cea:	b90b      	cbnz	r3, 8007cf0 <_vfiprintf_r+0x18>
 8007cec:	f7ff fdce 	bl	800788c <__sinit>
 8007cf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cf2:	07d9      	lsls	r1, r3, #31
 8007cf4:	d405      	bmi.n	8007d02 <_vfiprintf_r+0x2a>
 8007cf6:	89ab      	ldrh	r3, [r5, #12]
 8007cf8:	059a      	lsls	r2, r3, #22
 8007cfa:	d402      	bmi.n	8007d02 <_vfiprintf_r+0x2a>
 8007cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cfe:	f7ff feca 	bl	8007a96 <__retarget_lock_acquire_recursive>
 8007d02:	89ab      	ldrh	r3, [r5, #12]
 8007d04:	071b      	lsls	r3, r3, #28
 8007d06:	d501      	bpl.n	8007d0c <_vfiprintf_r+0x34>
 8007d08:	692b      	ldr	r3, [r5, #16]
 8007d0a:	b99b      	cbnz	r3, 8007d34 <_vfiprintf_r+0x5c>
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f000 fb72 	bl	80083f8 <__swsetup_r>
 8007d14:	b170      	cbz	r0, 8007d34 <_vfiprintf_r+0x5c>
 8007d16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d18:	07dc      	lsls	r4, r3, #31
 8007d1a:	d504      	bpl.n	8007d26 <_vfiprintf_r+0x4e>
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	b01d      	add	sp, #116	@ 0x74
 8007d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	0598      	lsls	r0, r3, #22
 8007d2a:	d4f7      	bmi.n	8007d1c <_vfiprintf_r+0x44>
 8007d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d2e:	f7ff feb3 	bl	8007a98 <__retarget_lock_release_recursive>
 8007d32:	e7f3      	b.n	8007d1c <_vfiprintf_r+0x44>
 8007d34:	2300      	movs	r3, #0
 8007d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d38:	2320      	movs	r3, #32
 8007d3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d3e:	2330      	movs	r3, #48	@ 0x30
 8007d40:	f04f 0901 	mov.w	r9, #1
 8007d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d48:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007ef4 <_vfiprintf_r+0x21c>
 8007d4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d50:	4623      	mov	r3, r4
 8007d52:	469a      	mov	sl, r3
 8007d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d58:	b10a      	cbz	r2, 8007d5e <_vfiprintf_r+0x86>
 8007d5a:	2a25      	cmp	r2, #37	@ 0x25
 8007d5c:	d1f9      	bne.n	8007d52 <_vfiprintf_r+0x7a>
 8007d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d62:	d00b      	beq.n	8007d7c <_vfiprintf_r+0xa4>
 8007d64:	465b      	mov	r3, fp
 8007d66:	4622      	mov	r2, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff ffa1 	bl	8007cb2 <__sfputs_r>
 8007d70:	3001      	adds	r0, #1
 8007d72:	f000 80a7 	beq.w	8007ec4 <_vfiprintf_r+0x1ec>
 8007d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d78:	445a      	add	r2, fp
 8007d7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 809f 	beq.w	8007ec4 <_vfiprintf_r+0x1ec>
 8007d86:	2300      	movs	r3, #0
 8007d88:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d90:	f10a 0a01 	add.w	sl, sl, #1
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	9307      	str	r3, [sp, #28]
 8007d98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d9e:	4654      	mov	r4, sl
 8007da0:	2205      	movs	r2, #5
 8007da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da6:	4853      	ldr	r0, [pc, #332]	@ (8007ef4 <_vfiprintf_r+0x21c>)
 8007da8:	f000 fb8c 	bl	80084c4 <memchr>
 8007dac:	9a04      	ldr	r2, [sp, #16]
 8007dae:	b9d8      	cbnz	r0, 8007de8 <_vfiprintf_r+0x110>
 8007db0:	06d1      	lsls	r1, r2, #27
 8007db2:	bf44      	itt	mi
 8007db4:	2320      	movmi	r3, #32
 8007db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dba:	0713      	lsls	r3, r2, #28
 8007dbc:	bf44      	itt	mi
 8007dbe:	232b      	movmi	r3, #43	@ 0x2b
 8007dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dca:	d015      	beq.n	8007df8 <_vfiprintf_r+0x120>
 8007dcc:	4654      	mov	r4, sl
 8007dce:	2000      	movs	r0, #0
 8007dd0:	f04f 0c0a 	mov.w	ip, #10
 8007dd4:	9a07      	ldr	r2, [sp, #28]
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ddc:	3b30      	subs	r3, #48	@ 0x30
 8007dde:	2b09      	cmp	r3, #9
 8007de0:	d94b      	bls.n	8007e7a <_vfiprintf_r+0x1a2>
 8007de2:	b1b0      	cbz	r0, 8007e12 <_vfiprintf_r+0x13a>
 8007de4:	9207      	str	r2, [sp, #28]
 8007de6:	e014      	b.n	8007e12 <_vfiprintf_r+0x13a>
 8007de8:	eba0 0308 	sub.w	r3, r0, r8
 8007dec:	fa09 f303 	lsl.w	r3, r9, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	46a2      	mov	sl, r4
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	e7d2      	b.n	8007d9e <_vfiprintf_r+0xc6>
 8007df8:	9b03      	ldr	r3, [sp, #12]
 8007dfa:	1d19      	adds	r1, r3, #4
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	9103      	str	r1, [sp, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bfbb      	ittet	lt
 8007e04:	425b      	neglt	r3, r3
 8007e06:	f042 0202 	orrlt.w	r2, r2, #2
 8007e0a:	9307      	strge	r3, [sp, #28]
 8007e0c:	9307      	strlt	r3, [sp, #28]
 8007e0e:	bfb8      	it	lt
 8007e10:	9204      	strlt	r2, [sp, #16]
 8007e12:	7823      	ldrb	r3, [r4, #0]
 8007e14:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e16:	d10a      	bne.n	8007e2e <_vfiprintf_r+0x156>
 8007e18:	7863      	ldrb	r3, [r4, #1]
 8007e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e1c:	d132      	bne.n	8007e84 <_vfiprintf_r+0x1ac>
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	3402      	adds	r4, #2
 8007e22:	1d1a      	adds	r2, r3, #4
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	9203      	str	r2, [sp, #12]
 8007e28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e2c:	9305      	str	r3, [sp, #20]
 8007e2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007ef8 <_vfiprintf_r+0x220>
 8007e32:	2203      	movs	r2, #3
 8007e34:	4650      	mov	r0, sl
 8007e36:	7821      	ldrb	r1, [r4, #0]
 8007e38:	f000 fb44 	bl	80084c4 <memchr>
 8007e3c:	b138      	cbz	r0, 8007e4e <_vfiprintf_r+0x176>
 8007e3e:	2240      	movs	r2, #64	@ 0x40
 8007e40:	9b04      	ldr	r3, [sp, #16]
 8007e42:	eba0 000a 	sub.w	r0, r0, sl
 8007e46:	4082      	lsls	r2, r0
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	3401      	adds	r4, #1
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e52:	2206      	movs	r2, #6
 8007e54:	4829      	ldr	r0, [pc, #164]	@ (8007efc <_vfiprintf_r+0x224>)
 8007e56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e5a:	f000 fb33 	bl	80084c4 <memchr>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d03f      	beq.n	8007ee2 <_vfiprintf_r+0x20a>
 8007e62:	4b27      	ldr	r3, [pc, #156]	@ (8007f00 <_vfiprintf_r+0x228>)
 8007e64:	bb1b      	cbnz	r3, 8007eae <_vfiprintf_r+0x1d6>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	3307      	adds	r3, #7
 8007e6a:	f023 0307 	bic.w	r3, r3, #7
 8007e6e:	3308      	adds	r3, #8
 8007e70:	9303      	str	r3, [sp, #12]
 8007e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e74:	443b      	add	r3, r7
 8007e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e78:	e76a      	b.n	8007d50 <_vfiprintf_r+0x78>
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e82:	e7a8      	b.n	8007dd6 <_vfiprintf_r+0xfe>
 8007e84:	2300      	movs	r3, #0
 8007e86:	f04f 0c0a 	mov.w	ip, #10
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	3401      	adds	r4, #1
 8007e8e:	9305      	str	r3, [sp, #20]
 8007e90:	4620      	mov	r0, r4
 8007e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e96:	3a30      	subs	r2, #48	@ 0x30
 8007e98:	2a09      	cmp	r2, #9
 8007e9a:	d903      	bls.n	8007ea4 <_vfiprintf_r+0x1cc>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0c6      	beq.n	8007e2e <_vfiprintf_r+0x156>
 8007ea0:	9105      	str	r1, [sp, #20]
 8007ea2:	e7c4      	b.n	8007e2e <_vfiprintf_r+0x156>
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eac:	e7f0      	b.n	8007e90 <_vfiprintf_r+0x1b8>
 8007eae:	ab03      	add	r3, sp, #12
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	462a      	mov	r2, r5
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	4b13      	ldr	r3, [pc, #76]	@ (8007f04 <_vfiprintf_r+0x22c>)
 8007eb8:	a904      	add	r1, sp, #16
 8007eba:	f3af 8000 	nop.w
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	1c78      	adds	r0, r7, #1
 8007ec2:	d1d6      	bne.n	8007e72 <_vfiprintf_r+0x19a>
 8007ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ec6:	07d9      	lsls	r1, r3, #31
 8007ec8:	d405      	bmi.n	8007ed6 <_vfiprintf_r+0x1fe>
 8007eca:	89ab      	ldrh	r3, [r5, #12]
 8007ecc:	059a      	lsls	r2, r3, #22
 8007ece:	d402      	bmi.n	8007ed6 <_vfiprintf_r+0x1fe>
 8007ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ed2:	f7ff fde1 	bl	8007a98 <__retarget_lock_release_recursive>
 8007ed6:	89ab      	ldrh	r3, [r5, #12]
 8007ed8:	065b      	lsls	r3, r3, #25
 8007eda:	f53f af1f 	bmi.w	8007d1c <_vfiprintf_r+0x44>
 8007ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ee0:	e71e      	b.n	8007d20 <_vfiprintf_r+0x48>
 8007ee2:	ab03      	add	r3, sp, #12
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	462a      	mov	r2, r5
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4b06      	ldr	r3, [pc, #24]	@ (8007f04 <_vfiprintf_r+0x22c>)
 8007eec:	a904      	add	r1, sp, #16
 8007eee:	f000 f87d 	bl	8007fec <_printf_i>
 8007ef2:	e7e4      	b.n	8007ebe <_vfiprintf_r+0x1e6>
 8007ef4:	080089a3 	.word	0x080089a3
 8007ef8:	080089a9 	.word	0x080089a9
 8007efc:	080089ad 	.word	0x080089ad
 8007f00:	00000000 	.word	0x00000000
 8007f04:	08007cb3 	.word	0x08007cb3

08007f08 <_printf_common>:
 8007f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0c:	4616      	mov	r6, r2
 8007f0e:	4698      	mov	r8, r3
 8007f10:	688a      	ldr	r2, [r1, #8]
 8007f12:	690b      	ldr	r3, [r1, #16]
 8007f14:	4607      	mov	r7, r0
 8007f16:	4293      	cmp	r3, r2
 8007f18:	bfb8      	it	lt
 8007f1a:	4613      	movlt	r3, r2
 8007f1c:	6033      	str	r3, [r6, #0]
 8007f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f22:	460c      	mov	r4, r1
 8007f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f28:	b10a      	cbz	r2, 8007f2e <_printf_common+0x26>
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	6033      	str	r3, [r6, #0]
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	0699      	lsls	r1, r3, #26
 8007f32:	bf42      	ittt	mi
 8007f34:	6833      	ldrmi	r3, [r6, #0]
 8007f36:	3302      	addmi	r3, #2
 8007f38:	6033      	strmi	r3, [r6, #0]
 8007f3a:	6825      	ldr	r5, [r4, #0]
 8007f3c:	f015 0506 	ands.w	r5, r5, #6
 8007f40:	d106      	bne.n	8007f50 <_printf_common+0x48>
 8007f42:	f104 0a19 	add.w	sl, r4, #25
 8007f46:	68e3      	ldr	r3, [r4, #12]
 8007f48:	6832      	ldr	r2, [r6, #0]
 8007f4a:	1a9b      	subs	r3, r3, r2
 8007f4c:	42ab      	cmp	r3, r5
 8007f4e:	dc2b      	bgt.n	8007fa8 <_printf_common+0xa0>
 8007f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f54:	6822      	ldr	r2, [r4, #0]
 8007f56:	3b00      	subs	r3, #0
 8007f58:	bf18      	it	ne
 8007f5a:	2301      	movne	r3, #1
 8007f5c:	0692      	lsls	r2, r2, #26
 8007f5e:	d430      	bmi.n	8007fc2 <_printf_common+0xba>
 8007f60:	4641      	mov	r1, r8
 8007f62:	4638      	mov	r0, r7
 8007f64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f68:	47c8      	blx	r9
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d023      	beq.n	8007fb6 <_printf_common+0xae>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	6922      	ldr	r2, [r4, #16]
 8007f72:	f003 0306 	and.w	r3, r3, #6
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	bf14      	ite	ne
 8007f7a:	2500      	movne	r5, #0
 8007f7c:	6833      	ldreq	r3, [r6, #0]
 8007f7e:	f04f 0600 	mov.w	r6, #0
 8007f82:	bf08      	it	eq
 8007f84:	68e5      	ldreq	r5, [r4, #12]
 8007f86:	f104 041a 	add.w	r4, r4, #26
 8007f8a:	bf08      	it	eq
 8007f8c:	1aed      	subeq	r5, r5, r3
 8007f8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007f92:	bf08      	it	eq
 8007f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	bfc4      	itt	gt
 8007f9c:	1a9b      	subgt	r3, r3, r2
 8007f9e:	18ed      	addgt	r5, r5, r3
 8007fa0:	42b5      	cmp	r5, r6
 8007fa2:	d11a      	bne.n	8007fda <_printf_common+0xd2>
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e008      	b.n	8007fba <_printf_common+0xb2>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4652      	mov	r2, sl
 8007fac:	4641      	mov	r1, r8
 8007fae:	4638      	mov	r0, r7
 8007fb0:	47c8      	blx	r9
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	d103      	bne.n	8007fbe <_printf_common+0xb6>
 8007fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fbe:	3501      	adds	r5, #1
 8007fc0:	e7c1      	b.n	8007f46 <_printf_common+0x3e>
 8007fc2:	2030      	movs	r0, #48	@ 0x30
 8007fc4:	18e1      	adds	r1, r4, r3
 8007fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fd0:	4422      	add	r2, r4
 8007fd2:	3302      	adds	r3, #2
 8007fd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fd8:	e7c2      	b.n	8007f60 <_printf_common+0x58>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	4622      	mov	r2, r4
 8007fde:	4641      	mov	r1, r8
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	47c8      	blx	r9
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d0e6      	beq.n	8007fb6 <_printf_common+0xae>
 8007fe8:	3601      	adds	r6, #1
 8007fea:	e7d9      	b.n	8007fa0 <_printf_common+0x98>

08007fec <_printf_i>:
 8007fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	7e0f      	ldrb	r7, [r1, #24]
 8007ff2:	4691      	mov	r9, r2
 8007ff4:	2f78      	cmp	r7, #120	@ 0x78
 8007ff6:	4680      	mov	r8, r0
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	469a      	mov	sl, r3
 8007ffc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008002:	d807      	bhi.n	8008014 <_printf_i+0x28>
 8008004:	2f62      	cmp	r7, #98	@ 0x62
 8008006:	d80a      	bhi.n	800801e <_printf_i+0x32>
 8008008:	2f00      	cmp	r7, #0
 800800a:	f000 80d3 	beq.w	80081b4 <_printf_i+0x1c8>
 800800e:	2f58      	cmp	r7, #88	@ 0x58
 8008010:	f000 80ba 	beq.w	8008188 <_printf_i+0x19c>
 8008014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800801c:	e03a      	b.n	8008094 <_printf_i+0xa8>
 800801e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008022:	2b15      	cmp	r3, #21
 8008024:	d8f6      	bhi.n	8008014 <_printf_i+0x28>
 8008026:	a101      	add	r1, pc, #4	@ (adr r1, 800802c <_printf_i+0x40>)
 8008028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800802c:	08008085 	.word	0x08008085
 8008030:	08008099 	.word	0x08008099
 8008034:	08008015 	.word	0x08008015
 8008038:	08008015 	.word	0x08008015
 800803c:	08008015 	.word	0x08008015
 8008040:	08008015 	.word	0x08008015
 8008044:	08008099 	.word	0x08008099
 8008048:	08008015 	.word	0x08008015
 800804c:	08008015 	.word	0x08008015
 8008050:	08008015 	.word	0x08008015
 8008054:	08008015 	.word	0x08008015
 8008058:	0800819b 	.word	0x0800819b
 800805c:	080080c3 	.word	0x080080c3
 8008060:	08008155 	.word	0x08008155
 8008064:	08008015 	.word	0x08008015
 8008068:	08008015 	.word	0x08008015
 800806c:	080081bd 	.word	0x080081bd
 8008070:	08008015 	.word	0x08008015
 8008074:	080080c3 	.word	0x080080c3
 8008078:	08008015 	.word	0x08008015
 800807c:	08008015 	.word	0x08008015
 8008080:	0800815d 	.word	0x0800815d
 8008084:	6833      	ldr	r3, [r6, #0]
 8008086:	1d1a      	adds	r2, r3, #4
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6032      	str	r2, [r6, #0]
 800808c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008094:	2301      	movs	r3, #1
 8008096:	e09e      	b.n	80081d6 <_printf_i+0x1ea>
 8008098:	6833      	ldr	r3, [r6, #0]
 800809a:	6820      	ldr	r0, [r4, #0]
 800809c:	1d19      	adds	r1, r3, #4
 800809e:	6031      	str	r1, [r6, #0]
 80080a0:	0606      	lsls	r6, r0, #24
 80080a2:	d501      	bpl.n	80080a8 <_printf_i+0xbc>
 80080a4:	681d      	ldr	r5, [r3, #0]
 80080a6:	e003      	b.n	80080b0 <_printf_i+0xc4>
 80080a8:	0645      	lsls	r5, r0, #25
 80080aa:	d5fb      	bpl.n	80080a4 <_printf_i+0xb8>
 80080ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	da03      	bge.n	80080bc <_printf_i+0xd0>
 80080b4:	232d      	movs	r3, #45	@ 0x2d
 80080b6:	426d      	negs	r5, r5
 80080b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080bc:	230a      	movs	r3, #10
 80080be:	4859      	ldr	r0, [pc, #356]	@ (8008224 <_printf_i+0x238>)
 80080c0:	e011      	b.n	80080e6 <_printf_i+0xfa>
 80080c2:	6821      	ldr	r1, [r4, #0]
 80080c4:	6833      	ldr	r3, [r6, #0]
 80080c6:	0608      	lsls	r0, r1, #24
 80080c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80080cc:	d402      	bmi.n	80080d4 <_printf_i+0xe8>
 80080ce:	0649      	lsls	r1, r1, #25
 80080d0:	bf48      	it	mi
 80080d2:	b2ad      	uxthmi	r5, r5
 80080d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80080d6:	6033      	str	r3, [r6, #0]
 80080d8:	bf14      	ite	ne
 80080da:	230a      	movne	r3, #10
 80080dc:	2308      	moveq	r3, #8
 80080de:	4851      	ldr	r0, [pc, #324]	@ (8008224 <_printf_i+0x238>)
 80080e0:	2100      	movs	r1, #0
 80080e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080e6:	6866      	ldr	r6, [r4, #4]
 80080e8:	2e00      	cmp	r6, #0
 80080ea:	bfa8      	it	ge
 80080ec:	6821      	ldrge	r1, [r4, #0]
 80080ee:	60a6      	str	r6, [r4, #8]
 80080f0:	bfa4      	itt	ge
 80080f2:	f021 0104 	bicge.w	r1, r1, #4
 80080f6:	6021      	strge	r1, [r4, #0]
 80080f8:	b90d      	cbnz	r5, 80080fe <_printf_i+0x112>
 80080fa:	2e00      	cmp	r6, #0
 80080fc:	d04b      	beq.n	8008196 <_printf_i+0x1aa>
 80080fe:	4616      	mov	r6, r2
 8008100:	fbb5 f1f3 	udiv	r1, r5, r3
 8008104:	fb03 5711 	mls	r7, r3, r1, r5
 8008108:	5dc7      	ldrb	r7, [r0, r7]
 800810a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800810e:	462f      	mov	r7, r5
 8008110:	42bb      	cmp	r3, r7
 8008112:	460d      	mov	r5, r1
 8008114:	d9f4      	bls.n	8008100 <_printf_i+0x114>
 8008116:	2b08      	cmp	r3, #8
 8008118:	d10b      	bne.n	8008132 <_printf_i+0x146>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	07df      	lsls	r7, r3, #31
 800811e:	d508      	bpl.n	8008132 <_printf_i+0x146>
 8008120:	6923      	ldr	r3, [r4, #16]
 8008122:	6861      	ldr	r1, [r4, #4]
 8008124:	4299      	cmp	r1, r3
 8008126:	bfde      	ittt	le
 8008128:	2330      	movle	r3, #48	@ 0x30
 800812a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800812e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008132:	1b92      	subs	r2, r2, r6
 8008134:	6122      	str	r2, [r4, #16]
 8008136:	464b      	mov	r3, r9
 8008138:	4621      	mov	r1, r4
 800813a:	4640      	mov	r0, r8
 800813c:	f8cd a000 	str.w	sl, [sp]
 8008140:	aa03      	add	r2, sp, #12
 8008142:	f7ff fee1 	bl	8007f08 <_printf_common>
 8008146:	3001      	adds	r0, #1
 8008148:	d14a      	bne.n	80081e0 <_printf_i+0x1f4>
 800814a:	f04f 30ff 	mov.w	r0, #4294967295
 800814e:	b004      	add	sp, #16
 8008150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	f043 0320 	orr.w	r3, r3, #32
 800815a:	6023      	str	r3, [r4, #0]
 800815c:	2778      	movs	r7, #120	@ 0x78
 800815e:	4832      	ldr	r0, [pc, #200]	@ (8008228 <_printf_i+0x23c>)
 8008160:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	6831      	ldr	r1, [r6, #0]
 8008168:	061f      	lsls	r7, r3, #24
 800816a:	f851 5b04 	ldr.w	r5, [r1], #4
 800816e:	d402      	bmi.n	8008176 <_printf_i+0x18a>
 8008170:	065f      	lsls	r7, r3, #25
 8008172:	bf48      	it	mi
 8008174:	b2ad      	uxthmi	r5, r5
 8008176:	6031      	str	r1, [r6, #0]
 8008178:	07d9      	lsls	r1, r3, #31
 800817a:	bf44      	itt	mi
 800817c:	f043 0320 	orrmi.w	r3, r3, #32
 8008180:	6023      	strmi	r3, [r4, #0]
 8008182:	b11d      	cbz	r5, 800818c <_printf_i+0x1a0>
 8008184:	2310      	movs	r3, #16
 8008186:	e7ab      	b.n	80080e0 <_printf_i+0xf4>
 8008188:	4826      	ldr	r0, [pc, #152]	@ (8008224 <_printf_i+0x238>)
 800818a:	e7e9      	b.n	8008160 <_printf_i+0x174>
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	f023 0320 	bic.w	r3, r3, #32
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	e7f6      	b.n	8008184 <_printf_i+0x198>
 8008196:	4616      	mov	r6, r2
 8008198:	e7bd      	b.n	8008116 <_printf_i+0x12a>
 800819a:	6833      	ldr	r3, [r6, #0]
 800819c:	6825      	ldr	r5, [r4, #0]
 800819e:	1d18      	adds	r0, r3, #4
 80081a0:	6961      	ldr	r1, [r4, #20]
 80081a2:	6030      	str	r0, [r6, #0]
 80081a4:	062e      	lsls	r6, r5, #24
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	d501      	bpl.n	80081ae <_printf_i+0x1c2>
 80081aa:	6019      	str	r1, [r3, #0]
 80081ac:	e002      	b.n	80081b4 <_printf_i+0x1c8>
 80081ae:	0668      	lsls	r0, r5, #25
 80081b0:	d5fb      	bpl.n	80081aa <_printf_i+0x1be>
 80081b2:	8019      	strh	r1, [r3, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	4616      	mov	r6, r2
 80081b8:	6123      	str	r3, [r4, #16]
 80081ba:	e7bc      	b.n	8008136 <_printf_i+0x14a>
 80081bc:	6833      	ldr	r3, [r6, #0]
 80081be:	2100      	movs	r1, #0
 80081c0:	1d1a      	adds	r2, r3, #4
 80081c2:	6032      	str	r2, [r6, #0]
 80081c4:	681e      	ldr	r6, [r3, #0]
 80081c6:	6862      	ldr	r2, [r4, #4]
 80081c8:	4630      	mov	r0, r6
 80081ca:	f000 f97b 	bl	80084c4 <memchr>
 80081ce:	b108      	cbz	r0, 80081d4 <_printf_i+0x1e8>
 80081d0:	1b80      	subs	r0, r0, r6
 80081d2:	6060      	str	r0, [r4, #4]
 80081d4:	6863      	ldr	r3, [r4, #4]
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	2300      	movs	r3, #0
 80081da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081de:	e7aa      	b.n	8008136 <_printf_i+0x14a>
 80081e0:	4632      	mov	r2, r6
 80081e2:	4649      	mov	r1, r9
 80081e4:	4640      	mov	r0, r8
 80081e6:	6923      	ldr	r3, [r4, #16]
 80081e8:	47d0      	blx	sl
 80081ea:	3001      	adds	r0, #1
 80081ec:	d0ad      	beq.n	800814a <_printf_i+0x15e>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	079b      	lsls	r3, r3, #30
 80081f2:	d413      	bmi.n	800821c <_printf_i+0x230>
 80081f4:	68e0      	ldr	r0, [r4, #12]
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	4298      	cmp	r0, r3
 80081fa:	bfb8      	it	lt
 80081fc:	4618      	movlt	r0, r3
 80081fe:	e7a6      	b.n	800814e <_printf_i+0x162>
 8008200:	2301      	movs	r3, #1
 8008202:	4632      	mov	r2, r6
 8008204:	4649      	mov	r1, r9
 8008206:	4640      	mov	r0, r8
 8008208:	47d0      	blx	sl
 800820a:	3001      	adds	r0, #1
 800820c:	d09d      	beq.n	800814a <_printf_i+0x15e>
 800820e:	3501      	adds	r5, #1
 8008210:	68e3      	ldr	r3, [r4, #12]
 8008212:	9903      	ldr	r1, [sp, #12]
 8008214:	1a5b      	subs	r3, r3, r1
 8008216:	42ab      	cmp	r3, r5
 8008218:	dcf2      	bgt.n	8008200 <_printf_i+0x214>
 800821a:	e7eb      	b.n	80081f4 <_printf_i+0x208>
 800821c:	2500      	movs	r5, #0
 800821e:	f104 0619 	add.w	r6, r4, #25
 8008222:	e7f5      	b.n	8008210 <_printf_i+0x224>
 8008224:	080089b4 	.word	0x080089b4
 8008228:	080089c5 	.word	0x080089c5

0800822c <__sflush_r>:
 800822c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	0716      	lsls	r6, r2, #28
 8008234:	4605      	mov	r5, r0
 8008236:	460c      	mov	r4, r1
 8008238:	d454      	bmi.n	80082e4 <__sflush_r+0xb8>
 800823a:	684b      	ldr	r3, [r1, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	dc02      	bgt.n	8008246 <__sflush_r+0x1a>
 8008240:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	dd48      	ble.n	80082d8 <__sflush_r+0xac>
 8008246:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008248:	2e00      	cmp	r6, #0
 800824a:	d045      	beq.n	80082d8 <__sflush_r+0xac>
 800824c:	2300      	movs	r3, #0
 800824e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008252:	682f      	ldr	r7, [r5, #0]
 8008254:	6a21      	ldr	r1, [r4, #32]
 8008256:	602b      	str	r3, [r5, #0]
 8008258:	d030      	beq.n	80082bc <__sflush_r+0x90>
 800825a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	0759      	lsls	r1, r3, #29
 8008260:	d505      	bpl.n	800826e <__sflush_r+0x42>
 8008262:	6863      	ldr	r3, [r4, #4]
 8008264:	1ad2      	subs	r2, r2, r3
 8008266:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008268:	b10b      	cbz	r3, 800826e <__sflush_r+0x42>
 800826a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800826c:	1ad2      	subs	r2, r2, r3
 800826e:	2300      	movs	r3, #0
 8008270:	4628      	mov	r0, r5
 8008272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008274:	6a21      	ldr	r1, [r4, #32]
 8008276:	47b0      	blx	r6
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	d106      	bne.n	800828c <__sflush_r+0x60>
 800827e:	6829      	ldr	r1, [r5, #0]
 8008280:	291d      	cmp	r1, #29
 8008282:	d82b      	bhi.n	80082dc <__sflush_r+0xb0>
 8008284:	4a28      	ldr	r2, [pc, #160]	@ (8008328 <__sflush_r+0xfc>)
 8008286:	410a      	asrs	r2, r1
 8008288:	07d6      	lsls	r6, r2, #31
 800828a:	d427      	bmi.n	80082dc <__sflush_r+0xb0>
 800828c:	2200      	movs	r2, #0
 800828e:	6062      	str	r2, [r4, #4]
 8008290:	6922      	ldr	r2, [r4, #16]
 8008292:	04d9      	lsls	r1, r3, #19
 8008294:	6022      	str	r2, [r4, #0]
 8008296:	d504      	bpl.n	80082a2 <__sflush_r+0x76>
 8008298:	1c42      	adds	r2, r0, #1
 800829a:	d101      	bne.n	80082a0 <__sflush_r+0x74>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b903      	cbnz	r3, 80082a2 <__sflush_r+0x76>
 80082a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80082a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082a4:	602f      	str	r7, [r5, #0]
 80082a6:	b1b9      	cbz	r1, 80082d8 <__sflush_r+0xac>
 80082a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ac:	4299      	cmp	r1, r3
 80082ae:	d002      	beq.n	80082b6 <__sflush_r+0x8a>
 80082b0:	4628      	mov	r0, r5
 80082b2:	f7ff fbf3 	bl	8007a9c <_free_r>
 80082b6:	2300      	movs	r3, #0
 80082b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ba:	e00d      	b.n	80082d8 <__sflush_r+0xac>
 80082bc:	2301      	movs	r3, #1
 80082be:	4628      	mov	r0, r5
 80082c0:	47b0      	blx	r6
 80082c2:	4602      	mov	r2, r0
 80082c4:	1c50      	adds	r0, r2, #1
 80082c6:	d1c9      	bne.n	800825c <__sflush_r+0x30>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0c6      	beq.n	800825c <__sflush_r+0x30>
 80082ce:	2b1d      	cmp	r3, #29
 80082d0:	d001      	beq.n	80082d6 <__sflush_r+0xaa>
 80082d2:	2b16      	cmp	r3, #22
 80082d4:	d11d      	bne.n	8008312 <__sflush_r+0xe6>
 80082d6:	602f      	str	r7, [r5, #0]
 80082d8:	2000      	movs	r0, #0
 80082da:	e021      	b.n	8008320 <__sflush_r+0xf4>
 80082dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082e0:	b21b      	sxth	r3, r3
 80082e2:	e01a      	b.n	800831a <__sflush_r+0xee>
 80082e4:	690f      	ldr	r7, [r1, #16]
 80082e6:	2f00      	cmp	r7, #0
 80082e8:	d0f6      	beq.n	80082d8 <__sflush_r+0xac>
 80082ea:	0793      	lsls	r3, r2, #30
 80082ec:	bf18      	it	ne
 80082ee:	2300      	movne	r3, #0
 80082f0:	680e      	ldr	r6, [r1, #0]
 80082f2:	bf08      	it	eq
 80082f4:	694b      	ldreq	r3, [r1, #20]
 80082f6:	1bf6      	subs	r6, r6, r7
 80082f8:	600f      	str	r7, [r1, #0]
 80082fa:	608b      	str	r3, [r1, #8]
 80082fc:	2e00      	cmp	r6, #0
 80082fe:	ddeb      	ble.n	80082d8 <__sflush_r+0xac>
 8008300:	4633      	mov	r3, r6
 8008302:	463a      	mov	r2, r7
 8008304:	4628      	mov	r0, r5
 8008306:	6a21      	ldr	r1, [r4, #32]
 8008308:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800830c:	47e0      	blx	ip
 800830e:	2800      	cmp	r0, #0
 8008310:	dc07      	bgt.n	8008322 <__sflush_r+0xf6>
 8008312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831a:	f04f 30ff 	mov.w	r0, #4294967295
 800831e:	81a3      	strh	r3, [r4, #12]
 8008320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008322:	4407      	add	r7, r0
 8008324:	1a36      	subs	r6, r6, r0
 8008326:	e7e9      	b.n	80082fc <__sflush_r+0xd0>
 8008328:	dfbffffe 	.word	0xdfbffffe

0800832c <_fflush_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	690b      	ldr	r3, [r1, #16]
 8008330:	4605      	mov	r5, r0
 8008332:	460c      	mov	r4, r1
 8008334:	b913      	cbnz	r3, 800833c <_fflush_r+0x10>
 8008336:	2500      	movs	r5, #0
 8008338:	4628      	mov	r0, r5
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	b118      	cbz	r0, 8008346 <_fflush_r+0x1a>
 800833e:	6a03      	ldr	r3, [r0, #32]
 8008340:	b90b      	cbnz	r3, 8008346 <_fflush_r+0x1a>
 8008342:	f7ff faa3 	bl	800788c <__sinit>
 8008346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0f3      	beq.n	8008336 <_fflush_r+0xa>
 800834e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008350:	07d0      	lsls	r0, r2, #31
 8008352:	d404      	bmi.n	800835e <_fflush_r+0x32>
 8008354:	0599      	lsls	r1, r3, #22
 8008356:	d402      	bmi.n	800835e <_fflush_r+0x32>
 8008358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800835a:	f7ff fb9c 	bl	8007a96 <__retarget_lock_acquire_recursive>
 800835e:	4628      	mov	r0, r5
 8008360:	4621      	mov	r1, r4
 8008362:	f7ff ff63 	bl	800822c <__sflush_r>
 8008366:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008368:	4605      	mov	r5, r0
 800836a:	07da      	lsls	r2, r3, #31
 800836c:	d4e4      	bmi.n	8008338 <_fflush_r+0xc>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	059b      	lsls	r3, r3, #22
 8008372:	d4e1      	bmi.n	8008338 <_fflush_r+0xc>
 8008374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008376:	f7ff fb8f 	bl	8007a98 <__retarget_lock_release_recursive>
 800837a:	e7dd      	b.n	8008338 <_fflush_r+0xc>

0800837c <__swbuf_r>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	460e      	mov	r6, r1
 8008380:	4614      	mov	r4, r2
 8008382:	4605      	mov	r5, r0
 8008384:	b118      	cbz	r0, 800838e <__swbuf_r+0x12>
 8008386:	6a03      	ldr	r3, [r0, #32]
 8008388:	b90b      	cbnz	r3, 800838e <__swbuf_r+0x12>
 800838a:	f7ff fa7f 	bl	800788c <__sinit>
 800838e:	69a3      	ldr	r3, [r4, #24]
 8008390:	60a3      	str	r3, [r4, #8]
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	071a      	lsls	r2, r3, #28
 8008396:	d501      	bpl.n	800839c <__swbuf_r+0x20>
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	b943      	cbnz	r3, 80083ae <__swbuf_r+0x32>
 800839c:	4621      	mov	r1, r4
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 f82a 	bl	80083f8 <__swsetup_r>
 80083a4:	b118      	cbz	r0, 80083ae <__swbuf_r+0x32>
 80083a6:	f04f 37ff 	mov.w	r7, #4294967295
 80083aa:	4638      	mov	r0, r7
 80083ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	6922      	ldr	r2, [r4, #16]
 80083b2:	b2f6      	uxtb	r6, r6
 80083b4:	1a98      	subs	r0, r3, r2
 80083b6:	6963      	ldr	r3, [r4, #20]
 80083b8:	4637      	mov	r7, r6
 80083ba:	4283      	cmp	r3, r0
 80083bc:	dc05      	bgt.n	80083ca <__swbuf_r+0x4e>
 80083be:	4621      	mov	r1, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	f7ff ffb3 	bl	800832c <_fflush_r>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d1ed      	bne.n	80083a6 <__swbuf_r+0x2a>
 80083ca:	68a3      	ldr	r3, [r4, #8]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	60a3      	str	r3, [r4, #8]
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	6022      	str	r2, [r4, #0]
 80083d6:	701e      	strb	r6, [r3, #0]
 80083d8:	6962      	ldr	r2, [r4, #20]
 80083da:	1c43      	adds	r3, r0, #1
 80083dc:	429a      	cmp	r2, r3
 80083de:	d004      	beq.n	80083ea <__swbuf_r+0x6e>
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	07db      	lsls	r3, r3, #31
 80083e4:	d5e1      	bpl.n	80083aa <__swbuf_r+0x2e>
 80083e6:	2e0a      	cmp	r6, #10
 80083e8:	d1df      	bne.n	80083aa <__swbuf_r+0x2e>
 80083ea:	4621      	mov	r1, r4
 80083ec:	4628      	mov	r0, r5
 80083ee:	f7ff ff9d 	bl	800832c <_fflush_r>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d0d9      	beq.n	80083aa <__swbuf_r+0x2e>
 80083f6:	e7d6      	b.n	80083a6 <__swbuf_r+0x2a>

080083f8 <__swsetup_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4b29      	ldr	r3, [pc, #164]	@ (80084a0 <__swsetup_r+0xa8>)
 80083fc:	4605      	mov	r5, r0
 80083fe:	6818      	ldr	r0, [r3, #0]
 8008400:	460c      	mov	r4, r1
 8008402:	b118      	cbz	r0, 800840c <__swsetup_r+0x14>
 8008404:	6a03      	ldr	r3, [r0, #32]
 8008406:	b90b      	cbnz	r3, 800840c <__swsetup_r+0x14>
 8008408:	f7ff fa40 	bl	800788c <__sinit>
 800840c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008410:	0719      	lsls	r1, r3, #28
 8008412:	d422      	bmi.n	800845a <__swsetup_r+0x62>
 8008414:	06da      	lsls	r2, r3, #27
 8008416:	d407      	bmi.n	8008428 <__swsetup_r+0x30>
 8008418:	2209      	movs	r2, #9
 800841a:	602a      	str	r2, [r5, #0]
 800841c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	81a3      	strh	r3, [r4, #12]
 8008426:	e033      	b.n	8008490 <__swsetup_r+0x98>
 8008428:	0758      	lsls	r0, r3, #29
 800842a:	d512      	bpl.n	8008452 <__swsetup_r+0x5a>
 800842c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800842e:	b141      	cbz	r1, 8008442 <__swsetup_r+0x4a>
 8008430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008434:	4299      	cmp	r1, r3
 8008436:	d002      	beq.n	800843e <__swsetup_r+0x46>
 8008438:	4628      	mov	r0, r5
 800843a:	f7ff fb2f 	bl	8007a9c <_free_r>
 800843e:	2300      	movs	r3, #0
 8008440:	6363      	str	r3, [r4, #52]	@ 0x34
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008448:	81a3      	strh	r3, [r4, #12]
 800844a:	2300      	movs	r3, #0
 800844c:	6063      	str	r3, [r4, #4]
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f043 0308 	orr.w	r3, r3, #8
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	b94b      	cbnz	r3, 8008472 <__swsetup_r+0x7a>
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008468:	d003      	beq.n	8008472 <__swsetup_r+0x7a>
 800846a:	4621      	mov	r1, r4
 800846c:	4628      	mov	r0, r5
 800846e:	f000 f85c 	bl	800852a <__smakebuf_r>
 8008472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008476:	f013 0201 	ands.w	r2, r3, #1
 800847a:	d00a      	beq.n	8008492 <__swsetup_r+0x9a>
 800847c:	2200      	movs	r2, #0
 800847e:	60a2      	str	r2, [r4, #8]
 8008480:	6962      	ldr	r2, [r4, #20]
 8008482:	4252      	negs	r2, r2
 8008484:	61a2      	str	r2, [r4, #24]
 8008486:	6922      	ldr	r2, [r4, #16]
 8008488:	b942      	cbnz	r2, 800849c <__swsetup_r+0xa4>
 800848a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800848e:	d1c5      	bne.n	800841c <__swsetup_r+0x24>
 8008490:	bd38      	pop	{r3, r4, r5, pc}
 8008492:	0799      	lsls	r1, r3, #30
 8008494:	bf58      	it	pl
 8008496:	6962      	ldrpl	r2, [r4, #20]
 8008498:	60a2      	str	r2, [r4, #8]
 800849a:	e7f4      	b.n	8008486 <__swsetup_r+0x8e>
 800849c:	2000      	movs	r0, #0
 800849e:	e7f7      	b.n	8008490 <__swsetup_r+0x98>
 80084a0:	20000018 	.word	0x20000018

080084a4 <_sbrk_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	2300      	movs	r3, #0
 80084a8:	4d05      	ldr	r5, [pc, #20]	@ (80084c0 <_sbrk_r+0x1c>)
 80084aa:	4604      	mov	r4, r0
 80084ac:	4608      	mov	r0, r1
 80084ae:	602b      	str	r3, [r5, #0]
 80084b0:	f7f9 ff44 	bl	800233c <_sbrk>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_sbrk_r+0x1a>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_sbrk_r+0x1a>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	20000714 	.word	0x20000714

080084c4 <memchr>:
 80084c4:	4603      	mov	r3, r0
 80084c6:	b510      	push	{r4, lr}
 80084c8:	b2c9      	uxtb	r1, r1
 80084ca:	4402      	add	r2, r0
 80084cc:	4293      	cmp	r3, r2
 80084ce:	4618      	mov	r0, r3
 80084d0:	d101      	bne.n	80084d6 <memchr+0x12>
 80084d2:	2000      	movs	r0, #0
 80084d4:	e003      	b.n	80084de <memchr+0x1a>
 80084d6:	7804      	ldrb	r4, [r0, #0]
 80084d8:	3301      	adds	r3, #1
 80084da:	428c      	cmp	r4, r1
 80084dc:	d1f6      	bne.n	80084cc <memchr+0x8>
 80084de:	bd10      	pop	{r4, pc}

080084e0 <__swhatbuf_r>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	460c      	mov	r4, r1
 80084e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e8:	4615      	mov	r5, r2
 80084ea:	2900      	cmp	r1, #0
 80084ec:	461e      	mov	r6, r3
 80084ee:	b096      	sub	sp, #88	@ 0x58
 80084f0:	da0c      	bge.n	800850c <__swhatbuf_r+0x2c>
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	2100      	movs	r1, #0
 80084f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084fa:	bf14      	ite	ne
 80084fc:	2340      	movne	r3, #64	@ 0x40
 80084fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008502:	2000      	movs	r0, #0
 8008504:	6031      	str	r1, [r6, #0]
 8008506:	602b      	str	r3, [r5, #0]
 8008508:	b016      	add	sp, #88	@ 0x58
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	466a      	mov	r2, sp
 800850e:	f000 f849 	bl	80085a4 <_fstat_r>
 8008512:	2800      	cmp	r0, #0
 8008514:	dbed      	blt.n	80084f2 <__swhatbuf_r+0x12>
 8008516:	9901      	ldr	r1, [sp, #4]
 8008518:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800851c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008520:	4259      	negs	r1, r3
 8008522:	4159      	adcs	r1, r3
 8008524:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008528:	e7eb      	b.n	8008502 <__swhatbuf_r+0x22>

0800852a <__smakebuf_r>:
 800852a:	898b      	ldrh	r3, [r1, #12]
 800852c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800852e:	079d      	lsls	r5, r3, #30
 8008530:	4606      	mov	r6, r0
 8008532:	460c      	mov	r4, r1
 8008534:	d507      	bpl.n	8008546 <__smakebuf_r+0x1c>
 8008536:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800853a:	6023      	str	r3, [r4, #0]
 800853c:	6123      	str	r3, [r4, #16]
 800853e:	2301      	movs	r3, #1
 8008540:	6163      	str	r3, [r4, #20]
 8008542:	b003      	add	sp, #12
 8008544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008546:	466a      	mov	r2, sp
 8008548:	ab01      	add	r3, sp, #4
 800854a:	f7ff ffc9 	bl	80084e0 <__swhatbuf_r>
 800854e:	9f00      	ldr	r7, [sp, #0]
 8008550:	4605      	mov	r5, r0
 8008552:	4639      	mov	r1, r7
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff fb0b 	bl	8007b70 <_malloc_r>
 800855a:	b948      	cbnz	r0, 8008570 <__smakebuf_r+0x46>
 800855c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008560:	059a      	lsls	r2, r3, #22
 8008562:	d4ee      	bmi.n	8008542 <__smakebuf_r+0x18>
 8008564:	f023 0303 	bic.w	r3, r3, #3
 8008568:	f043 0302 	orr.w	r3, r3, #2
 800856c:	81a3      	strh	r3, [r4, #12]
 800856e:	e7e2      	b.n	8008536 <__smakebuf_r+0xc>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	9b01      	ldr	r3, [sp, #4]
 800857e:	6020      	str	r0, [r4, #0]
 8008580:	b15b      	cbz	r3, 800859a <__smakebuf_r+0x70>
 8008582:	4630      	mov	r0, r6
 8008584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008588:	f000 f81e 	bl	80085c8 <_isatty_r>
 800858c:	b128      	cbz	r0, 800859a <__smakebuf_r+0x70>
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	f023 0303 	bic.w	r3, r3, #3
 8008594:	f043 0301 	orr.w	r3, r3, #1
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	431d      	orrs	r5, r3
 800859e:	81a5      	strh	r5, [r4, #12]
 80085a0:	e7cf      	b.n	8008542 <__smakebuf_r+0x18>
	...

080085a4 <_fstat_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	2300      	movs	r3, #0
 80085a8:	4d06      	ldr	r5, [pc, #24]	@ (80085c4 <_fstat_r+0x20>)
 80085aa:	4604      	mov	r4, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	f7f9 fe9e 	bl	80022f2 <_fstat>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d102      	bne.n	80085c0 <_fstat_r+0x1c>
 80085ba:	682b      	ldr	r3, [r5, #0]
 80085bc:	b103      	cbz	r3, 80085c0 <_fstat_r+0x1c>
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
 80085c2:	bf00      	nop
 80085c4:	20000714 	.word	0x20000714

080085c8 <_isatty_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	2300      	movs	r3, #0
 80085cc:	4d05      	ldr	r5, [pc, #20]	@ (80085e4 <_isatty_r+0x1c>)
 80085ce:	4604      	mov	r4, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	f7f9 fe9c 	bl	8002310 <_isatty>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_isatty_r+0x1a>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_isatty_r+0x1a>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	20000714 	.word	0x20000714

080085e8 <_init>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr

080085f4 <_fini>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr
