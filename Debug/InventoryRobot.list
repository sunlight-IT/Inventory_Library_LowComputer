
InventoryRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab9c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010e0  0800ad80  0800ad80  0000bd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be60  0800be60  0000d068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800be60  0800be60  0000d068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800be60  0800be60  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be60  0800be60  0000ce60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be64  0800be64  0000ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800be68  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003118  20000068  0800bed0  0000d068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003180  0800bed0  0000d180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a500  00000000  00000000  0000d091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051b9  00000000  00000000  00027591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002c750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001235  00000000  00000000  0002ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000750a  00000000  00000000  0002f10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025ba2  00000000  00000000  00036617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa56b  00000000  00000000  0005c1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064ac  00000000  00000000  00106768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0010cc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ad68 	.word	0x0800ad68

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	0800ad68 	.word	0x0800ad68

08000224 <Events_MainLogic>:
 */

#include "MainLogic.h"

uint8_t Flag_Events_MainLogic = 0;
void    Events_MainLogic(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  switch (Flag_Events_MainLogic) {
 8000228:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <Events_MainLogic+0x34>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <Events_MainLogic+0x12>
 8000230:	2b01      	cmp	r3, #1
 8000232:	d00b      	beq.n	800024c <Events_MainLogic+0x28>
      // Events_WirelessModule();//鏃犵嚎涓插彛浜嬩欢
      // Events_BLDCMotor();
      Events_ServoMotor();
    } break;
  }
}
 8000234:	e00d      	b.n	8000252 <Events_MainLogic+0x2e>
      HAL_TIM_Base_Start_IT(&htim1);
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <Events_MainLogic+0x38>)
 8000238:	f004 fe1e 	bl	8004e78 <HAL_TIM_Base_Start_IT>
      HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	4808      	ldr	r0, [pc, #32]	@ (8000260 <Events_MainLogic+0x3c>)
 8000240:	f004 ff30 	bl	80050a4 <HAL_TIM_IC_Start_IT>
      Flag_Events_MainLogic = 1;
 8000244:	4b04      	ldr	r3, [pc, #16]	@ (8000258 <Events_MainLogic+0x34>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
    } break;
 800024a:	e002      	b.n	8000252 <Events_MainLogic+0x2e>
      Events_ServoMotor();
 800024c:	f000 f828 	bl	80002a0 <Events_ServoMotor>
    } break;
 8000250:	bf00      	nop
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000084 	.word	0x20000084
 800025c:	2000026c 	.word	0x2000026c
 8000260:	200002fc 	.word	0x200002fc

08000264 <motor_uart_init>:
static UART_HandleTypeDef *m_uart;
static DMA_HandleTypeDef  *m_dma;

static void moteruart_receive(void);

void motor_uart_init(void) {  //
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  registCallback(EVENT_MotorUart, moteruart_receive);
 8000268:	4902      	ldr	r1, [pc, #8]	@ (8000274 <motor_uart_init+0x10>)
 800026a:	2002      	movs	r0, #2
 800026c:	f009 fd88 	bl	8009d80 <registCallback>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	080017c9 	.word	0x080017c9

08000278 <GetMoterAck>:
  registCallback(EVENT_MotorUart, moteruart_receive);  // 注册事件表
  // HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
  // __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
}

uint8_t *GetMoterAck(void) { return motor_ack; }
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
 800027c:	4b02      	ldr	r3, [pc, #8]	@ (8000288 <GetMoterAck+0x10>)
 800027e:	4618      	mov	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	200001d4 	.word	0x200001d4

0800028c <GetMoterStateReg>:
uint8_t *GetMoterStateReg(void) { return motor_state_reg; }
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
 8000290:	4b02      	ldr	r3, [pc, #8]	@ (800029c <GetMoterStateReg+0x10>)
 8000292:	4618      	mov	r0, r3
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	200001d8 	.word	0x200001d8

080002a0 <Events_ServoMotor>:
void test(uint8_t *buf) {
  for (uint8_t i = 0; i < 4; i++) {
    buf[i + 1] = ServoMotor.Flag_Event[i];
  }
}
void Events_ServoMotor(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  UartDriver_ServoMotor();
 80002a4:	f001 fc34 	bl	8001b10 <UartDriver_ServoMotor>
  switch (ServoMotor.Flag_Event[0]) {
 80002a8:	4b07      	ldr	r3, [pc, #28]	@ (80002c8 <Events_ServoMotor+0x28>)
 80002aa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d002      	beq.n	80002b8 <Events_ServoMotor+0x18>
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d003      	beq.n	80002be <Events_ServoMotor+0x1e>
    } break;
    case 1: {
      Event_Movement_ServoMotor();
    } break;
  }
}
 80002b6:	e005      	b.n	80002c4 <Events_ServoMotor+0x24>
      Event_Init_ServoMotor();
 80002b8:	f000 f808 	bl	80002cc <Event_Init_ServoMotor>
    } break;
 80002bc:	e002      	b.n	80002c4 <Events_ServoMotor+0x24>
      Event_Movement_ServoMotor();
 80002be:	f000 fd27 	bl	8000d10 <Event_Movement_ServoMotor>
    } break;
 80002c2:	bf00      	nop
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000088 	.word	0x20000088

080002cc <Event_Init_ServoMotor>:

void Event_Init_ServoMotor(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  // LOGI("STATE : %d", ServoMotor.Flag_Event[1]);
  switch (ServoMotor.Flag_Event[1]) {
 80002d0:	4b6e      	ldr	r3, [pc, #440]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 80002d2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80002d6:	2b1a      	cmp	r3, #26
 80002d8:	f200 80d5 	bhi.w	8000486 <Event_Init_ServoMotor+0x1ba>
 80002dc:	a201      	add	r2, pc, #4	@ (adr r2, 80002e4 <Event_Init_ServoMotor+0x18>)
 80002de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e2:	bf00      	nop
 80002e4:	08000351 	.word	0x08000351
 80002e8:	08000487 	.word	0x08000487
 80002ec:	08000375 	.word	0x08000375
 80002f0:	08000487 	.word	0x08000487
 80002f4:	0800038b 	.word	0x0800038b
 80002f8:	08000487 	.word	0x08000487
 80002fc:	080003a1 	.word	0x080003a1
 8000300:	08000487 	.word	0x08000487
 8000304:	080003b7 	.word	0x080003b7
 8000308:	08000487 	.word	0x08000487
 800030c:	080003cd 	.word	0x080003cd
 8000310:	08000487 	.word	0x08000487
 8000314:	080003e3 	.word	0x080003e3
 8000318:	08000487 	.word	0x08000487
 800031c:	080003f9 	.word	0x080003f9
 8000320:	08000487 	.word	0x08000487
 8000324:	0800040f 	.word	0x0800040f
 8000328:	08000487 	.word	0x08000487
 800032c:	08000425 	.word	0x08000425
 8000330:	08000487 	.word	0x08000487
 8000334:	0800043b 	.word	0x0800043b
 8000338:	08000487 	.word	0x08000487
 800033c:	08000451 	.word	0x08000451
 8000340:	08000487 	.word	0x08000487
 8000344:	08000467 	.word	0x08000467
 8000348:	08000487 	.word	0x08000487
 800034c:	0800047d 	.word	0x0800047d
    case 0: {
      SetStatus_Power_ServoMotor(PowerON_ServoMotor);  // 打开伺服驱动器的电源
 8000350:	2000      	movs	r0, #0
 8000352:	f001 f9dd 	bl	8001710 <SetStatus_Power_ServoMotor>
      UartReceiveIT_ServoMotor();                      // 打开伺服驱动器的串口接收
 8000356:	f001 f9f3 	bl	8001740 <UartReceiveIT_ServoMotor>
      ServoMotor.address       = 0x01;                 // 伺服电机地址设置
 800035a:	4b4c      	ldr	r3, [pc, #304]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 800035c:	2201      	movs	r2, #1
 800035e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      ServoMotor.MotorPosition = ON_LEFT;
 8000362:	4b4a      	ldr	r3, [pc, #296]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 8000364:	22ff      	movs	r2, #255	@ 0xff
 8000366:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      ServoMotor.Flag_Event[1] = 1;  // 定时器定时变2，因为伺服驱动器启动时间大约5s
 800036a:	4b48      	ldr	r3, [pc, #288]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 800036c:	2201      	movs	r2, #1
 800036e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000372:	e088      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 2: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000374:	4846      	ldr	r0, [pc, #280]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 8000376:	f000 fe6d 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(0);  // 串口发送：检测状态监控寄存器1-5设置指令,发送是Read_Func，10words
 800037a:	2000      	movs	r0, #0
 800037c:	f000 fec6 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 3;            // 等待串口返回，返回正确赋值14，错误赋值4，串口连上则赋值IsConnected = 1，超时5s：定时器赋值2重新发送
 8000380:	4b42      	ldr	r3, [pc, #264]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 8000382:	2203      	movs	r2, #3
 8000384:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000388:	e07d      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 4: {  // 状态监控寄存器1-5配置错误，发送状态监控寄存器1配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800038a:	4841      	ldr	r0, [pc, #260]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 800038c:	f000 fe62 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(1);  // 设置状态监控寄存器1，发送是Write_Once_Func
 8000390:	2001      	movs	r0, #1
 8000392:	f000 febb 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 5;            // 等待串口返回，返回正确赋值6，错误或者超时2s，赋值4
 8000396:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 8000398:	2205      	movs	r2, #5
 800039a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800039e:	e072      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 6: {  // 状态监控寄存器2配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003a0:	483b      	ldr	r0, [pc, #236]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 80003a2:	f000 fe57 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(2);  // 设置状态监控寄存器2，发送是Write_Once_Func
 80003a6:	2002      	movs	r0, #2
 80003a8:	f000 feb0 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 7;            // 等待串口返回，返回正确赋值8，错误或者超时2s，赋值6
 80003ac:	4b37      	ldr	r3, [pc, #220]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 80003ae:	2207      	movs	r2, #7
 80003b0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003b4:	e067      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 8: {  // 状态监控寄存器3配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003b6:	4836      	ldr	r0, [pc, #216]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 80003b8:	f000 fe4c 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(3);  // 设置状态监控寄存器3，发送是Write_Once_Func
 80003bc:	2003      	movs	r0, #3
 80003be:	f000 fea5 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 9;            // 等待串口返回，返回正确赋值10，错误或者超时2s，赋值8
 80003c2:	4b32      	ldr	r3, [pc, #200]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 80003c4:	2209      	movs	r2, #9
 80003c6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003ca:	e05c      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 10: {  // 状态监控寄存器4配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 80003ce:	f000 fe41 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(4);  // 设置状态监控寄存器4，发送是Write_Once_Func
 80003d2:	2004      	movs	r0, #4
 80003d4:	f000 fe9a 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 11;           // 等待串口返回，返回正确赋值12，错误或者超时2s，赋值10
 80003d8:	4b2c      	ldr	r3, [pc, #176]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 80003da:	220b      	movs	r2, #11
 80003dc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003e0:	e051      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 12: {  // 状态监控寄存器5配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003e2:	482b      	ldr	r0, [pc, #172]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 80003e4:	f000 fe36 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(5);  // 设置状态监控寄存器5，发送是Write_Once_Func
 80003e8:	2005      	movs	r0, #5
 80003ea:	f000 fe8f 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 13;           // 等待串口返回，返回正确赋值2,重读寄存器的状态，错误或者超时2s，赋值12
 80003ee:	4b27      	ldr	r3, [pc, #156]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 80003f0:	220d      	movs	r2, #13
 80003f2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003f6:	e046      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 14: {  // 状态监控寄存器都是正确的
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003f8:	4825      	ldr	r0, [pc, #148]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 80003fa:	f000 fe2b 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(6);  // 查询电子齿轮比分子分母的设置,发送是Read_Func，4words
 80003fe:	2006      	movs	r0, #6
 8000400:	f000 fe84 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 15;           // 等待串口返回，返回正确赋值18,重读寄存器的设置，错误赋值16，超时2s，赋值14
 8000404:	4b21      	ldr	r3, [pc, #132]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 8000406:	220f      	movs	r2, #15
 8000408:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800040c:	e03b      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 16: {
      //
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800040e:	4820      	ldr	r0, [pc, #128]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 8000410:	f000 fe20 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(7);  // 电子齿轮比分子分母的设置，发送是Write_Multi_Func，4words
 8000414:	2007      	movs	r0, #7
 8000416:	f000 fe79 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 17;           // 等待串口返回，返回正确赋值14,重读寄存器的设置，错误或者超时2s，赋值16
 800041a:	4b1c      	ldr	r3, [pc, #112]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 800041c:	2211      	movs	r2, #17
 800041e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000422:	e030      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 18: {  // 读取脉冲清除模式，需要设置为0x11;
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000424:	481a      	ldr	r0, [pc, #104]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 8000426:	f000 fe15 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(8);  // 读取脉冲清除模式，需要设置为0x11，发送是Read_Func，1words
 800042a:	2008      	movs	r0, #8
 800042c:	f000 fe6e 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 19;           // 等待串口返回，返回正确赋值22,重读寄存器的设置，错误赋值20，超时2s，赋值18
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 8000432:	2213      	movs	r2, #19
 8000434:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000438:	e025      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 20: {  // 脉冲清除模式，需要设置为0x11;
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800043a:	4815      	ldr	r0, [pc, #84]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 800043c:	f000 fe0a 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(9);  // 脉冲清除模式，需要设置为0x11，发送是Write_Once_Func，1words
 8000440:	2009      	movs	r0, #9
 8000442:	f000 fe63 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 21;           // 等待串口返回，返回正确赋值18,重读寄存器的设置，错误超时2s，赋值20
 8000446:	4b11      	ldr	r3, [pc, #68]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 8000448:	2215      	movs	r2, #21
 800044a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800044e:	e01a      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 22: {  //
      // 脉冲模式设置正确，读取EEPROM是否为不保存模式
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000450:	480f      	ldr	r0, [pc, #60]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 8000452:	f000 fdff 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(10);  // 读取EEPROM是否为不保存模式，发送是Read_Func，1words
 8000456:	200a      	movs	r0, #10
 8000458:	f000 fe58 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 23;            // 等待串口返回，返回正确赋值26,重读寄存器的设置，错误赋值24，超时2s，赋值22
 800045c:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 800045e:	2217      	movs	r2, #23
 8000460:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000464:	e00f      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 24: {
      //
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000466:	480a      	ldr	r0, [pc, #40]	@ (8000490 <Event_Init_ServoMotor+0x1c4>)
 8000468:	f000 fdf4 	bl	8001054 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(11);  // 设置EEPROM为不保存模式，发送是Write_Once_Func，1words
 800046c:	200b      	movs	r0, #11
 800046e:	f000 fe4d 	bl	800110c <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 25;            // 等待串口返回，返回正确赋值22,重读寄存器的设置，错误超时2s，赋值24
 8000472:	4b06      	ldr	r3, [pc, #24]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 8000474:	2219      	movs	r2, #25
 8000476:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800047a:	e004      	b.n	8000486 <Event_Init_ServoMotor+0x1ba>
    case 26: {  // 设置了EEPROM不保存模式
      ServoMotor.Flag_Event[0] = 1;
 800047c:	4b03      	ldr	r3, [pc, #12]	@ (800048c <Event_Init_ServoMotor+0x1c0>)
 800047e:	2201      	movs	r2, #1
 8000480:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    } break;
 8000484:	bf00      	nop
  }
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000088 	.word	0x20000088
 8000490:	200000ba 	.word	0x200000ba

08000494 <UartAction_ServoMotor>:
void UartAction_ServoMotor(uint8_t *buf, uint8_t len) {
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b0c5      	sub	sp, #276	@ 0x114
 8000498:	af00      	add	r7, sp, #0
 800049a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800049e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80004a2:	6018      	str	r0, [r3, #0]
 80004a4:	460a      	mov	r2, r1
 80004a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004aa:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80004ae:	701a      	strb	r2, [r3, #0]
  uint8_t uartbuf[255] = {0};
 80004b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80004b8:	4618      	mov	r0, r3
 80004ba:	23ff      	movs	r3, #255	@ 0xff
 80004bc:	461a      	mov	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	f009 fe23 	bl	800a10a <memset>
  uint8_t lenbuf       = len / 2;
 80004c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004c8:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	085b      	lsrs	r3, r3, #1
 80004d0:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
  for (uint8_t i = 0; i < lenbuf; i++) {
 80004d4:	2300      	movs	r3, #0
 80004d6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80004da:	e02f      	b.n	800053c <UartAction_ServoMotor+0xa8>
    uartbuf[i] = Get_Regroup_ASCII(buf[2 * i], 0) | Get_Regroup_ASCII(buf[2 * i + 1], 1);
 80004dc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	461a      	mov	r2, r3
 80004e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4413      	add	r3, r2
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 f939 	bl	800176c <Get_Regroup_ASCII>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461c      	mov	r4, r3
 80004fe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	3301      	adds	r3, #1
 8000506:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800050a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800050e:	6812      	ldr	r2, [r2, #0]
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2101      	movs	r1, #1
 8000516:	4618      	mov	r0, r3
 8000518:	f001 f928 	bl	800176c <Get_Regroup_ASCII>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000524:	4322      	orrs	r2, r4
 8000526:	b2d1      	uxtb	r1, r2
 8000528:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800052c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000530:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < lenbuf; i++) {
 8000532:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000536:	3301      	adds	r3, #1
 8000538:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800053c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8000540:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8000544:	429a      	cmp	r2, r3
 8000546:	d3c9      	bcc.n	80004dc <UartAction_ServoMotor+0x48>
  }

  if (uartbuf[0] != ServoMotor.address && uartbuf[1] != (uint8_t)(ServoMotor.UartCurrentCmd[0] & 0xFF)) {
 8000548:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800054c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000550:	781a      	ldrb	r2, [r3, #0]
 8000552:	4bba      	ldr	r3, [pc, #744]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 8000554:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000558:	429a      	cmp	r2, r3
 800055a:	d00a      	beq.n	8000572 <UartAction_ServoMotor+0xde>
 800055c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000564:	785a      	ldrb	r2, [r3, #1]
 8000566:	4bb5      	ldr	r3, [pc, #724]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 8000568:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800056a:	b2db      	uxtb	r3, r3
 800056c:	429a      	cmp	r2, r3
 800056e:	f040 83c2 	bne.w	8000cf6 <UartAction_ServoMotor+0x862>
    return;
  }
  UartWrite_WirelessModule(uartbuf, lenbuf);
 8000572:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8000576:	b29a      	uxth	r2, r3
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4611      	mov	r1, r2
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fb40 	bl	8001c04 <UartWrite_WirelessModule>
  switch (uartbuf[1]) {
 8000584:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	2b10      	cmp	r3, #16
 8000590:	f000 8397 	beq.w	8000cc2 <UartAction_ServoMotor+0x82e>
 8000594:	2b10      	cmp	r3, #16
 8000596:	f300 83b5 	bgt.w	8000d04 <UartAction_ServoMotor+0x870>
 800059a:	2b03      	cmp	r3, #3
 800059c:	d003      	beq.n	80005a6 <UartAction_ServoMotor+0x112>
 800059e:	2b06      	cmp	r3, #6
 80005a0:	f000 80e2 	beq.w	8000768 <UartAction_ServoMotor+0x2d4>
 80005a4:	e3ae      	b.n	8000d04 <UartAction_ServoMotor+0x870>
    case Cmd_Read_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 寄存器
 80005a6:	4ba5      	ldr	r3, [pc, #660]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 80005a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80005aa:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80005ae:	f000 80bd 	beq.w	800072c <UartAction_ServoMotor+0x298>
 80005b2:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80005b6:	f300 83a0 	bgt.w	8000cfa <UartAction_ServoMotor+0x866>
 80005ba:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80005be:	f000 809f 	beq.w	8000700 <UartAction_ServoMotor+0x26c>
 80005c2:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80005c6:	f300 8398 	bgt.w	8000cfa <UartAction_ServoMotor+0x866>
 80005ca:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 80005ce:	d067      	beq.n	80006a0 <UartAction_ServoMotor+0x20c>
 80005d0:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 80005d4:	f300 8391 	bgt.w	8000cfa <UartAction_ServoMotor+0x866>
 80005d8:	2b12      	cmp	r3, #18
 80005da:	f000 80bd 	beq.w	8000758 <UartAction_ServoMotor+0x2c4>
 80005de:	2b22      	cmp	r3, #34	@ 0x22
 80005e0:	d000      	beq.n	80005e4 <UartAction_ServoMotor+0x150>
              }
            } break;
          }
        } break;
      }
    } break;
 80005e2:	e38a      	b.n	8000cfa <UartAction_ServoMotor+0x866>
          switch (ServoMotor.UartCurrentCmd[2]) {
 80005e4:	4b95      	ldr	r3, [pc, #596]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 80005e6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d057      	beq.n	800069c <UartAction_ServoMotor+0x208>
 80005ec:	2b0a      	cmp	r3, #10
 80005ee:	d000      	beq.n	80005f2 <UartAction_ServoMotor+0x15e>
        } break;
 80005f0:	e0b9      	b.n	8000766 <UartAction_ServoMotor+0x2d2>
              ServoMotor.IsConnected         = 1;
 80005f2:	4b92      	ldr	r3, [pc, #584]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	705a      	strb	r2, [r3, #1]
              uint8_t MonitorRegisterSet_buf = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[4] != (PulseMonitor_0022H & 0xFF)) {
 80005fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d005      	beq.n	8000618 <UartAction_ServoMotor+0x184>
                MonitorRegisterSet_buf |= 0x01;
 800060c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[8] != (TorqueMonitor_0024H & 0xFF)) {
 8000618:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800061c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000620:	7a1b      	ldrb	r3, [r3, #8]
 8000622:	2b0b      	cmp	r3, #11
 8000624:	d005      	beq.n	8000632 <UartAction_ServoMotor+0x19e>
                MonitorRegisterSet_buf |= 0x02;
 8000626:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[12] != (SpeedMonitor_0026H & 0xFF)) {
 8000632:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800063a:	7b1b      	ldrb	r3, [r3, #12]
 800063c:	2b07      	cmp	r3, #7
 800063e:	d005      	beq.n	800064c <UartAction_ServoMotor+0x1b8>
                MonitorRegisterSet_buf |= 0x04;
 8000640:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[16] != (Monitor_0028H & 0xFF)) {
 800064c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000654:	7c1b      	ldrb	r3, [r3, #16]
 8000656:	2b03      	cmp	r3, #3
 8000658:	d005      	beq.n	8000666 <UartAction_ServoMotor+0x1d2>
                MonitorRegisterSet_buf |= 0x08;
 800065a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[20] != (Monitor_002AH & 0xFF)) {
 8000666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800066a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800066e:	7d1b      	ldrb	r3, [r3, #20]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d005      	beq.n	8000680 <UartAction_ServoMotor+0x1ec>
                MonitorRegisterSet_buf |= 0x10;
 8000674:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000678:	f043 0310 	orr.w	r3, r3, #16
 800067c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (MonitorRegisterSet_buf) {    // 有配置错误
 8000680:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000684:	2b00      	cmp	r3, #0
 8000686:	d004      	beq.n	8000692 <UartAction_ServoMotor+0x1fe>
                ServoMotor.Flag_Event[1] = 4;  // 重新设置状态监控寄存器1
 8000688:	4b6c      	ldr	r3, [pc, #432]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 800068a:	2204      	movs	r2, #4
 800068c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000690:	e005      	b.n	800069e <UartAction_ServoMotor+0x20a>
                ServoMotor.Flag_Event[1] = 14;
 8000692:	4b6a      	ldr	r3, [pc, #424]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 8000694:	220e      	movs	r2, #14
 8000696:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800069a:	e000      	b.n	800069e <UartAction_ServoMotor+0x20a>
            } break;
 800069c:	bf00      	nop
        } break;
 800069e:	e062      	b.n	8000766 <UartAction_ServoMotor+0x2d2>
          switch (ServoMotor.UartCurrentCmd[2]) {
 80006a0:	4b66      	ldr	r3, [pc, #408]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 80006a2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80006a4:	2b04      	cmp	r3, #4
 80006a6:	d159      	bne.n	800075c <UartAction_ServoMotor+0x2c8>
              uint8_t GearRatioRegisterSet_buf = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              if (uartbuf[4] != (GearRatio_Numerator_0158H & 0xFF)) {
 80006ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	2ba0      	cmp	r3, #160	@ 0xa0
 80006ba:	d005      	beq.n	80006c8 <UartAction_ServoMotor+0x234>
                GearRatioRegisterSet_buf |= 0x01;
 80006bc:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              if (uartbuf[8] != (GearRatio_Denominator_015AH & 0xFF)) {
 80006c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006d0:	7a1b      	ldrb	r3, [r3, #8]
 80006d2:	2b5e      	cmp	r3, #94	@ 0x5e
 80006d4:	d005      	beq.n	80006e2 <UartAction_ServoMotor+0x24e>
                GearRatioRegisterSet_buf |= 0x02;
 80006d6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80006da:	f043 0302 	orr.w	r3, r3, #2
 80006de:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              if (GearRatioRegisterSet_buf) {   // 有配置错误
 80006e2:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d004      	beq.n	80006f4 <UartAction_ServoMotor+0x260>
                ServoMotor.Flag_Event[1] = 16;  // 重新设置电子齿轮比分子分母寄存器
 80006ea:	4b54      	ldr	r3, [pc, #336]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 80006ec:	2210      	movs	r2, #16
 80006ee:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 80006f2:	e003      	b.n	80006fc <UartAction_ServoMotor+0x268>
                ServoMotor.Flag_Event[1] = 18;
 80006f4:	4b51      	ldr	r3, [pc, #324]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 80006f6:	2212      	movs	r2, #18
 80006f8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 80006fc:	bf00      	nop
        } break;
 80006fe:	e02d      	b.n	800075c <UartAction_ServoMotor+0x2c8>
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000700:	4b4e      	ldr	r3, [pc, #312]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 8000702:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000704:	2b01      	cmp	r3, #1
 8000706:	d12b      	bne.n	8000760 <UartAction_ServoMotor+0x2cc>
              if (uartbuf[4] == (EEPROM_Disable_P2_30 & 0xFF)) {  // 已经设置了EEPROM不保存
 8000708:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800070c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	2b05      	cmp	r3, #5
 8000714:	d104      	bne.n	8000720 <UartAction_ServoMotor+0x28c>
                ServoMotor.Flag_Event[1] = 26;
 8000716:	4b49      	ldr	r3, [pc, #292]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 8000718:	221a      	movs	r2, #26
 800071a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800071e:	e003      	b.n	8000728 <UartAction_ServoMotor+0x294>
                ServoMotor.Flag_Event[1] = 24;
 8000720:	4b46      	ldr	r3, [pc, #280]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 8000722:	2218      	movs	r2, #24
 8000724:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000728:	bf00      	nop
        } break;
 800072a:	e019      	b.n	8000760 <UartAction_ServoMotor+0x2cc>
          switch (ServoMotor.UartCurrentCmd[2]) {
 800072c:	4b43      	ldr	r3, [pc, #268]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 800072e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000730:	2b01      	cmp	r3, #1
 8000732:	d117      	bne.n	8000764 <UartAction_ServoMotor+0x2d0>
              if (uartbuf[4] == (PulseReset_Data_P2_50 & 0xFF)) {  // 已经设置脉冲清除模式，为0x11;
 8000734:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	2b11      	cmp	r3, #17
 8000740:	d104      	bne.n	800074c <UartAction_ServoMotor+0x2b8>
                ServoMotor.Flag_Event[1] = 22;
 8000742:	4b3e      	ldr	r3, [pc, #248]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 8000744:	2216      	movs	r2, #22
 8000746:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800074a:	e003      	b.n	8000754 <UartAction_ServoMotor+0x2c0>
                ServoMotor.Flag_Event[1] = 20;
 800074c:	4b3b      	ldr	r3, [pc, #236]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 800074e:	2214      	movs	r2, #20
 8000750:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000754:	bf00      	nop
        } break;
 8000756:	e005      	b.n	8000764 <UartAction_ServoMotor+0x2d0>
        } break;
 8000758:	bf00      	nop
 800075a:	e2ce      	b.n	8000cfa <UartAction_ServoMotor+0x866>
        } break;
 800075c:	bf00      	nop
 800075e:	e2cc      	b.n	8000cfa <UartAction_ServoMotor+0x866>
        } break;
 8000760:	bf00      	nop
 8000762:	e2ca      	b.n	8000cfa <UartAction_ServoMotor+0x866>
        } break;
 8000764:	bf00      	nop
    } break;
 8000766:	e2c8      	b.n	8000cfa <UartAction_ServoMotor+0x866>
    case Cmd_Write_Once_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 读取寄存器
 8000768:	4b34      	ldr	r3, [pc, #208]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 800076a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800076c:	f240 420a 	movw	r2, #1034	@ 0x40a
 8000770:	4293      	cmp	r3, r2
 8000772:	f000 80f2 	beq.w	800095a <UartAction_ServoMotor+0x4c6>
 8000776:	f240 420a 	movw	r2, #1034	@ 0x40a
 800077a:	4293      	cmp	r3, r2
 800077c:	f300 82bf 	bgt.w	8000cfe <UartAction_ServoMotor+0x86a>
 8000780:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 8000784:	f000 80e4 	beq.w	8000950 <UartAction_ServoMotor+0x4bc>
 8000788:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 800078c:	f300 82b7 	bgt.w	8000cfe <UartAction_ServoMotor+0x86a>
 8000790:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 8000794:	f000 80d7 	beq.w	8000946 <UartAction_ServoMotor+0x4b2>
 8000798:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 800079c:	f300 82af 	bgt.w	8000cfe <UartAction_ServoMotor+0x86a>
 80007a0:	f240 2216 	movw	r2, #534	@ 0x216
 80007a4:	4293      	cmp	r3, r2
 80007a6:	f000 809a 	beq.w	80008de <UartAction_ServoMotor+0x44a>
 80007aa:	f240 2216 	movw	r2, #534	@ 0x216
 80007ae:	4293      	cmp	r3, r2
 80007b0:	f300 82a5 	bgt.w	8000cfe <UartAction_ServoMotor+0x86a>
 80007b4:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 80007b8:	d05e      	beq.n	8000878 <UartAction_ServoMotor+0x3e4>
 80007ba:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 80007be:	f300 829e 	bgt.w	8000cfe <UartAction_ServoMotor+0x86a>
 80007c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80007c4:	dc1c      	bgt.n	8000800 <UartAction_ServoMotor+0x36c>
 80007c6:	2b22      	cmp	r3, #34	@ 0x22
 80007c8:	f2c0 8299 	blt.w	8000cfe <UartAction_ServoMotor+0x86a>
 80007cc:	3b22      	subs	r3, #34	@ 0x22
 80007ce:	2b08      	cmp	r3, #8
 80007d0:	f200 8295 	bhi.w	8000cfe <UartAction_ServoMotor+0x86a>
 80007d4:	a201      	add	r2, pc, #4	@ (adr r2, 80007dc <UartAction_ServoMotor+0x348>)
 80007d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007da:	bf00      	nop
 80007dc:	08000809 	.word	0x08000809
 80007e0:	08000cff 	.word	0x08000cff
 80007e4:	08000813 	.word	0x08000813
 80007e8:	08000cff 	.word	0x08000cff
 80007ec:	0800081d 	.word	0x0800081d
 80007f0:	08000cff 	.word	0x08000cff
 80007f4:	08000827 	.word	0x08000827
 80007f8:	08000cff 	.word	0x08000cff
 80007fc:	08000831 	.word	0x08000831
 8000800:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000804:	d01c      	beq.n	8000840 <UartAction_ServoMotor+0x3ac>
              }
            } break;
          }
        } break;
      }
    } break;
 8000806:	e27a      	b.n	8000cfe <UartAction_ServoMotor+0x86a>
          ServoMotor.Flag_Event[1] = 6;        // 设置状态监控寄存器2
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 800080a:	2206      	movs	r2, #6
 800080c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000810:	e256      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 8;  // 设置状态监控寄存器3
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 8000814:	2208      	movs	r2, #8
 8000816:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800081a:	e251      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 10;  // 设置状态监控寄存器4
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 800081e:	220a      	movs	r2, #10
 8000820:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000824:	e24c      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 12;  // 设置状态监控寄存器5
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 8000828:	220c      	movs	r2, #12
 800082a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800082e:	e247      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 2;  // 重新检查状态监控寄存器1-5
 8000830:	4b02      	ldr	r3, [pc, #8]	@ (800083c <UartAction_ServoMotor+0x3a8>)
 8000832:	2202      	movs	r2, #2
 8000834:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000838:	e242      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
 800083a:	bf00      	nop
 800083c:	20000088 	.word	0x20000088
          switch (ServoMotor.Flag_Event[2]) {
 8000840:	4bc0      	ldr	r3, [pc, #768]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000842:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000846:	2b17      	cmp	r3, #23
 8000848:	f040 8237 	bne.w	8000cba <UartAction_ServoMotor+0x826>
              ServoMotor.Flag_Event[2] = Szmode_Data_P1_01 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 24 : 22;
 800084c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000850:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800085c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000860:	7952      	ldrb	r2, [r2, #5]
 8000862:	4313      	orrs	r3, r2
 8000864:	2b04      	cmp	r3, #4
 8000866:	d101      	bne.n	800086c <UartAction_ServoMotor+0x3d8>
 8000868:	2218      	movs	r2, #24
 800086a:	e000      	b.n	800086e <UartAction_ServoMotor+0x3da>
 800086c:	2216      	movs	r2, #22
 800086e:	4bb5      	ldr	r3, [pc, #724]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000874:	bf00      	nop
        } break;
 8000876:	e220      	b.n	8000cba <UartAction_ServoMotor+0x826>
          switch (ServoMotor.Flag_Event[2]) {
 8000878:	4bb2      	ldr	r3, [pc, #712]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 800087a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800087e:	2b05      	cmp	r3, #5
 8000880:	d002      	beq.n	8000888 <UartAction_ServoMotor+0x3f4>
 8000882:	2b19      	cmp	r3, #25
 8000884:	d015      	beq.n	80008b2 <UartAction_ServoMotor+0x41e>
        } break;
 8000886:	e21b      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
              ServoMotor.Flag_Event[2] = DI1_Data_ServoON == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 6 : 4;
 8000888:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800088c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000898:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800089c:	7952      	ldrb	r2, [r2, #5]
 800089e:	4313      	orrs	r3, r2
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d101      	bne.n	80008a8 <UartAction_ServoMotor+0x414>
 80008a4:	2206      	movs	r2, #6
 80008a6:	e000      	b.n	80008aa <UartAction_ServoMotor+0x416>
 80008a8:	2204      	movs	r2, #4
 80008aa:	4ba6      	ldr	r3, [pc, #664]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 80008ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 80008b0:	e014      	b.n	80008dc <UartAction_ServoMotor+0x448>
              ServoMotor.Flag_Event[2] = DI1_Data_ServoON == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 26 : 24;
 80008b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008c2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80008c6:	7952      	ldrb	r2, [r2, #5]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d101      	bne.n	80008d2 <UartAction_ServoMotor+0x43e>
 80008ce:	221a      	movs	r2, #26
 80008d0:	e000      	b.n	80008d4 <UartAction_ServoMotor+0x440>
 80008d2:	2218      	movs	r2, #24
 80008d4:	4b9b      	ldr	r3, [pc, #620]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 80008d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 80008da:	bf00      	nop
        } break;
 80008dc:	e1f0      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
          switch (ServoMotor.Flag_Event[2]) {
 80008de:	4b99      	ldr	r3, [pc, #612]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 80008e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80008e4:	2b13      	cmp	r3, #19
 80008e6:	d002      	beq.n	80008ee <UartAction_ServoMotor+0x45a>
 80008e8:	2b15      	cmp	r3, #21
 80008ea:	d015      	beq.n	8000918 <UartAction_ServoMotor+0x484>
        } break;
 80008ec:	e1e8      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_Start_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 16;
 80008ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008fe:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000902:	7952      	ldrb	r2, [r2, #5]
 8000904:	4313      	orrs	r3, r2
 8000906:	2b04      	cmp	r3, #4
 8000908:	d101      	bne.n	800090e <UartAction_ServoMotor+0x47a>
 800090a:	2214      	movs	r2, #20
 800090c:	e000      	b.n	8000910 <UartAction_ServoMotor+0x47c>
 800090e:	2210      	movs	r2, #16
 8000910:	4b8c      	ldr	r3, [pc, #560]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000916:	e015      	b.n	8000944 <UartAction_ServoMotor+0x4b0>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_End_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 22 : 20;
 8000918:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800091c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000920:	791b      	ldrb	r3, [r3, #4]
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000928:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800092c:	7952      	ldrb	r2, [r2, #5]
 800092e:	4313      	orrs	r3, r2
 8000930:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000934:	d101      	bne.n	800093a <UartAction_ServoMotor+0x4a6>
 8000936:	2216      	movs	r2, #22
 8000938:	e000      	b.n	800093c <UartAction_ServoMotor+0x4a8>
 800093a:	2214      	movs	r2, #20
 800093c:	4b81      	ldr	r3, [pc, #516]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 800093e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000942:	bf00      	nop
        } break;
 8000944:	e1bc      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 22;  // 重新读取EEPROM设置是否为不保存模式
 8000946:	4b7f      	ldr	r3, [pc, #508]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000948:	2216      	movs	r2, #22
 800094a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800094e:	e1b7      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 18;  // 重新读取脉冲清除模式
 8000950:	4b7c      	ldr	r3, [pc, #496]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000952:	2212      	movs	r2, #18
 8000954:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000958:	e1b2      	b.n	8000cc0 <UartAction_ServoMotor+0x82c>
          switch (ServoMotor.Flag_Event[2]) {
 800095a:	4b7a      	ldr	r3, [pc, #488]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 800095c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000960:	3b03      	subs	r3, #3
 8000962:	2b1a      	cmp	r3, #26
 8000964:	f200 81ab 	bhi.w	8000cbe <UartAction_ServoMotor+0x82a>
 8000968:	a201      	add	r2, pc, #4	@ (adr r2, 8000970 <UartAction_ServoMotor+0x4dc>)
 800096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096e:	bf00      	nop
 8000970:	080009dd 	.word	0x080009dd
 8000974:	08000cbf 	.word	0x08000cbf
 8000978:	08000cbf 	.word	0x08000cbf
 800097c:	08000cbf 	.word	0x08000cbf
 8000980:	08000a07 	.word	0x08000a07
 8000984:	08000cbf 	.word	0x08000cbf
 8000988:	08000a31 	.word	0x08000a31
 800098c:	08000cbf 	.word	0x08000cbf
 8000990:	08000aa5 	.word	0x08000aa5
 8000994:	08000cbf 	.word	0x08000cbf
 8000998:	08000acf 	.word	0x08000acf
 800099c:	08000cbf 	.word	0x08000cbf
 80009a0:	08000b49 	.word	0x08000b49
 80009a4:	08000cbf 	.word	0x08000cbf
 80009a8:	08000b73 	.word	0x08000b73
 80009ac:	08000cbf 	.word	0x08000cbf
 80009b0:	08000b9d 	.word	0x08000b9d
 80009b4:	08000cbf 	.word	0x08000cbf
 80009b8:	08000cbf 	.word	0x08000cbf
 80009bc:	08000cbf 	.word	0x08000cbf
 80009c0:	08000cbf 	.word	0x08000cbf
 80009c4:	08000cbf 	.word	0x08000cbf
 80009c8:	08000cbf 	.word	0x08000cbf
 80009cc:	08000cbf 	.word	0x08000cbf
 80009d0:	08000c0f 	.word	0x08000c0f
 80009d4:	08000cbf 	.word	0x08000cbf
 80009d8:	08000c39 	.word	0x08000c39
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 4 : 2;
 80009dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d108      	bne.n	80009fc <UartAction_ServoMotor+0x568>
 80009ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009f2:	795b      	ldrb	r3, [r3, #5]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <UartAction_ServoMotor+0x568>
 80009f8:	2204      	movs	r2, #4
 80009fa:	e000      	b.n	80009fe <UartAction_ServoMotor+0x56a>
 80009fc:	2202      	movs	r2, #2
 80009fe:	4b51      	ldr	r3, [pc, #324]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a04:	e158      	b.n	8000cb8 <UartAction_ServoMotor+0x824>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x14) ? 8 : 6;
 8000a06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d108      	bne.n	8000a26 <UartAction_ServoMotor+0x592>
 8000a14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a1c:	795b      	ldrb	r3, [r3, #5]
 8000a1e:	2b14      	cmp	r3, #20
 8000a20:	d101      	bne.n	8000a26 <UartAction_ServoMotor+0x592>
 8000a22:	2208      	movs	r2, #8
 8000a24:	e000      	b.n	8000a28 <UartAction_ServoMotor+0x594>
 8000a26:	2206      	movs	r2, #6
 8000a28:	4b46      	ldr	r3, [pc, #280]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a2e:	e143      	b.n	8000cb8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CCW往左动JOGmode_Data_CCW
 8000a30:	4b44      	ldr	r3, [pc, #272]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000a32:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d116      	bne.n	8000a68 <UartAction_ServoMotor+0x5d4>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 10 : 8;
 8000a3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	021b      	lsls	r3, r3, #8
 8000a46:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a4a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a4e:	7952      	ldrb	r2, [r2, #5]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <UartAction_ServoMotor+0x5ca>
 8000a5a:	220a      	movs	r2, #10
 8000a5c:	e000      	b.n	8000a60 <UartAction_ServoMotor+0x5cc>
 8000a5e:	2208      	movs	r2, #8
 8000a60:	4b38      	ldr	r3, [pc, #224]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a66:	e120      	b.n	8000caa <UartAction_ServoMotor+0x816>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CW往右动
 8000a68:	4b36      	ldr	r3, [pc, #216]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000a6a:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a72:	f040 811a 	bne.w	8000caa <UartAction_ServoMotor+0x816>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 10 : 8;
 8000a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a7e:	791b      	ldrb	r3, [r3, #4]
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a86:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a8a:	7952      	ldrb	r2, [r2, #5]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <UartAction_ServoMotor+0x606>
 8000a96:	220a      	movs	r2, #10
 8000a98:	e000      	b.n	8000a9c <UartAction_ServoMotor+0x608>
 8000a9a:	2208      	movs	r2, #8
 8000a9c:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000aa2:	e102      	b.n	8000caa <UartAction_ServoMotor+0x816>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 12 : 10;
 8000aa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d108      	bne.n	8000ac4 <UartAction_ServoMotor+0x630>
 8000ab2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <UartAction_ServoMotor+0x630>
 8000ac0:	220c      	movs	r2, #12
 8000ac2:	e000      	b.n	8000ac6 <UartAction_ServoMotor+0x632>
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000acc:	e0f4      	b.n	8000cb8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CW往右动
 8000ace:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000ad0:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d116      	bne.n	8000b06 <UartAction_ServoMotor+0x672>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 14 : 12;
 8000ad8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000adc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ae0:	791b      	ldrb	r3, [r3, #4]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ae8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000aec:	7952      	ldrb	r2, [r2, #5]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d101      	bne.n	8000afc <UartAction_ServoMotor+0x668>
 8000af8:	220e      	movs	r2, #14
 8000afa:	e000      	b.n	8000afe <UartAction_ServoMotor+0x66a>
 8000afc:	220c      	movs	r2, #12
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b04:	e0d3      	b.n	8000cae <UartAction_ServoMotor+0x81a>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CCW往左动
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000b08:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b10:	f040 80cd 	bne.w	8000cae <UartAction_ServoMotor+0x81a>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 14 : 12;
 8000b14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b1c:	791b      	ldrb	r3, [r3, #4]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b24:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000b28:	7952      	ldrb	r2, [r2, #5]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d101      	bne.n	8000b38 <UartAction_ServoMotor+0x6a4>
 8000b34:	220e      	movs	r2, #14
 8000b36:	e000      	b.n	8000b3a <UartAction_ServoMotor+0x6a6>
 8000b38:	220c      	movs	r2, #12
 8000b3a:	4b02      	ldr	r3, [pc, #8]	@ (8000b44 <UartAction_ServoMotor+0x6b0>)
 8000b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b40:	e0b5      	b.n	8000cae <UartAction_ServoMotor+0x81a>
 8000b42:	bf00      	nop
 8000b44:	20000088 	.word	0x20000088
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 16 : 14;
 8000b48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d108      	bne.n	8000b68 <UartAction_ServoMotor+0x6d4>
 8000b56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b5e:	795b      	ldrb	r3, [r3, #5]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <UartAction_ServoMotor+0x6d4>
 8000b64:	2210      	movs	r2, #16
 8000b66:	e000      	b.n	8000b6a <UartAction_ServoMotor+0x6d6>
 8000b68:	220e      	movs	r2, #14
 8000b6a:	4b68      	ldr	r3, [pc, #416]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b70:	e0a2      	b.n	8000cb8 <UartAction_ServoMotor+0x824>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_Start_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 18 : 16;
 8000b72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b7a:	791b      	ldrb	r3, [r3, #4]
 8000b7c:	021b      	lsls	r3, r3, #8
 8000b7e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b82:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000b86:	7952      	ldrb	r2, [r2, #5]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	d101      	bne.n	8000b92 <UartAction_ServoMotor+0x6fe>
 8000b8e:	2212      	movs	r2, #18
 8000b90:	e000      	b.n	8000b94 <UartAction_ServoMotor+0x700>
 8000b92:	2210      	movs	r2, #16
 8000b94:	4b5d      	ldr	r3, [pc, #372]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b9a:	e08d      	b.n	8000cb8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CCW往左动JOGmode_Data_CCW
 8000b9c:	4b5b      	ldr	r3, [pc, #364]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000b9e:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d116      	bne.n	8000bd4 <UartAction_ServoMotor+0x740>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 18;
 8000ba6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bae:	791b      	ldrb	r3, [r3, #4]
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bb6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bba:	7952      	ldrb	r2, [r2, #5]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <UartAction_ServoMotor+0x736>
 8000bc6:	2214      	movs	r2, #20
 8000bc8:	e000      	b.n	8000bcc <UartAction_ServoMotor+0x738>
 8000bca:	2212      	movs	r2, #18
 8000bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000bd2:	e06e      	b.n	8000cb2 <UartAction_ServoMotor+0x81e>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CW往右动
 8000bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000bd6:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bde:	d168      	bne.n	8000cb2 <UartAction_ServoMotor+0x81e>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 18;
 8000be0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000be4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bf0:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bf4:	7952      	ldrb	r2, [r2, #5]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d101      	bne.n	8000c04 <UartAction_ServoMotor+0x770>
 8000c00:	2214      	movs	r2, #20
 8000c02:	e000      	b.n	8000c06 <UartAction_ServoMotor+0x772>
 8000c04:	2212      	movs	r2, #18
 8000c06:	4b41      	ldr	r3, [pc, #260]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c0c:	e051      	b.n	8000cb2 <UartAction_ServoMotor+0x81e>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 28 : 26;
 8000c0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c16:	791b      	ldrb	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d108      	bne.n	8000c2e <UartAction_ServoMotor+0x79a>
 8000c1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c24:	795b      	ldrb	r3, [r3, #5]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d101      	bne.n	8000c2e <UartAction_ServoMotor+0x79a>
 8000c2a:	221c      	movs	r2, #28
 8000c2c:	e000      	b.n	8000c30 <UartAction_ServoMotor+0x79c>
 8000c2e:	221a      	movs	r2, #26
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c36:	e03f      	b.n	8000cb8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CW往右动
 8000c38:	4b34      	ldr	r3, [pc, #208]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000c3a:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d116      	bne.n	8000c70 <UartAction_ServoMotor+0x7dc>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 30 : 28;
 8000c42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c4a:	791b      	ldrb	r3, [r3, #4]
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c52:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c56:	7952      	ldrb	r2, [r2, #5]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d101      	bne.n	8000c66 <UartAction_ServoMotor+0x7d2>
 8000c62:	221e      	movs	r2, #30
 8000c64:	e000      	b.n	8000c68 <UartAction_ServoMotor+0x7d4>
 8000c66:	221c      	movs	r2, #28
 8000c68:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c6e:	e022      	b.n	8000cb6 <UartAction_ServoMotor+0x822>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CCW往左动
 8000c70:	4b26      	ldr	r3, [pc, #152]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000c72:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7a:	d11c      	bne.n	8000cb6 <UartAction_ServoMotor+0x822>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 30 : 28;
 8000c7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c84:	791b      	ldrb	r3, [r3, #4]
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c8c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c90:	7952      	ldrb	r2, [r2, #5]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d101      	bne.n	8000ca0 <UartAction_ServoMotor+0x80c>
 8000c9c:	221e      	movs	r2, #30
 8000c9e:	e000      	b.n	8000ca2 <UartAction_ServoMotor+0x80e>
 8000ca0:	221c      	movs	r2, #28
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000ca8:	e005      	b.n	8000cb6 <UartAction_ServoMotor+0x822>
            } break;
 8000caa:	bf00      	nop
 8000cac:	e007      	b.n	8000cbe <UartAction_ServoMotor+0x82a>
            } break;
 8000cae:	bf00      	nop
 8000cb0:	e005      	b.n	8000cbe <UartAction_ServoMotor+0x82a>
            } break;
 8000cb2:	bf00      	nop
 8000cb4:	e003      	b.n	8000cbe <UartAction_ServoMotor+0x82a>
            } break;
 8000cb6:	bf00      	nop
        } break;
 8000cb8:	e001      	b.n	8000cbe <UartAction_ServoMotor+0x82a>
        } break;
 8000cba:	bf00      	nop
 8000cbc:	e01f      	b.n	8000cfe <UartAction_ServoMotor+0x86a>
        } break;
 8000cbe:	bf00      	nop
    } break;
 8000cc0:	e01d      	b.n	8000cfe <UartAction_ServoMotor+0x86a>
    case Cmd_Write_Multi_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 读取寄存器
 8000cc2:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000cc4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000cc6:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 8000cca:	d11a      	bne.n	8000d02 <UartAction_ServoMotor+0x86e>
        case GearRatioRegister_Numerator: {    // 电子齿轮比分子分母寄存器，需要设置分子160，分母94
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000cce:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d10e      	bne.n	8000cf2 <UartAction_ServoMotor+0x85e>
            case 4: {
              if (uartbuf[5] == ServoMotor.UartCurrentCmd[2]) ServoMotor.Flag_Event[1] = 14;  // 重新电子齿轮比分子分母寄存器
 8000cd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000cdc:	795b      	ldrb	r3, [r3, #5]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000ce2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d103      	bne.n	8000cf0 <UartAction_ServoMotor+0x85c>
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <UartAction_ServoMotor+0x878>)
 8000cea:	220e      	movs	r2, #14
 8000cec:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000cf0:	bf00      	nop
          }
        } break;
 8000cf2:	bf00      	nop
      }
    } break;
 8000cf4:	e005      	b.n	8000d02 <UartAction_ServoMotor+0x86e>
    return;
 8000cf6:	bf00      	nop
 8000cf8:	e004      	b.n	8000d04 <UartAction_ServoMotor+0x870>
    } break;
 8000cfa:	bf00      	nop
 8000cfc:	e002      	b.n	8000d04 <UartAction_ServoMotor+0x870>
    } break;
 8000cfe:	bf00      	nop
 8000d00:	e000      	b.n	8000d04 <UartAction_ServoMotor+0x870>
    } break;
 8000d02:	bf00      	nop
  }
}
 8000d04:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd90      	pop	{r4, r7, pc}
 8000d0c:	20000088 	.word	0x20000088

08000d10 <Event_Movement_ServoMotor>:
void Event_Movement_ServoMotor(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  // LOGI("STATE : %d", ServoMotor.Flag_Event[2]);
  switch (ServoMotor.Flag_Event[2]) {
 8000d14:	4b8f      	ldr	r3, [pc, #572]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d1a:	2b1c      	cmp	r3, #28
 8000d1c:	f200 8118 	bhi.w	8000f50 <Event_Movement_ServoMotor+0x240>
 8000d20:	a201      	add	r2, pc, #4	@ (adr r2, 8000d28 <Event_Movement_ServoMotor+0x18>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d9d 	.word	0x08000d9d
 8000d2c:	08000db1 	.word	0x08000db1
 8000d30:	08000dd3 	.word	0x08000dd3
 8000d34:	08000f51 	.word	0x08000f51
 8000d38:	08000deb 	.word	0x08000deb
 8000d3c:	08000f51 	.word	0x08000f51
 8000d40:	08000e03 	.word	0x08000e03
 8000d44:	08000f51 	.word	0x08000f51
 8000d48:	08000e13 	.word	0x08000e13
 8000d4c:	08000f51 	.word	0x08000f51
 8000d50:	08000e4f 	.word	0x08000e4f
 8000d54:	08000f51 	.word	0x08000f51
 8000d58:	08000e75 	.word	0x08000e75
 8000d5c:	08000f51 	.word	0x08000f51
 8000d60:	08000eb1 	.word	0x08000eb1
 8000d64:	08000f51 	.word	0x08000f51
 8000d68:	08000ed7 	.word	0x08000ed7
 8000d6c:	08000f51 	.word	0x08000f51
 8000d70:	08000f51 	.word	0x08000f51
 8000d74:	08000f51 	.word	0x08000f51
 8000d78:	08000ee7 	.word	0x08000ee7
 8000d7c:	08000f51 	.word	0x08000f51
 8000d80:	08000ef7 	.word	0x08000ef7
 8000d84:	08000f07 	.word	0x08000f07
 8000d88:	08000f17 	.word	0x08000f17
 8000d8c:	08000f51 	.word	0x08000f51
 8000d90:	08000f27 	.word	0x08000f27
 8000d94:	08000f51 	.word	0x08000f51
 8000d98:	08000f37 	.word	0x08000f37
    case 0: {                     // 判断是否校准
      if (!ServoMotor.IsReset) {  // 没有校准
 8000d9c:	4b6d      	ldr	r3, [pc, #436]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000d9e:	789b      	ldrb	r3, [r3, #2]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f040 80d0 	bne.w	8000f46 <Event_Movement_ServoMotor+0x236>
        ServoMotor.Flag_Event[2] = 1;
 8000da6:	4b6b      	ldr	r3, [pc, #428]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    } break;
 8000dae:	e0ca      	b.n	8000f46 <Event_Movement_ServoMotor+0x236>
    case 1: {                                                                                                            // 没有校准的时候
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 一开始就有传感器触发的情况
 8000db0:	2102      	movs	r1, #2
 8000db2:	4869      	ldr	r0, [pc, #420]	@ (8000f58 <Event_Movement_ServoMotor+0x248>)
 8000db4:	f003 f9d4 	bl	8004160 <HAL_GPIO_ReadPin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d104      	bne.n	8000dc8 <Event_Movement_ServoMotor+0xb8>
        ServoMotor.Flag_Event[2] = 2;
 8000dbe:	4b65      	ldr	r3, [pc, #404]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      } else {
        ServoMotor.Flag_Event[2] = 2;
      }
    } break;
 8000dc6:	e0c3      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
        ServoMotor.Flag_Event[2] = 2;
 8000dc8:	4b62      	ldr	r3, [pc, #392]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000dd0:	e0be      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 2: {  // 设备最低速度缓慢运动然后当刚离开传感器范围，随后又返回至刚触发瞬间
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000dd2:	4862      	ldr	r0, [pc, #392]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000dd4:	f000 f93e 	bl	8001054 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，如果一开始不设置速度0的话，可能会冲出去
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2003      	movs	r0, #3
 8000ddc:	f000 f946 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 3;                 // 等待串口返回，赋值4，超时赋值2
 8000de0:	4b5c      	ldr	r3, [pc, #368]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000de8:	e0b2      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 4: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000dea:	485c      	ldr	r0, [pc, #368]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000dec:	f000 f932 	bl	8001054 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(1, DI1_Data_ServoON);  // 打开伺服控制Servo ON
 8000df0:	2101      	movs	r1, #1
 8000df2:	2001      	movs	r0, #1
 8000df4:	f000 f93a 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 5;                                // 等待串口返回，赋值6，超时赋值4
 8000df8:	4b56      	ldr	r3, [pc, #344]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000dfa:	2205      	movs	r2, #5
 8000dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e00:	e0a6      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 6: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e02:	4856      	ldr	r0, [pc, #344]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000e04:	f000 f926 	bl	8001054 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(3, 20);  // 设置速度1

      ServoMotor.Flag_Event[2] = 16;  // 等待串口返回，赋值8，超时赋值6
 8000e08:	4b52      	ldr	r3, [pc, #328]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e10:	e09e      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 8: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e12:	4852      	ldr	r0, [pc, #328]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000e14:	f000 f91e 	bl	8001054 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往左动，在左则往右动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000e18:	4b4e      	ldr	r3, [pc, #312]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000e1a:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d105      	bne.n	8000e2e <Event_Movement_ServoMotor+0x11e>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // CCW往左动JOGmode_Data_CCW
 8000e22:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f920 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
 8000e2c:	e00a      	b.n	8000e44 <Event_Movement_ServoMotor+0x134>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000e2e:	4b49      	ldr	r3, [pc, #292]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000e30:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d104      	bne.n	8000e44 <Event_Movement_ServoMotor+0x134>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CW往右动
 8000e3a:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 f914 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
      }
      ServoMotor.Flag_Event[2] = 9;  // 等待串口返回，赋值10，超时赋值8
 8000e44:	4b43      	ldr	r3, [pc, #268]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000e46:	2209      	movs	r2, #9
 8000e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e4c:	e080      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 10: {
      if (LimitSensorOFF_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 刚好离开，马上停止
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4841      	ldr	r0, [pc, #260]	@ (8000f58 <Event_Movement_ServoMotor+0x248>)
 8000e52:	f003 f985 	bl	8004160 <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d176      	bne.n	8000f4a <Event_Movement_ServoMotor+0x23a>
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e5c:	483f      	ldr	r0, [pc, #252]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000e5e:	f000 f8f9 	bl	8001054 <ResetTimerFlag_ServoMotor>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，停止
 8000e62:	2100      	movs	r1, #0
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f901 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 11;                // 等待串口返回，赋值12，超时赋值10
 8000e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000e6c:	220b      	movs	r2, #11
 8000e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    } break;
 8000e72:	e06a      	b.n	8000f4a <Event_Movement_ServoMotor+0x23a>
    case 12: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e74:	4839      	ldr	r0, [pc, #228]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000e76:	f000 f8ed 	bl	8001054 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往右动，在左则往左动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000e7a:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000e7c:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d105      	bne.n	8000e90 <Event_Movement_ServoMotor+0x180>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CW往右动
 8000e84:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f8ef 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
 8000e8e:	e00a      	b.n	8000ea6 <Event_Movement_ServoMotor+0x196>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000e90:	4b30      	ldr	r3, [pc, #192]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000e92:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9a:	d104      	bne.n	8000ea6 <Event_Movement_ServoMotor+0x196>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // CCW往左动
 8000e9c:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f8e3 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
      }
      ServoMotor.Flag_Event[2] = 13;  // 等待串口返回，赋值14，超时赋值12
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000ea8:	220d      	movs	r2, #13
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000eae:	e04f      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 14: {
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 刚好回去
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	4829      	ldr	r0, [pc, #164]	@ (8000f58 <Event_Movement_ServoMotor+0x248>)
 8000eb4:	f003 f954 	bl	8004160 <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d147      	bne.n	8000f4e <Event_Movement_ServoMotor+0x23e>
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ebe:	4827      	ldr	r0, [pc, #156]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000ec0:	f000 f8c8 	bl	8001054 <ResetTimerFlag_ServoMotor>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，停止
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	f000 f8d0 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 15;                // 等待串口返回，赋值16，超时赋值14
 8000ecc:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000ece:	220f      	movs	r2, #15
 8000ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      if (0) {  // 扭矩过大要停下来
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
        Uart_Send_MovementRegister_ServoMotor(3, 0);
        ServoMotor.Flag_Event[2] = 0;
      }
    } break;
 8000ed4:	e03b      	b.n	8000f4e <Event_Movement_ServoMotor+0x23e>
    // 缺一个开始信号
    case 16: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ed6:	4821      	ldr	r0, [pc, #132]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000ed8:	f000 f8bc 	bl	8001054 <ResetTimerFlag_ServoMotor>

      // Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_Start_Data_P2_11);
      ServoMotor.Flag_Event[2] = 16;  // 等待串口返回，赋值18，超时赋值16
 8000edc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000ede:	2210      	movs	r2, #16
 8000ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    } break;
 8000ee4:	e034      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 20: {  // 设置了PT模式，发送清除脉冲的指令，设置DI2
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ee6:	481d      	ldr	r0, [pc, #116]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000ee8:	f000 f8b4 	bl	8001054 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_End_Data_P2_11);
      ServoMotor.Flag_Event[2] = 21;  // 等待串口返回，赋值20，超时赋值18
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000eee:	2215      	movs	r2, #21
 8000ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000ef4:	e02c      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 22: {  // 设置了PT模式，发送清除脉冲的指令，复位DI2
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ef6:	4819      	ldr	r0, [pc, #100]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000ef8:	f000 f8ac 	bl	8001054 <ResetTimerFlag_ServoMotor>
      ServoMotor.Flag_Event[2] = 22;
 8000efc:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000efe:	2216      	movs	r2, #22
 8000f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      // Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_End_Data_P2_11); // 已经归位，重置脉冲计数,写入PT模式
      // ServoMotor.Flag_Event[2] = 21; // 等待串口返回，赋值22，超时赋值20
    } break;
 8000f04:	e024      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 23: {  // 脉冲已经重置了，设置成Sz模式
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f06:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000f08:	f000 f8a4 	bl	8001054 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(4, Szmode_Data_P1_01); // 已经归位，重置脉冲计数,写入PT模式
      ServoMotor.Flag_Event[2] = 22;  // 等待串口返回，赋值24，超时赋值22
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000f0e:	2216      	movs	r2, #22
 8000f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f14:	e01c      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 24: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f16:	4811      	ldr	r0, [pc, #68]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000f18:	f000 f89c 	bl	8001054 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(1, DI1_Data_ServoON); // 打开伺服控制Servo ON
      ServoMotor.Flag_Event[2] = 25;  // 等待串口返回，赋值6，超时赋值4
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000f1e:	2219      	movs	r2, #25
 8000f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f24:	e014      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 26: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f26:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000f28:	f000 f894 	bl	8001054 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(3, 1); // 设置速度1
      ServoMotor.Flag_Event[2] = 27;  // 等待串口返回，赋值26，超时赋值24
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000f2e:	221b      	movs	r2, #27
 8000f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f34:	e00c      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    case 28: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f36:	4809      	ldr	r0, [pc, #36]	@ (8000f5c <Event_Movement_ServoMotor+0x24c>)
 8000f38:	f000 f88c 	bl	8001054 <ResetTimerFlag_ServoMotor>
      ServoMotor.Flag_Event[2] = 29;  // 等待串口返回，赋值28，超时赋值26
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <Event_Movement_ServoMotor+0x244>)
 8000f3e:	221d      	movs	r2, #29
 8000f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f44:	e004      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    } break;
 8000f46:	bf00      	nop
 8000f48:	e002      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    } break;
 8000f4a:	bf00      	nop
 8000f4c:	e000      	b.n	8000f50 <Event_Movement_ServoMotor+0x240>
    } break;
 8000f4e:	bf00      	nop
  }
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000088 	.word	0x20000088
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	200000bc 	.word	0x200000bc

08000f60 <TimerTasks_ServoMotor>:
void TimerTasks_ServoMotor(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  UartRxdMonitor_ServoMotor(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 fd91 	bl	8001a8c <UartRxdMonitor_ServoMotor>
  if (ServoMotor.Flag_Event[1] == 1) {  // 初始化上电延迟
 8000f6a:	4b39      	ldr	r3, [pc, #228]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000f6c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d113      	bne.n	8000f9c <TimerTasks_ServoMotor+0x3c>
    ServoMotor.TimerFlag[0]++;
 8000f74:	4b36      	ldr	r3, [pc, #216]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000f76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b34      	ldr	r3, [pc, #208]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000f7e:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ServoMotor.TimerFlag[0] >= 5000) {
 8000f80:	4b33      	ldr	r3, [pc, #204]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000f82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000f84:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d95e      	bls.n	800104a <TimerTasks_ServoMotor+0xea>
      ServoMotor.TimerFlag[0]  = 0;
 8000f8c:	4b30      	ldr	r3, [pc, #192]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	865a      	strh	r2, [r3, #50]	@ 0x32
      ServoMotor.Flag_Event[1] = 2;  // 检查状态监控寄存器1-5状态
 8000f92:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (ServoMotor.TimerFlag[0] >= 1000) {
      ServoMotor.TimerFlag[0]  = 0;
      ServoMotor.Flag_Event[1] = ServoMotor.Flag_Event[1] - 1;  // 超时没反应，返回上一次发送
    }
  }
}
 8000f9a:	e056      	b.n	800104a <TimerTasks_ServoMotor+0xea>
  } else if (ServoMotor.Flag_Event[1] == 3 ||   //
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000f9e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d03b      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 5 ||   //
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000fa8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
  } else if (ServoMotor.Flag_Event[1] == 3 ||   //
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d036      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 7 ||   //
 8000fb0:	4b27      	ldr	r3, [pc, #156]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000fb2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 5 ||   //
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	d031      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 9 ||   //
 8000fba:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000fbc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 7 ||   //
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	d02c      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 11 ||  //
 8000fc4:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000fc6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 9 ||   //
 8000fca:	2b0b      	cmp	r3, #11
 8000fcc:	d027      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 13 ||  //
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000fd0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 11 ||  //
 8000fd4:	2b0d      	cmp	r3, #13
 8000fd6:	d022      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 15 ||  //
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000fda:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 13 ||  //
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d01d      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 17 ||  //
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000fe4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 15 ||  //
 8000fe8:	2b11      	cmp	r3, #17
 8000fea:	d018      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 19 ||  //
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000fee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 17 ||  //
 8000ff2:	2b13      	cmp	r3, #19
 8000ff4:	d013      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 21 ||  //
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8000ff8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 19 ||  //
 8000ffc:	2b15      	cmp	r3, #21
 8000ffe:	d00e      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 23 ||  //
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8001002:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 21 ||  //
 8001006:	2b17      	cmp	r3, #23
 8001008:	d009      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 25 ||  //
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 800100c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 23 ||  //
 8001010:	2b19      	cmp	r3, #25
 8001012:	d004      	beq.n	800101e <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 27) {  // 初始化检查指令，必须设置正确
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8001016:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 25 ||  //
 800101a:	2b1b      	cmp	r3, #27
 800101c:	d115      	bne.n	800104a <TimerTasks_ServoMotor+0xea>
    ServoMotor.TimerFlag[0]++;
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8001020:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001022:	3301      	adds	r3, #1
 8001024:	b29a      	uxth	r2, r3
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8001028:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ServoMotor.TimerFlag[0] >= 1000) {
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 800102c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800102e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001032:	d30a      	bcc.n	800104a <TimerTasks_ServoMotor+0xea>
      ServoMotor.TimerFlag[0]  = 0;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8001036:	2200      	movs	r2, #0
 8001038:	865a      	strh	r2, [r3, #50]	@ 0x32
      ServoMotor.Flag_Event[1] = ServoMotor.Flag_Event[1] - 1;  // 超时没反应，返回上一次发送
 800103a:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 800103c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001040:	3b01      	subs	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b02      	ldr	r3, [pc, #8]	@ (8001050 <TimerTasks_ServoMotor+0xf0>)
 8001046:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000088 	.word	0x20000088

08001054 <ResetTimerFlag_ServoMotor>:
void ResetTimerFlag_ServoMotor(uint16_t *TimerFlag) { *TimerFlag = 0; }
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	801a      	strh	r2, [r3, #0]
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <Uart_Send_MovementRegister_ServoMotor>:
void Uart_Send_MovementRegister_ServoMotor(uint8_t mode, uint16_t Data) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	80bb      	strh	r3, [r7, #4]
  // LOGI("Send mov massage");
  switch (mode) {
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d83d      	bhi.n	80010fe <Uart_Send_MovementRegister_ServoMotor+0x92>
 8001082:	a201      	add	r2, pc, #4	@ (adr r2, 8001088 <Uart_Send_MovementRegister_ServoMotor+0x1c>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	0800109d 	.word	0x0800109d
 800108c:	080010af 	.word	0x080010af
 8001090:	080010c3 	.word	0x080010c3
 8001094:	080010d7 	.word	0x080010d7
 8001098:	080010eb 	.word	0x080010eb
    case 0: {  // 查询监视器1-5内容
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 10, MonitorRegister_1_Data, 0, Set_null_ServoMotor);
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	2212      	movs	r2, #18
 80010a4:	210a      	movs	r1, #10
 80010a6:	2003      	movs	r0, #3
 80010a8:	f000 fa2e 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80010ac:	e027      	b.n	80010fe <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 1: {  // 开启 或 关闭伺服控制
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, DI1_Register_P2_10, Data, Set_null_ServoMotor);
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	4a15      	ldr	r2, [pc, #84]	@ (8001108 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 80010b2:	9200      	str	r2, [sp, #0]
 80010b4:	f44f 7205 	mov.w	r2, #532	@ 0x214
 80010b8:	2100      	movs	r1, #0
 80010ba:	2006      	movs	r0, #6
 80010bc:	f000 fa24 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80010c0:	e01d      	b.n	80010fe <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 2: {  // 写入PT或Sz模式,写入4，设置速度模式，写入0，设置位置模式
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, PT_Szmode_Register_P1_01, Data, Set_null_ServoMotor);
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	4a10      	ldr	r2, [pc, #64]	@ (8001108 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 80010c6:	9200      	str	r2, [sp, #0]
 80010c8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80010cc:	2100      	movs	r1, #0
 80010ce:	2006      	movs	r0, #6
 80010d0:	f000 fa1a 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80010d4:	e013      	b.n	80010fe <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 3: {  // 速度控制
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, JOGmode_Register_P4_05, Data, Set_null_ServoMotor);
 80010d6:	88bb      	ldrh	r3, [r7, #4]
 80010d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 80010da:	9200      	str	r2, [sp, #0]
 80010dc:	f240 420a 	movw	r2, #1034	@ 0x40a
 80010e0:	2100      	movs	r1, #0
 80010e2:	2006      	movs	r0, #6
 80010e4:	f000 fa10 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80010e8:	e009      	b.n	80010fe <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 4: {  // DI2设置0x0004-脉冲清除,0x0104	//脉冲恢复计数
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, DI2_PulseClear_Register_P2_11, Data, Set_null_ServoMotor);
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 80010ee:	9200      	str	r2, [sp, #0]
 80010f0:	f240 2216 	movw	r2, #534	@ 0x216
 80010f4:	2100      	movs	r1, #0
 80010f6:	2006      	movs	r0, #6
 80010f8:	f000 fa06 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80010fc:	bf00      	nop
  }
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000c8 	.word	0x200000c8

0800110c <UartSend_MonitorRegister_ServoMotor>:
void UartSend_MonitorRegister_ServoMotor(uint8_t mode) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  switch (mode) {
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b0b      	cmp	r3, #11
 800111a:	f200 8095 	bhi.w	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
 800111e:	a201      	add	r2, pc, #4	@ (adr r2, 8001124 <UartSend_MonitorRegister_ServoMotor+0x18>)
 8001120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001124:	08001155 	.word	0x08001155
 8001128:	08001167 	.word	0x08001167
 800112c:	08001179 	.word	0x08001179
 8001130:	0800118b 	.word	0x0800118b
 8001134:	0800119d 	.word	0x0800119d
 8001138:	080011af 	.word	0x080011af
 800113c:	080011c1 	.word	0x080011c1
 8001140:	080011d5 	.word	0x080011d5
 8001144:	080011f9 	.word	0x080011f9
 8001148:	0800120d 	.word	0x0800120d
 800114c:	08001221 	.word	0x08001221
 8001150:	08001235 	.word	0x08001235
    case 0: {  // 问询监视器1-5寄存器配置是否正确
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 10, MonitorRegister_1_Set, 0, Set_null_ServoMotor);
 8001154:	4b3e      	ldr	r3, [pc, #248]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	2222      	movs	r2, #34	@ 0x22
 800115c:	210a      	movs	r1, #10
 800115e:	2003      	movs	r0, #3
 8001160:	f000 f9d2 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001164:	e070      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 1: {  // 写入正确的监视器1寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_1_Set, PulseMonitor_0022H, Set_null_ServoMotor);
 8001166:	4b3a      	ldr	r3, [pc, #232]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2300      	movs	r3, #0
 800116c:	2222      	movs	r2, #34	@ 0x22
 800116e:	2100      	movs	r1, #0
 8001170:	2006      	movs	r0, #6
 8001172:	f000 f9c9 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001176:	e067      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 2: {  // 写入正确的监视器2寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_2_Set, TorqueMonitor_0024H, Set_null_ServoMotor);
 8001178:	4b35      	ldr	r3, [pc, #212]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	230b      	movs	r3, #11
 800117e:	2224      	movs	r2, #36	@ 0x24
 8001180:	2100      	movs	r1, #0
 8001182:	2006      	movs	r0, #6
 8001184:	f000 f9c0 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001188:	e05e      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 3: {  // 写入正确的监视器3寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_3_Set, SpeedMonitor_0026H, Set_null_ServoMotor);
 800118a:	4b31      	ldr	r3, [pc, #196]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2307      	movs	r3, #7
 8001190:	2226      	movs	r2, #38	@ 0x26
 8001192:	2100      	movs	r1, #0
 8001194:	2006      	movs	r0, #6
 8001196:	f000 f9b7 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800119a:	e055      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 4: {  // 写入正确的监视器4寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_4_Set, Monitor_0028H, Set_null_ServoMotor);
 800119c:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2303      	movs	r3, #3
 80011a2:	2228      	movs	r2, #40	@ 0x28
 80011a4:	2100      	movs	r1, #0
 80011a6:	2006      	movs	r0, #6
 80011a8:	f000 f9ae 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011ac:	e04c      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 5: {  // 写入正确的监视器5寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_5_Set, Monitor_002AH, Set_null_ServoMotor);
 80011ae:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	222a      	movs	r2, #42	@ 0x2a
 80011b6:	2100      	movs	r1, #0
 80011b8:	2006      	movs	r0, #6
 80011ba:	f000 f9a5 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011be:	e043      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 6: {  // 查询电子齿轮比分子分母的设置
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 4, GearRatioRegister_Numerator, 0, Set_null_ServoMotor);
 80011c0:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2300      	movs	r3, #0
 80011c6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80011ca:	2104      	movs	r1, #4
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f99b 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011d2:	e039      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 7: {  // 写入正确的电子齿轮比分子分母的设置，分子160，分母94，对应的皮带94mm一圈，计算得出1000脉冲/mm
      uint8_t uartsendbuf[8] = {0x00, 0xA0, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00};
 80011d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001254 <UartSend_MonitorRegister_ServoMotor+0x148>)
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011de:	e883 0003 	stmia.w	r3, {r0, r1}
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Multi_Func_ServoMotor, 4, GearRatioRegister_Numerator, 0, uartsendbuf);
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2300      	movs	r3, #0
 80011ea:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80011ee:	2104      	movs	r1, #4
 80011f0:	2010      	movs	r0, #16
 80011f2:	f000 f989 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011f6:	e027      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 8: {  // 读一次脉冲清除模式，需要设置为0x11;
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 1, PulseReset_Register_P2_50, 0, Set_null_ServoMotor);
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	f44f 7219 	mov.w	r2, #612	@ 0x264
 8001202:	2101      	movs	r1, #1
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f97f 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800120a:	e01d      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 9: {  // 设置脉冲清除模式，需要设置为0x11;
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, PulseReset_Register_P2_50, PulseReset_Data_P2_50, Set_null_ServoMotor);
 800120c:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2311      	movs	r3, #17
 8001212:	f44f 7219 	mov.w	r2, #612	@ 0x264
 8001216:	2100      	movs	r1, #0
 8001218:	2006      	movs	r0, #6
 800121a:	f000 f975 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800121e:	e013      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 10: {  // 读一次EEPROM的设置，0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 1, AuxrFuncRegister_P2_30, 0, Set_null_ServoMotor);
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2300      	movs	r3, #0
 8001226:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 800122a:	2101      	movs	r1, #1
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f96b 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001232:	e009      	b.n	8001248 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 11: {  // 设置EEPROM的为不保存模式，0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, AuxrFuncRegister_P2_30, EEPROM_Disable_P2_30, Set_null_ServoMotor);
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2305      	movs	r3, #5
 800123a:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 800123e:	2100      	movs	r1, #0
 8001240:	2006      	movs	r0, #6
 8001242:	f000 f961 	bl	8001508 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001246:	bf00      	nop
  }
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000c8 	.word	0x200000c8
 8001254:	0800ad80 	.word	0x0800ad80

08001258 <Get_LRC_ServoMotor>:

uint16_t Get_LRC_ServoMotor(uint8_t *buf, uint8_t len) {
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
  uint16_t sumbuf = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	81fb      	strh	r3, [r7, #14]
  uint8_t  result = 0, result_h, result_l;
 8001268:	2300      	movs	r3, #0
 800126a:	72bb      	strb	r3, [r7, #10]
  uint16_t LRCbuf = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	81bb      	strh	r3, [r7, #12]
  for (uint8_t i = 0; i < len; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	72fb      	strb	r3, [r7, #11]
 8001274:	e00a      	b.n	800128c <Get_LRC_ServoMotor+0x34>
    sumbuf += buf[i];
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	4413      	add	r3, r2
 8001284:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++) {
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	3301      	adds	r3, #1
 800128a:	72fb      	strb	r3, [r7, #11]
 800128c:	7afa      	ldrb	r2, [r7, #11]
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3f0      	bcc.n	8001276 <Get_LRC_ServoMotor+0x1e>
  }
  result   = ~(sumbuf & 0xFF) + 1;
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	425b      	negs	r3, r3
 800129a:	72bb      	strb	r3, [r7, #10]
  result_h = result / 0x10;
 800129c:	7abb      	ldrb	r3, [r7, #10]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	727b      	strb	r3, [r7, #9]
  result_l = result % 0x10;
 80012a2:	7abb      	ldrb	r3, [r7, #10]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	723b      	strb	r3, [r7, #8]
  if (0x00 <= result_h && result_h <= 0x09) {
 80012aa:	7a7b      	ldrb	r3, [r7, #9]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d80c      	bhi.n	80012ca <Get_LRC_ServoMotor+0x72>
    LRCbuf |= (uint16_t)(result_h + '0') << 8;
 80012b0:	7a7b      	ldrb	r3, [r7, #9]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	3330      	adds	r3, #48	@ 0x30
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	81bb      	strh	r3, [r7, #12]
 80012c8:	e011      	b.n	80012ee <Get_LRC_ServoMotor+0x96>
  } else if (0x0A <= result_h && result_h <= 0x0F) {
 80012ca:	7a7b      	ldrb	r3, [r7, #9]
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	d90e      	bls.n	80012ee <Get_LRC_ServoMotor+0x96>
 80012d0:	7a7b      	ldrb	r3, [r7, #9]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	d80b      	bhi.n	80012ee <Get_LRC_ServoMotor+0x96>
    LRCbuf |= (uint16_t)(result_h - 0x0A + 'A') << 8;
 80012d6:	7a7b      	ldrb	r3, [r7, #9]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3337      	adds	r3, #55	@ 0x37
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b21b      	sxth	r3, r3
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	81bb      	strh	r3, [r7, #12]
  }
  if (0x00 <= result_l && result_l <= 0x09) {
 80012ee:	7a3b      	ldrb	r3, [r7, #8]
 80012f0:	2b09      	cmp	r3, #9
 80012f2:	d80a      	bhi.n	800130a <Get_LRC_ServoMotor+0xb2>
    LRCbuf |= result_l + '0';
 80012f4:	7a3b      	ldrb	r3, [r7, #8]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	3330      	adds	r3, #48	@ 0x30
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	b21b      	sxth	r3, r3
 8001306:	81bb      	strh	r3, [r7, #12]
 8001308:	e00f      	b.n	800132a <Get_LRC_ServoMotor+0xd2>
  } else if (0x0A <= result_l && result_l <= 0x0F) {
 800130a:	7a3b      	ldrb	r3, [r7, #8]
 800130c:	2b09      	cmp	r3, #9
 800130e:	d90c      	bls.n	800132a <Get_LRC_ServoMotor+0xd2>
 8001310:	7a3b      	ldrb	r3, [r7, #8]
 8001312:	2b0f      	cmp	r3, #15
 8001314:	d809      	bhi.n	800132a <Get_LRC_ServoMotor+0xd2>
    LRCbuf |= result_l - 0x0A + 'A';
 8001316:	7a3b      	ldrb	r3, [r7, #8]
 8001318:	b29b      	uxth	r3, r3
 800131a:	3337      	adds	r3, #55	@ 0x37
 800131c:	b29b      	uxth	r3, r3
 800131e:	b21a      	sxth	r2, r3
 8001320:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	b21b      	sxth	r3, r3
 8001328:	81bb      	strh	r3, [r7, #12]
  }
  return LRCbuf;
 800132a:	89bb      	ldrh	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <UartWrite_HexToAscii_AddLRC_ServoMotor>:
void UartWrite_HexToAscii_AddLRC_ServoMotor(uint8_t *buf, uint8_t len) {
 8001336:	b580      	push	{r7, lr}
 8001338:	b0c4      	sub	sp, #272	@ 0x110
 800133a:	af00      	add	r7, sp, #0
 800133c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001340:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001344:	6018      	str	r0, [r3, #0]
 8001346:	460a      	mov	r2, r1
 8001348:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800134c:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8001350:	701a      	strb	r2, [r3, #0]
  uint8_t  Sendbuf[255] = {0};
 8001352:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800135a:	4618      	mov	r0, r3
 800135c:	23ff      	movs	r3, #255	@ 0xff
 800135e:	461a      	mov	r2, r3
 8001360:	2100      	movs	r1, #0
 8001362:	f008 fed2 	bl	800a10a <memset>
  uint8_t  lenbuf       = 2 * len + 5;
 8001366:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800136a:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	3305      	adds	r3, #5
 8001376:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  uint16_t LRCbuf       = Get_LRC_ServoMotor(buf, len);
 800137a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800137e:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001388:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800138c:	4611      	mov	r1, r2
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	f7ff ff62 	bl	8001258 <Get_LRC_ServoMotor>
 8001394:	4603      	mov	r3, r0
 8001396:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
  uint8_t  buf_h, buf_l;
  Sendbuf[0]          = ':';
 800139a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800139e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013a2:	223a      	movs	r2, #58	@ 0x3a
 80013a4:	701a      	strb	r2, [r3, #0]
  Sendbuf[lenbuf - 4] = LRCbuf >> 8;
 80013a6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80013b2:	3b04      	subs	r3, #4
 80013b4:	b2d1      	uxtb	r1, r2
 80013b6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013ba:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80013be:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 3] = LRCbuf & 0xFF;
 80013c0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80013c4:	3b03      	subs	r3, #3
 80013c6:	f8b7 210c 	ldrh.w	r2, [r7, #268]	@ 0x10c
 80013ca:	b2d1      	uxtb	r1, r2
 80013cc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013d0:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80013d4:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 2] = 0x0D;
 80013d6:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80013da:	3b02      	subs	r3, #2
 80013dc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013e0:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80013e4:	210d      	movs	r1, #13
 80013e6:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 1] = 0x0A;
 80013e8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80013ec:	3b01      	subs	r3, #1
 80013ee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013f2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80013f6:	210a      	movs	r1, #10
 80013f8:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < len; i++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001400:	e06b      	b.n	80014da <UartWrite_HexToAscii_AddLRC_ServoMotor+0x1a4>
    buf_h = buf[i] / 0x10;
 8001402:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001406:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800140a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    buf_l = buf[i] % 0x10;
 800141a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800141e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001422:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    if (0x00 <= buf_h && buf_h <= 0x09) {
 8001434:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001438:	2b09      	cmp	r3, #9
 800143a:	d80d      	bhi.n	8001458 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x122>
      Sendbuf[2 * i + 1] = buf_h + '0';
 800143c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	3301      	adds	r3, #1
 8001444:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 8001448:	3230      	adds	r2, #48	@ 0x30
 800144a:	b2d1      	uxtb	r1, r2
 800144c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001450:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001454:	54d1      	strb	r1, [r2, r3]
 8001456:	e014      	b.n	8001482 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x14c>
    } else if (0x0A <= buf_h && buf_h <= 0x0F) {
 8001458:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800145c:	2b09      	cmp	r3, #9
 800145e:	d910      	bls.n	8001482 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x14c>
 8001460:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80c      	bhi.n	8001482 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x14c>
      Sendbuf[2 * i + 1] = buf_h - 0x0A + 'A';
 8001468:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	3301      	adds	r3, #1
 8001470:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 8001474:	3237      	adds	r2, #55	@ 0x37
 8001476:	b2d1      	uxtb	r1, r2
 8001478:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800147c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001480:	54d1      	strb	r1, [r2, r3]
    }
    if (0x00 <= buf_l && buf_l <= 0x09) {
 8001482:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 8001486:	2b09      	cmp	r3, #9
 8001488:	d80d      	bhi.n	80014a6 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x170>
      Sendbuf[2 * i + 2] = buf_l + '0';
 800148a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800148e:	3301      	adds	r3, #1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 8001496:	3230      	adds	r2, #48	@ 0x30
 8001498:	b2d1      	uxtb	r1, r2
 800149a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800149e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014a2:	54d1      	strb	r1, [r2, r3]
 80014a4:	e014      	b.n	80014d0 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19a>
    } else if (0x0A <= buf_l && buf_l <= 0x0F) {
 80014a6:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 80014aa:	2b09      	cmp	r3, #9
 80014ac:	d910      	bls.n	80014d0 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19a>
 80014ae:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	d80c      	bhi.n	80014d0 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19a>
      Sendbuf[2 * i + 2] = buf_l - 0x0A + 'A';
 80014b6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014ba:	3301      	adds	r3, #1
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 80014c2:	3237      	adds	r2, #55	@ 0x37
 80014c4:	b2d1      	uxtb	r1, r2
 80014c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014ca:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014ce:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < len; i++) {
 80014d0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014d4:	3301      	adds	r3, #1
 80014d6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80014da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014de:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80014e2:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d38a      	bcc.n	8001402 <UartWrite_HexToAscii_AddLRC_ServoMotor+0xcc>
    }
  }
  // UartWrite_WirelessModule(Sendbuf, lenbuf);

  UartWrite_ServoMotor(Sendbuf, lenbuf);
 80014ec:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fa81 	bl	8001a00 <UartWrite_ServoMotor>
}
 80014fe:	bf00      	nop
 8001500:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <Uart_ReadWriteRegister_ServoMotor>:

void Uart_ReadWriteRegister_ServoMotor(uint8_t Read_WriteFunc, uint8_t WordsNum, uint16_t Register, uint16_t Write_Once_ByteData, uint8_t *Write_Multi_Bytes) {
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b0c4      	sub	sp, #272	@ 0x110
 800150c:	af00      	add	r7, sp, #0
 800150e:	4605      	mov	r5, r0
 8001510:	460c      	mov	r4, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800151a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800151e:	462a      	mov	r2, r5
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001526:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800152a:	4622      	mov	r2, r4
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001532:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001536:	4602      	mov	r2, r0
 8001538:	801a      	strh	r2, [r3, #0]
 800153a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800153e:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8001542:	460a      	mov	r2, r1
 8001544:	801a      	strh	r2, [r3, #0]
  uint8_t UartSendbuf[255] = {0};
 8001546:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800154a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800154e:	4618      	mov	r0, r3
 8001550:	23ff      	movs	r3, #255	@ 0xff
 8001552:	461a      	mov	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	f008 fdd8 	bl	800a10a <memset>
  uint8_t lenbuf           = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  UartSendbuf[0]           = ServoMotor.address;
 8001560:	4b6a      	ldr	r3, [pc, #424]	@ (800170c <Uart_ReadWriteRegister_ServoMotor+0x204>)
 8001562:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8001566:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800156a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800156e:	701a      	strb	r2, [r3, #0]
  UartSendbuf[1]           = Read_WriteFunc;
 8001570:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001578:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800157c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	705a      	strb	r2, [r3, #1]
  UartSendbuf[2]           = Register >> 8;
 8001584:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001588:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	b29b      	uxth	r3, r3
 8001592:	b2da      	uxtb	r2, r3
 8001594:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800159c:	709a      	strb	r2, [r3, #2]
  UartSendbuf[3]           = Register & 0xFF;
 800159e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015b2:	70da      	strb	r2, [r3, #3]
  switch (Read_WriteFunc) {
 80015b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015b8:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d037      	beq.n	8001632 <Uart_ReadWriteRegister_ServoMotor+0x12a>
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	f300 809d 	bgt.w	8001702 <Uart_ReadWriteRegister_ServoMotor+0x1fa>
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d002      	beq.n	80015d2 <Uart_ReadWriteRegister_ServoMotor+0xca>
 80015cc:	2b06      	cmp	r3, #6
 80015ce:	d014      	beq.n	80015fa <Uart_ReadWriteRegister_ServoMotor+0xf2>
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
        UartSendbuf[7 + i] = Write_Multi_Bytes[i];
      }
    } break;
    default:
      return;
 80015d0:	e097      	b.n	8001702 <Uart_ReadWriteRegister_ServoMotor+0x1fa>
      lenbuf         = 6;
 80015d2:	2306      	movs	r3, #6
 80015d4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = 0x00;
 80015d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015e0:	2200      	movs	r2, #0
 80015e2:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = WordsNum;
 80015e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015ec:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015f0:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	715a      	strb	r2, [r3, #5]
    } break;
 80015f8:	e063      	b.n	80016c2 <Uart_ReadWriteRegister_ServoMotor+0x1ba>
      lenbuf         = 6;
 80015fa:	2306      	movs	r3, #6
 80015fc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = Write_Once_ByteData >> 8;
 8001600:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001604:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2da      	uxtb	r2, r3
 8001610:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001618:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = Write_Once_ByteData & 0xFF;
 800161a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800161e:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800162a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800162e:	715a      	strb	r2, [r3, #5]
    } break;
 8001630:	e047      	b.n	80016c2 <Uart_ReadWriteRegister_ServoMotor+0x1ba>
      lenbuf         = 7 + 2 * WordsNum;
 8001632:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001636:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3307      	adds	r3, #7
 8001642:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = 0x00;
 8001646:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800164a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800164e:	2200      	movs	r2, #0
 8001650:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = WordsNum;
 8001652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800165a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800165e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	715a      	strb	r2, [r3, #5]
      UartSendbuf[6] = 2 * WordsNum;
 8001666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800166a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800167c:	719a      	strb	r2, [r3, #6]
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8001684:	e012      	b.n	80016ac <Uart_ReadWriteRegister_ServoMotor+0x1a4>
        UartSendbuf[7 + i] = Write_Multi_Bytes[i];
 8001686:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800168a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800168e:	441a      	add	r2, r3
 8001690:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001694:	3307      	adds	r3, #7
 8001696:	7811      	ldrb	r1, [r2, #0]
 8001698:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800169c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016a0:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
 80016a2:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80016a6:	3301      	adds	r3, #1
 80016a8:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80016ac:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80016b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016b4:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	429a      	cmp	r2, r3
 80016be:	dbe2      	blt.n	8001686 <Uart_ReadWriteRegister_ServoMotor+0x17e>
    } break;
 80016c0:	bf00      	nop
  }
  ServoMotor.UartCurrentCmd[0] = Read_WriteFunc;
 80016c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <Uart_ReadWriteRegister_ServoMotor+0x204>)
 80016d0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  ServoMotor.UartCurrentCmd[1] = Register;
 80016d2:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <Uart_ReadWriteRegister_ServoMotor+0x204>)
 80016d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	85d3      	strh	r3, [r2, #46]	@ 0x2e
  ServoMotor.UartCurrentCmd[2] = WordsNum;
 80016e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016e4:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <Uart_ReadWriteRegister_ServoMotor+0x204>)
 80016ee:	861a      	strh	r2, [r3, #48]	@ 0x30
  UartWrite_HexToAscii_AddLRC_ServoMotor(UartSendbuf, lenbuf);
 80016f0:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fe1b 	bl	8001336 <UartWrite_HexToAscii_AddLRC_ServoMotor>
 8001700:	e000      	b.n	8001704 <Uart_ReadWriteRegister_ServoMotor+0x1fc>
      return;
 8001702:	bf00      	nop
}
 8001704:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001708:	46bd      	mov	sp, r7
 800170a:	bdb0      	pop	{r4, r5, r7, pc}
 800170c:	20000088 	.word	0x20000088

08001710 <SetStatus_Power_ServoMotor>:

void SetStatus_Power_ServoMotor(uint8_t status) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(Power_ServoMotor_GPIO_Port, Power_ServoMotor_Pin, status);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	461a      	mov	r2, r3
 800171e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001722:	4805      	ldr	r0, [pc, #20]	@ (8001738 <SetStatus_Power_ServoMotor+0x28>)
 8001724:	f002 fd33 	bl	800418e <HAL_GPIO_WritePin>
  ServoMotor.IsPowerOn = Power_ServoMotor_Pin == PowerON_ServoMotor ? 1 : 0;
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <SetStatus_Power_ServoMotor+0x2c>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40010800 	.word	0x40010800
 800173c:	20000088 	.word	0x20000088

08001740 <UartReceiveIT_ServoMotor>:
uint8_t GetStatus_Power_ServoMotor(void) { return ServoMotor.IsPowerOn; }

void UartReceiveIT_ServoMotor(void) {                                       // 读写器串口接收
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart_ServoMotor, (uint8_t *)Rxdbuf_ServoMotor, 1);  // 重新启动接收中断
 8001744:	2201      	movs	r2, #1
 8001746:	4903      	ldr	r1, [pc, #12]	@ (8001754 <UartReceiveIT_ServoMotor+0x14>)
 8001748:	4803      	ldr	r0, [pc, #12]	@ (8001758 <UartReceiveIT_ServoMotor+0x18>)
 800174a:	f004 fea4 	bl	8006496 <HAL_UART_Receive_IT>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200000cc 	.word	0x200000cc
 8001758:	2000041c 	.word	0x2000041c

0800175c <UartGetData_ServoMotor>:
void UartGetData_ServoMotor(void) {  // 处理接收到的数据到新的数组，并重新接收
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

  UartRegroup_ASCII_ServoMotor();
 8001760:	f000 f8e6 	bl	8001930 <UartRegroup_ASCII_ServoMotor>

  UartReceiveIT_ServoMotor();
 8001764:	f7ff ffec 	bl	8001740 <UartReceiveIT_ServoMotor>
  //	UartRxd_ServoMotor[CntRxd_ServoMotor] = Rxdbuf_ServoMotor[0];
  //	CntRxd_ServoMotor++;
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <Get_Regroup_ASCII>:

uint8_t Get_Regroup_ASCII(uint8_t data, uint8_t H_L) {
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
  uint8_t databuf;
  if ('0' <= data && data <= '9') {
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001780:	d906      	bls.n	8001790 <Get_Regroup_ASCII+0x24>
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b39      	cmp	r3, #57	@ 0x39
 8001786:	d803      	bhi.n	8001790 <Get_Regroup_ASCII+0x24>
    databuf = data - '0';
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	3b30      	subs	r3, #48	@ 0x30
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e008      	b.n	80017a2 <Get_Regroup_ASCII+0x36>
  } else if ('A' <= data && data <= 'F') {
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b40      	cmp	r3, #64	@ 0x40
 8001794:	d905      	bls.n	80017a2 <Get_Regroup_ASCII+0x36>
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b46      	cmp	r3, #70	@ 0x46
 800179a:	d802      	bhi.n	80017a2 <Get_Regroup_ASCII+0x36>
    databuf = data - 'A' + 0x0A;
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	3b37      	subs	r3, #55	@ 0x37
 80017a0:	73fb      	strb	r3, [r7, #15]
  }
  if (H_L == 0) {
 80017a2:	79bb      	ldrb	r3, [r7, #6]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d103      	bne.n	80017b0 <Get_Regroup_ASCII+0x44>
    return databuf << 4;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	e005      	b.n	80017bc <Get_Regroup_ASCII+0x50>
  } else if (H_L == 1) {
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <Get_Regroup_ASCII+0x4e>
    return databuf;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	e000      	b.n	80017bc <Get_Regroup_ASCII+0x50>
  }
  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
	...

080017c8 <moteruart_receive>:
/****************************自己的***************************************/
void moteruart_receive(void) {
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 80017ce:	af00      	add	r7, sp, #0
  uint8_t  len    = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
  uint8_t  lenbuf = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
  uint8_t  buf[255];
  uint8_t  uartbuf[255];
  uint32_t mm;
  // LOGI("SUCESS UART MOTOR");

  len    = UartRead_ServoMotor(buf, sizeof(buf));
 80017dc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80017e0:	21ff      	movs	r1, #255	@ 0xff
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f920 	bl	8001a28 <UartRead_ServoMotor>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
  lenbuf = len / 2;
 80017ee:	f897 3206 	ldrb.w	r3, [r7, #518]	@ 0x206
 80017f2:	085b      	lsrs	r3, r3, #1
 80017f4:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
  for (uint8_t i = 0; i < lenbuf; i++) {
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
 80017fe:	e02a      	b.n	8001856 <moteruart_receive+0x8e>
    uartbuf[i] = Get_Regroup_ASCII(buf[2 * i], 0) | Get_Regroup_ASCII(buf[2 * i + 1], 1);
 8001800:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800180a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffaa 	bl	800176c <Get_Regroup_ASCII>
 8001818:	4603      	mov	r3, r0
 800181a:	461c      	mov	r4, r3
 800181c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	3301      	adds	r3, #1
 8001824:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001828:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	2101      	movs	r1, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff9b 	bl	800176c <Get_Regroup_ASCII>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800183e:	4322      	orrs	r2, r4
 8001840:	b2d1      	uxtb	r1, r2
 8001842:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001846:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 800184a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < lenbuf; i++) {
 800184c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001850:	3301      	adds	r3, #1
 8001852:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
 8001856:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800185a:	f897 3205 	ldrb.w	r3, [r7, #517]	@ 0x205
 800185e:	429a      	cmp	r2, r3
 8001860:	d3ce      	bcc.n	8001800 <moteruart_receive+0x38>
  }

  if (uartbuf[0] != ServoMotor.address && uartbuf[1] != (uint8_t)(ServoMotor.UartCurrentCmd[0] & 0xFF)) {
 8001862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001866:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <moteruart_receive+0x154>)
 800186e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001872:	429a      	cmp	r2, r3
 8001874:	d012      	beq.n	800189c <moteruart_receive+0xd4>
 8001876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800187e:	785a      	ldrb	r2, [r3, #1]
 8001880:	4b26      	ldr	r3, [pc, #152]	@ (800191c <moteruart_receive+0x154>)
 8001882:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001884:	b2db      	uxtb	r3, r3
 8001886:	429a      	cmp	r2, r3
 8001888:	d008      	beq.n	800189c <moteruart_receive+0xd4>
    LOGI("address error ");
 800188a:	f001 fb15 	bl	8002eb8 <HAL_GetTick>
 800188e:	4603      	mov	r3, r0
 8001890:	4a23      	ldr	r2, [pc, #140]	@ (8001920 <moteruart_receive+0x158>)
 8001892:	4619      	mov	r1, r3
 8001894:	4823      	ldr	r0, [pc, #140]	@ (8001924 <moteruart_receive+0x15c>)
 8001896:	f008 fbe3 	bl	800a060 <iprintf>
 800189a:	e03a      	b.n	8001912 <moteruart_receive+0x14a>
    return;
  }

  switch (uartbuf[1]) {
 800189c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d032      	beq.n	8001910 <moteruart_receive+0x148>
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	dc31      	bgt.n	8001912 <moteruart_receive+0x14a>
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d002      	beq.n	80018b8 <moteruart_receive+0xf0>
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d01d      	beq.n	80018f2 <moteruart_receive+0x12a>
 80018b6:	e02c      	b.n	8001912 <moteruart_receive+0x14a>
    case Cmd_Read_Func_ServoMotor:
      motor_state_reg[0] = uartbuf[3];
 80018b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018c0:	78da      	ldrb	r2, [r3, #3]
 80018c2:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <moteruart_receive+0x160>)
 80018c4:	701a      	strb	r2, [r3, #0]
      motor_state_reg[1] = uartbuf[4];
 80018c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ce:	791a      	ldrb	r2, [r3, #4]
 80018d0:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <moteruart_receive+0x160>)
 80018d2:	705a      	strb	r2, [r3, #1]
      motor_state_reg[2] = uartbuf[5];
 80018d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018dc:	795a      	ldrb	r2, [r3, #5]
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <moteruart_receive+0x160>)
 80018e0:	709a      	strb	r2, [r3, #2]
      motor_state_reg[3] = uartbuf[6];
 80018e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ea:	799a      	ldrb	r2, [r3, #6]
 80018ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <moteruart_receive+0x160>)
 80018ee:	70da      	strb	r2, [r3, #3]

      break;
 80018f0:	e00f      	b.n	8001912 <moteruart_receive+0x14a>
    case Cmd_Write_Once_Func_ServoMotor:
      motor_ack[0] = uartbuf[4];
 80018f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018fa:	791a      	ldrb	r2, [r3, #4]
 80018fc:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <moteruart_receive+0x164>)
 80018fe:	701a      	strb	r2, [r3, #0]
      motor_ack[1] = uartbuf[5];
 8001900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001904:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001908:	795a      	ldrb	r2, [r3, #5]
 800190a:	4b08      	ldr	r3, [pc, #32]	@ (800192c <moteruart_receive+0x164>)
 800190c:	705a      	strb	r2, [r3, #1]
      break;
 800190e:	e000      	b.n	8001912 <moteruart_receive+0x14a>
    case Cmd_Write_Multi_Func_ServoMotor:
      break;
 8001910:	bf00      	nop

  // for (int i = 0; i < 8; i++)  //
  //   LOGI("data is %02x", uartbuf[i]);
  // mm = get_Position_mm(motor_state_reg, 4);
  // LOGI("distance is %d", mm);
}
 8001912:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 8001916:	46bd      	mov	sp, r7
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	bf00      	nop
 800191c:	20000088 	.word	0x20000088
 8001920:	0800bb0c 	.word	0x0800bb0c
 8001924:	0800ad88 	.word	0x0800ad88
 8001928:	200001d8 	.word	0x200001d8
 800192c:	200001d4 	.word	0x200001d4

08001930 <UartRegroup_ASCII_ServoMotor>:

/*******************************************************************/

void UartRegroup_ASCII_ServoMotor(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  // static bool clear_falg;
  if (Flag_UartRegroup_ASCII_ServoMotor == 2) {
 8001934:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <UartRegroup_ASCII_ServoMotor+0xb4>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d108      	bne.n	800194e <UartRegroup_ASCII_ServoMotor+0x1e>
    Flag_UartRegroup_ASCII_ServoMotor = Rxdbuf_ServoMotor[0] == 0x0D ? 3 : 1;
 800193c:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <UartRegroup_ASCII_ServoMotor+0xb8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b0d      	cmp	r3, #13
 8001942:	d101      	bne.n	8001948 <UartRegroup_ASCII_ServoMotor+0x18>
 8001944:	2203      	movs	r2, #3
 8001946:	e000      	b.n	800194a <UartRegroup_ASCII_ServoMotor+0x1a>
 8001948:	2201      	movs	r2, #1
 800194a:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <UartRegroup_ASCII_ServoMotor+0xb4>)
 800194c:	701a      	strb	r2, [r3, #0]
  }
  switch (Flag_UartRegroup_ASCII_ServoMotor) {
 800194e:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <UartRegroup_ASCII_ServoMotor+0xb4>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d844      	bhi.n	80019e0 <UartRegroup_ASCII_ServoMotor+0xb0>
 8001956:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <UartRegroup_ASCII_ServoMotor+0x2c>)
 8001958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195c:	08001971 	.word	0x08001971
 8001960:	08001981 	.word	0x08001981
 8001964:	0800199f 	.word	0x0800199f
 8001968:	080019b7 	.word	0x080019b7
 800196c:	080019d3 	.word	0x080019d3
    case 0: {  // 帧头必须是':'(0x3A)
      if (Rxdbuf_ServoMotor[0] == ':') Flag_UartRegroup_ASCII_ServoMotor = 1;
 8001970:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <UartRegroup_ASCII_ServoMotor+0xb8>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b3a      	cmp	r3, #58	@ 0x3a
 8001976:	d130      	bne.n	80019da <UartRegroup_ASCII_ServoMotor+0xaa>
 8001978:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <UartRegroup_ASCII_ServoMotor+0xb4>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
    } break;
 800197e:	e02c      	b.n	80019da <UartRegroup_ASCII_ServoMotor+0xaa>
    case 1: {  // 高字节
      UartRxd_ServoMotor[CntRxd_ServoMotor++] = Rxdbuf_ServoMotor[0];
 8001980:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <UartRegroup_ASCII_ServoMotor+0xbc>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	b2d1      	uxtb	r1, r2
 8001988:	4a18      	ldr	r2, [pc, #96]	@ (80019ec <UartRegroup_ASCII_ServoMotor+0xbc>)
 800198a:	7011      	strb	r1, [r2, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <UartRegroup_ASCII_ServoMotor+0xb8>)
 8001990:	7819      	ldrb	r1, [r3, #0]
 8001992:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <UartRegroup_ASCII_ServoMotor+0xc0>)
 8001994:	5499      	strb	r1, [r3, r2]
      Flag_UartRegroup_ASCII_ServoMotor       = 2;
 8001996:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <UartRegroup_ASCII_ServoMotor+0xb4>)
 8001998:	2202      	movs	r2, #2
 800199a:	701a      	strb	r2, [r3, #0]
    } break;
 800199c:	e020      	b.n	80019e0 <UartRegroup_ASCII_ServoMotor+0xb0>
    case 2: {  // 低字节
      UartRxd_ServoMotor[CntRxd_ServoMotor++] = Rxdbuf_ServoMotor[0];
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <UartRegroup_ASCII_ServoMotor+0xbc>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	b2d1      	uxtb	r1, r2
 80019a6:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <UartRegroup_ASCII_ServoMotor+0xbc>)
 80019a8:	7011      	strb	r1, [r2, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <UartRegroup_ASCII_ServoMotor+0xb8>)
 80019ae:	7819      	ldrb	r1, [r3, #0]
 80019b0:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <UartRegroup_ASCII_ServoMotor+0xc0>)
 80019b2:	5499      	strb	r1, [r3, r2]
    } break;
 80019b4:	e014      	b.n	80019e0 <UartRegroup_ASCII_ServoMotor+0xb0>
    case 3: {  // 0x0D
      Flag_UartRegroup_ASCII_ServoMotor = 4;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <UartRegroup_ASCII_ServoMotor+0xb4>)
 80019b8:	2204      	movs	r2, #4
 80019ba:	701a      	strb	r2, [r3, #0]
      if (ServoMotor.Flag_Event[2] >= 16) {
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <UartRegroup_ASCII_ServoMotor+0xc4>)
 80019be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019c2:	2b0f      	cmp	r3, #15
 80019c4:	d90b      	bls.n	80019de <UartRegroup_ASCII_ServoMotor+0xae>
        // if (!clear_falg) {
        //   memset(UartRxd_ServoMotor, 0, 255);
        //   clear_falg = true;
        // }
        moteruart_receive();
 80019c6:	f7ff feff 	bl	80017c8 <moteruart_receive>
        // enterQueueEvent(EVENT_MotorUart);
        Servo_info.uart_recv_state = true;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <UartRegroup_ASCII_ServoMotor+0xc8>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	725a      	strb	r2, [r3, #9]
        // LOGI("EVENT MOTOR");
      }
    } break;
 80019d0:	e005      	b.n	80019de <UartRegroup_ASCII_ServoMotor+0xae>
    case 4: {  // 0x0A
      Flag_UartRxdMonitor_ServoMotor = 1;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <UartRegroup_ASCII_ServoMotor+0xcc>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
    } break;
 80019d8:	e002      	b.n	80019e0 <UartRegroup_ASCII_ServoMotor+0xb0>
    } break;
 80019da:	bf00      	nop
 80019dc:	e000      	b.n	80019e0 <UartRegroup_ASCII_ServoMotor+0xb0>
    } break;
 80019de:	bf00      	nop
  }
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200001d0 	.word	0x200001d0
 80019e8:	200000cc 	.word	0x200000cc
 80019ec:	200000cd 	.word	0x200000cd
 80019f0:	200000d0 	.word	0x200000d0
 80019f4:	20000088 	.word	0x20000088
 80019f8:	20002274 	.word	0x20002274
 80019fc:	200001cf 	.word	0x200001cf

08001a00 <UartWrite_ServoMotor>:

void UartWrite_ServoMotor(uint8_t *pData, uint16_t Size) {  // 发送给读写器
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart_ServoMotor, pData, Size, 1000);
 8001a0c:	887a      	ldrh	r2, [r7, #2]
 8001a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4803      	ldr	r0, [pc, #12]	@ (8001a24 <UartWrite_ServoMotor+0x24>)
 8001a16:	f004 fcbb 	bl	8006390 <HAL_UART_Transmit>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000041c 	.word	0x2000041c

08001a28 <UartRead_ServoMotor>:
uint8_t UartRead_ServoMotor(uint8_t *buf, uint8_t len) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  if (len > CntRxd_ServoMotor) {
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <UartRead_ServoMotor+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d902      	bls.n	8001a44 <UartRead_ServoMotor+0x1c>
    len = CntRxd_ServoMotor;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <UartRead_ServoMotor+0x58>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	70fb      	strb	r3, [r7, #3]
  }
  for (i = 0; i < len; i++) {
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e009      	b.n	8001a5e <UartRead_ServoMotor+0x36>
    buf[i] = UartRxd_ServoMotor[i];
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	440b      	add	r3, r1
 8001a52:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <UartRead_ServoMotor+0x5c>)
 8001a54:	5c8a      	ldrb	r2, [r1, r2]
 8001a56:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3f1      	bcc.n	8001a4a <UartRead_ServoMotor+0x22>
  }
  CntRxd_ServoMotor                 = 0;
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <UartRead_ServoMotor+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
  Flag_UartRegroup_ASCII_ServoMotor = 0;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <UartRead_ServoMotor+0x60>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
  return len;
 8001a72:	78fb      	ldrb	r3, [r7, #3]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	200000cd 	.word	0x200000cd
 8001a84:	200000d0 	.word	0x200000d0
 8001a88:	200001d0 	.word	0x200001d0

08001a8c <UartRxdMonitor_ServoMotor>:
void UartRxdMonitor_ServoMotor(uint8_t time_ms) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  static uint8_t cnt_bkp    = 0;
  static uint8_t idle_timer = 0;
  if (CntRxd_ServoMotor > 0) {
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <UartRxdMonitor_ServoMotor+0x70>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d026      	beq.n	8001aec <UartRxdMonitor_ServoMotor+0x60>
    if (cnt_bkp != CntRxd_ServoMotor) {
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <UartRxdMonitor_ServoMotor+0x74>)
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <UartRxdMonitor_ServoMotor+0x70>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d007      	beq.n	8001aba <UartRxdMonitor_ServoMotor+0x2e>
      cnt_bkp    = CntRxd_ServoMotor;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <UartRxdMonitor_ServoMotor+0x70>)
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <UartRxdMonitor_ServoMotor+0x74>)
 8001ab0:	701a      	strb	r2, [r3, #0]
      idle_timer = 0;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <UartRxdMonitor_ServoMotor+0x78>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
      }
    }
  } else {
    cnt_bkp = 0;
  }
}
 8001ab8:	e01b      	b.n	8001af2 <UartRxdMonitor_ServoMotor+0x66>
      if (idle_timer < 10) {
 8001aba:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <UartRxdMonitor_ServoMotor+0x78>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b09      	cmp	r3, #9
 8001ac0:	d817      	bhi.n	8001af2 <UartRxdMonitor_ServoMotor+0x66>
        idle_timer += time_ms;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <UartRxdMonitor_ServoMotor+0x78>)
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4413      	add	r3, r2
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <UartRxdMonitor_ServoMotor+0x78>)
 8001ace:	701a      	strb	r2, [r3, #0]
        if (idle_timer >= 10) {
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <UartRxdMonitor_ServoMotor+0x78>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d90c      	bls.n	8001af2 <UartRxdMonitor_ServoMotor+0x66>
          CntRxd_ServoMotor                 = 0;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <UartRxdMonitor_ServoMotor+0x70>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
          Flag_UartRegroup_ASCII_ServoMotor = 0;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <UartRxdMonitor_ServoMotor+0x7c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
          Flag_UartRxdMonitor_ServoMotor    = 1;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <UartRxdMonitor_ServoMotor+0x80>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
}
 8001aea:	e002      	b.n	8001af2 <UartRxdMonitor_ServoMotor+0x66>
    cnt_bkp = 0;
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <UartRxdMonitor_ServoMotor+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	200000cd 	.word	0x200000cd
 8001b00:	200001dc 	.word	0x200001dc
 8001b04:	200001dd 	.word	0x200001dd
 8001b08:	200001d0 	.word	0x200001d0
 8001b0c:	200001cf 	.word	0x200001cf

08001b10 <UartDriver_ServoMotor>:
void UartDriver_ServoMotor(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0c0      	sub	sp, #256	@ 0x100
 8001b14:	af00      	add	r7, sp, #0
  uint8_t len;
  uint8_t buf[255] = {0};
 8001b16:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001b1a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b1e:	4618      	mov	r0, r3
 8001b20:	23ff      	movs	r3, #255	@ 0xff
 8001b22:	461a      	mov	r2, r3
 8001b24:	2100      	movs	r1, #0
 8001b26:	f008 faf0 	bl	800a10a <memset>
  if (Flag_UartRxdMonitor_ServoMotor) {
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <UartDriver_ServoMotor+0x50>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d011      	beq.n	8001b56 <UartDriver_ServoMotor+0x46>
    Flag_UartRxdMonitor_ServoMotor = 0;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <UartDriver_ServoMotor+0x50>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
    len                            = UartRead_ServoMotor(buf, sizeof(buf));
 8001b38:	463b      	mov	r3, r7
 8001b3a:	21ff      	movs	r1, #255	@ 0xff
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff73 	bl	8001a28 <UartRead_ServoMotor>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
    UartAction_ServoMotor(buf, len);
 8001b48:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fc9f 	bl	8000494 <UartAction_ServoMotor>
  }
}
 8001b56:	bf00      	nop
 8001b58:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200001cf 	.word	0x200001cf

08001b64 <HAL_UART_RxCpltCallback>:
#include "SystemTasks.h"

#include "module_apply/app_communicate.h"
#include "module_driver/driver_upp_uart.h"
#include "module_driver/driver_wireless.h"
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  // }
  // if (huart->Instance == UartX_WirelessModule)
  // {
  // 	UartGetData_WirelessModule(); // 处理接收到的数据
  // }
  if (huart->Instance == UartX_ServoMotor) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <HAL_UART_RxCpltCallback+0x20>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d101      	bne.n	8001b7a <HAL_UART_RxCpltCallback+0x16>
    UartGetData_ServoMotor();  // 处理接收到的数据
 8001b76:	f7ff fdf1 	bl	800175c <UartGetData_ServoMotor>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40004400 	.word	0x40004400

08001b88 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
  if (huart == GetWireLessHandle()) {
 8001b94:	f007 fee0 	bl	8009958 <GetWireLessHandle>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d102      	bne.n	8001ba6 <HAL_UARTEx_RxEventCallback+0x1e>
    receive_rx_data();
 8001ba0:	f007 ffc0 	bl	8009b24 <receive_rx_data>
  } else if (huart == GetUpperUartHandle()) {
    upper_receive_rx_data();
  }
}
 8001ba4:	e007      	b.n	8001bb6 <HAL_UARTEx_RxEventCallback+0x2e>
  } else if (huart == GetUpperUartHandle()) {
 8001ba6:	f007 fd93 	bl	80096d0 <GetUpperUartHandle>
 8001baa:	4602      	mov	r2, r0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_UARTEx_RxEventCallback+0x2e>
    upper_receive_rx_data();
 8001bb2:	f007 fe5f 	bl	8009874 <upper_receive_rx_data>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_TIM_PeriodElapsedCallback>:

static volatile uint32_t time_book_ack;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)  // 1ms
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d110      	bne.n	8001bf4 <HAL_TIM_PeriodElapsedCallback+0x34>
  {
    time_book_ack++;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a09      	ldr	r2, [pc, #36]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bda:	6013      	str	r3, [r2, #0]
    // TimerTasks_WirelessModule();
    // TimerTasks_Reader15693();
    TimerTasks_ServoMotor();
 8001bdc:	f7ff f9c0 	bl	8000f60 <TimerTasks_ServoMotor>
    if (time_book_ack >= 500) {
 8001be0:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001be8:	d304      	bcc.n	8001bf4 <HAL_TIM_PeriodElapsedCallback+0x34>
      book_ack_func();
 8001bea:	f006 ff9d 	bl	8008b28 <book_ack_func>
      time_book_ack = 0;
 8001bee:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	200001e0 	.word	0x200001e0

08001c04 <UartWrite_WirelessModule>:
	UartRxd_WirelessModule[CntRxd_WirelessModule] = Rxdbuf_WirelessModule[0];
	CntRxd_WirelessModule++;
	UartReceiveIT_WirelessModule();
}
void UartWrite_WirelessModule(uint8_t *pData, uint16_t Size)
{//发送给读写器
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart_WirelessModule,pData,Size,1000);
 8001c10:	887a      	ldrh	r2, [r7, #2]
 8001c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <UartWrite_WirelessModule+0x24>)
 8001c1a:	f004 fbb9 	bl	8006390 <HAL_UART_Transmit>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000344 	.word	0x20000344

08001c2c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <MX_ADC1_Init+0x74>)
 8001c3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ca4 <MX_ADC1_Init+0x78>)
 8001c40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <MX_ADC1_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c48:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <MX_ADC1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <MX_ADC1_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <MX_ADC1_Init+0x74>)
 8001c56:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001c5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <MX_ADC1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <MX_ADC1_Init+0x74>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c68:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <MX_ADC1_Init+0x74>)
 8001c6a:	f001 f92f 	bl	8002ecc <HAL_ADC_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c74:	f000 fa49 	bl	800210a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c78:	2305      	movs	r3, #5
 8001c7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <MX_ADC1_Init+0x74>)
 8001c8a:	f001 fa09 	bl	80030a0 <HAL_ADC_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001c94:	f000 fa39 	bl	800210a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200001e4 	.word	0x200001e4
 8001ca4:	40012400 	.word	0x40012400

08001ca8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <HAL_ADC_MspInit+0x6c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d121      	bne.n	8001d0c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cc8:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <HAL_ADC_MspInit+0x70>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <HAL_ADC_MspInit+0x70>)
 8001cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_ADC_MspInit+0x70>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <HAL_ADC_MspInit+0x70>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d18 <HAL_ADC_MspInit+0x70>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_ADC_MspInit+0x70>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_ContactPoint_Pin|ADC_BAT_Pin|ADC_CurrentDetection_Pin;
 8001cf8:	23b0      	movs	r3, #176	@ 0xb0
 8001cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	4619      	mov	r1, r3
 8001d06:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <HAL_ADC_MspInit+0x74>)
 8001d08:	f002 f896 	bl	8003e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40012400 	.word	0x40012400
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010800 	.word	0x40010800

08001d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <MX_DMA_Init+0x70>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <MX_DMA_Init+0x70>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6153      	str	r3, [r2, #20]
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <MX_DMA_Init+0x70>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d3e:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <MX_DMA_Init+0x70>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <MX_DMA_Init+0x70>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6153      	str	r3, [r2, #20]
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <MX_DMA_Init+0x70>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	200f      	movs	r0, #15
 8001d5c:	f001 fbb1 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d60:	200f      	movs	r0, #15
 8001d62:	f001 fbca 	bl	80034fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2010      	movs	r0, #16
 8001d6c:	f001 fba9 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d70:	2010      	movs	r0, #16
 8001d72:	f001 fbc2 	bl	80034fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	203a      	movs	r0, #58	@ 0x3a
 8001d7c:	f001 fba1 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001d80:	203a      	movs	r0, #58	@ 0x3a
 8001d82:	f001 fbba 	bl	80034fa <HAL_NVIC_EnableIRQ>

}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000

08001d94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da8:	4b44      	ldr	r3, [pc, #272]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a43      	ldr	r2, [pc, #268]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001dc6:	f043 0320 	orr.w	r3, r3, #32
 8001dca:	6193      	str	r3, [r2, #24]
 8001dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	4b38      	ldr	r3, [pc, #224]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a37      	ldr	r2, [pc, #220]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6193      	str	r3, [r2, #24]
 8001de4:	4b35      	ldr	r3, [pc, #212]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a31      	ldr	r2, [pc, #196]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001df6:	f043 0308 	orr.w	r3, r3, #8
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001ebc <MX_GPIO_Init+0x128>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Power_EStopLED_Pin|Power_Host_Pin, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8001e0e:	482c      	ldr	r0, [pc, #176]	@ (8001ec0 <MX_GPIO_Init+0x12c>)
 8001e10:	f002 f9bd 	bl	800418e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power_Sensor_GPIO_Port, Power_Sensor_Pin, GPIO_PIN_SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	2101      	movs	r1, #1
 8001e18:	4829      	ldr	r0, [pc, #164]	@ (8001ec0 <MX_GPIO_Init+0x12c>)
 8001e1a:	f002 f9b8 	bl	800418e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_DetectionSwitch_Pin|Power_BLDCMotor_Pin|Power_WirelessModule_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 6114 	mov.w	r1, #2368	@ 0x940
 8001e24:	4827      	ldr	r0, [pc, #156]	@ (8001ec4 <MX_GPIO_Init+0x130>)
 8001e26:	f002 f9b2 	bl	800418e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Power_Reader15693_Pin|Power_Lidar2_Pin, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001e30:	4824      	ldr	r0, [pc, #144]	@ (8001ec4 <MX_GPIO_Init+0x130>)
 8001e32:	f002 f9ac 	bl	800418e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Power_Lidar1_Pin|Direction_Ctl_BLDCMotor_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2118      	movs	r1, #24
 8001e3a:	4823      	ldr	r0, [pc, #140]	@ (8001ec8 <MX_GPIO_Init+0x134>)
 8001e3c:	f002 f9a7 	bl	800418e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Power_EStopLED_Pin|Power_Sensor_Pin|Power_Host_Pin;
 8001e40:	f242 2301 	movw	r3, #8705	@ 0x2201
 8001e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4619      	mov	r1, r3
 8001e58:	4819      	ldr	r0, [pc, #100]	@ (8001ec0 <MX_GPIO_Init+0x12c>)
 8001e5a:	f001 ffed 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Input_Sensor3_Pin|Input_Sensor1_Pin|Input_Sensor2_Pin|Input_EmergencyStopButton_Pin;
 8001e5e:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8001e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	4619      	mov	r1, r3
 8001e72:	4813      	ldr	r0, [pc, #76]	@ (8001ec0 <MX_GPIO_Init+0x12c>)
 8001e74:	f001 ffe0 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ADC_DetectionSwitch_Pin|Power_BLDCMotor_Pin|Power_WirelessModule_Pin|Power_Reader15693_Pin
 8001e78:	f649 1340 	movw	r3, #39232	@ 0x9940
 8001e7c:	613b      	str	r3, [r7, #16]
                          |Power_Lidar2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0310 	add.w	r3, r7, #16
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <MX_GPIO_Init+0x130>)
 8001e92:	f001 ffd1 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Power_Lidar1_Pin|Direction_Ctl_BLDCMotor_Pin;
 8001e96:	2318      	movs	r3, #24
 8001e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4806      	ldr	r0, [pc, #24]	@ (8001ec8 <MX_GPIO_Init+0x134>)
 8001eae:	f001 ffc3 	bl	8003e38 <HAL_GPIO_Init>

}
 8001eb2:	bf00      	nop
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40011000 	.word	0x40011000
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	40010c00 	.word	0x40010c00

08001ecc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <MX_I2C1_Init+0x50>)
 8001ed2:	4a13      	ldr	r2, [pc, #76]	@ (8001f20 <MX_I2C1_Init+0x54>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <MX_I2C1_Init+0x50>)
 8001ed8:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <MX_I2C1_Init+0x58>)
 8001eda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <MX_I2C1_Init+0x50>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <MX_I2C1_Init+0x50>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <MX_I2C1_Init+0x50>)
 8001eea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <MX_I2C1_Init+0x50>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ef6:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <MX_I2C1_Init+0x50>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001efc:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f08:	4804      	ldr	r0, [pc, #16]	@ (8001f1c <MX_I2C1_Init+0x50>)
 8001f0a:	f002 f959 	bl	80041c0 <HAL_I2C_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f14:	f000 f8f9 	bl	800210a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000214 	.word	0x20000214
 8001f20:	40005400 	.word	0x40005400
 8001f24:	000186a0 	.word	0x000186a0

08001f28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb8 <HAL_I2C_MspInit+0x90>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d132      	bne.n	8001fae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <HAL_I2C_MspInit+0x94>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fbc <HAL_I2C_MspInit+0x94>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <HAL_I2C_MspInit+0x94>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 8001f60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f66:	2312      	movs	r3, #18
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	4812      	ldr	r0, [pc, #72]	@ (8001fc0 <HAL_I2C_MspInit+0x98>)
 8001f76:	f001 ff5f 	bl	8003e38 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f7a:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <HAL_I2C_MspInit+0x9c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f90:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <HAL_I2C_MspInit+0x9c>)
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_I2C_MspInit+0x94>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_I2C_MspInit+0x94>)
 8001f9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fa0:	61d3      	str	r3, [r2, #28]
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_I2C_MspInit+0x94>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3728      	adds	r7, #40	@ 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40005400 	.word	0x40005400
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40010000 	.word	0x40010000

08001fc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fcc:	f000 ff1c 	bl	8002e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd0:	f000 f83e 	bl	8002050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd4:	f7ff fede 	bl	8001d94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fd8:	f7ff fea2 	bl	8001d20 <MX_DMA_Init>
  MX_UART4_Init();
 8001fdc:	f000 fc2e 	bl	800283c <MX_UART4_Init>
  MX_UART5_Init();
 8001fe0:	f000 fc56 	bl	8002890 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001fe4:	f000 fc7e 	bl	80028e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001fe8:	f000 fca6 	bl	8002938 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001fec:	f000 fcce 	bl	800298c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001ff0:	f7ff fe1c 	bl	8001c2c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ff4:	f7ff ff6a 	bl	8001ecc <MX_I2C1_Init>
  MX_TIM4_Init();
 8001ff8:	f000 fae2 	bl	80025c0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001ffc:	f000 fa36 	bl	800246c <MX_TIM1_Init>
  MX_TIM3_Init();
 8002000:	f000 fa84 	bl	800250c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  wireless_reg_handle(&huart1, &hdma_usart1_rx);
 8002004:	490e      	ldr	r1, [pc, #56]	@ (8002040 <main+0x78>)
 8002006:	480f      	ldr	r0, [pc, #60]	@ (8002044 <main+0x7c>)
 8002008:	f007 fc70 	bl	80098ec <wireless_reg_handle>
  wireless_init();
 800200c:	f007 fc82 	bl	8009914 <wireless_init>

  upper_uart_reg_handle(&huart4, &hdma_uart4_rx);
 8002010:	490d      	ldr	r1, [pc, #52]	@ (8002048 <main+0x80>)
 8002012:	480e      	ldr	r0, [pc, #56]	@ (800204c <main+0x84>)
 8002014:	f007 fb26 	bl	8009664 <upper_uart_reg_handle>
  upper_uart_init();
 8002018:	f007 fb38 	bl	800968c <upper_uart_init>

  motor_uart_init();
 800201c:	f7fe f922 	bl	8000264 <motor_uart_init>

  servo_config_init();
 8002020:	f006 ff88 	bl	8008f34 <servo_config_init>

  app_communicate_init();
 8002024:	f006 fa1a 	bl	800845c <app_communicate_init>
  app_servo_action_init();
 8002028:	f006 fdb4 	bl	8008b94 <app_servo_action_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    process_event();
 800202c:	f007 ff0c 	bl	8009e48 <process_event>

    Events_MainLogic();
 8002030:	f7fe f8f8 	bl	8000224 <Events_MainLogic>

    app_comunicate();
 8002034:	f006 fa1a 	bl	800846c <app_comunicate>
    app_action();
 8002038:	f006 fdb8 	bl	8008bac <app_action>
  while (1) {
 800203c:	bf00      	nop
 800203e:	e7f5      	b.n	800202c <main+0x64>
 8002040:	200004f0 	.word	0x200004f0
 8002044:	200003d4 	.word	0x200003d4
 8002048:	200004ac 	.word	0x200004ac
 800204c:	20000344 	.word	0x20000344

08002050 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b096      	sub	sp, #88	@ 0x58
 8002054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef       RCC_OscInitStruct = {0};
 8002056:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800205a:	2228      	movs	r2, #40	@ 0x28
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f008 f853 	bl	800a10a <memset>
  RCC_ClkInitTypeDef       RCC_ClkInitStruct = {0};
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit     = {0};
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]
 8002082:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002084:	2301      	movs	r3, #1
 8002086:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8002088:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800208c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800208e:	2300      	movs	r3, #0
 8002090:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 8002092:	2301      	movs	r3, #1
 8002094:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8002096:	2302      	movs	r3, #2
 8002098:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 800209a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800209e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL6;
 80020a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80020a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020aa:	4618      	mov	r0, r3
 80020ac:	f002 f9cc 	bl	8004448 <HAL_RCC_OscConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <SystemClock_Config+0x6a>
    Error_Handler();
 80020b6:	f000 f828 	bl	800210a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020ba:	230f      	movs	r3, #15
 80020bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80020be:	2302      	movs	r3, #2
 80020c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	2102      	movs	r1, #2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 fc38 	bl	800494c <HAL_RCC_ClockConfig>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <SystemClock_Config+0x96>
    Error_Handler();
 80020e2:	f000 f812 	bl	800210a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020e6:	2302      	movs	r3, #2
 80020e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection    = RCC_ADCPCLK2_DIV6;
 80020ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	4618      	mov	r0, r3
 80020f4:	f002 fdba 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <SystemClock_Config+0xb2>
    Error_Handler();
 80020fe:	f000 f804 	bl	800210a <Error_Handler>
  }
}
 8002102:	bf00      	nop
 8002104:	3758      	adds	r7, #88	@ 0x58
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210e:	b672      	cpsid	i
}
 8002110:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002112:	bf00      	nop
 8002114:	e7fd      	b.n	8002112 <Error_Handler+0x8>
	...

08002118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <HAL_MspInit+0x5c>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	4a14      	ldr	r2, [pc, #80]	@ (8002174 <HAL_MspInit+0x5c>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6193      	str	r3, [r2, #24]
 800212a:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <HAL_MspInit+0x5c>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <HAL_MspInit+0x5c>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a0e      	ldr	r2, [pc, #56]	@ (8002174 <HAL_MspInit+0x5c>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <HAL_MspInit+0x5c>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_MspInit+0x60>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <HAL_MspInit+0x60>)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40021000 	.word	0x40021000
 8002178:	40010000 	.word	0x40010000

0800217c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <NMI_Handler+0x4>

08002184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    LOGE("hard fault");
 8002188:	f000 fe96 	bl	8002eb8 <HAL_GetTick>
 800218c:	4603      	mov	r3, r0
 800218e:	4a03      	ldr	r2, [pc, #12]	@ (800219c <HardFault_Handler+0x18>)
 8002190:	4619      	mov	r1, r3
 8002192:	4803      	ldr	r0, [pc, #12]	@ (80021a0 <HardFault_Handler+0x1c>)
 8002194:	f007 ff64 	bl	800a060 <iprintf>
  {
 8002198:	bf00      	nop
 800219a:	e7f5      	b.n	8002188 <HardFault_Handler+0x4>
 800219c:	0800bb20 	.word	0x0800bb20
 80021a0:	0800adb4 	.word	0x0800adb4

080021a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    LOGE("mem fault");
 80021a8:	f000 fe86 	bl	8002eb8 <HAL_GetTick>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4a03      	ldr	r2, [pc, #12]	@ (80021bc <MemManage_Handler+0x18>)
 80021b0:	4619      	mov	r1, r3
 80021b2:	4803      	ldr	r0, [pc, #12]	@ (80021c0 <MemManage_Handler+0x1c>)
 80021b4:	f007 ff54 	bl	800a060 <iprintf>
  {
 80021b8:	bf00      	nop
 80021ba:	e7f5      	b.n	80021a8 <MemManage_Handler+0x4>
 80021bc:	0800bb34 	.word	0x0800bb34
 80021c0:	0800addc 	.word	0x0800addc

080021c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    LOGE("bus fault");
 80021c8:	f000 fe76 	bl	8002eb8 <HAL_GetTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4a03      	ldr	r2, [pc, #12]	@ (80021dc <BusFault_Handler+0x18>)
 80021d0:	4619      	mov	r1, r3
 80021d2:	4803      	ldr	r0, [pc, #12]	@ (80021e0 <BusFault_Handler+0x1c>)
 80021d4:	f007 ff44 	bl	800a060 <iprintf>
  {
 80021d8:	bf00      	nop
 80021da:	e7f5      	b.n	80021c8 <BusFault_Handler+0x4>
 80021dc:	0800bb48 	.word	0x0800bb48
 80021e0:	0800ae04 	.word	0x0800ae04

080021e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    LOGE("usage fault");
 80021e8:	f000 fe66 	bl	8002eb8 <HAL_GetTick>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4a03      	ldr	r2, [pc, #12]	@ (80021fc <UsageFault_Handler+0x18>)
 80021f0:	4619      	mov	r1, r3
 80021f2:	4803      	ldr	r0, [pc, #12]	@ (8002200 <UsageFault_Handler+0x1c>)
 80021f4:	f007 ff34 	bl	800a060 <iprintf>
  {
 80021f8:	bf00      	nop
 80021fa:	e7f5      	b.n	80021e8 <UsageFault_Handler+0x4>
 80021fc:	0800bb5c 	.word	0x0800bb5c
 8002200:	0800ae2c 	.word	0x0800ae2c

08002204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800222c:	f000 fe32 	bl	8002e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}

08002234 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <DMA1_Channel5_IRQHandler+0x10>)
 800223a:	f001 fb93 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200004f0 	.word	0x200004f0

08002248 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <DMA1_Channel6_IRQHandler+0x10>)
 800224e:	f001 fb89 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000534 	.word	0x20000534

0800225c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002262:	f003 f847 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000026c 	.word	0x2000026c

08002270 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <TIM3_IRQHandler+0x10>)
 8002276:	f003 f83d 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200002b4 	.word	0x200002b4

08002284 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <TIM4_IRQHandler+0x10>)
 800228a:	f003 f833 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200002fc 	.word	0x200002fc

08002298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <USART1_IRQHandler+0x10>)
 800229e:	f004 f97d 	bl	800659c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200003d4 	.word	0x200003d4

080022ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <USART2_IRQHandler+0x10>)
 80022b2:	f004 f973 	bl	800659c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000041c 	.word	0x2000041c

080022c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <USART3_IRQHandler+0x10>)
 80022c6:	f004 f969 	bl	800659c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000464 	.word	0x20000464

080022d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <UART4_IRQHandler+0x10>)
 80022da:	f004 f95f 	bl	800659c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000344 	.word	0x20000344

080022e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <UART5_IRQHandler+0x10>)
 80022ee:	f004 f955 	bl	800659c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000038c 	.word	0x2000038c

080022fc <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002300:	4802      	ldr	r0, [pc, #8]	@ (800230c <DMA2_Channel3_IRQHandler+0x10>)
 8002302:	f001 fb2f 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200004ac 	.word	0x200004ac

08002310 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
  }
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e00a      	b.n	800234a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002334:	f3af 8000 	nop.w
 8002338:	4601      	mov	r1, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	60ba      	str	r2, [r7, #8]
 8002340:	b2ca      	uxtb	r2, r1
 8002342:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	dbf0      	blt.n	8002334 <_read+0x12>
  }

  return len;
 8002352:	687b      	ldr	r3, [r7, #4]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e009      	b.n	8002382 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	60ba      	str	r2, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f006 f85e 	bl	8008438 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	dbf1      	blt.n	800236e <_write+0x12>
  }
  return len;
 800238a:	687b      	ldr	r3, [r7, #4]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_close>:

int _close(int file)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023ba:	605a      	str	r2, [r3, #4]
  return 0;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <_isatty>:

int _isatty(int file)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  extern uint8_t  _end;            /* Symbol defined in the linker script */
  extern uint8_t  _estack;         /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t  stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023fc:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <_sbrk+0x5c>)
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <_sbrk+0x60>)
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	617b      	str	r3, [r7, #20]
  const uint8_t  *max_heap    = (uint8_t *)stack_limit;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	613b      	str	r3, [r7, #16]
  uint8_t        *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 8002410:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <_sbrk+0x64>)
 8002412:	4a12      	ldr	r2, [pc, #72]	@ (800245c <_sbrk+0x68>)
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <_sbrk+0x64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	429a      	cmp	r2, r3
 8002422:	d207      	bcs.n	8002434 <_sbrk+0x40>
    errno = ENOMEM;
 8002424:	f007 fec0 	bl	800a1a8 <__errno>
 8002428:	4603      	mov	r3, r0
 800242a:	220c      	movs	r2, #12
 800242c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	e009      	b.n	8002448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002434:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243a:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	4a05      	ldr	r2, [pc, #20]	@ (8002458 <_sbrk+0x64>)
 8002444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002446:	68fb      	ldr	r3, [r7, #12]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20018000 	.word	0x20018000
 8002454:	00000400 	.word	0x00000400
 8002458:	20000268 	.word	0x20000268
 800245c:	20003180 	.word	0x20003180

08002460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	463b      	mov	r3, r7
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002488:	4b1e      	ldr	r3, [pc, #120]	@ (8002504 <MX_TIM1_Init+0x98>)
 800248a:	4a1f      	ldr	r2, [pc, #124]	@ (8002508 <MX_TIM1_Init+0x9c>)
 800248c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800248e:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <MX_TIM1_Init+0x98>)
 8002490:	2247      	movs	r2, #71	@ 0x47
 8002492:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002494:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <MX_TIM1_Init+0x98>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800249a:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <MX_TIM1_Init+0x98>)
 800249c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <MX_TIM1_Init+0x98>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024a8:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <MX_TIM1_Init+0x98>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <MX_TIM1_Init+0x98>)
 80024b0:	2280      	movs	r2, #128	@ 0x80
 80024b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024b4:	4813      	ldr	r0, [pc, #76]	@ (8002504 <MX_TIM1_Init+0x98>)
 80024b6:	f002 fc8f 	bl	8004dd8 <HAL_TIM_Base_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80024c0:	f7ff fe23 	bl	800210a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024ca:	f107 0308 	add.w	r3, r7, #8
 80024ce:	4619      	mov	r1, r3
 80024d0:	480c      	ldr	r0, [pc, #48]	@ (8002504 <MX_TIM1_Init+0x98>)
 80024d2:	f003 f975 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024dc:	f7ff fe15 	bl	800210a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024e8:	463b      	mov	r3, r7
 80024ea:	4619      	mov	r1, r3
 80024ec:	4805      	ldr	r0, [pc, #20]	@ (8002504 <MX_TIM1_Init+0x98>)
 80024ee:	f003 fe73 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80024f8:	f7ff fe07 	bl	800210a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	2000026c 	.word	0x2000026c
 8002508:	40012c00 	.word	0x40012c00

0800250c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002512:	f107 0320 	add.w	r3, r7, #32
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	611a      	str	r2, [r3, #16]
 800252a:	615a      	str	r2, [r3, #20]
 800252c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800252e:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <MX_TIM3_Init+0xac>)
 8002530:	4a22      	ldr	r2, [pc, #136]	@ (80025bc <MX_TIM3_Init+0xb0>)
 8002532:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002534:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <MX_TIM3_Init+0xac>)
 8002536:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800253a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253c:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <MX_TIM3_Init+0xac>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8002542:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <MX_TIM3_Init+0xac>)
 8002544:	2209      	movs	r2, #9
 8002546:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002548:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <MX_TIM3_Init+0xac>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254e:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <MX_TIM3_Init+0xac>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002554:	4818      	ldr	r0, [pc, #96]	@ (80025b8 <MX_TIM3_Init+0xac>)
 8002556:	f002 fcfd 	bl	8004f54 <HAL_TIM_PWM_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002560:	f7ff fdd3 	bl	800210a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800256c:	f107 0320 	add.w	r3, r7, #32
 8002570:	4619      	mov	r1, r3
 8002572:	4811      	ldr	r0, [pc, #68]	@ (80025b8 <MX_TIM3_Init+0xac>)
 8002574:	f003 fe30 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800257e:	f7ff fdc4 	bl	800210a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002582:	2360      	movs	r3, #96	@ 0x60
 8002584:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2204      	movs	r2, #4
 8002596:	4619      	mov	r1, r3
 8002598:	4807      	ldr	r0, [pc, #28]	@ (80025b8 <MX_TIM3_Init+0xac>)
 800259a:	f003 f84f 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80025a4:	f7ff fdb1 	bl	800210a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025a8:	4803      	ldr	r0, [pc, #12]	@ (80025b8 <MX_TIM3_Init+0xac>)
 80025aa:	f000 f901 	bl	80027b0 <HAL_TIM_MspPostInit>

}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	@ 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200002b4 	.word	0x200002b4
 80025bc:	40000400 	.word	0x40000400

080025c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	@ 0x28
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c6:	f107 0318 	add.w	r3, r7, #24
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025de:	463b      	mov	r3, r7
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002698 <MX_TIM4_Init+0xd8>)
 80025ec:	4a2b      	ldr	r2, [pc, #172]	@ (800269c <MX_TIM4_Init+0xdc>)
 80025ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80025f0:	4b29      	ldr	r3, [pc, #164]	@ (8002698 <MX_TIM4_Init+0xd8>)
 80025f2:	2247      	movs	r2, #71	@ 0x47
 80025f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f6:	4b28      	ldr	r3, [pc, #160]	@ (8002698 <MX_TIM4_Init+0xd8>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80025fc:	4b26      	ldr	r3, [pc, #152]	@ (8002698 <MX_TIM4_Init+0xd8>)
 80025fe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002602:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002604:	4b24      	ldr	r3, [pc, #144]	@ (8002698 <MX_TIM4_Init+0xd8>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800260a:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <MX_TIM4_Init+0xd8>)
 800260c:	2280      	movs	r2, #128	@ 0x80
 800260e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002610:	4821      	ldr	r0, [pc, #132]	@ (8002698 <MX_TIM4_Init+0xd8>)
 8002612:	f002 fbe1 	bl	8004dd8 <HAL_TIM_Base_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800261c:	f7ff fd75 	bl	800210a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002624:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002626:	f107 0318 	add.w	r3, r7, #24
 800262a:	4619      	mov	r1, r3
 800262c:	481a      	ldr	r0, [pc, #104]	@ (8002698 <MX_TIM4_Init+0xd8>)
 800262e:	f003 f8c7 	bl	80057c0 <HAL_TIM_ConfigClockSource>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002638:	f7ff fd67 	bl	800210a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800263c:	4816      	ldr	r0, [pc, #88]	@ (8002698 <MX_TIM4_Init+0xd8>)
 800263e:	f002 fcd8 	bl	8004ff2 <HAL_TIM_IC_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002648:	f7ff fd5f 	bl	800210a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4619      	mov	r1, r3
 800265a:	480f      	ldr	r0, [pc, #60]	@ (8002698 <MX_TIM4_Init+0xd8>)
 800265c:	f003 fdbc 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002666:	f7ff fd50 	bl	800210a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800266a:	2300      	movs	r3, #0
 800266c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800266e:	2301      	movs	r3, #1
 8002670:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800267a:	463b      	mov	r3, r7
 800267c:	2200      	movs	r2, #0
 800267e:	4619      	mov	r1, r3
 8002680:	4805      	ldr	r0, [pc, #20]	@ (8002698 <MX_TIM4_Init+0xd8>)
 8002682:	f002 ff3f 	bl	8005504 <HAL_TIM_IC_ConfigChannel>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800268c:	f7ff fd3d 	bl	800210a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002690:	bf00      	nop
 8002692:	3728      	adds	r7, #40	@ 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200002fc 	.word	0x200002fc
 800269c:	40000800 	.word	0x40000800

080026a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	@ 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0318 	add.w	r3, r7, #24
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a26      	ldr	r2, [pc, #152]	@ (8002754 <HAL_TIM_Base_MspInit+0xb4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d114      	bne.n	80026ea <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026c0:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a24      	ldr	r2, [pc, #144]	@ (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2101      	movs	r1, #1
 80026dc:	2019      	movs	r0, #25
 80026de:	f000 fef0 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026e2:	2019      	movs	r0, #25
 80026e4:	f000 ff09 	bl	80034fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80026e8:	e030      	b.n	800274c <HAL_TIM_Base_MspInit+0xac>
  else if(tim_baseHandle->Instance==TIM4)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1b      	ldr	r2, [pc, #108]	@ (800275c <HAL_TIM_Base_MspInit+0xbc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d12b      	bne.n	800274c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026f4:	4b18      	ldr	r3, [pc, #96]	@ (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	61d3      	str	r3, [r2, #28]
 8002700:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a11      	ldr	r2, [pc, #68]	@ (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 8002712:	f043 0308 	orr.w	r3, r3, #8
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002724:	2340      	movs	r3, #64	@ 0x40
 8002726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 0318 	add.w	r3, r7, #24
 8002734:	4619      	mov	r1, r3
 8002736:	480a      	ldr	r0, [pc, #40]	@ (8002760 <HAL_TIM_Base_MspInit+0xc0>)
 8002738:	f001 fb7e 	bl	8003e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2100      	movs	r1, #0
 8002740:	201e      	movs	r0, #30
 8002742:	f000 febe 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002746:	201e      	movs	r0, #30
 8002748:	f000 fed7 	bl	80034fa <HAL_NVIC_EnableIRQ>
}
 800274c:	bf00      	nop
 800274e:	3728      	adds	r7, #40	@ 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40000800 	.word	0x40000800
 8002760:	40010c00 	.word	0x40010c00

08002764 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0d      	ldr	r2, [pc, #52]	@ (80027a8 <HAL_TIM_PWM_MspInit+0x44>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d113      	bne.n	800279e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <HAL_TIM_PWM_MspInit+0x48>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a0c      	ldr	r2, [pc, #48]	@ (80027ac <HAL_TIM_PWM_MspInit+0x48>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	61d3      	str	r3, [r2, #28]
 8002782:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <HAL_TIM_PWM_MspInit+0x48>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	201d      	movs	r0, #29
 8002794:	f000 fe95 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002798:	201d      	movs	r0, #29
 800279a:	f000 feae 	bl	80034fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40021000 	.word	0x40021000

080027b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a18      	ldr	r2, [pc, #96]	@ (800282c <HAL_TIM_MspPostInit+0x7c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d129      	bne.n	8002824 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d0:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <HAL_TIM_MspPostInit+0x80>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a16      	ldr	r2, [pc, #88]	@ (8002830 <HAL_TIM_MspPostInit+0x80>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6193      	str	r3, [r2, #24]
 80027dc:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <HAL_TIM_MspPostInit+0x80>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Speed_PWMCtl_BLDCMotor_Pin;
 80027e8:	2320      	movs	r3, #32
 80027ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2302      	movs	r3, #2
 80027f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Speed_PWMCtl_BLDCMotor_GPIO_Port, &GPIO_InitStruct);
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4619      	mov	r1, r3
 80027fa:	480e      	ldr	r0, [pc, #56]	@ (8002834 <HAL_TIM_MspPostInit+0x84>)
 80027fc:	f001 fb1c 	bl	8003e38 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002800:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <HAL_TIM_MspPostInit+0x88>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	4a06      	ldr	r2, [pc, #24]	@ (8002838 <HAL_TIM_MspPostInit+0x88>)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002824:	bf00      	nop
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40000400 	.word	0x40000400
 8002830:	40021000 	.word	0x40021000
 8002834:	40010c00 	.word	0x40010c00
 8002838:	40010000 	.word	0x40010000

0800283c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <MX_UART4_Init+0x4c>)
 8002842:	4a12      	ldr	r2, [pc, #72]	@ (800288c <MX_UART4_Init+0x50>)
 8002844:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <MX_UART4_Init+0x4c>)
 8002848:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800284c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800284e:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <MX_UART4_Init+0x4c>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <MX_UART4_Init+0x4c>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800285a:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <MX_UART4_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002860:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <MX_UART4_Init+0x4c>)
 8002862:	220c      	movs	r2, #12
 8002864:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <MX_UART4_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <MX_UART4_Init+0x4c>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	@ (8002888 <MX_UART4_Init+0x4c>)
 8002874:	f003 fd3c 	bl	80062f0 <HAL_UART_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800287e:	f7ff fc44 	bl	800210a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000344 	.word	0x20000344
 800288c:	40004c00 	.word	0x40004c00

08002890 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002894:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <MX_UART5_Init+0x4c>)
 8002896:	4a12      	ldr	r2, [pc, #72]	@ (80028e0 <MX_UART5_Init+0x50>)
 8002898:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <MX_UART5_Init+0x4c>)
 800289c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80028a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <MX_UART5_Init+0x4c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <MX_UART5_Init+0x4c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <MX_UART5_Init+0x4c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80028b4:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <MX_UART5_Init+0x4c>)
 80028b6:	220c      	movs	r2, #12
 80028b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <MX_UART5_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <MX_UART5_Init+0x4c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80028c6:	4805      	ldr	r0, [pc, #20]	@ (80028dc <MX_UART5_Init+0x4c>)
 80028c8:	f003 fd12 	bl	80062f0 <HAL_UART_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80028d2:	f7ff fc1a 	bl	800210a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000038c 	.word	0x2000038c
 80028e0:	40005000 	.word	0x40005000

080028e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028e8:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <MX_USART1_UART_Init+0x4c>)
 80028ea:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <MX_USART1_UART_Init+0x50>)
 80028ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <MX_USART1_UART_Init+0x4c>)
 80028f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80028f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <MX_USART1_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <MX_USART1_UART_Init+0x4c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <MX_USART1_UART_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <MX_USART1_UART_Init+0x4c>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <MX_USART1_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <MX_USART1_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800291a:	4805      	ldr	r0, [pc, #20]	@ (8002930 <MX_USART1_UART_Init+0x4c>)
 800291c:	f003 fce8 	bl	80062f0 <HAL_UART_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002926:	f7ff fbf0 	bl	800210a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200003d4 	.word	0x200003d4
 8002934:	40013800 	.word	0x40013800

08002938 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800293c:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <MX_USART2_UART_Init+0x4c>)
 800293e:	4a12      	ldr	r2, [pc, #72]	@ (8002988 <MX_USART2_UART_Init+0x50>)
 8002940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <MX_USART2_UART_Init+0x4c>)
 8002944:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800294a:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <MX_USART2_UART_Init+0x4c>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002950:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <MX_USART2_UART_Init+0x4c>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002956:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <MX_USART2_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800295c:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <MX_USART2_UART_Init+0x4c>)
 800295e:	220c      	movs	r2, #12
 8002960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002962:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <MX_USART2_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <MX_USART2_UART_Init+0x4c>)
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800296e:	4805      	ldr	r0, [pc, #20]	@ (8002984 <MX_USART2_UART_Init+0x4c>)
 8002970:	f003 fcbe 	bl	80062f0 <HAL_UART_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800297a:	f7ff fbc6 	bl	800210a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	2000041c 	.word	0x2000041c
 8002988:	40004400 	.word	0x40004400

0800298c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <MX_USART3_UART_Init+0x4c>)
 8002992:	4a12      	ldr	r2, [pc, #72]	@ (80029dc <MX_USART3_UART_Init+0x50>)
 8002994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002996:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <MX_USART3_UART_Init+0x4c>)
 8002998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800299c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800299e:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029aa:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029b0:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029b2:	220c      	movs	r2, #12
 80029b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b6:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029c2:	4805      	ldr	r0, [pc, #20]	@ (80029d8 <MX_USART3_UART_Init+0x4c>)
 80029c4:	f003 fc94 	bl	80062f0 <HAL_UART_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029ce:	f7ff fb9c 	bl	800210a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000464 	.word	0x20000464
 80029dc:	40004800 	.word	0x40004800

080029e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b092      	sub	sp, #72	@ 0x48
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a8a      	ldr	r2, [pc, #552]	@ (8002c24 <HAL_UART_MspInit+0x244>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d160      	bne.n	8002ac2 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a00:	4b89      	ldr	r3, [pc, #548]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	4a88      	ldr	r2, [pc, #544]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002a06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a0a:	61d3      	str	r3, [r2, #28]
 8002a0c:	4b86      	ldr	r3, [pc, #536]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a18:	4b83      	ldr	r3, [pc, #524]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a82      	ldr	r2, [pc, #520]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002a1e:	f043 0310 	orr.w	r3, r3, #16
 8002a22:	6193      	str	r3, [r2, #24]
 8002a24:	4b80      	ldr	r3, [pc, #512]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a34:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a42:	4619      	mov	r1, r3
 8002a44:	4879      	ldr	r0, [pc, #484]	@ (8002c2c <HAL_UART_MspInit+0x24c>)
 8002a46:	f001 f9f7 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4873      	ldr	r0, [pc, #460]	@ (8002c2c <HAL_UART_MspInit+0x24c>)
 8002a60:	f001 f9ea 	bl	8003e38 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8002a64:	4b72      	ldr	r3, [pc, #456]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002a66:	4a73      	ldr	r2, [pc, #460]	@ (8002c34 <HAL_UART_MspInit+0x254>)
 8002a68:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a6a:	4b71      	ldr	r3, [pc, #452]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a70:	4b6f      	ldr	r3, [pc, #444]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a76:	4b6e      	ldr	r3, [pc, #440]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002a78:	2280      	movs	r2, #128	@ 0x80
 8002a7a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a82:	4b6b      	ldr	r3, [pc, #428]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002a88:	4b69      	ldr	r3, [pc, #420]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a8e:	4b68      	ldr	r3, [pc, #416]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002a94:	4866      	ldr	r0, [pc, #408]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002a96:	f000 fd4b 	bl	8003530 <HAL_DMA_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002aa0:	f7ff fb33 	bl	800210a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a62      	ldr	r2, [pc, #392]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002aaa:	4a61      	ldr	r2, [pc, #388]	@ (8002c30 <HAL_UART_MspInit+0x250>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6253      	str	r3, [r2, #36]	@ 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	2034      	movs	r0, #52	@ 0x34
 8002ab6:	f000 fd04 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002aba:	2034      	movs	r0, #52	@ 0x34
 8002abc:	f000 fd1d 	bl	80034fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ac0:	e169      	b.n	8002d96 <HAL_UART_MspInit+0x3b6>
  else if(uartHandle->Instance==UART5)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c38 <HAL_UART_MspInit+0x258>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d145      	bne.n	8002b58 <HAL_UART_MspInit+0x178>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002acc:	4b56      	ldr	r3, [pc, #344]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	4a55      	ldr	r2, [pc, #340]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad6:	61d3      	str	r3, [r2, #28]
 8002ad8:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae4:	4b50      	ldr	r3, [pc, #320]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	4a4f      	ldr	r2, [pc, #316]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002aea:	f043 0310 	orr.w	r3, r3, #16
 8002aee:	6193      	str	r3, [r2, #24]
 8002af0:	4b4d      	ldr	r3, [pc, #308]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002afc:	4b4a      	ldr	r3, [pc, #296]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4a49      	ldr	r2, [pc, #292]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002b02:	f043 0320 	orr.w	r3, r3, #32
 8002b06:	6193      	str	r3, [r2, #24]
 8002b08:	4b47      	ldr	r3, [pc, #284]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b26:	4619      	mov	r1, r3
 8002b28:	4840      	ldr	r0, [pc, #256]	@ (8002c2c <HAL_UART_MspInit+0x24c>)
 8002b2a:	f001 f985 	bl	8003e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b2e:	2304      	movs	r3, #4
 8002b30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b32:	2300      	movs	r3, #0
 8002b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b3e:	4619      	mov	r1, r3
 8002b40:	483e      	ldr	r0, [pc, #248]	@ (8002c3c <HAL_UART_MspInit+0x25c>)
 8002b42:	f001 f979 	bl	8003e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2035      	movs	r0, #53	@ 0x35
 8002b4c:	f000 fcb9 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002b50:	2035      	movs	r0, #53	@ 0x35
 8002b52:	f000 fcd2 	bl	80034fa <HAL_NVIC_EnableIRQ>
}
 8002b56:	e11e      	b.n	8002d96 <HAL_UART_MspInit+0x3b6>
  else if(uartHandle->Instance==USART1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a38      	ldr	r2, [pc, #224]	@ (8002c40 <HAL_UART_MspInit+0x260>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d176      	bne.n	8002c50 <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b62:	4b31      	ldr	r3, [pc, #196]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	4a30      	ldr	r2, [pc, #192]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b6c:	6193      	str	r3, [r2, #24]
 8002b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	6193      	str	r3, [r2, #24]
 8002b86:	4b28      	ldr	r3, [pc, #160]	@ (8002c28 <HAL_UART_MspInit+0x248>)
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = AndroidSerial_TX_Pin;
 8002b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b96:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(AndroidSerial_TX_GPIO_Port, &GPIO_InitStruct);
 8002ba0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4827      	ldr	r0, [pc, #156]	@ (8002c44 <HAL_UART_MspInit+0x264>)
 8002ba8:	f001 f946 	bl	8003e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AndroidSerial_RX_Pin;
 8002bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(AndroidSerial_RX_GPIO_Port, &GPIO_InitStruct);
 8002bba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4820      	ldr	r0, [pc, #128]	@ (8002c44 <HAL_UART_MspInit+0x264>)
 8002bc2:	f001 f939 	bl	8003e38 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002bc6:	4b20      	ldr	r3, [pc, #128]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002bc8:	4a20      	ldr	r2, [pc, #128]	@ (8002c4c <HAL_UART_MspInit+0x26c>)
 8002bca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002be4:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002bea:	4b17      	ldr	r3, [pc, #92]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bf0:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002bf6:	4814      	ldr	r0, [pc, #80]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002bf8:	f000 fc9a 	bl	8003530 <HAL_DMA_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8002c02:	f7ff fa82 	bl	800210a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0f      	ldr	r2, [pc, #60]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c48 <HAL_UART_MspInit+0x268>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2100      	movs	r1, #0
 8002c16:	2025      	movs	r0, #37	@ 0x25
 8002c18:	f000 fc53 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c1c:	2025      	movs	r0, #37	@ 0x25
 8002c1e:	f000 fc6c 	bl	80034fa <HAL_NVIC_EnableIRQ>
}
 8002c22:	e0b8      	b.n	8002d96 <HAL_UART_MspInit+0x3b6>
 8002c24:	40004c00 	.word	0x40004c00
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40011000 	.word	0x40011000
 8002c30:	200004ac 	.word	0x200004ac
 8002c34:	40020430 	.word	0x40020430
 8002c38:	40005000 	.word	0x40005000
 8002c3c:	40011400 	.word	0x40011400
 8002c40:	40013800 	.word	0x40013800
 8002c44:	40010800 	.word	0x40010800
 8002c48:	200004f0 	.word	0x200004f0
 8002c4c:	40020058 	.word	0x40020058
  else if(uartHandle->Instance==USART2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a52      	ldr	r2, [pc, #328]	@ (8002da0 <HAL_UART_MspInit+0x3c0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d15e      	bne.n	8002d18 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c5a:	4b52      	ldr	r3, [pc, #328]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	4a51      	ldr	r2, [pc, #324]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c64:	61d3      	str	r3, [r2, #28]
 8002c66:	4b4f      	ldr	r3, [pc, #316]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	4b4c      	ldr	r3, [pc, #304]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	4a4b      	ldr	r2, [pc, #300]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	6193      	str	r3, [r2, #24]
 8002c7e:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DebugSerial_TX_Pin;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c92:	2303      	movs	r3, #3
 8002c94:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(DebugSerial_TX_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4842      	ldr	r0, [pc, #264]	@ (8002da8 <HAL_UART_MspInit+0x3c8>)
 8002c9e:	f001 f8cb 	bl	8003e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DebugSerial_RX_Pin;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(DebugSerial_RX_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	483c      	ldr	r0, [pc, #240]	@ (8002da8 <HAL_UART_MspInit+0x3c8>)
 8002cb6:	f001 f8bf 	bl	8003e38 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002cba:	4b3c      	ldr	r3, [pc, #240]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002cbc:	4a3c      	ldr	r2, [pc, #240]	@ (8002db0 <HAL_UART_MspInit+0x3d0>)
 8002cbe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cc6:	4b39      	ldr	r3, [pc, #228]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ccc:	4b37      	ldr	r3, [pc, #220]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002cce:	2280      	movs	r2, #128	@ 0x80
 8002cd0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cd2:	4b36      	ldr	r3, [pc, #216]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cd8:	4b34      	ldr	r3, [pc, #208]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002cde:	4b33      	ldr	r3, [pc, #204]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ce4:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002cea:	4830      	ldr	r0, [pc, #192]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002cec:	f000 fc20 	bl	8003530 <HAL_DMA_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8002cf6:	f7ff fa08 	bl	800210a <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d00:	4a2a      	ldr	r2, [pc, #168]	@ (8002dac <HAL_UART_MspInit+0x3cc>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	2026      	movs	r0, #38	@ 0x26
 8002d0c:	f000 fbd9 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d10:	2026      	movs	r0, #38	@ 0x26
 8002d12:	f000 fbf2 	bl	80034fa <HAL_NVIC_EnableIRQ>
}
 8002d16:	e03e      	b.n	8002d96 <HAL_UART_MspInit+0x3b6>
  else if(uartHandle->Instance==USART3)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a25      	ldr	r2, [pc, #148]	@ (8002db4 <HAL_UART_MspInit+0x3d4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d139      	bne.n	8002d96 <HAL_UART_MspInit+0x3b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d22:	4b20      	ldr	r3, [pc, #128]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4a1f      	ldr	r2, [pc, #124]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d2c:	61d3      	str	r3, [r2, #28]
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	4a19      	ldr	r2, [pc, #100]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	6193      	str	r3, [r2, #24]
 8002d46:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <HAL_UART_MspInit+0x3c4>)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d56:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d64:	4619      	mov	r1, r3
 8002d66:	4814      	ldr	r0, [pc, #80]	@ (8002db8 <HAL_UART_MspInit+0x3d8>)
 8002d68:	f001 f866 	bl	8003e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d70:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d72:	2300      	movs	r3, #0
 8002d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480d      	ldr	r0, [pc, #52]	@ (8002db8 <HAL_UART_MspInit+0x3d8>)
 8002d82:	f001 f859 	bl	8003e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2100      	movs	r1, #0
 8002d8a:	2027      	movs	r0, #39	@ 0x27
 8002d8c:	f000 fb99 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d90:	2027      	movs	r0, #39	@ 0x27
 8002d92:	f000 fbb2 	bl	80034fa <HAL_NVIC_EnableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	3748      	adds	r7, #72	@ 0x48
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40004400 	.word	0x40004400
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40010800 	.word	0x40010800
 8002dac:	20000534 	.word	0x20000534
 8002db0:	4002006c 	.word	0x4002006c
 8002db4:	40004800 	.word	0x40004800
 8002db8:	40010c00 	.word	0x40010c00

08002dbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dbc:	f7ff fb50 	bl	8002460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dc0:	480b      	ldr	r0, [pc, #44]	@ (8002df0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002dc2:	490c      	ldr	r1, [pc, #48]	@ (8002df4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc8:	e002      	b.n	8002dd0 <LoopCopyDataInit>

08002dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dce:	3304      	adds	r3, #4

08002dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd4:	d3f9      	bcc.n	8002dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dd6:	4a09      	ldr	r2, [pc, #36]	@ (8002dfc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002dd8:	4c09      	ldr	r4, [pc, #36]	@ (8002e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ddc:	e001      	b.n	8002de2 <LoopFillZerobss>

08002dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de0:	3204      	adds	r2, #4

08002de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de4:	d3fb      	bcc.n	8002dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002de6:	f007 f9e5 	bl	800a1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dea:	f7ff f8ed 	bl	8001fc8 <main>
  bx lr
 8002dee:	4770      	bx	lr
  ldr r0, =_sdata
 8002df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002df8:	0800be68 	.word	0x0800be68
  ldr r2, =_sbss
 8002dfc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002e00:	20003180 	.word	0x20003180

08002e04 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e04:	e7fe      	b.n	8002e04 <ADC1_2_IRQHandler>
	...

08002e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e0c:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <HAL_Init+0x28>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a07      	ldr	r2, [pc, #28]	@ (8002e30 <HAL_Init+0x28>)
 8002e12:	f043 0310 	orr.w	r3, r3, #16
 8002e16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e18:	2003      	movs	r0, #3
 8002e1a:	f000 fb47 	bl	80034ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e1e:	200f      	movs	r0, #15
 8002e20:	f000 f808 	bl	8002e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e24:	f7ff f978 	bl	8002118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40022000 	.word	0x40022000

08002e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e3c:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_InitTick+0x54>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <HAL_InitTick+0x58>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fb5f 	bl	8003516 <HAL_SYSTICK_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00e      	b.n	8002e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b0f      	cmp	r3, #15
 8002e66:	d80a      	bhi.n	8002e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	f000 fb27 	bl	80034c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e74:	4a06      	ldr	r2, [pc, #24]	@ (8002e90 <HAL_InitTick+0x5c>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	20000008 	.word	0x20000008
 8002e90:	20000004 	.word	0x20000004

08002e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_IncTick+0x1c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_IncTick+0x20>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a03      	ldr	r2, [pc, #12]	@ (8002eb4 <HAL_IncTick+0x20>)
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	20000578 	.word	0x20000578

08002eb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return uwTick;
 8002ebc:	4b02      	ldr	r3, [pc, #8]	@ (8002ec8 <HAL_GetTick+0x10>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	20000578 	.word	0x20000578

08002ecc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0ce      	b.n	800308c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe fecc 	bl	8001ca8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f9bd 	bl	8003290 <ADC_ConversionStop_Disable>
 8002f16:	4603      	mov	r3, r0
 8002f18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 80a9 	bne.w	800307a <HAL_ADC_Init+0x1ae>
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 80a5 	bne.w	800307a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f38:	f023 0302 	bic.w	r3, r3, #2
 8002f3c:	f043 0202 	orr.w	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4951      	ldr	r1, [pc, #324]	@ (8003094 <HAL_ADC_Init+0x1c8>)
 8002f4e:	428b      	cmp	r3, r1
 8002f50:	d10a      	bne.n	8002f68 <HAL_ADC_Init+0x9c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f5a:	d002      	beq.n	8002f62 <HAL_ADC_Init+0x96>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	e004      	b.n	8002f6c <HAL_ADC_Init+0xa0>
 8002f62:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f66:	e001      	b.n	8002f6c <HAL_ADC_Init+0xa0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7b1b      	ldrb	r3, [r3, #12]
 8002f72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f84:	d003      	beq.n	8002f8e <HAL_ADC_Init+0xc2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HAL_ADC_Init+0xc8>
 8002f8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f92:	e000      	b.n	8002f96 <HAL_ADC_Init+0xca>
 8002f94:	2300      	movs	r3, #0
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	7d1b      	ldrb	r3, [r3, #20]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d119      	bne.n	8002fd8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7b1b      	ldrb	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	035a      	lsls	r2, r3, #13
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <HAL_ADC_Init+0x1cc>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003008:	d003      	beq.n	8003012 <HAL_ADC_Init+0x146>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d104      	bne.n	800301c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	3b01      	subs	r3, #1
 8003018:	051b      	lsls	r3, r3, #20
 800301a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	430a      	orrs	r2, r1
 800302e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	4b19      	ldr	r3, [pc, #100]	@ (800309c <HAL_ADC_Init+0x1d0>)
 8003038:	4013      	ands	r3, r2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	d10b      	bne.n	8003058 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003056:	e018      	b.n	800308a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	f023 0312 	bic.w	r3, r3, #18
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003078:	e007      	b.n	800308a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	f043 0210 	orr.w	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800308a:	7dfb      	ldrb	r3, [r7, #23]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40013c00 	.word	0x40013c00
 8003098:	ffe1f7fd 	.word	0xffe1f7fd
 800309c:	ff1f0efe 	.word	0xff1f0efe

080030a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x20>
 80030bc:	2302      	movs	r3, #2
 80030be:	e0dc      	b.n	800327a <HAL_ADC_ConfigChannel+0x1da>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b06      	cmp	r3, #6
 80030ce:	d81c      	bhi.n	800310a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b05      	subs	r3, #5
 80030e2:	221f      	movs	r2, #31
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	4019      	ands	r1, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3b05      	subs	r3, #5
 80030fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	635a      	str	r2, [r3, #52]	@ 0x34
 8003108:	e03c      	b.n	8003184 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d81c      	bhi.n	800314c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	3b23      	subs	r3, #35	@ 0x23
 8003124:	221f      	movs	r2, #31
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	4019      	ands	r1, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	3b23      	subs	r3, #35	@ 0x23
 800313e:	fa00 f203 	lsl.w	r2, r0, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30
 800314a:	e01b      	b.n	8003184 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b41      	subs	r3, #65	@ 0x41
 800315e:	221f      	movs	r2, #31
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	4019      	ands	r1, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3b41      	subs	r3, #65	@ 0x41
 8003178:	fa00 f203 	lsl.w	r2, r0, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b09      	cmp	r3, #9
 800318a:	d91c      	bls.n	80031c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68d9      	ldr	r1, [r3, #12]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	3b1e      	subs	r3, #30
 800319e:	2207      	movs	r2, #7
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4019      	ands	r1, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6898      	ldr	r0, [r3, #8]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	3b1e      	subs	r3, #30
 80031b8:	fa00 f203 	lsl.w	r2, r0, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	e019      	b.n	80031fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6919      	ldr	r1, [r3, #16]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	2207      	movs	r2, #7
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	4019      	ands	r1, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6898      	ldr	r0, [r3, #8]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	fa00 f203 	lsl.w	r2, r0, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d003      	beq.n	800320a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003206:	2b11      	cmp	r3, #17
 8003208:	d132      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1d      	ldr	r2, [pc, #116]	@ (8003284 <HAL_ADC_ConfigChannel+0x1e4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d125      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d126      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003230:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b10      	cmp	r3, #16
 8003238:	d11a      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800323a:	4b13      	ldr	r3, [pc, #76]	@ (8003288 <HAL_ADC_ConfigChannel+0x1e8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a13      	ldr	r2, [pc, #76]	@ (800328c <HAL_ADC_ConfigChannel+0x1ec>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0c9a      	lsrs	r2, r3, #18
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003250:	e002      	b.n	8003258 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3b01      	subs	r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f9      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x1b2>
 800325e:	e007      	b.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012400 	.word	0x40012400
 8003288:	20000000 	.word	0x20000000
 800328c:	431bde83 	.word	0x431bde83

08003290 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d12e      	bne.n	8003308 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032ba:	f7ff fdfd 	bl	8002eb8 <HAL_GetTick>
 80032be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032c0:	e01b      	b.n	80032fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032c2:	f7ff fdf9 	bl	8002eb8 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d914      	bls.n	80032fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10d      	bne.n	80032fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e2:	f043 0210 	orr.w	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e007      	b.n	800330a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d0dc      	beq.n	80032c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003324:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800333c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003346:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	60d3      	str	r3, [r2, #12]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003360:	4b04      	ldr	r3, [pc, #16]	@ (8003374 <__NVIC_GetPriorityGrouping+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4906      	ldr	r1, [pc, #24]	@ (80033ac <__NVIC_EnableIRQ+0x34>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	e000e100 	.word	0xe000e100

080033b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	6039      	str	r1, [r7, #0]
 80033ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	db0a      	blt.n	80033da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	490c      	ldr	r1, [pc, #48]	@ (80033fc <__NVIC_SetPriority+0x4c>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	440b      	add	r3, r1
 80033d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d8:	e00a      	b.n	80033f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4908      	ldr	r1, [pc, #32]	@ (8003400 <__NVIC_SetPriority+0x50>)
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	3b04      	subs	r3, #4
 80033e8:	0112      	lsls	r2, r2, #4
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	440b      	add	r3, r1
 80033ee:	761a      	strb	r2, [r3, #24]
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000e100 	.word	0xe000e100
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003404:	b480      	push	{r7}
 8003406:	b089      	sub	sp, #36	@ 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f1c3 0307 	rsb	r3, r3, #7
 800341e:	2b04      	cmp	r3, #4
 8003420:	bf28      	it	cs
 8003422:	2304      	movcs	r3, #4
 8003424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3304      	adds	r3, #4
 800342a:	2b06      	cmp	r3, #6
 800342c:	d902      	bls.n	8003434 <NVIC_EncodePriority+0x30>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3b03      	subs	r3, #3
 8003432:	e000      	b.n	8003436 <NVIC_EncodePriority+0x32>
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	f04f 32ff 	mov.w	r2, #4294967295
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	401a      	ands	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800344c:	f04f 31ff 	mov.w	r1, #4294967295
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43d9      	mvns	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	4313      	orrs	r3, r2
         );
}
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	@ 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003478:	d301      	bcc.n	800347e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347e:	4a0a      	ldr	r2, [pc, #40]	@ (80034a8 <SysTick_Config+0x40>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003486:	210f      	movs	r1, #15
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	f7ff ff90 	bl	80033b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <SysTick_Config+0x40>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003496:	4b04      	ldr	r3, [pc, #16]	@ (80034a8 <SysTick_Config+0x40>)
 8003498:	2207      	movs	r2, #7
 800349a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000e010 	.word	0xe000e010

080034ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff2d 	bl	8003314 <__NVIC_SetPriorityGrouping>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d4:	f7ff ff42 	bl	800335c <__NVIC_GetPriorityGrouping>
 80034d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	6978      	ldr	r0, [r7, #20]
 80034e0:	f7ff ff90 	bl	8003404 <NVIC_EncodePriority>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff5f 	bl	80033b0 <__NVIC_SetPriority>
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff35 	bl	8003378 <__NVIC_EnableIRQ>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ffa2 	bl	8003468 <SysTick_Config>
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e059      	b.n	80035fa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	4b2d      	ldr	r3, [pc, #180]	@ (8003604 <HAL_DMA_Init+0xd4>)
 800354e:	429a      	cmp	r2, r3
 8003550:	d80f      	bhi.n	8003572 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	4b2b      	ldr	r3, [pc, #172]	@ (8003608 <HAL_DMA_Init+0xd8>)
 800355a:	4413      	add	r3, r2
 800355c:	4a2b      	ldr	r2, [pc, #172]	@ (800360c <HAL_DMA_Init+0xdc>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	009a      	lsls	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a28      	ldr	r2, [pc, #160]	@ (8003610 <HAL_DMA_Init+0xe0>)
 800356e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003570:	e00e      	b.n	8003590 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4b26      	ldr	r3, [pc, #152]	@ (8003614 <HAL_DMA_Init+0xe4>)
 800357a:	4413      	add	r3, r2
 800357c:	4a23      	ldr	r2, [pc, #140]	@ (800360c <HAL_DMA_Init+0xdc>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	009a      	lsls	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a22      	ldr	r2, [pc, #136]	@ (8003618 <HAL_DMA_Init+0xe8>)
 800358e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80035a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80035aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	40020407 	.word	0x40020407
 8003608:	bffdfff8 	.word	0xbffdfff8
 800360c:	cccccccd 	.word	0xcccccccd
 8003610:	40020000 	.word	0x40020000
 8003614:	bffdfbf8 	.word	0xbffdfbf8
 8003618:	40020400 	.word	0x40020400

0800361c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_DMA_Start_IT+0x20>
 8003638:	2302      	movs	r3, #2
 800363a:	e04b      	b.n	80036d4 <HAL_DMA_Start_IT+0xb8>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d13a      	bne.n	80036c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fbb1 	bl	8003ddc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 020e 	orr.w	r2, r2, #14
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e00f      	b.n	80036b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0204 	bic.w	r2, r2, #4
 80036a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 020a 	orr.w	r2, r2, #10
 80036b2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e005      	b.n	80036d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80036ce:	2302      	movs	r3, #2
 80036d0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d008      	beq.n	8003706 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2204      	movs	r2, #4
 80036f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e020      	b.n	8003748 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 020e 	bic.w	r2, r2, #14
 8003714:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003746:	7bfb      	ldrb	r3, [r7, #15]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
	...

08003754 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d005      	beq.n	8003778 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2204      	movs	r2, #4
 8003770:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	e0d6      	b.n	8003926 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 020e 	bic.w	r2, r2, #14
 8003786:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b64      	ldr	r3, [pc, #400]	@ (8003930 <HAL_DMA_Abort_IT+0x1dc>)
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d958      	bls.n	8003856 <HAL_DMA_Abort_IT+0x102>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a62      	ldr	r2, [pc, #392]	@ (8003934 <HAL_DMA_Abort_IT+0x1e0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d04f      	beq.n	800384e <HAL_DMA_Abort_IT+0xfa>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a61      	ldr	r2, [pc, #388]	@ (8003938 <HAL_DMA_Abort_IT+0x1e4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d048      	beq.n	800384a <HAL_DMA_Abort_IT+0xf6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5f      	ldr	r2, [pc, #380]	@ (800393c <HAL_DMA_Abort_IT+0x1e8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d040      	beq.n	8003844 <HAL_DMA_Abort_IT+0xf0>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003940 <HAL_DMA_Abort_IT+0x1ec>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d038      	beq.n	800383e <HAL_DMA_Abort_IT+0xea>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003944 <HAL_DMA_Abort_IT+0x1f0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d030      	beq.n	8003838 <HAL_DMA_Abort_IT+0xe4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a5b      	ldr	r2, [pc, #364]	@ (8003948 <HAL_DMA_Abort_IT+0x1f4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d028      	beq.n	8003832 <HAL_DMA_Abort_IT+0xde>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a52      	ldr	r2, [pc, #328]	@ (8003930 <HAL_DMA_Abort_IT+0x1dc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d020      	beq.n	800382c <HAL_DMA_Abort_IT+0xd8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a57      	ldr	r2, [pc, #348]	@ (800394c <HAL_DMA_Abort_IT+0x1f8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d019      	beq.n	8003828 <HAL_DMA_Abort_IT+0xd4>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a55      	ldr	r2, [pc, #340]	@ (8003950 <HAL_DMA_Abort_IT+0x1fc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d012      	beq.n	8003824 <HAL_DMA_Abort_IT+0xd0>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a54      	ldr	r2, [pc, #336]	@ (8003954 <HAL_DMA_Abort_IT+0x200>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00a      	beq.n	800381e <HAL_DMA_Abort_IT+0xca>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a52      	ldr	r2, [pc, #328]	@ (8003958 <HAL_DMA_Abort_IT+0x204>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d102      	bne.n	8003818 <HAL_DMA_Abort_IT+0xc4>
 8003812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003816:	e01b      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 8003818:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800381c:	e018      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 800381e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003822:	e015      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 8003824:	2310      	movs	r3, #16
 8003826:	e013      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 8003828:	2301      	movs	r3, #1
 800382a:	e011      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 800382c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003830:	e00e      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 8003832:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003836:	e00b      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 8003838:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800383c:	e008      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 800383e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003842:	e005      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 8003844:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003848:	e002      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 800384a:	2310      	movs	r3, #16
 800384c:	e000      	b.n	8003850 <HAL_DMA_Abort_IT+0xfc>
 800384e:	2301      	movs	r3, #1
 8003850:	4a42      	ldr	r2, [pc, #264]	@ (800395c <HAL_DMA_Abort_IT+0x208>)
 8003852:	6053      	str	r3, [r2, #4]
 8003854:	e057      	b.n	8003906 <HAL_DMA_Abort_IT+0x1b2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a36      	ldr	r2, [pc, #216]	@ (8003934 <HAL_DMA_Abort_IT+0x1e0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d04f      	beq.n	8003900 <HAL_DMA_Abort_IT+0x1ac>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a34      	ldr	r2, [pc, #208]	@ (8003938 <HAL_DMA_Abort_IT+0x1e4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d048      	beq.n	80038fc <HAL_DMA_Abort_IT+0x1a8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a33      	ldr	r2, [pc, #204]	@ (800393c <HAL_DMA_Abort_IT+0x1e8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d040      	beq.n	80038f6 <HAL_DMA_Abort_IT+0x1a2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a31      	ldr	r2, [pc, #196]	@ (8003940 <HAL_DMA_Abort_IT+0x1ec>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d038      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x19c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a30      	ldr	r2, [pc, #192]	@ (8003944 <HAL_DMA_Abort_IT+0x1f0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d030      	beq.n	80038ea <HAL_DMA_Abort_IT+0x196>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2e      	ldr	r2, [pc, #184]	@ (8003948 <HAL_DMA_Abort_IT+0x1f4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d028      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x190>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a26      	ldr	r2, [pc, #152]	@ (8003930 <HAL_DMA_Abort_IT+0x1dc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d020      	beq.n	80038de <HAL_DMA_Abort_IT+0x18a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2a      	ldr	r2, [pc, #168]	@ (800394c <HAL_DMA_Abort_IT+0x1f8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d019      	beq.n	80038da <HAL_DMA_Abort_IT+0x186>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a29      	ldr	r2, [pc, #164]	@ (8003950 <HAL_DMA_Abort_IT+0x1fc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d012      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x182>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a27      	ldr	r2, [pc, #156]	@ (8003954 <HAL_DMA_Abort_IT+0x200>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00a      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x17c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a26      	ldr	r2, [pc, #152]	@ (8003958 <HAL_DMA_Abort_IT+0x204>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d102      	bne.n	80038ca <HAL_DMA_Abort_IT+0x176>
 80038c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038c8:	e01b      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 80038ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038ce:	e018      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 80038d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038d4:	e015      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 80038d6:	2310      	movs	r3, #16
 80038d8:	e013      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 80038da:	2301      	movs	r3, #1
 80038dc:	e011      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 80038de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038e2:	e00e      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 80038e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038e8:	e00b      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 80038ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038ee:	e008      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 80038f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038f4:	e005      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 80038f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038fa:	e002      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 80038fc:	2310      	movs	r3, #16
 80038fe:	e000      	b.n	8003902 <HAL_DMA_Abort_IT+0x1ae>
 8003900:	2301      	movs	r3, #1
 8003902:	4a17      	ldr	r2, [pc, #92]	@ (8003960 <HAL_DMA_Abort_IT+0x20c>)
 8003904:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
    } 
  }
  return status;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40020080 	.word	0x40020080
 8003934:	40020008 	.word	0x40020008
 8003938:	4002001c 	.word	0x4002001c
 800393c:	40020030 	.word	0x40020030
 8003940:	40020044 	.word	0x40020044
 8003944:	40020058 	.word	0x40020058
 8003948:	4002006c 	.word	0x4002006c
 800394c:	40020408 	.word	0x40020408
 8003950:	4002041c 	.word	0x4002041c
 8003954:	40020430 	.word	0x40020430
 8003958:	40020444 	.word	0x40020444
 800395c:	40020400 	.word	0x40020400
 8003960:	40020000 	.word	0x40020000

08003964 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	2204      	movs	r2, #4
 8003982:	409a      	lsls	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80f1 	beq.w	8003b70 <HAL_DMA_IRQHandler+0x20c>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80eb 	beq.w	8003b70 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d107      	bne.n	80039b8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0204 	bic.w	r2, r2, #4
 80039b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b5f      	ldr	r3, [pc, #380]	@ (8003b3c <HAL_DMA_IRQHandler+0x1d8>)
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d958      	bls.n	8003a76 <HAL_DMA_IRQHandler+0x112>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003b40 <HAL_DMA_IRQHandler+0x1dc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d04f      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x10a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003b44 <HAL_DMA_IRQHandler+0x1e0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d048      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x106>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003b48 <HAL_DMA_IRQHandler+0x1e4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d040      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x100>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a59      	ldr	r2, [pc, #356]	@ (8003b4c <HAL_DMA_IRQHandler+0x1e8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d038      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xfa>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a57      	ldr	r2, [pc, #348]	@ (8003b50 <HAL_DMA_IRQHandler+0x1ec>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d030      	beq.n	8003a58 <HAL_DMA_IRQHandler+0xf4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a56      	ldr	r2, [pc, #344]	@ (8003b54 <HAL_DMA_IRQHandler+0x1f0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d028      	beq.n	8003a52 <HAL_DMA_IRQHandler+0xee>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a4d      	ldr	r2, [pc, #308]	@ (8003b3c <HAL_DMA_IRQHandler+0x1d8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d020      	beq.n	8003a4c <HAL_DMA_IRQHandler+0xe8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a52      	ldr	r2, [pc, #328]	@ (8003b58 <HAL_DMA_IRQHandler+0x1f4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d019      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xe4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a50      	ldr	r2, [pc, #320]	@ (8003b5c <HAL_DMA_IRQHandler+0x1f8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d012      	beq.n	8003a44 <HAL_DMA_IRQHandler+0xe0>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a4f      	ldr	r2, [pc, #316]	@ (8003b60 <HAL_DMA_IRQHandler+0x1fc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00a      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xda>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b64 <HAL_DMA_IRQHandler+0x200>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d102      	bne.n	8003a38 <HAL_DMA_IRQHandler+0xd4>
 8003a32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a36:	e01b      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a3c:	e018      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a42:	e015      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a44:	2340      	movs	r3, #64	@ 0x40
 8003a46:	e013      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	e011      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a4c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a50:	e00e      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a56:	e00b      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a58:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a5c:	e008      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a62:	e005      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a68:	e002      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a6a:	2340      	movs	r3, #64	@ 0x40
 8003a6c:	e000      	b.n	8003a70 <HAL_DMA_IRQHandler+0x10c>
 8003a6e:	2304      	movs	r3, #4
 8003a70:	4a3d      	ldr	r2, [pc, #244]	@ (8003b68 <HAL_DMA_IRQHandler+0x204>)
 8003a72:	6053      	str	r3, [r2, #4]
 8003a74:	e057      	b.n	8003b26 <HAL_DMA_IRQHandler+0x1c2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a31      	ldr	r2, [pc, #196]	@ (8003b40 <HAL_DMA_IRQHandler+0x1dc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d04f      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x1bc>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a2f      	ldr	r2, [pc, #188]	@ (8003b44 <HAL_DMA_IRQHandler+0x1e0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d048      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x1b8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b48 <HAL_DMA_IRQHandler+0x1e4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d040      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x1b2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2c      	ldr	r2, [pc, #176]	@ (8003b4c <HAL_DMA_IRQHandler+0x1e8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d038      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x1ac>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b50 <HAL_DMA_IRQHandler+0x1ec>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d030      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x1a6>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a29      	ldr	r2, [pc, #164]	@ (8003b54 <HAL_DMA_IRQHandler+0x1f0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d028      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x1a0>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a21      	ldr	r2, [pc, #132]	@ (8003b3c <HAL_DMA_IRQHandler+0x1d8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d020      	beq.n	8003afe <HAL_DMA_IRQHandler+0x19a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a25      	ldr	r2, [pc, #148]	@ (8003b58 <HAL_DMA_IRQHandler+0x1f4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d019      	beq.n	8003afa <HAL_DMA_IRQHandler+0x196>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a24      	ldr	r2, [pc, #144]	@ (8003b5c <HAL_DMA_IRQHandler+0x1f8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d012      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x192>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	@ (8003b60 <HAL_DMA_IRQHandler+0x1fc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00a      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x18c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a21      	ldr	r2, [pc, #132]	@ (8003b64 <HAL_DMA_IRQHandler+0x200>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d102      	bne.n	8003aea <HAL_DMA_IRQHandler+0x186>
 8003ae4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ae8:	e01b      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003aea:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003aee:	e018      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003af4:	e015      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003af6:	2340      	movs	r3, #64	@ 0x40
 8003af8:	e013      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003afa:	2304      	movs	r3, #4
 8003afc:	e011      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003afe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003b02:	e00e      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003b04:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b08:	e00b      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003b0a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003b0e:	e008      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003b10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b14:	e005      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b1a:	e002      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003b1c:	2340      	movs	r3, #64	@ 0x40
 8003b1e:	e000      	b.n	8003b22 <HAL_DMA_IRQHandler+0x1be>
 8003b20:	2304      	movs	r3, #4
 8003b22:	4a12      	ldr	r2, [pc, #72]	@ (8003b6c <HAL_DMA_IRQHandler+0x208>)
 8003b24:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8136 	beq.w	8003d9c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b38:	e130      	b.n	8003d9c <HAL_DMA_IRQHandler+0x438>
 8003b3a:	bf00      	nop
 8003b3c:	40020080 	.word	0x40020080
 8003b40:	40020008 	.word	0x40020008
 8003b44:	4002001c 	.word	0x4002001c
 8003b48:	40020030 	.word	0x40020030
 8003b4c:	40020044 	.word	0x40020044
 8003b50:	40020058 	.word	0x40020058
 8003b54:	4002006c 	.word	0x4002006c
 8003b58:	40020408 	.word	0x40020408
 8003b5c:	4002041c 	.word	0x4002041c
 8003b60:	40020430 	.word	0x40020430
 8003b64:	40020444 	.word	0x40020444
 8003b68:	40020400 	.word	0x40020400
 8003b6c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	2202      	movs	r2, #2
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80dd 	beq.w	8003d3c <HAL_DMA_IRQHandler+0x3d8>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80d7 	beq.w	8003d3c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 020a 	bic.w	r2, r2, #10
 8003baa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b7b      	ldr	r3, [pc, #492]	@ (8003da8 <HAL_DMA_IRQHandler+0x444>)
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d958      	bls.n	8003c72 <HAL_DMA_IRQHandler+0x30e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a79      	ldr	r2, [pc, #484]	@ (8003dac <HAL_DMA_IRQHandler+0x448>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d04f      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x306>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a78      	ldr	r2, [pc, #480]	@ (8003db0 <HAL_DMA_IRQHandler+0x44c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d048      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x302>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a76      	ldr	r2, [pc, #472]	@ (8003db4 <HAL_DMA_IRQHandler+0x450>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d040      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x2fc>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a75      	ldr	r2, [pc, #468]	@ (8003db8 <HAL_DMA_IRQHandler+0x454>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d038      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x2f6>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a73      	ldr	r2, [pc, #460]	@ (8003dbc <HAL_DMA_IRQHandler+0x458>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d030      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x2f0>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a72      	ldr	r2, [pc, #456]	@ (8003dc0 <HAL_DMA_IRQHandler+0x45c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d028      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x2ea>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a69      	ldr	r2, [pc, #420]	@ (8003da8 <HAL_DMA_IRQHandler+0x444>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d020      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x2e4>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8003dc4 <HAL_DMA_IRQHandler+0x460>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d019      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x2e0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a6c      	ldr	r2, [pc, #432]	@ (8003dc8 <HAL_DMA_IRQHandler+0x464>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d012      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x2dc>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6b      	ldr	r2, [pc, #428]	@ (8003dcc <HAL_DMA_IRQHandler+0x468>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00a      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x2d6>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a69      	ldr	r2, [pc, #420]	@ (8003dd0 <HAL_DMA_IRQHandler+0x46c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d102      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x2d0>
 8003c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c32:	e01b      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c38:	e018      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c3e:	e015      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c40:	2320      	movs	r3, #32
 8003c42:	e013      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e011      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c4c:	e00e      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c4e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003c52:	e00b      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c58:	e008      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c5e:	e005      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c64:	e002      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c66:	2320      	movs	r3, #32
 8003c68:	e000      	b.n	8003c6c <HAL_DMA_IRQHandler+0x308>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	4a59      	ldr	r2, [pc, #356]	@ (8003dd4 <HAL_DMA_IRQHandler+0x470>)
 8003c6e:	6053      	str	r3, [r2, #4]
 8003c70:	e057      	b.n	8003d22 <HAL_DMA_IRQHandler+0x3be>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a4d      	ldr	r2, [pc, #308]	@ (8003dac <HAL_DMA_IRQHandler+0x448>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d04f      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x3b8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a4b      	ldr	r2, [pc, #300]	@ (8003db0 <HAL_DMA_IRQHandler+0x44c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d048      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x3b4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a4a      	ldr	r2, [pc, #296]	@ (8003db4 <HAL_DMA_IRQHandler+0x450>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d040      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x3ae>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a48      	ldr	r2, [pc, #288]	@ (8003db8 <HAL_DMA_IRQHandler+0x454>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d038      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x3a8>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a47      	ldr	r2, [pc, #284]	@ (8003dbc <HAL_DMA_IRQHandler+0x458>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d030      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x3a2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a45      	ldr	r2, [pc, #276]	@ (8003dc0 <HAL_DMA_IRQHandler+0x45c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d028      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x39c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a3d      	ldr	r2, [pc, #244]	@ (8003da8 <HAL_DMA_IRQHandler+0x444>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d020      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x396>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a41      	ldr	r2, [pc, #260]	@ (8003dc4 <HAL_DMA_IRQHandler+0x460>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d019      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x392>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a40      	ldr	r2, [pc, #256]	@ (8003dc8 <HAL_DMA_IRQHandler+0x464>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d012      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x38e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a3e      	ldr	r2, [pc, #248]	@ (8003dcc <HAL_DMA_IRQHandler+0x468>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00a      	beq.n	8003cec <HAL_DMA_IRQHandler+0x388>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a3d      	ldr	r2, [pc, #244]	@ (8003dd0 <HAL_DMA_IRQHandler+0x46c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d102      	bne.n	8003ce6 <HAL_DMA_IRQHandler+0x382>
 8003ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ce4:	e01b      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003ce6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cea:	e018      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003cec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cf0:	e015      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	e013      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e011      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003cfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cfe:	e00e      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003d00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003d04:	e00b      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003d06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d0a:	e008      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003d0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d10:	e005      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003d12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d16:	e002      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003d18:	2320      	movs	r3, #32
 8003d1a:	e000      	b.n	8003d1e <HAL_DMA_IRQHandler+0x3ba>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003dd8 <HAL_DMA_IRQHandler+0x474>)
 8003d20:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d034      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d3a:	e02f      	b.n	8003d9c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	2208      	movs	r2, #8
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d028      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x43a>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d023      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 020e 	bic.w	r2, r2, #14
 8003d64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6e:	2101      	movs	r1, #1
 8003d70:	fa01 f202 	lsl.w	r2, r1, r2
 8003d74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
    }
  }
  return;
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
}
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40020080 	.word	0x40020080
 8003dac:	40020008 	.word	0x40020008
 8003db0:	4002001c 	.word	0x4002001c
 8003db4:	40020030 	.word	0x40020030
 8003db8:	40020044 	.word	0x40020044
 8003dbc:	40020058 	.word	0x40020058
 8003dc0:	4002006c 	.word	0x4002006c
 8003dc4:	40020408 	.word	0x40020408
 8003dc8:	4002041c 	.word	0x4002041c
 8003dcc:	40020430 	.word	0x40020430
 8003dd0:	40020444 	.word	0x40020444
 8003dd4:	40020400 	.word	0x40020400
 8003dd8:	40020000 	.word	0x40020000

08003ddc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	2101      	movs	r1, #1
 8003df4:	fa01 f202 	lsl.w	r2, r1, r2
 8003df8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d108      	bne.n	8003e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e1a:	e007      	b.n	8003e2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	60da      	str	r2, [r3, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
	...

08003e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b08b      	sub	sp, #44	@ 0x2c
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e42:	2300      	movs	r3, #0
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e46:	2300      	movs	r3, #0
 8003e48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e4a:	e179      	b.n	8004140 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	f040 8168 	bne.w	800413a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4a96      	ldr	r2, [pc, #600]	@ (80040c8 <HAL_GPIO_Init+0x290>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d05e      	beq.n	8003f32 <HAL_GPIO_Init+0xfa>
 8003e74:	4a94      	ldr	r2, [pc, #592]	@ (80040c8 <HAL_GPIO_Init+0x290>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d875      	bhi.n	8003f66 <HAL_GPIO_Init+0x12e>
 8003e7a:	4a94      	ldr	r2, [pc, #592]	@ (80040cc <HAL_GPIO_Init+0x294>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d058      	beq.n	8003f32 <HAL_GPIO_Init+0xfa>
 8003e80:	4a92      	ldr	r2, [pc, #584]	@ (80040cc <HAL_GPIO_Init+0x294>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d86f      	bhi.n	8003f66 <HAL_GPIO_Init+0x12e>
 8003e86:	4a92      	ldr	r2, [pc, #584]	@ (80040d0 <HAL_GPIO_Init+0x298>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d052      	beq.n	8003f32 <HAL_GPIO_Init+0xfa>
 8003e8c:	4a90      	ldr	r2, [pc, #576]	@ (80040d0 <HAL_GPIO_Init+0x298>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d869      	bhi.n	8003f66 <HAL_GPIO_Init+0x12e>
 8003e92:	4a90      	ldr	r2, [pc, #576]	@ (80040d4 <HAL_GPIO_Init+0x29c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d04c      	beq.n	8003f32 <HAL_GPIO_Init+0xfa>
 8003e98:	4a8e      	ldr	r2, [pc, #568]	@ (80040d4 <HAL_GPIO_Init+0x29c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d863      	bhi.n	8003f66 <HAL_GPIO_Init+0x12e>
 8003e9e:	4a8e      	ldr	r2, [pc, #568]	@ (80040d8 <HAL_GPIO_Init+0x2a0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d046      	beq.n	8003f32 <HAL_GPIO_Init+0xfa>
 8003ea4:	4a8c      	ldr	r2, [pc, #560]	@ (80040d8 <HAL_GPIO_Init+0x2a0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d85d      	bhi.n	8003f66 <HAL_GPIO_Init+0x12e>
 8003eaa:	2b12      	cmp	r3, #18
 8003eac:	d82a      	bhi.n	8003f04 <HAL_GPIO_Init+0xcc>
 8003eae:	2b12      	cmp	r3, #18
 8003eb0:	d859      	bhi.n	8003f66 <HAL_GPIO_Init+0x12e>
 8003eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <HAL_GPIO_Init+0x80>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003f33 	.word	0x08003f33
 8003ebc:	08003f0d 	.word	0x08003f0d
 8003ec0:	08003f1f 	.word	0x08003f1f
 8003ec4:	08003f61 	.word	0x08003f61
 8003ec8:	08003f67 	.word	0x08003f67
 8003ecc:	08003f67 	.word	0x08003f67
 8003ed0:	08003f67 	.word	0x08003f67
 8003ed4:	08003f67 	.word	0x08003f67
 8003ed8:	08003f67 	.word	0x08003f67
 8003edc:	08003f67 	.word	0x08003f67
 8003ee0:	08003f67 	.word	0x08003f67
 8003ee4:	08003f67 	.word	0x08003f67
 8003ee8:	08003f67 	.word	0x08003f67
 8003eec:	08003f67 	.word	0x08003f67
 8003ef0:	08003f67 	.word	0x08003f67
 8003ef4:	08003f67 	.word	0x08003f67
 8003ef8:	08003f67 	.word	0x08003f67
 8003efc:	08003f15 	.word	0x08003f15
 8003f00:	08003f29 	.word	0x08003f29
 8003f04:	4a75      	ldr	r2, [pc, #468]	@ (80040dc <HAL_GPIO_Init+0x2a4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f0a:	e02c      	b.n	8003f66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	623b      	str	r3, [r7, #32]
          break;
 8003f12:	e029      	b.n	8003f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	623b      	str	r3, [r7, #32]
          break;
 8003f1c:	e024      	b.n	8003f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	3308      	adds	r3, #8
 8003f24:	623b      	str	r3, [r7, #32]
          break;
 8003f26:	e01f      	b.n	8003f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	623b      	str	r3, [r7, #32]
          break;
 8003f30:	e01a      	b.n	8003f68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	623b      	str	r3, [r7, #32]
          break;
 8003f3e:	e013      	b.n	8003f68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f48:	2308      	movs	r3, #8
 8003f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	611a      	str	r2, [r3, #16]
          break;
 8003f52:	e009      	b.n	8003f68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f54:	2308      	movs	r3, #8
 8003f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	615a      	str	r2, [r3, #20]
          break;
 8003f5e:	e003      	b.n	8003f68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f60:	2300      	movs	r3, #0
 8003f62:	623b      	str	r3, [r7, #32]
          break;
 8003f64:	e000      	b.n	8003f68 <HAL_GPIO_Init+0x130>
          break;
 8003f66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2bff      	cmp	r3, #255	@ 0xff
 8003f6c:	d801      	bhi.n	8003f72 <HAL_GPIO_Init+0x13a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	e001      	b.n	8003f76 <HAL_GPIO_Init+0x13e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3304      	adds	r3, #4
 8003f76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2bff      	cmp	r3, #255	@ 0xff
 8003f7c:	d802      	bhi.n	8003f84 <HAL_GPIO_Init+0x14c>
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	e002      	b.n	8003f8a <HAL_GPIO_Init+0x152>
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	3b08      	subs	r3, #8
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	210f      	movs	r1, #15
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	6a39      	ldr	r1, [r7, #32]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80c1 	beq.w	800413a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fb8:	4b49      	ldr	r3, [pc, #292]	@ (80040e0 <HAL_GPIO_Init+0x2a8>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4a48      	ldr	r2, [pc, #288]	@ (80040e0 <HAL_GPIO_Init+0x2a8>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6193      	str	r3, [r2, #24]
 8003fc4:	4b46      	ldr	r3, [pc, #280]	@ (80040e0 <HAL_GPIO_Init+0x2a8>)
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fd0:	4a44      	ldr	r2, [pc, #272]	@ (80040e4 <HAL_GPIO_Init+0x2ac>)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	089b      	lsrs	r3, r3, #2
 8003fd6:	3302      	adds	r3, #2
 8003fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	220f      	movs	r2, #15
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3c      	ldr	r2, [pc, #240]	@ (80040e8 <HAL_GPIO_Init+0x2b0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d01f      	beq.n	800403c <HAL_GPIO_Init+0x204>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3b      	ldr	r2, [pc, #236]	@ (80040ec <HAL_GPIO_Init+0x2b4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d019      	beq.n	8004038 <HAL_GPIO_Init+0x200>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3a      	ldr	r2, [pc, #232]	@ (80040f0 <HAL_GPIO_Init+0x2b8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <HAL_GPIO_Init+0x1fc>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a39      	ldr	r2, [pc, #228]	@ (80040f4 <HAL_GPIO_Init+0x2bc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00d      	beq.n	8004030 <HAL_GPIO_Init+0x1f8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a38      	ldr	r2, [pc, #224]	@ (80040f8 <HAL_GPIO_Init+0x2c0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d007      	beq.n	800402c <HAL_GPIO_Init+0x1f4>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a37      	ldr	r2, [pc, #220]	@ (80040fc <HAL_GPIO_Init+0x2c4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_GPIO_Init+0x1f0>
 8004024:	2305      	movs	r3, #5
 8004026:	e00a      	b.n	800403e <HAL_GPIO_Init+0x206>
 8004028:	2306      	movs	r3, #6
 800402a:	e008      	b.n	800403e <HAL_GPIO_Init+0x206>
 800402c:	2304      	movs	r3, #4
 800402e:	e006      	b.n	800403e <HAL_GPIO_Init+0x206>
 8004030:	2303      	movs	r3, #3
 8004032:	e004      	b.n	800403e <HAL_GPIO_Init+0x206>
 8004034:	2302      	movs	r3, #2
 8004036:	e002      	b.n	800403e <HAL_GPIO_Init+0x206>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_GPIO_Init+0x206>
 800403c:	2300      	movs	r3, #0
 800403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004040:	f002 0203 	and.w	r2, r2, #3
 8004044:	0092      	lsls	r2, r2, #2
 8004046:	4093      	lsls	r3, r2
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800404e:	4925      	ldr	r1, [pc, #148]	@ (80040e4 <HAL_GPIO_Init+0x2ac>)
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	089b      	lsrs	r3, r3, #2
 8004054:	3302      	adds	r3, #2
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d006      	beq.n	8004076 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004068:	4b25      	ldr	r3, [pc, #148]	@ (8004100 <HAL_GPIO_Init+0x2c8>)
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	4924      	ldr	r1, [pc, #144]	@ (8004100 <HAL_GPIO_Init+0x2c8>)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	608b      	str	r3, [r1, #8]
 8004074:	e006      	b.n	8004084 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004076:	4b22      	ldr	r3, [pc, #136]	@ (8004100 <HAL_GPIO_Init+0x2c8>)
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	43db      	mvns	r3, r3
 800407e:	4920      	ldr	r1, [pc, #128]	@ (8004100 <HAL_GPIO_Init+0x2c8>)
 8004080:	4013      	ands	r3, r2
 8004082:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d006      	beq.n	800409e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004090:	4b1b      	ldr	r3, [pc, #108]	@ (8004100 <HAL_GPIO_Init+0x2c8>)
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	491a      	ldr	r1, [pc, #104]	@ (8004100 <HAL_GPIO_Init+0x2c8>)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	4313      	orrs	r3, r2
 800409a:	60cb      	str	r3, [r1, #12]
 800409c:	e006      	b.n	80040ac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800409e:	4b18      	ldr	r3, [pc, #96]	@ (8004100 <HAL_GPIO_Init+0x2c8>)
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	4916      	ldr	r1, [pc, #88]	@ (8004100 <HAL_GPIO_Init+0x2c8>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d025      	beq.n	8004104 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040b8:	4b11      	ldr	r3, [pc, #68]	@ (8004100 <HAL_GPIO_Init+0x2c8>)
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	4910      	ldr	r1, [pc, #64]	@ (8004100 <HAL_GPIO_Init+0x2c8>)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
 80040c4:	e025      	b.n	8004112 <HAL_GPIO_Init+0x2da>
 80040c6:	bf00      	nop
 80040c8:	10320000 	.word	0x10320000
 80040cc:	10310000 	.word	0x10310000
 80040d0:	10220000 	.word	0x10220000
 80040d4:	10210000 	.word	0x10210000
 80040d8:	10120000 	.word	0x10120000
 80040dc:	10110000 	.word	0x10110000
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40010800 	.word	0x40010800
 80040ec:	40010c00 	.word	0x40010c00
 80040f0:	40011000 	.word	0x40011000
 80040f4:	40011400 	.word	0x40011400
 80040f8:	40011800 	.word	0x40011800
 80040fc:	40011c00 	.word	0x40011c00
 8004100:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004104:	4b15      	ldr	r3, [pc, #84]	@ (800415c <HAL_GPIO_Init+0x324>)
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	43db      	mvns	r3, r3
 800410c:	4913      	ldr	r1, [pc, #76]	@ (800415c <HAL_GPIO_Init+0x324>)
 800410e:	4013      	ands	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d006      	beq.n	800412c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800411e:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <HAL_GPIO_Init+0x324>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	490e      	ldr	r1, [pc, #56]	@ (800415c <HAL_GPIO_Init+0x324>)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
 800412a:	e006      	b.n	800413a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800412c:	4b0b      	ldr	r3, [pc, #44]	@ (800415c <HAL_GPIO_Init+0x324>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	43db      	mvns	r3, r3
 8004134:	4909      	ldr	r1, [pc, #36]	@ (800415c <HAL_GPIO_Init+0x324>)
 8004136:	4013      	ands	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	3301      	adds	r3, #1
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	f47f ae7e 	bne.w	8003e4c <HAL_GPIO_Init+0x14>
  }
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	372c      	adds	r7, #44	@ 0x2c
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	40010400 	.word	0x40010400

08004160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	887b      	ldrh	r3, [r7, #2]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
 800417c:	e001      	b.n	8004182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	807b      	strh	r3, [r7, #2]
 800419a:	4613      	mov	r3, r2
 800419c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800419e:	787b      	ldrb	r3, [r7, #1]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041aa:	e003      	b.n	80041b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	041a      	lsls	r2, r3, #16
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	611a      	str	r2, [r3, #16]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e12b      	b.n	800442a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd fe9e 	bl	8001f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2224      	movs	r2, #36	@ 0x24
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0201 	bic.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004212:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004222:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004224:	f000 fcdc 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 8004228:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4a81      	ldr	r2, [pc, #516]	@ (8004434 <HAL_I2C_Init+0x274>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d807      	bhi.n	8004244 <HAL_I2C_Init+0x84>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a80      	ldr	r2, [pc, #512]	@ (8004438 <HAL_I2C_Init+0x278>)
 8004238:	4293      	cmp	r3, r2
 800423a:	bf94      	ite	ls
 800423c:	2301      	movls	r3, #1
 800423e:	2300      	movhi	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e006      	b.n	8004252 <HAL_I2C_Init+0x92>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4a7d      	ldr	r2, [pc, #500]	@ (800443c <HAL_I2C_Init+0x27c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	bf94      	ite	ls
 800424c:	2301      	movls	r3, #1
 800424e:	2300      	movhi	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0e7      	b.n	800442a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4a78      	ldr	r2, [pc, #480]	@ (8004440 <HAL_I2C_Init+0x280>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0c9b      	lsrs	r3, r3, #18
 8004264:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4a6a      	ldr	r2, [pc, #424]	@ (8004434 <HAL_I2C_Init+0x274>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d802      	bhi.n	8004294 <HAL_I2C_Init+0xd4>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	3301      	adds	r3, #1
 8004292:	e009      	b.n	80042a8 <HAL_I2C_Init+0xe8>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	4a69      	ldr	r2, [pc, #420]	@ (8004444 <HAL_I2C_Init+0x284>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	099b      	lsrs	r3, r3, #6
 80042a6:	3301      	adds	r3, #1
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	495c      	ldr	r1, [pc, #368]	@ (8004434 <HAL_I2C_Init+0x274>)
 80042c4:	428b      	cmp	r3, r1
 80042c6:	d819      	bhi.n	80042fc <HAL_I2C_Init+0x13c>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1e59      	subs	r1, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042d6:	1c59      	adds	r1, r3, #1
 80042d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042dc:	400b      	ands	r3, r1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_I2C_Init+0x138>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1e59      	subs	r1, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80042f0:	3301      	adds	r3, #1
 80042f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f6:	e051      	b.n	800439c <HAL_I2C_Init+0x1dc>
 80042f8:	2304      	movs	r3, #4
 80042fa:	e04f      	b.n	800439c <HAL_I2C_Init+0x1dc>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d111      	bne.n	8004328 <HAL_I2C_Init+0x168>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1e58      	subs	r0, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	440b      	add	r3, r1
 8004312:	fbb0 f3f3 	udiv	r3, r0, r3
 8004316:	3301      	adds	r3, #1
 8004318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e012      	b.n	800434e <HAL_I2C_Init+0x18e>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	1e58      	subs	r0, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6859      	ldr	r1, [r3, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	0099      	lsls	r1, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	fbb0 f3f3 	udiv	r3, r0, r3
 800433e:	3301      	adds	r3, #1
 8004340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Init+0x196>
 8004352:	2301      	movs	r3, #1
 8004354:	e022      	b.n	800439c <HAL_I2C_Init+0x1dc>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10e      	bne.n	800437c <HAL_I2C_Init+0x1bc>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1e58      	subs	r0, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6859      	ldr	r1, [r3, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	440b      	add	r3, r1
 800436c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004370:	3301      	adds	r3, #1
 8004372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800437a:	e00f      	b.n	800439c <HAL_I2C_Init+0x1dc>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1e58      	subs	r0, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	0099      	lsls	r1, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004392:	3301      	adds	r3, #1
 8004394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004398:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	6809      	ldr	r1, [r1, #0]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6911      	ldr	r1, [r2, #16]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68d2      	ldr	r2, [r2, #12]
 80043d6:	4311      	orrs	r1, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	430b      	orrs	r3, r1
 80043de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	000186a0 	.word	0x000186a0
 8004438:	001e847f 	.word	0x001e847f
 800443c:	003d08ff 	.word	0x003d08ff
 8004440:	431bde83 	.word	0x431bde83
 8004444:	10624dd3 	.word	0x10624dd3

08004448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e272      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8087 	beq.w	8004576 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004468:	4b92      	ldr	r3, [pc, #584]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 030c 	and.w	r3, r3, #12
 8004470:	2b04      	cmp	r3, #4
 8004472:	d00c      	beq.n	800448e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004474:	4b8f      	ldr	r3, [pc, #572]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d112      	bne.n	80044a6 <HAL_RCC_OscConfig+0x5e>
 8004480:	4b8c      	ldr	r3, [pc, #560]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448c:	d10b      	bne.n	80044a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448e:	4b89      	ldr	r3, [pc, #548]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d06c      	beq.n	8004574 <HAL_RCC_OscConfig+0x12c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d168      	bne.n	8004574 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e24c      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ae:	d106      	bne.n	80044be <HAL_RCC_OscConfig+0x76>
 80044b0:	4b80      	ldr	r3, [pc, #512]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a7f      	ldr	r2, [pc, #508]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	e02e      	b.n	800451c <HAL_RCC_OscConfig+0xd4>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x98>
 80044c6:	4b7b      	ldr	r3, [pc, #492]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7a      	ldr	r2, [pc, #488]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b78      	ldr	r3, [pc, #480]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a77      	ldr	r2, [pc, #476]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e01d      	b.n	800451c <HAL_RCC_OscConfig+0xd4>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0xbc>
 80044ea:	4b72      	ldr	r3, [pc, #456]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a71      	ldr	r2, [pc, #452]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b6f      	ldr	r3, [pc, #444]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6e      	ldr	r2, [pc, #440]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e00b      	b.n	800451c <HAL_RCC_OscConfig+0xd4>
 8004504:	4b6b      	ldr	r3, [pc, #428]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a6a      	ldr	r2, [pc, #424]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b68      	ldr	r3, [pc, #416]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a67      	ldr	r2, [pc, #412]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800451a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d013      	beq.n	800454c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fe fcc8 	bl	8002eb8 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7fe fcc4 	bl	8002eb8 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	@ 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e200      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	4b5d      	ldr	r3, [pc, #372]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0xe4>
 800454a:	e014      	b.n	8004576 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fe fcb4 	bl	8002eb8 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004554:	f7fe fcb0 	bl	8002eb8 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	@ 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1ec      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004566:	4b53      	ldr	r3, [pc, #332]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x10c>
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d063      	beq.n	800464a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004582:	4b4c      	ldr	r3, [pc, #304]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800458e:	4b49      	ldr	r3, [pc, #292]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b08      	cmp	r3, #8
 8004598:	d11c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x18c>
 800459a:	4b46      	ldr	r3, [pc, #280]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d116      	bne.n	80045d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	4b43      	ldr	r3, [pc, #268]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_RCC_OscConfig+0x176>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e1c0      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045be:	4b3d      	ldr	r3, [pc, #244]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4939      	ldr	r1, [pc, #228]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	e03a      	b.n	800464a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045dc:	4b36      	ldr	r3, [pc, #216]	@ (80046b8 <HAL_RCC_OscConfig+0x270>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fe fc69 	bl	8002eb8 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fe fc65 	bl	8002eb8 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e1a1      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fc:	4b2d      	ldr	r3, [pc, #180]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b2a      	ldr	r3, [pc, #168]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4927      	ldr	r1, [pc, #156]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]
 800461c:	e015      	b.n	800464a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461e:	4b26      	ldr	r3, [pc, #152]	@ (80046b8 <HAL_RCC_OscConfig+0x270>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fe fc48 	bl	8002eb8 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462c:	f7fe fc44 	bl	8002eb8 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e180      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	4b1d      	ldr	r3, [pc, #116]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d03a      	beq.n	80046cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d019      	beq.n	8004692 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465e:	4b17      	ldr	r3, [pc, #92]	@ (80046bc <HAL_RCC_OscConfig+0x274>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004664:	f7fe fc28 	bl	8002eb8 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466c:	f7fe fc24 	bl	8002eb8 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e160      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467e:	4b0d      	ldr	r3, [pc, #52]	@ (80046b4 <HAL_RCC_OscConfig+0x26c>)
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800468a:	2001      	movs	r0, #1
 800468c:	f000 fad0 	bl	8004c30 <RCC_Delay>
 8004690:	e01c      	b.n	80046cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004692:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <HAL_RCC_OscConfig+0x274>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004698:	f7fe fc0e 	bl	8002eb8 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469e:	e00f      	b.n	80046c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a0:	f7fe fc0a 	bl	8002eb8 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d908      	bls.n	80046c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e146      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
 80046b2:	bf00      	nop
 80046b4:	40021000 	.word	0x40021000
 80046b8:	42420000 	.word	0x42420000
 80046bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c0:	4b92      	ldr	r3, [pc, #584]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e9      	bne.n	80046a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80a6 	beq.w	8004826 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046de:	4b8b      	ldr	r3, [pc, #556]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10d      	bne.n	8004706 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	4b88      	ldr	r3, [pc, #544]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	4a87      	ldr	r2, [pc, #540]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f4:	61d3      	str	r3, [r2, #28]
 80046f6:	4b85      	ldr	r3, [pc, #532]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004706:	4b82      	ldr	r3, [pc, #520]	@ (8004910 <HAL_RCC_OscConfig+0x4c8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d118      	bne.n	8004744 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004712:	4b7f      	ldr	r3, [pc, #508]	@ (8004910 <HAL_RCC_OscConfig+0x4c8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a7e      	ldr	r2, [pc, #504]	@ (8004910 <HAL_RCC_OscConfig+0x4c8>)
 8004718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800471c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471e:	f7fe fbcb 	bl	8002eb8 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004726:	f7fe fbc7 	bl	8002eb8 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b64      	cmp	r3, #100	@ 0x64
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e103      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	4b75      	ldr	r3, [pc, #468]	@ (8004910 <HAL_RCC_OscConfig+0x4c8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x312>
 800474c:	4b6f      	ldr	r3, [pc, #444]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	4a6e      	ldr	r2, [pc, #440]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6213      	str	r3, [r2, #32]
 8004758:	e02d      	b.n	80047b6 <HAL_RCC_OscConfig+0x36e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <HAL_RCC_OscConfig+0x334>
 8004762:	4b6a      	ldr	r3, [pc, #424]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4a69      	ldr	r2, [pc, #420]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	6213      	str	r3, [r2, #32]
 800476e:	4b67      	ldr	r3, [pc, #412]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	4a66      	ldr	r2, [pc, #408]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004774:	f023 0304 	bic.w	r3, r3, #4
 8004778:	6213      	str	r3, [r2, #32]
 800477a:	e01c      	b.n	80047b6 <HAL_RCC_OscConfig+0x36e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b05      	cmp	r3, #5
 8004782:	d10c      	bne.n	800479e <HAL_RCC_OscConfig+0x356>
 8004784:	4b61      	ldr	r3, [pc, #388]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	4a60      	ldr	r2, [pc, #384]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800478a:	f043 0304 	orr.w	r3, r3, #4
 800478e:	6213      	str	r3, [r2, #32]
 8004790:	4b5e      	ldr	r3, [pc, #376]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4a5d      	ldr	r2, [pc, #372]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6213      	str	r3, [r2, #32]
 800479c:	e00b      	b.n	80047b6 <HAL_RCC_OscConfig+0x36e>
 800479e:	4b5b      	ldr	r3, [pc, #364]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	4a5a      	ldr	r2, [pc, #360]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	6213      	str	r3, [r2, #32]
 80047aa:	4b58      	ldr	r3, [pc, #352]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	4a57      	ldr	r2, [pc, #348]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	f023 0304 	bic.w	r3, r3, #4
 80047b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d015      	beq.n	80047ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047be:	f7fe fb7b 	bl	8002eb8 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	e00a      	b.n	80047dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f7fe fb77 	bl	8002eb8 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e0b1      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047dc:	4b4b      	ldr	r3, [pc, #300]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ee      	beq.n	80047c6 <HAL_RCC_OscConfig+0x37e>
 80047e8:	e014      	b.n	8004814 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ea:	f7fe fb65 	bl	8002eb8 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f2:	f7fe fb61 	bl	8002eb8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e09b      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004808:	4b40      	ldr	r3, [pc, #256]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ee      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d105      	bne.n	8004826 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481a:	4b3c      	ldr	r3, [pc, #240]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	4a3b      	ldr	r2, [pc, #236]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004824:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8087 	beq.w	800493e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004830:	4b36      	ldr	r3, [pc, #216]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	2b08      	cmp	r3, #8
 800483a:	d061      	beq.n	8004900 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d146      	bne.n	80048d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004844:	4b33      	ldr	r3, [pc, #204]	@ (8004914 <HAL_RCC_OscConfig+0x4cc>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fe fb35 	bl	8002eb8 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004852:	f7fe fb31 	bl	8002eb8 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e06d      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004864:	4b29      	ldr	r3, [pc, #164]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f0      	bne.n	8004852 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004878:	d108      	bne.n	800488c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800487a:	4b24      	ldr	r3, [pc, #144]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4921      	ldr	r1, [pc, #132]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800488c:	4b1f      	ldr	r3, [pc, #124]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a19      	ldr	r1, [r3, #32]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	430b      	orrs	r3, r1
 800489e:	491b      	ldr	r1, [pc, #108]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004914 <HAL_RCC_OscConfig+0x4cc>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048aa:	f7fe fb05 	bl	8002eb8 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b2:	f7fe fb01 	bl	8002eb8 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e03d      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048c4:	4b11      	ldr	r3, [pc, #68]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x46a>
 80048d0:	e035      	b.n	800493e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d2:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <HAL_RCC_OscConfig+0x4cc>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fe faee 	bl	8002eb8 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fe faea 	bl	8002eb8 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e026      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f2:	4b06      	ldr	r3, [pc, #24]	@ (800490c <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x498>
 80048fe:	e01e      	b.n	800493e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d107      	bne.n	8004918 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e019      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
 800490c:	40021000 	.word	0x40021000
 8004910:	40007000 	.word	0x40007000
 8004914:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_RCC_OscConfig+0x500>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	429a      	cmp	r2, r3
 800492a:	d106      	bne.n	800493a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000

0800494c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0d0      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004960:	4b6a      	ldr	r3, [pc, #424]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d910      	bls.n	8004990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b67      	ldr	r3, [pc, #412]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 0207 	bic.w	r2, r3, #7
 8004976:	4965      	ldr	r1, [pc, #404]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b63      	ldr	r3, [pc, #396]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0b8      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a8:	4b59      	ldr	r3, [pc, #356]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a58      	ldr	r2, [pc, #352]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c0:	4b53      	ldr	r3, [pc, #332]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a52      	ldr	r2, [pc, #328]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049cc:	4b50      	ldr	r3, [pc, #320]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	494d      	ldr	r1, [pc, #308]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d040      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b47      	ldr	r3, [pc, #284]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d115      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e07f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	4b41      	ldr	r3, [pc, #260]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e073      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e06b      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2a:	4b39      	ldr	r3, [pc, #228]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f023 0203 	bic.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4936      	ldr	r1, [pc, #216]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a3c:	f7fe fa3c 	bl	8002eb8 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a44:	f7fe fa38 	bl	8002eb8 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e053      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 020c 	and.w	r2, r3, #12
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d1eb      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d210      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b24      	ldr	r3, [pc, #144]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 0207 	bic.w	r2, r3, #7
 8004a82:	4922      	ldr	r1, [pc, #136]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b20      	ldr	r3, [pc, #128]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e032      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4916      	ldr	r1, [pc, #88]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ac6:	4b12      	ldr	r3, [pc, #72]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	490e      	ldr	r1, [pc, #56]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ada:	f000 f821 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	490a      	ldr	r1, [pc, #40]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004aec:	5ccb      	ldrb	r3, [r1, r3]
 8004aee:	fa22 f303 	lsr.w	r3, r2, r3
 8004af2:	4a09      	ldr	r2, [pc, #36]	@ (8004b18 <HAL_RCC_ClockConfig+0x1cc>)
 8004af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004af6:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <HAL_RCC_ClockConfig+0x1d0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe f99a 	bl	8002e34 <HAL_InitTick>

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40022000 	.word	0x40022000
 8004b10:	40021000 	.word	0x40021000
 8004b14:	0800bb70 	.word	0x0800bb70
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	20000004 	.word	0x20000004

08004b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d002      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x30>
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x36>
 8004b4e:	e027      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b50:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b52:	613b      	str	r3, [r7, #16]
      break;
 8004b54:	e027      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	0c9b      	lsrs	r3, r3, #18
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b60:	5cd3      	ldrb	r3, [r2, r3]
 8004b62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d010      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b6e:	4b11      	ldr	r3, [pc, #68]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	0c5b      	lsrs	r3, r3, #17
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	4a11      	ldr	r2, [pc, #68]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b7a:	5cd3      	ldrb	r3, [r2, r3]
 8004b7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a0d      	ldr	r2, [pc, #52]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b82:	fb03 f202 	mul.w	r2, r3, r2
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e004      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b94:	fb02 f303 	mul.w	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	613b      	str	r3, [r7, #16]
      break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004ba2:	613b      	str	r3, [r7, #16]
      break;
 8004ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ba6:	693b      	ldr	r3, [r7, #16]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	00b71b00 	.word	0x00b71b00
 8004bbc:	0800bb88 	.word	0x0800bb88
 8004bc0:	0800bb98 	.word	0x0800bb98
 8004bc4:	003d0900 	.word	0x003d0900
 8004bc8:	007a1200 	.word	0x007a1200

08004bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd0:	4b02      	ldr	r3, [pc, #8]	@ (8004bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	20000000 	.word	0x20000000

08004be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004be4:	f7ff fff2 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	@ (8004c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	@ (8004c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000
 8004c04:	0800bb80 	.word	0x0800bb80

08004c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c0c:	f7ff ffde 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	0adb      	lsrs	r3, r3, #11
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	@ (8004c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800bb80 	.word	0x0800bb80

08004c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c38:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <RCC_Delay+0x34>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c68 <RCC_Delay+0x38>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0a5b      	lsrs	r3, r3, #9
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c4c:	bf00      	nop
  }
  while (Delay --);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1e5a      	subs	r2, r3, #1
 8004c52:	60fa      	str	r2, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f9      	bne.n	8004c4c <RCC_Delay+0x1c>
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	20000000 	.word	0x20000000
 8004c68:	10624dd3 	.word	0x10624dd3

08004c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d07d      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10d      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c98:	4b4c      	ldr	r3, [pc, #304]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	61d3      	str	r3, [r2, #28]
 8004ca4:	4b49      	ldr	r3, [pc, #292]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	4b46      	ldr	r3, [pc, #280]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d118      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc0:	4b43      	ldr	r3, [pc, #268]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a42      	ldr	r2, [pc, #264]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ccc:	f7fe f8f4 	bl	8002eb8 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd4:	f7fe f8f0 	bl	8002eb8 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	@ 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e06d      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cf2:	4b36      	ldr	r3, [pc, #216]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d02e      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d027      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d10:	4b2e      	ldr	r3, [pc, #184]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d20:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d26:	4a29      	ldr	r2, [pc, #164]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d014      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d36:	f7fe f8bf 	bl	8002eb8 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fe f8bb 	bl	8002eb8 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e036      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d54:	4b1d      	ldr	r3, [pc, #116]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ee      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d60:	4b1a      	ldr	r3, [pc, #104]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4917      	ldr	r1, [pc, #92]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d105      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d78:	4b14      	ldr	r3, [pc, #80]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d90:	4b0e      	ldr	r3, [pc, #56]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	490b      	ldr	r1, [pc, #44]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dae:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	4904      	ldr	r1, [pc, #16]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40007000 	.word	0x40007000
 8004dd4:	42420440 	.word	0x42420440

08004dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e041      	b.n	8004e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fd fc4e 	bl	80026a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f000 fdb4 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d001      	beq.n	8004e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e04e      	b.n	8004f2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a22      	ldr	r2, [pc, #136]	@ (8004f38 <HAL_TIM_Base_Start_IT+0xc0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d022      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x80>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a21      	ldr	r2, [pc, #132]	@ (8004f3c <HAL_TIM_Base_Start_IT+0xc4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d01d      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x80>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec4:	d018      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x80>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1d      	ldr	r2, [pc, #116]	@ (8004f40 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x80>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f44 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00e      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x80>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1a      	ldr	r2, [pc, #104]	@ (8004f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d009      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x80>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x80>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a17      	ldr	r2, [pc, #92]	@ (8004f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d111      	bne.n	8004f1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b06      	cmp	r3, #6
 8004f08:	d010      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1a:	e007      	b.n	8004f2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40013400 	.word	0x40013400
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40000c00 	.word	0x40000c00
 8004f4c:	40014c00 	.word	0x40014c00
 8004f50:	40001800 	.word	0x40001800

08004f54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e041      	b.n	8004fea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fd fbf2 	bl	8002764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f000 fcf6 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e041      	b.n	8005088 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f839 	bl	8005090 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3304      	adds	r3, #4
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f000 fca7 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr
	...

080050a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_IC_Start_IT+0x1e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e013      	b.n	80050ea <HAL_TIM_IC_Start_IT+0x46>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_IC_Start_IT+0x2e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	e00b      	b.n	80050ea <HAL_TIM_IC_Start_IT+0x46>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_IC_Start_IT+0x3e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e003      	b.n	80050ea <HAL_TIM_IC_Start_IT+0x46>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <HAL_TIM_IC_Start_IT+0x58>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e013      	b.n	8005124 <HAL_TIM_IC_Start_IT+0x80>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d104      	bne.n	800510c <HAL_TIM_IC_Start_IT+0x68>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e00b      	b.n	8005124 <HAL_TIM_IC_Start_IT+0x80>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b08      	cmp	r3, #8
 8005110:	d104      	bne.n	800511c <HAL_TIM_IC_Start_IT+0x78>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e003      	b.n	8005124 <HAL_TIM_IC_Start_IT+0x80>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005122:	b2db      	uxtb	r3, r3
 8005124:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005126:	7bbb      	ldrb	r3, [r7, #14]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d102      	bne.n	8005132 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800512c:	7b7b      	ldrb	r3, [r7, #13]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d001      	beq.n	8005136 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e0cc      	b.n	80052d0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <HAL_TIM_IC_Start_IT+0xa2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005144:	e013      	b.n	800516e <HAL_TIM_IC_Start_IT+0xca>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_IT+0xb2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005154:	e00b      	b.n	800516e <HAL_TIM_IC_Start_IT+0xca>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d104      	bne.n	8005166 <HAL_TIM_IC_Start_IT+0xc2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005164:	e003      	b.n	800516e <HAL_TIM_IC_Start_IT+0xca>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <HAL_TIM_IC_Start_IT+0xda>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800517c:	e013      	b.n	80051a6 <HAL_TIM_IC_Start_IT+0x102>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d104      	bne.n	800518e <HAL_TIM_IC_Start_IT+0xea>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800518c:	e00b      	b.n	80051a6 <HAL_TIM_IC_Start_IT+0x102>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d104      	bne.n	800519e <HAL_TIM_IC_Start_IT+0xfa>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800519c:	e003      	b.n	80051a6 <HAL_TIM_IC_Start_IT+0x102>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2202      	movs	r2, #2
 80051a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	d841      	bhi.n	8005230 <HAL_TIM_IC_Start_IT+0x18c>
 80051ac:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <HAL_TIM_IC_Start_IT+0x110>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051e9 	.word	0x080051e9
 80051b8:	08005231 	.word	0x08005231
 80051bc:	08005231 	.word	0x08005231
 80051c0:	08005231 	.word	0x08005231
 80051c4:	080051fb 	.word	0x080051fb
 80051c8:	08005231 	.word	0x08005231
 80051cc:	08005231 	.word	0x08005231
 80051d0:	08005231 	.word	0x08005231
 80051d4:	0800520d 	.word	0x0800520d
 80051d8:	08005231 	.word	0x08005231
 80051dc:	08005231 	.word	0x08005231
 80051e0:	08005231 	.word	0x08005231
 80051e4:	0800521f 	.word	0x0800521f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0202 	orr.w	r2, r2, #2
 80051f6:	60da      	str	r2, [r3, #12]
      break;
 80051f8:	e01d      	b.n	8005236 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0204 	orr.w	r2, r2, #4
 8005208:	60da      	str	r2, [r3, #12]
      break;
 800520a:	e014      	b.n	8005236 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0208 	orr.w	r2, r2, #8
 800521a:	60da      	str	r2, [r3, #12]
      break;
 800521c:	e00b      	b.n	8005236 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0210 	orr.w	r2, r2, #16
 800522c:	60da      	str	r2, [r3, #12]
      break;
 800522e:	e002      	b.n	8005236 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
      break;
 8005234:	bf00      	nop
  }

  if (status == HAL_OK)
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d148      	bne.n	80052ce <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2201      	movs	r2, #1
 8005242:	6839      	ldr	r1, [r7, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f000 ffa2 	bl	800618e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a22      	ldr	r2, [pc, #136]	@ (80052d8 <HAL_TIM_IC_Start_IT+0x234>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d022      	beq.n	800529a <HAL_TIM_IC_Start_IT+0x1f6>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a20      	ldr	r2, [pc, #128]	@ (80052dc <HAL_TIM_IC_Start_IT+0x238>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01d      	beq.n	800529a <HAL_TIM_IC_Start_IT+0x1f6>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d018      	beq.n	800529a <HAL_TIM_IC_Start_IT+0x1f6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1c      	ldr	r2, [pc, #112]	@ (80052e0 <HAL_TIM_IC_Start_IT+0x23c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_TIM_IC_Start_IT+0x1f6>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1b      	ldr	r2, [pc, #108]	@ (80052e4 <HAL_TIM_IC_Start_IT+0x240>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00e      	beq.n	800529a <HAL_TIM_IC_Start_IT+0x1f6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a19      	ldr	r2, [pc, #100]	@ (80052e8 <HAL_TIM_IC_Start_IT+0x244>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d009      	beq.n	800529a <HAL_TIM_IC_Start_IT+0x1f6>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a18      	ldr	r2, [pc, #96]	@ (80052ec <HAL_TIM_IC_Start_IT+0x248>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d004      	beq.n	800529a <HAL_TIM_IC_Start_IT+0x1f6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a16      	ldr	r2, [pc, #88]	@ (80052f0 <HAL_TIM_IC_Start_IT+0x24c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d111      	bne.n	80052be <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d010      	beq.n	80052ce <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052bc:	e007      	b.n	80052ce <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40014c00 	.word	0x40014c00
 80052f0:	40001800 	.word	0x40001800

080052f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d122      	bne.n	8005350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b02      	cmp	r3, #2
 8005316:	d11b      	bne.n	8005350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0202 	mvn.w	r2, #2
 8005320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fc ffea 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fb05 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fb0b 	bl	8005960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b04      	cmp	r3, #4
 800535c:	d122      	bne.n	80053a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b04      	cmp	r3, #4
 800536a:	d11b      	bne.n	80053a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0204 	mvn.w	r2, #4
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fc ffc0 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fadb 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fae1 	bl	8005960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d122      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d11b      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0208 	mvn.w	r2, #8
 80053c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2204      	movs	r2, #4
 80053ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fc ff96 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fab1 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fab7 	bl	8005960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b10      	cmp	r3, #16
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b10      	cmp	r3, #16
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0210 	mvn.w	r2, #16
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2208      	movs	r2, #8
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc ff6c 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa87 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fa8d 	bl	8005960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10e      	bne.n	8005478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d107      	bne.n	8005478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0201 	mvn.w	r2, #1
 8005470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fc fba4 	bl	8001bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005482:	2b80      	cmp	r3, #128	@ 0x80
 8005484:	d10e      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005490:	2b80      	cmp	r3, #128	@ 0x80
 8005492:	d107      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 ff1d 	bl	80062de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ae:	2b40      	cmp	r3, #64	@ 0x40
 80054b0:	d10e      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b40      	cmp	r3, #64	@ 0x40
 80054be:	d107      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fa51 	bl	8005972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d10e      	bne.n	80054fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d107      	bne.n	80054fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0220 	mvn.w	r2, #32
 80054f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fee8 	bl	80062cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_TIM_IC_ConfigChannel+0x1e>
 800551e:	2302      	movs	r3, #2
 8005520:	e088      	b.n	8005634 <HAL_TIM_IC_ConfigChannel+0x130>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d11b      	bne.n	8005568 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005540:	f000 fc6a 	bl	8005e18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 020c 	bic.w	r2, r2, #12
 8005552:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6999      	ldr	r1, [r3, #24]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	619a      	str	r2, [r3, #24]
 8005566:	e060      	b.n	800562a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b04      	cmp	r3, #4
 800556c:	d11c      	bne.n	80055a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800557e:	f000 fceb 	bl	8005f58 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699a      	ldr	r2, [r3, #24]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005590:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6999      	ldr	r1, [r3, #24]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	021a      	lsls	r2, r3, #8
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	619a      	str	r2, [r3, #24]
 80055a6:	e040      	b.n	800562a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d11b      	bne.n	80055e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80055be:	f000 fd36 	bl	800602e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 020c 	bic.w	r2, r2, #12
 80055d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69d9      	ldr	r1, [r3, #28]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	61da      	str	r2, [r3, #28]
 80055e4:	e021      	b.n	800562a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b0c      	cmp	r3, #12
 80055ea:	d11c      	bne.n	8005626 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80055fc:	f000 fd52 	bl	80060a4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69da      	ldr	r2, [r3, #28]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800560e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69d9      	ldr	r1, [r3, #28]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	61da      	str	r2, [r3, #28]
 8005624:	e001      	b.n	800562a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005632:	7dfb      	ldrb	r3, [r7, #23]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005656:	2302      	movs	r3, #2
 8005658:	e0ae      	b.n	80057b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	f200 809f 	bhi.w	80057a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800566a:	a201      	add	r2, pc, #4	@ (adr r2, 8005670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	080056a5 	.word	0x080056a5
 8005674:	080057a9 	.word	0x080057a9
 8005678:	080057a9 	.word	0x080057a9
 800567c:	080057a9 	.word	0x080057a9
 8005680:	080056e5 	.word	0x080056e5
 8005684:	080057a9 	.word	0x080057a9
 8005688:	080057a9 	.word	0x080057a9
 800568c:	080057a9 	.word	0x080057a9
 8005690:	08005727 	.word	0x08005727
 8005694:	080057a9 	.word	0x080057a9
 8005698:	080057a9 	.word	0x080057a9
 800569c:	080057a9 	.word	0x080057a9
 80056a0:	08005767 	.word	0x08005767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fa08 	bl	8005ac0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0208 	orr.w	r2, r2, #8
 80056be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0204 	bic.w	r2, r2, #4
 80056ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6999      	ldr	r1, [r3, #24]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	619a      	str	r2, [r3, #24]
      break;
 80056e2:	e064      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fa58 	bl	8005ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800570e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6999      	ldr	r1, [r3, #24]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	021a      	lsls	r2, r3, #8
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	619a      	str	r2, [r3, #24]
      break;
 8005724:	e043      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 faab 	bl	8005c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0208 	orr.w	r2, r2, #8
 8005740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0204 	bic.w	r2, r2, #4
 8005750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	61da      	str	r2, [r3, #28]
      break;
 8005764:	e023      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f000 faff 	bl	8005d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69d9      	ldr	r1, [r3, #28]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	021a      	lsls	r2, r3, #8
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	61da      	str	r2, [r3, #28]
      break;
 80057a6:	e002      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
      break;
 80057ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_TIM_ConfigClockSource+0x1c>
 80057d8:	2302      	movs	r3, #2
 80057da:	e0b4      	b.n	8005946 <HAL_TIM_ConfigClockSource+0x186>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80057fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005814:	d03e      	beq.n	8005894 <HAL_TIM_ConfigClockSource+0xd4>
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800581a:	f200 8087 	bhi.w	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005822:	f000 8086 	beq.w	8005932 <HAL_TIM_ConfigClockSource+0x172>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582a:	d87f      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b70      	cmp	r3, #112	@ 0x70
 800582e:	d01a      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0xa6>
 8005830:	2b70      	cmp	r3, #112	@ 0x70
 8005832:	d87b      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b60      	cmp	r3, #96	@ 0x60
 8005836:	d050      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x11a>
 8005838:	2b60      	cmp	r3, #96	@ 0x60
 800583a:	d877      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b50      	cmp	r3, #80	@ 0x50
 800583e:	d03c      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0xfa>
 8005840:	2b50      	cmp	r3, #80	@ 0x50
 8005842:	d873      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b40      	cmp	r3, #64	@ 0x40
 8005846:	d058      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x13a>
 8005848:	2b40      	cmp	r3, #64	@ 0x40
 800584a:	d86f      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b30      	cmp	r3, #48	@ 0x30
 800584e:	d064      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005850:	2b30      	cmp	r3, #48	@ 0x30
 8005852:	d86b      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d060      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005858:	2b20      	cmp	r3, #32
 800585a:	d867      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d05c      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005860:	2b10      	cmp	r3, #16
 8005862:	d05a      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15a>
 8005864:	e062      	b.n	800592c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005876:	f000 fc6b 	bl	8006150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	609a      	str	r2, [r3, #8]
      break;
 8005892:	e04f      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058a4:	f000 fc54 	bl	8006150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058b6:	609a      	str	r2, [r3, #8]
      break;
 80058b8:	e03c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c6:	461a      	mov	r2, r3
 80058c8:	f000 fb18 	bl	8005efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2150      	movs	r1, #80	@ 0x50
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fc22 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 80058d8:	e02c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e6:	461a      	mov	r2, r3
 80058e8:	f000 fb72 	bl	8005fd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2160      	movs	r1, #96	@ 0x60
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fc12 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 80058f8:	e01c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005906:	461a      	mov	r2, r3
 8005908:	f000 faf8 	bl	8005efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2140      	movs	r1, #64	@ 0x40
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fc02 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 8005918:	e00c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4619      	mov	r1, r3
 8005924:	4610      	mov	r0, r2
 8005926:	f000 fbf9 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 800592a:	e003      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      break;
 8005930:	e000      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr

08005972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3f      	ldr	r2, [pc, #252]	@ (8005a94 <TIM_Base_SetConfig+0x110>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d013      	beq.n	80059c4 <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a98 <TIM_Base_SetConfig+0x114>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00f      	beq.n	80059c4 <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059aa:	d00b      	beq.n	80059c4 <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a3b      	ldr	r2, [pc, #236]	@ (8005a9c <TIM_Base_SetConfig+0x118>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a3a      	ldr	r2, [pc, #232]	@ (8005aa0 <TIM_Base_SetConfig+0x11c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a39      	ldr	r2, [pc, #228]	@ (8005aa4 <TIM_Base_SetConfig+0x120>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d108      	bne.n	80059d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005a94 <TIM_Base_SetConfig+0x110>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d02b      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a98 <TIM_Base_SetConfig+0x114>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d027      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ec:	d023      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a9c <TIM_Base_SetConfig+0x118>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01f      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a29      	ldr	r2, [pc, #164]	@ (8005aa0 <TIM_Base_SetConfig+0x11c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01b      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a28      	ldr	r2, [pc, #160]	@ (8005aa4 <TIM_Base_SetConfig+0x120>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d017      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a27      	ldr	r2, [pc, #156]	@ (8005aa8 <TIM_Base_SetConfig+0x124>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d013      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a26      	ldr	r2, [pc, #152]	@ (8005aac <TIM_Base_SetConfig+0x128>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00f      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a25      	ldr	r2, [pc, #148]	@ (8005ab0 <TIM_Base_SetConfig+0x12c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00b      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a24      	ldr	r2, [pc, #144]	@ (8005ab4 <TIM_Base_SetConfig+0x130>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d007      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a23      	ldr	r2, [pc, #140]	@ (8005ab8 <TIM_Base_SetConfig+0x134>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d003      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a22      	ldr	r2, [pc, #136]	@ (8005abc <TIM_Base_SetConfig+0x138>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d108      	bne.n	8005a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a09      	ldr	r2, [pc, #36]	@ (8005a94 <TIM_Base_SetConfig+0x110>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_Base_SetConfig+0xf8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a08      	ldr	r2, [pc, #32]	@ (8005a98 <TIM_Base_SetConfig+0x114>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d103      	bne.n	8005a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	615a      	str	r2, [r3, #20]
}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40013400 	.word	0x40013400
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40014c00 	.word	0x40014c00
 8005aac:	40015000 	.word	0x40015000
 8005ab0:	40015400 	.word	0x40015400
 8005ab4:	40001800 	.word	0x40001800
 8005ab8:	40001c00 	.word	0x40001c00
 8005abc:	40002000 	.word	0x40002000

08005ac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	f023 0201 	bic.w	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f023 0302 	bic.w	r3, r3, #2
 8005b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a20      	ldr	r2, [pc, #128]	@ (8005b98 <TIM_OC1_SetConfig+0xd8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_OC1_SetConfig+0x64>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b9c <TIM_OC1_SetConfig+0xdc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d10c      	bne.n	8005b3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0308 	bic.w	r3, r3, #8
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f023 0304 	bic.w	r3, r3, #4
 8005b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a15      	ldr	r2, [pc, #84]	@ (8005b98 <TIM_OC1_SetConfig+0xd8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_OC1_SetConfig+0x8e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a14      	ldr	r2, [pc, #80]	@ (8005b9c <TIM_OC1_SetConfig+0xdc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d111      	bne.n	8005b72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	621a      	str	r2, [r3, #32]
}
 8005b8c:	bf00      	nop
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40013400 	.word	0x40013400

08005ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f023 0210 	bic.w	r2, r3, #16
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0320 	bic.w	r3, r3, #32
 8005bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a21      	ldr	r2, [pc, #132]	@ (8005c80 <TIM_OC2_SetConfig+0xe0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC2_SetConfig+0x68>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a20      	ldr	r2, [pc, #128]	@ (8005c84 <TIM_OC2_SetConfig+0xe4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d10d      	bne.n	8005c24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a16      	ldr	r2, [pc, #88]	@ (8005c80 <TIM_OC2_SetConfig+0xe0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC2_SetConfig+0x94>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a15      	ldr	r2, [pc, #84]	@ (8005c84 <TIM_OC2_SetConfig+0xe4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d113      	bne.n	8005c5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40013400 	.word	0x40013400

08005c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a21      	ldr	r2, [pc, #132]	@ (8005d68 <TIM_OC3_SetConfig+0xe0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_OC3_SetConfig+0x66>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a20      	ldr	r2, [pc, #128]	@ (8005d6c <TIM_OC3_SetConfig+0xe4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d10d      	bne.n	8005d0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a16      	ldr	r2, [pc, #88]	@ (8005d68 <TIM_OC3_SetConfig+0xe0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_OC3_SetConfig+0x92>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a15      	ldr	r2, [pc, #84]	@ (8005d6c <TIM_OC3_SetConfig+0xe4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d113      	bne.n	8005d42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	621a      	str	r2, [r3, #32]
}
 8005d5c:	bf00      	nop
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40013400 	.word	0x40013400

08005d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	031b      	lsls	r3, r3, #12
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a11      	ldr	r2, [pc, #68]	@ (8005e10 <TIM_OC4_SetConfig+0xa0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_OC4_SetConfig+0x68>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a10      	ldr	r2, [pc, #64]	@ (8005e14 <TIM_OC4_SetConfig+0xa4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d109      	bne.n	8005dec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	019b      	lsls	r3, r3, #6
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40013400 	.word	0x40013400

08005e18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f023 0201 	bic.w	r2, r3, #1
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a27      	ldr	r2, [pc, #156]	@ (8005ee0 <TIM_TI1_SetConfig+0xc8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01b      	beq.n	8005e7e <TIM_TI1_SetConfig+0x66>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a26      	ldr	r2, [pc, #152]	@ (8005ee4 <TIM_TI1_SetConfig+0xcc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d017      	beq.n	8005e7e <TIM_TI1_SetConfig+0x66>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e54:	d013      	beq.n	8005e7e <TIM_TI1_SetConfig+0x66>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4a23      	ldr	r2, [pc, #140]	@ (8005ee8 <TIM_TI1_SetConfig+0xd0>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00f      	beq.n	8005e7e <TIM_TI1_SetConfig+0x66>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a22      	ldr	r2, [pc, #136]	@ (8005eec <TIM_TI1_SetConfig+0xd4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00b      	beq.n	8005e7e <TIM_TI1_SetConfig+0x66>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4a21      	ldr	r2, [pc, #132]	@ (8005ef0 <TIM_TI1_SetConfig+0xd8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <TIM_TI1_SetConfig+0x66>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4a20      	ldr	r2, [pc, #128]	@ (8005ef4 <TIM_TI1_SetConfig+0xdc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_TI1_SetConfig+0x66>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a1f      	ldr	r2, [pc, #124]	@ (8005ef8 <TIM_TI1_SetConfig+0xe0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d101      	bne.n	8005e82 <TIM_TI1_SetConfig+0x6a>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <TIM_TI1_SetConfig+0x6c>
 8005e82:	2300      	movs	r3, #0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e003      	b.n	8005ea2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f023 030a 	bic.w	r3, r3, #10
 8005ebc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f003 030a 	and.w	r3, r3, #10
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bc80      	pop	{r7}
 8005ede:	4770      	bx	lr
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40013400 	.word	0x40013400
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40000c00 	.word	0x40000c00
 8005ef4:	40014c00 	.word	0x40014c00
 8005ef8:	40001800 	.word	0x40001800

08005efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f023 0201 	bic.w	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f023 030a 	bic.w	r3, r3, #10
 8005f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr

08005f58 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	f023 0210 	bic.w	r2, r3, #16
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	031b      	lsls	r3, r3, #12
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005faa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	f023 0210 	bic.w	r2, r3, #16
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	031b      	lsls	r3, r3, #12
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800600c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	621a      	str	r2, [r3, #32]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr

0800602e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800602e:	b480      	push	{r7}
 8006030:	b087      	sub	sp, #28
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	607a      	str	r2, [r7, #4]
 800603a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800606a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	b2db      	uxtb	r3, r3
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800607e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	031b      	lsls	r3, r3, #12
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	031b      	lsls	r3, r3, #12
 80060fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr

0800611c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006132:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	f043 0307 	orr.w	r3, r3, #7
 800613e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	609a      	str	r2, [r3, #8]
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr

08006150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800616a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	021a      	lsls	r2, r3, #8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	431a      	orrs	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	609a      	str	r2, [r3, #8]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr

0800618e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800618e:	b480      	push	{r7}
 8006190:	b087      	sub	sp, #28
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f003 031f 	and.w	r3, r3, #31
 80061a0:	2201      	movs	r2, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	43db      	mvns	r3, r3
 80061b0:	401a      	ands	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	fa01 f303 	lsl.w	r3, r1, r3
 80061c6:	431a      	orrs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	621a      	str	r2, [r3, #32]
}
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bc80      	pop	{r7}
 80061d4:	4770      	bx	lr
	...

080061d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e05a      	b.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a20      	ldr	r2, [pc, #128]	@ (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d022      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1e      	ldr	r2, [pc, #120]	@ (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01d      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006246:	d018      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1a      	ldr	r2, [pc, #104]	@ (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a19      	ldr	r2, [pc, #100]	@ (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a17      	ldr	r2, [pc, #92]	@ (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a16      	ldr	r2, [pc, #88]	@ (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a14      	ldr	r2, [pc, #80]	@ (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d10c      	bne.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4313      	orrs	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bc80      	pop	{r7}
 80062ae:	4770      	bx	lr
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40013400 	.word	0x40013400
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40014c00 	.word	0x40014c00
 80062c8:	40001800 	.word	0x40001800

080062cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr

080062de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e042      	b.n	8006388 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fc fb62 	bl	80029e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2224      	movs	r2, #36	@ 0x24
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 ffdf 	bl	80072f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	@ 0x28
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	4613      	mov	r3, r2
 800639e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d16d      	bne.n	800648c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_UART_Transmit+0x2c>
 80063b6:	88fb      	ldrh	r3, [r7, #6]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e066      	b.n	800648e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2221      	movs	r2, #33	@ 0x21
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ce:	f7fc fd73 	bl	8002eb8 <HAL_GetTick>
 80063d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e8:	d108      	bne.n	80063fc <HAL_UART_Transmit+0x6c>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	e003      	b.n	8006404 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006404:	e02a      	b.n	800645c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2200      	movs	r2, #0
 800640e:	2180      	movs	r1, #128	@ 0x80
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fc6e 	bl	8006cf2 <UART_WaitOnFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e036      	b.n	800648e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	3302      	adds	r3, #2
 800643a:	61bb      	str	r3, [r7, #24]
 800643c:	e007      	b.n	800644e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	781a      	ldrb	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	3301      	adds	r3, #1
 800644c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1cf      	bne.n	8006406 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2200      	movs	r2, #0
 800646e:	2140      	movs	r1, #64	@ 0x40
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 fc3e 	bl	8006cf2 <UART_WaitOnFlagUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e006      	b.n	800648e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	e000      	b.n	800648e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800648c:	2302      	movs	r3, #2
  }
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	4613      	mov	r3, r2
 80064a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d112      	bne.n	80064d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <HAL_UART_Receive_IT+0x26>
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e00b      	b.n	80064d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	461a      	mov	r2, r3
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fc7e 	bl	8006dce <UART_Start_Receive_IT>
 80064d2:	4603      	mov	r3, r0
 80064d4:	e000      	b.n	80064d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
  }
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08c      	sub	sp, #48	@ 0x30
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d14a      	bne.n	8006590 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e043      	b.n	8006592 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006516:	88fb      	ldrh	r3, [r7, #6]
 8006518:	461a      	mov	r2, r3
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fc8f 	bl	8006e40 <UART_Start_Receive_DMA>
 8006522:	4603      	mov	r3, r0
 8006524:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006528:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800652c:	2b00      	cmp	r3, #0
 800652e:	d12c      	bne.n	800658a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006534:	2b01      	cmp	r3, #1
 8006536:	d125      	bne.n	8006584 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	617b      	str	r3, [r7, #20]
   return(result);
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f043 0310 	orr.w	r3, r3, #16
 8006564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	330c      	adds	r3, #12
 800656c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800656e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006570:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	6a39      	ldr	r1, [r7, #32]
 8006574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	61fb      	str	r3, [r7, #28]
   return(result);
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e5      	bne.n	800654e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006582:	e002      	b.n	800658a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800658a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800658e:	e000      	b.n	8006592 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006590:	2302      	movs	r3, #2
  }
}
 8006592:	4618      	mov	r0, r3
 8006594:	3730      	adds	r7, #48	@ 0x30
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b0ba      	sub	sp, #232	@ 0xe8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80065da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10f      	bne.n	8006602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <HAL_UART_IRQHandler+0x66>
 80065ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fdbe 	bl	800717c <UART_Receive_IT>
      return;
 8006600:	e25b      	b.n	8006aba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 80de 	beq.w	80067c8 <HAL_UART_IRQHandler+0x22c>
 800660c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800661c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80d1 	beq.w	80067c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <HAL_UART_IRQHandler+0xae>
 8006632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006642:	f043 0201 	orr.w	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800664a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <HAL_UART_IRQHandler+0xd2>
 8006656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	f043 0202 	orr.w	r2, r3, #2
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_UART_IRQHandler+0xf6>
 800667a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668a:	f043 0204 	orr.w	r2, r3, #4
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d011      	beq.n	80066c2 <HAL_UART_IRQHandler+0x126>
 800669e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d105      	bne.n	80066b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ba:	f043 0208 	orr.w	r2, r3, #8
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 81f2 	beq.w	8006ab0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d008      	beq.n	80066ea <HAL_UART_IRQHandler+0x14e>
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fd49 	bl	800717c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bf14      	ite	ne
 80066f8:	2301      	movne	r3, #1
 80066fa:	2300      	moveq	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <HAL_UART_IRQHandler+0x17a>
 800670e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006712:	2b00      	cmp	r3, #0
 8006714:	d04f      	beq.n	80067b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fc53 	bl	8006fc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d041      	beq.n	80067ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3314      	adds	r3, #20
 8006730:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006740:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3314      	adds	r3, #20
 8006752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006756:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800675a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800676e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1d9      	bne.n	800672a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d013      	beq.n	80067a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006782:	4a7e      	ldr	r2, [pc, #504]	@ (800697c <HAL_UART_IRQHandler+0x3e0>)
 8006784:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800678a:	4618      	mov	r0, r3
 800678c:	f7fc ffe2 	bl	8003754 <HAL_DMA_Abort_IT>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d016      	beq.n	80067c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800679a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80067a0:	4610      	mov	r0, r2
 80067a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	e00e      	b.n	80067c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f99c 	bl	8006ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	e00a      	b.n	80067c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f998 	bl	8006ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b4:	e006      	b.n	80067c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f994 	bl	8006ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80067c2:	e175      	b.n	8006ab0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c4:	bf00      	nop
    return;
 80067c6:	e173      	b.n	8006ab0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	f040 814f 	bne.w	8006a70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d6:	f003 0310 	and.w	r3, r3, #16
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 8148 	beq.w	8006a70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8141 	beq.w	8006a70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60bb      	str	r3, [r7, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80b6 	beq.w	8006980 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 8145 	beq.w	8006ab4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800682e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006832:	429a      	cmp	r2, r3
 8006834:	f080 813e 	bcs.w	8006ab4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800683e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b20      	cmp	r3, #32
 8006848:	f000 8088 	beq.w	800695c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006862:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006866:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800686a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	330c      	adds	r3, #12
 8006874:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006878:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800687c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006884:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006890:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1d9      	bne.n	800684c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3314      	adds	r3, #20
 800689e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3314      	adds	r3, #20
 80068b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e1      	bne.n	8006898 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3314      	adds	r3, #20
 80068da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3314      	adds	r3, #20
 80068f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80068f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006906:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e3      	bne.n	80068d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	330c      	adds	r3, #12
 8006920:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800692a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800692c:	f023 0310 	bic.w	r3, r3, #16
 8006930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	330c      	adds	r3, #12
 800693a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800693e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006940:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006944:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800694c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e3      	bne.n	800691a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006956:	4618      	mov	r0, r3
 8006958:	f7fc fec0 	bl	80036dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800696a:	b29b      	uxth	r3, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	b29b      	uxth	r3, r3
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fb f908 	bl	8001b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006978:	e09c      	b.n	8006ab4 <HAL_UART_IRQHandler+0x518>
 800697a:	bf00      	nop
 800697c:	08007087 	.word	0x08007087
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006988:	b29b      	uxth	r3, r3
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 808e 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800699c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8089 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	330c      	adds	r3, #12
 80069ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80069ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80069cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e3      	bne.n	80069a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3314      	adds	r3, #20
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	623b      	str	r3, [r7, #32]
   return(result);
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3314      	adds	r3, #20
 80069fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a02:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e3      	bne.n	80069de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0310 	bic.w	r3, r3, #16
 8006a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	330c      	adds	r3, #12
 8006a44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006a48:	61fa      	str	r2, [r7, #28]
 8006a4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	69b9      	ldr	r1, [r7, #24]
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	617b      	str	r3, [r7, #20]
   return(result);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e3      	bne.n	8006a24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fb f88d 	bl	8001b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a6e:	e023      	b.n	8006ab8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <HAL_UART_IRQHandler+0x4f4>
 8006a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fb10 	bl	80070ae <UART_Transmit_IT>
    return;
 8006a8e:	e014      	b.n	8006aba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00e      	beq.n	8006aba <HAL_UART_IRQHandler+0x51e>
 8006a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d008      	beq.n	8006aba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fb4f 	bl	800714c <UART_EndTransmit_IT>
    return;
 8006aae:	e004      	b.n	8006aba <HAL_UART_IRQHandler+0x51e>
    return;
 8006ab0:	bf00      	nop
 8006ab2:	e002      	b.n	8006aba <HAL_UART_IRQHandler+0x51e>
      return;
 8006ab4:	bf00      	nop
 8006ab6:	e000      	b.n	8006aba <HAL_UART_IRQHandler+0x51e>
      return;
 8006ab8:	bf00      	nop
  }
}
 8006aba:	37e8      	adds	r7, #232	@ 0xe8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr

08006af6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b09c      	sub	sp, #112	@ 0x70
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b02:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d172      	bne.n	8006bf8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b14:	2200      	movs	r2, #0
 8006b16:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e5      	bne.n	8006b18 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3314      	adds	r3, #20
 8006b52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b5e:	f023 0301 	bic.w	r3, r3, #1
 8006b62:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3314      	adds	r3, #20
 8006b6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b6c:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b6e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e5      	bne.n	8006b4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3314      	adds	r3, #20
 8006b86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b96:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3314      	adds	r3, #20
 8006b9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ba0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e5      	bne.n	8006b80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d119      	bne.n	8006bf8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0310 	bic.w	r3, r3, #16
 8006bda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006be4:	61fa      	str	r2, [r7, #28]
 8006be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	69b9      	ldr	r1, [r7, #24]
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e5      	bne.n	8006bc4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d106      	bne.n	8006c14 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c0e:	f7fa ffbb 	bl	8001b88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c12:	e002      	b.n	8006c1a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006c14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c16:	f7fa ffa5 	bl	8001b64 <HAL_UART_RxCpltCallback>
}
 8006c1a:	bf00      	nop
 8006c1c:	3770      	adds	r7, #112	@ 0x70
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d108      	bne.n	8006c50 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4619      	mov	r1, r3
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7fa ff9d 	bl	8001b88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c4e:	e002      	b.n	8006c56 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7ff ff3e 	bl	8006ad2 <HAL_UART_RxHalfCpltCallback>
}
 8006c56:	bf00      	nop
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bf14      	ite	ne
 8006c7e:	2301      	movne	r3, #1
 8006c80:	2300      	moveq	r3, #0
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b21      	cmp	r3, #33	@ 0x21
 8006c90:	d108      	bne.n	8006ca4 <UART_DMAError+0x46>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006c9e:	68b8      	ldr	r0, [r7, #8]
 8006ca0:	f000 f968 	bl	8006f74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bf14      	ite	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b22      	cmp	r3, #34	@ 0x22
 8006cc4:	d108      	bne.n	8006cd8 <UART_DMAError+0x7a>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006cd2:	68b8      	ldr	r0, [r7, #8]
 8006cd4:	f000 f975 	bl	8006fc2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cdc:	f043 0210 	orr.w	r2, r3, #16
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ce4:	68b8      	ldr	r0, [r7, #8]
 8006ce6:	f7ff fefd 	bl	8006ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b090      	sub	sp, #64	@ 0x40
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d02:	e050      	b.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0a:	d04c      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d12:	f7fc f8d1 	bl	8002eb8 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d241      	bcs.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d42:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d44:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	613b      	str	r3, [r7, #16]
   return(result);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3314      	adds	r3, #20
 8006d74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d76:	623a      	str	r2, [r7, #32]
 8006d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	69f9      	ldr	r1, [r7, #28]
 8006d7c:	6a3a      	ldr	r2, [r7, #32]
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e5      	bne.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e00f      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4013      	ands	r3, r2
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d09f      	beq.n	8006d04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3740      	adds	r7, #64	@ 0x40
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	88fa      	ldrh	r2, [r7, #6]
 8006de6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2222      	movs	r2, #34	@ 0x22
 8006df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e12:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0220 	orr.w	r2, r2, #32
 8006e32:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr

08006e40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b098      	sub	sp, #96	@ 0x60
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	88fa      	ldrh	r2, [r7, #6]
 8006e58:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2222      	movs	r2, #34	@ 0x22
 8006e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f68 <UART_Start_Receive_DMA+0x128>)
 8006e6e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e74:	4a3d      	ldr	r2, [pc, #244]	@ (8006f6c <UART_Start_Receive_DMA+0x12c>)
 8006e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8006f70 <UART_Start_Receive_DMA+0x130>)
 8006e7e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e84:	2200      	movs	r2, #0
 8006e86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006e88:	f107 0308 	add.w	r3, r7, #8
 8006e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	f7fc fbbc 	bl	800361c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d019      	beq.n	8006ef6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	330c      	adds	r3, #12
 8006ec8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	330c      	adds	r3, #12
 8006ee0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ee2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e5      	bne.n	8006ec2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3314      	adds	r3, #20
 8006efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3314      	adds	r3, #20
 8006f14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f16:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006f18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e5      	bne.n	8006ef6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3314      	adds	r3, #20
 8006f30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	617b      	str	r3, [r7, #20]
   return(result);
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f40:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3314      	adds	r3, #20
 8006f48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6a39      	ldr	r1, [r7, #32]
 8006f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e5      	bne.n	8006f2a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3760      	adds	r7, #96	@ 0x60
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	08006af7 	.word	0x08006af7
 8006f6c:	08006c23 	.word	0x08006c23
 8006f70:	08006c5f 	.word	0x08006c5f

08006f74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b089      	sub	sp, #36	@ 0x24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	330c      	adds	r3, #12
 8006f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006f92:	61fb      	str	r3, [r7, #28]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	61ba      	str	r2, [r7, #24]
 8006f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6979      	ldr	r1, [r7, #20]
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e5      	bne.n	8006f7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006fb8:	bf00      	nop
 8006fba:	3724      	adds	r7, #36	@ 0x24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bc80      	pop	{r7}
 8006fc0:	4770      	bx	lr

08006fc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b095      	sub	sp, #84	@ 0x54
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	330c      	adds	r3, #12
 8006fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	330c      	adds	r3, #12
 8006fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fea:	643a      	str	r2, [r7, #64]	@ 0x40
 8006fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e5      	bne.n	8006fca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3314      	adds	r3, #20
 8007004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	61fb      	str	r3, [r7, #28]
   return(result);
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	f023 0301 	bic.w	r3, r3, #1
 8007014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3314      	adds	r3, #20
 800701c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800701e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007020:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e5      	bne.n	8006ffe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007036:	2b01      	cmp	r3, #1
 8007038:	d119      	bne.n	800706e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	330c      	adds	r3, #12
 8007040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	60bb      	str	r3, [r7, #8]
   return(result);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f023 0310 	bic.w	r3, r3, #16
 8007050:	647b      	str	r3, [r7, #68]	@ 0x44
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800705a:	61ba      	str	r2, [r7, #24]
 800705c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6979      	ldr	r1, [r7, #20]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	613b      	str	r3, [r7, #16]
   return(result);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e5      	bne.n	800703a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800707c:	bf00      	nop
 800707e:	3754      	adds	r7, #84	@ 0x54
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr

08007086 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7ff fd1f 	bl	8006ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b21      	cmp	r3, #33	@ 0x21
 80070c0:	d13e      	bne.n	8007140 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ca:	d114      	bne.n	80070f6 <UART_Transmit_IT+0x48>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d110      	bne.n	80070f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	1c9a      	adds	r2, r3, #2
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	621a      	str	r2, [r3, #32]
 80070f4:	e008      	b.n	8007108 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	1c59      	adds	r1, r3, #1
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6211      	str	r1, [r2, #32]
 8007100:	781a      	ldrb	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29b      	uxth	r3, r3
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4619      	mov	r1, r3
 8007116:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10f      	bne.n	800713c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800712a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800713a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	e000      	b.n	8007142 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
  }
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007162:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff fca7 	bl	8006ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08c      	sub	sp, #48	@ 0x30
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b22      	cmp	r3, #34	@ 0x22
 800718e:	f040 80ae 	bne.w	80072ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800719a:	d117      	bne.n	80071cc <UART_Receive_IT+0x50>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d113      	bne.n	80071cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c4:	1c9a      	adds	r2, r3, #2
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80071ca:	e026      	b.n	800721a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071de:	d007      	beq.n	80071f0 <UART_Receive_IT+0x74>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <UART_Receive_IT+0x82>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d106      	bne.n	80071fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	e008      	b.n	8007210 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800720a:	b2da      	uxtb	r2, r3
 800720c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29b      	uxth	r3, r3
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	4619      	mov	r1, r3
 8007228:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800722a:	2b00      	cmp	r3, #0
 800722c:	d15d      	bne.n	80072ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0220 	bic.w	r2, r2, #32
 800723c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800724c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695a      	ldr	r2, [r3, #20]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0201 	bic.w	r2, r2, #1
 800725c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007270:	2b01      	cmp	r3, #1
 8007272:	d135      	bne.n	80072e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	330c      	adds	r3, #12
 8007280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	613b      	str	r3, [r7, #16]
   return(result);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f023 0310 	bic.w	r3, r3, #16
 8007290:	627b      	str	r3, [r7, #36]	@ 0x24
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800729a:	623a      	str	r2, [r7, #32]
 800729c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	69f9      	ldr	r1, [r7, #28]
 80072a0:	6a3a      	ldr	r2, [r7, #32]
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e5      	bne.n	800727a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	d10a      	bne.n	80072d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7fa fc55 	bl	8001b88 <HAL_UARTEx_RxEventCallback>
 80072de:	e002      	b.n	80072e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7fa fc3f 	bl	8001b64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	e002      	b.n	80072f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e000      	b.n	80072f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80072ee:	2302      	movs	r3, #2
  }
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3730      	adds	r7, #48	@ 0x30
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007332:	f023 030c 	bic.w	r3, r3, #12
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	430b      	orrs	r3, r1
 800733e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a2c      	ldr	r2, [pc, #176]	@ (800740c <UART_SetConfig+0x114>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d103      	bne.n	8007368 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007360:	f7fd fc52 	bl	8004c08 <HAL_RCC_GetPCLK2Freq>
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	e002      	b.n	800736e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007368:	f7fd fc3a 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 800736c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009a      	lsls	r2, r3, #2
 8007378:	441a      	add	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	fbb2 f3f3 	udiv	r3, r2, r3
 8007384:	4a22      	ldr	r2, [pc, #136]	@ (8007410 <UART_SetConfig+0x118>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	0119      	lsls	r1, r3, #4
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009a      	lsls	r2, r3, #2
 8007398:	441a      	add	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80073a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007410 <UART_SetConfig+0x118>)
 80073a6:	fba3 0302 	umull	r0, r3, r3, r2
 80073aa:	095b      	lsrs	r3, r3, #5
 80073ac:	2064      	movs	r0, #100	@ 0x64
 80073ae:	fb00 f303 	mul.w	r3, r0, r3
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	3332      	adds	r3, #50	@ 0x32
 80073b8:	4a15      	ldr	r2, [pc, #84]	@ (8007410 <UART_SetConfig+0x118>)
 80073ba:	fba2 2303 	umull	r2, r3, r2, r3
 80073be:	095b      	lsrs	r3, r3, #5
 80073c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073c4:	4419      	add	r1, r3
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009a      	lsls	r2, r3, #2
 80073d0:	441a      	add	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80073dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007410 <UART_SetConfig+0x118>)
 80073de:	fba3 0302 	umull	r0, r3, r3, r2
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	2064      	movs	r0, #100	@ 0x64
 80073e6:	fb00 f303 	mul.w	r3, r0, r3
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	3332      	adds	r3, #50	@ 0x32
 80073f0:	4a07      	ldr	r2, [pc, #28]	@ (8007410 <UART_SetConfig+0x118>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	f003 020f 	and.w	r2, r3, #15
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	440a      	add	r2, r1
 8007402:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40013800 	.word	0x40013800
 8007410:	51eb851f 	.word	0x51eb851f

08007414 <lower_communite_init>:
static CMD_HEAD_IMPROVE_t head_up_cache;
static CMD_HEAD_IMPROVE_t head_low_cache;

static uint32_t book_index_ack;

void lower_communite_init(void) { registCallback(EVENT_LowSend, low_send); }
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
 8007418:	4902      	ldr	r1, [pc, #8]	@ (8007424 <lower_communite_init+0x10>)
 800741a:	2003      	movs	r0, #3
 800741c:	f002 fcb0 	bl	8009d80 <registCallback>
 8007420:	bf00      	nop
 8007422:	bd80      	pop	{r7, pc}
 8007424:	08007ab5 	.word	0x08007ab5

08007428 <CRC16_Calculate>:

static uint16_t CRC16_Calculate(uint8_t* data, uint8_t len) {
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 8007434:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007438:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 800743e:	2300      	movs	r3, #0
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	e022      	b.n	800748a <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	4413      	add	r3, r2
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	8afb      	ldrh	r3, [r7, #22]
 8007450:	4053      	eors	r3, r2
 8007452:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	e011      	b.n	800747e <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 800745a:	8afb      	ldrh	r3, [r7, #22]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d006      	beq.n	8007472 <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 8007464:	8afb      	ldrh	r3, [r7, #22]
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	4b10      	ldr	r3, [pc, #64]	@ (80074ac <CRC16_Calculate+0x84>)
 800746c:	4053      	eors	r3, r2
 800746e:	82fb      	strh	r3, [r7, #22]
 8007470:	e002      	b.n	8007478 <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 8007472:	8afb      	ldrh	r3, [r7, #22]
 8007474:	085b      	lsrs	r3, r3, #1
 8007476:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3301      	adds	r3, #1
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b07      	cmp	r3, #7
 8007482:	ddea      	ble.n	800745a <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	3301      	adds	r3, #1
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	429a      	cmp	r2, r3
 8007490:	dbd8      	blt.n	8007444 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 8007492:	f7fb fd11 	bl	8002eb8 <HAL_GetTick>
 8007496:	4601      	mov	r1, r0
 8007498:	8afb      	ldrh	r3, [r7, #22]
 800749a:	4a05      	ldr	r2, [pc, #20]	@ (80074b0 <CRC16_Calculate+0x88>)
 800749c:	4805      	ldr	r0, [pc, #20]	@ (80074b4 <CRC16_Calculate+0x8c>)
 800749e:	f002 fddf 	bl	800a060 <iprintf>
  return crc16;
 80074a2:	8afb      	ldrh	r3, [r7, #22]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	ffffa001 	.word	0xffffa001
 80074b0:	0800bb9c 	.word	0x0800bb9c
 80074b4:	0800ae54 	.word	0x0800ae54

080074b8 <notify_low_send_push>:

void notify_low_send_push(uint8_t cmd, uint8_t len, uint8_t* p_data, LOWER_NOTION notion) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	603a      	str	r2, [r7, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	71fb      	strb	r3, [r7, #7]
 80074c6:	460b      	mov	r3, r1
 80074c8:	71bb      	strb	r3, [r7, #6]
 80074ca:	4613      	mov	r3, r2
 80074cc:	717b      	strb	r3, [r7, #5]
  if ((notify_low_send_head + 1) % QUEUE_NUM == notify_low_send_tail) {
 80074ce:	4b2b      	ldr	r3, [pc, #172]	@ (800757c <notify_low_send_push+0xc4>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	425a      	negs	r2, r3
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	f002 020f 	and.w	r2, r2, #15
 80074de:	bf58      	it	pl
 80074e0:	4253      	negpl	r3, r2
 80074e2:	4a27      	ldr	r2, [pc, #156]	@ (8007580 <notify_low_send_push+0xc8>)
 80074e4:	7812      	ldrb	r2, [r2, #0]
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d108      	bne.n	80074fc <notify_low_send_push+0x44>
    LOGW("notify low queue full");
 80074ea:	f7fb fce5 	bl	8002eb8 <HAL_GetTick>
 80074ee:	4603      	mov	r3, r0
 80074f0:	4a24      	ldr	r2, [pc, #144]	@ (8007584 <notify_low_send_push+0xcc>)
 80074f2:	4619      	mov	r1, r3
 80074f4:	4824      	ldr	r0, [pc, #144]	@ (8007588 <notify_low_send_push+0xd0>)
 80074f6:	f002 fdb3 	bl	800a060 <iprintf>
    return;
 80074fa:	e03c      	b.n	8007576 <notify_low_send_push+0xbe>
  }
  Notion_t* p_notion = &notify_low_queue_send[notify_low_send_head];
 80074fc:	4b1f      	ldr	r3, [pc, #124]	@ (800757c <notify_low_send_push+0xc4>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	4613      	mov	r3, r2
 8007504:	019b      	lsls	r3, r3, #6
 8007506:	4413      	add	r3, r2
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	4413      	add	r3, r2
 800750c:	4a1f      	ldr	r2, [pc, #124]	@ (800758c <notify_low_send_push+0xd4>)
 800750e:	4413      	add	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  p_notion->cmd_head = cmd;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	79fa      	ldrb	r2, [r7, #7]
 8007516:	705a      	strb	r2, [r3, #1]

  if (len != 0) {
 8007518:	79bb      	ldrb	r3, [r7, #6]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d012      	beq.n	8007544 <notify_low_send_push+0x8c>
    memcpy(p_notion->data_regeion, p_data, len - 3);  // 3 == 1 + 2  1 == 帧尾  2 == crc16;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	1cd8      	adds	r0, r3, #3
 8007522:	79bb      	ldrb	r3, [r7, #6]
 8007524:	3b03      	subs	r3, #3
 8007526:	461a      	mov	r2, r3
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	f002 fe6a 	bl	800a202 <memcpy>
    p_notion->len = len;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	79ba      	ldrb	r2, [r7, #6]
 8007532:	709a      	strb	r2, [r3, #2]
    LOGI("len is %02x", len);
 8007534:	f7fb fcc0 	bl	8002eb8 <HAL_GetTick>
 8007538:	4601      	mov	r1, r0
 800753a:	79bb      	ldrb	r3, [r7, #6]
 800753c:	4a11      	ldr	r2, [pc, #68]	@ (8007584 <notify_low_send_push+0xcc>)
 800753e:	4814      	ldr	r0, [pc, #80]	@ (8007590 <notify_low_send_push+0xd8>)
 8007540:	f002 fd8e 	bl	800a060 <iprintf>
  }
  p_notion->state      = notion;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	797a      	ldrb	r2, [r7, #5]
 8007548:	701a      	strb	r2, [r3, #0]
  notify_low_send_head = (notify_low_send_head + 1) % QUEUE_NUM;
 800754a:	4b0c      	ldr	r3, [pc, #48]	@ (800757c <notify_low_send_push+0xc4>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	425a      	negs	r2, r3
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	f002 020f 	and.w	r2, r2, #15
 800755a:	bf58      	it	pl
 800755c:	4253      	negpl	r3, r2
 800755e:	b2da      	uxtb	r2, r3
 8007560:	4b06      	ldr	r3, [pc, #24]	@ (800757c <notify_low_send_push+0xc4>)
 8007562:	701a      	strb	r2, [r3, #0]

  // for (int i = 0; i < len; i++) {
  //   LOGI("%02x", p_data[i]);
  // }
  LOGI("low push success cmd %02x", p_notion->cmd_head);
 8007564:	f7fb fca8 	bl	8002eb8 <HAL_GetTick>
 8007568:	4601      	mov	r1, r0
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	4a05      	ldr	r2, [pc, #20]	@ (8007584 <notify_low_send_push+0xcc>)
 8007570:	4808      	ldr	r0, [pc, #32]	@ (8007594 <notify_low_send_push+0xdc>)
 8007572:	f002 fd75 	bl	800a060 <iprintf>
}
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	20000dac 	.word	0x20000dac
 8007580:	20000dad 	.word	0x20000dad
 8007584:	0800bbac 	.word	0x0800bbac
 8007588:	0800ae7c 	.word	0x0800ae7c
 800758c:	2000057c 	.word	0x2000057c
 8007590:	0800aeb0 	.word	0x0800aeb0
 8007594:	0800aed8 	.word	0x0800aed8

08007598 <notify_low_send_pop>:

Notion_t notify_low_send_pop(void) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b0a4      	sub	sp, #144	@ 0x90
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  Notion_t notion = {.state = kEmpty};
 80075a0:	f107 030c 	add.w	r3, r7, #12
 80075a4:	2283      	movs	r2, #131	@ 0x83
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f002 fdae 	bl	800a10a <memset>
  if (notify_low_send_tail == notify_low_send_head) {
 80075ae:	4b20      	ldr	r3, [pc, #128]	@ (8007630 <notify_low_send_pop+0x98>)
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	4b20      	ldr	r3, [pc, #128]	@ (8007634 <notify_low_send_pop+0x9c>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d108      	bne.n	80075cc <notify_low_send_pop+0x34>
    // LOGW("notify low queue empty");
    return notion;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	f107 030c 	add.w	r3, r7, #12
 80075c2:	2283      	movs	r2, #131	@ 0x83
 80075c4:	4619      	mov	r1, r3
 80075c6:	f002 fe1c 	bl	800a202 <memcpy>
 80075ca:	e02d      	b.n	8007628 <notify_low_send_pop+0x90>
  }

  notion               = notify_low_queue_send[notify_low_send_tail];
 80075cc:	4b18      	ldr	r3, [pc, #96]	@ (8007630 <notify_low_send_pop+0x98>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	4919      	ldr	r1, [pc, #100]	@ (8007638 <notify_low_send_pop+0xa0>)
 80075d4:	4613      	mov	r3, r2
 80075d6:	019b      	lsls	r3, r3, #6
 80075d8:	4413      	add	r3, r2
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	4413      	add	r3, r2
 80075de:	18ca      	adds	r2, r1, r3
 80075e0:	f107 030c 	add.w	r3, r7, #12
 80075e4:	4611      	mov	r1, r2
 80075e6:	2283      	movs	r2, #131	@ 0x83
 80075e8:	4618      	mov	r0, r3
 80075ea:	f002 fe0a 	bl	800a202 <memcpy>
  notify_low_send_tail = (notify_low_send_tail + 1) % QUEUE_NUM;
 80075ee:	4b10      	ldr	r3, [pc, #64]	@ (8007630 <notify_low_send_pop+0x98>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	425a      	negs	r2, r3
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	f002 020f 	and.w	r2, r2, #15
 80075fe:	bf58      	it	pl
 8007600:	4253      	negpl	r3, r2
 8007602:	b2da      	uxtb	r2, r3
 8007604:	4b0a      	ldr	r3, [pc, #40]	@ (8007630 <notify_low_send_pop+0x98>)
 8007606:	701a      	strb	r2, [r3, #0]

  LOGW("notify pop success state is : %02x", notion.state);
 8007608:	f7fb fc56 	bl	8002eb8 <HAL_GetTick>
 800760c:	4601      	mov	r1, r0
 800760e:	7b3b      	ldrb	r3, [r7, #12]
 8007610:	4a0a      	ldr	r2, [pc, #40]	@ (800763c <notify_low_send_pop+0xa4>)
 8007612:	480b      	ldr	r0, [pc, #44]	@ (8007640 <notify_low_send_pop+0xa8>)
 8007614:	f002 fd24 	bl	800a060 <iprintf>
  return notion;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4618      	mov	r0, r3
 800761c:	f107 030c 	add.w	r3, r7, #12
 8007620:	2283      	movs	r2, #131	@ 0x83
 8007622:	4619      	mov	r1, r3
 8007624:	f002 fded 	bl	800a202 <memcpy>
}
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	3790      	adds	r7, #144	@ 0x90
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000dad 	.word	0x20000dad
 8007634:	20000dac 	.word	0x20000dac
 8007638:	2000057c 	.word	0x2000057c
 800763c:	0800bbc4 	.word	0x0800bbc4
 8007640:	0800af10 	.word	0x0800af10

08007644 <notify_low_recv_push>:

void notify_low_recv_push(uint8_t cmd, uint8_t len, uint8_t* p_data, LOWER_NOTION notion) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	603a      	str	r2, [r7, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	4603      	mov	r3, r0
 8007650:	71fb      	strb	r3, [r7, #7]
 8007652:	460b      	mov	r3, r1
 8007654:	71bb      	strb	r3, [r7, #6]
 8007656:	4613      	mov	r3, r2
 8007658:	717b      	strb	r3, [r7, #5]
  if ((notify_low_recv_head + 1) % QUEUE_NUM == notify_low_recv_tail) {
 800765a:	4b27      	ldr	r3, [pc, #156]	@ (80076f8 <notify_low_recv_push+0xb4>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	3301      	adds	r3, #1
 8007660:	425a      	negs	r2, r3
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	f002 020f 	and.w	r2, r2, #15
 800766a:	bf58      	it	pl
 800766c:	4253      	negpl	r3, r2
 800766e:	4a23      	ldr	r2, [pc, #140]	@ (80076fc <notify_low_recv_push+0xb8>)
 8007670:	7812      	ldrb	r2, [r2, #0]
 8007672:	4293      	cmp	r3, r2
 8007674:	d108      	bne.n	8007688 <notify_low_recv_push+0x44>
    LOGW("notify low queue full");
 8007676:	f7fb fc1f 	bl	8002eb8 <HAL_GetTick>
 800767a:	4603      	mov	r3, r0
 800767c:	4a20      	ldr	r2, [pc, #128]	@ (8007700 <notify_low_recv_push+0xbc>)
 800767e:	4619      	mov	r1, r3
 8007680:	4820      	ldr	r0, [pc, #128]	@ (8007704 <notify_low_recv_push+0xc0>)
 8007682:	f002 fced 	bl	800a060 <iprintf>
    return;
 8007686:	e034      	b.n	80076f2 <notify_low_recv_push+0xae>
  }
  Notion_t* p_notion = &notify_low_queue_recv[notify_low_recv_head];
 8007688:	4b1b      	ldr	r3, [pc, #108]	@ (80076f8 <notify_low_recv_push+0xb4>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	4613      	mov	r3, r2
 8007690:	019b      	lsls	r3, r3, #6
 8007692:	4413      	add	r3, r2
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	4413      	add	r3, r2
 8007698:	4a1b      	ldr	r2, [pc, #108]	@ (8007708 <notify_low_recv_push+0xc4>)
 800769a:	4413      	add	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]

  p_notion->cmd_head = cmd;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	79fa      	ldrb	r2, [r7, #7]
 80076a2:	705a      	strb	r2, [r3, #1]

  if (len != 0) {
 80076a4:	79bb      	ldrb	r3, [r7, #6]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <notify_low_recv_push+0x7c>
    memcpy(p_notion->data_regeion, p_data, len - 3);  // 3 == 1 + 2  1 == 帧尾  2 == crc16;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1cd8      	adds	r0, r3, #3
 80076ae:	79bb      	ldrb	r3, [r7, #6]
 80076b0:	3b03      	subs	r3, #3
 80076b2:	461a      	mov	r2, r3
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	f002 fda4 	bl	800a202 <memcpy>
    p_notion->len = len;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	79ba      	ldrb	r2, [r7, #6]
 80076be:	709a      	strb	r2, [r3, #2]
  }
  p_notion->state      = notion;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	797a      	ldrb	r2, [r7, #5]
 80076c4:	701a      	strb	r2, [r3, #0]
  notify_low_recv_head = (notify_low_recv_head + 1) % QUEUE_NUM;
 80076c6:	4b0c      	ldr	r3, [pc, #48]	@ (80076f8 <notify_low_recv_push+0xb4>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	3301      	adds	r3, #1
 80076cc:	425a      	negs	r2, r3
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	f002 020f 	and.w	r2, r2, #15
 80076d6:	bf58      	it	pl
 80076d8:	4253      	negpl	r3, r2
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	4b06      	ldr	r3, [pc, #24]	@ (80076f8 <notify_low_recv_push+0xb4>)
 80076de:	701a      	strb	r2, [r3, #0]

  // for (int i = 0; i < len; i++) {
  //   LOGI("%02x", p_data[i]);
  // }
  LOGI("low recv push success cmd %02x", p_notion->cmd_head);
 80076e0:	f7fb fbea 	bl	8002eb8 <HAL_GetTick>
 80076e4:	4601      	mov	r1, r0
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	785b      	ldrb	r3, [r3, #1]
 80076ea:	4a05      	ldr	r2, [pc, #20]	@ (8007700 <notify_low_recv_push+0xbc>)
 80076ec:	4807      	ldr	r0, [pc, #28]	@ (800770c <notify_low_recv_push+0xc8>)
 80076ee:	f002 fcb7 	bl	800a060 <iprintf>
}
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	200015e0 	.word	0x200015e0
 80076fc:	200015e1 	.word	0x200015e1
 8007700:	0800bbd8 	.word	0x0800bbd8
 8007704:	0800ae7c 	.word	0x0800ae7c
 8007708:	20000db0 	.word	0x20000db0
 800770c:	0800af50 	.word	0x0800af50

08007710 <notify_low_recv_pop>:

Notion_t notify_low_recv_pop(void) {
 8007710:	b580      	push	{r7, lr}
 8007712:	b0a4      	sub	sp, #144	@ 0x90
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  Notion_t notion = {.state = kEmpty};
 8007718:	f107 030c 	add.w	r3, r7, #12
 800771c:	2283      	movs	r2, #131	@ 0x83
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f002 fcf2 	bl	800a10a <memset>
  if (notify_low_recv_tail == notify_low_recv_head) {
 8007726:	4b20      	ldr	r3, [pc, #128]	@ (80077a8 <notify_low_recv_pop+0x98>)
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	4b20      	ldr	r3, [pc, #128]	@ (80077ac <notify_low_recv_pop+0x9c>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d108      	bne.n	8007744 <notify_low_recv_pop+0x34>
    // LOGW("notify low queue empty");
    return notion;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	f107 030c 	add.w	r3, r7, #12
 800773a:	2283      	movs	r2, #131	@ 0x83
 800773c:	4619      	mov	r1, r3
 800773e:	f002 fd60 	bl	800a202 <memcpy>
 8007742:	e02d      	b.n	80077a0 <notify_low_recv_pop+0x90>
  }

  notion               = notify_low_queue_recv[notify_low_recv_tail];
 8007744:	4b18      	ldr	r3, [pc, #96]	@ (80077a8 <notify_low_recv_pop+0x98>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	4919      	ldr	r1, [pc, #100]	@ (80077b0 <notify_low_recv_pop+0xa0>)
 800774c:	4613      	mov	r3, r2
 800774e:	019b      	lsls	r3, r3, #6
 8007750:	4413      	add	r3, r2
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	4413      	add	r3, r2
 8007756:	18ca      	adds	r2, r1, r3
 8007758:	f107 030c 	add.w	r3, r7, #12
 800775c:	4611      	mov	r1, r2
 800775e:	2283      	movs	r2, #131	@ 0x83
 8007760:	4618      	mov	r0, r3
 8007762:	f002 fd4e 	bl	800a202 <memcpy>
  notify_low_recv_tail = (notify_low_recv_tail + 1) % QUEUE_NUM;
 8007766:	4b10      	ldr	r3, [pc, #64]	@ (80077a8 <notify_low_recv_pop+0x98>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	3301      	adds	r3, #1
 800776c:	425a      	negs	r2, r3
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	f002 020f 	and.w	r2, r2, #15
 8007776:	bf58      	it	pl
 8007778:	4253      	negpl	r3, r2
 800777a:	b2da      	uxtb	r2, r3
 800777c:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <notify_low_recv_pop+0x98>)
 800777e:	701a      	strb	r2, [r3, #0]

  LOGW("notify pop success state is : %02x", notion.state);
 8007780:	f7fb fb9a 	bl	8002eb8 <HAL_GetTick>
 8007784:	4601      	mov	r1, r0
 8007786:	7b3b      	ldrb	r3, [r7, #12]
 8007788:	4a0a      	ldr	r2, [pc, #40]	@ (80077b4 <notify_low_recv_pop+0xa4>)
 800778a:	480b      	ldr	r0, [pc, #44]	@ (80077b8 <notify_low_recv_pop+0xa8>)
 800778c:	f002 fc68 	bl	800a060 <iprintf>
  return notion;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4618      	mov	r0, r3
 8007794:	f107 030c 	add.w	r3, r7, #12
 8007798:	2283      	movs	r2, #131	@ 0x83
 800779a:	4619      	mov	r1, r3
 800779c:	f002 fd31 	bl	800a202 <memcpy>
}
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	3790      	adds	r7, #144	@ 0x90
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	200015e1 	.word	0x200015e1
 80077ac:	200015e0 	.word	0x200015e0
 80077b0:	20000db0 	.word	0x20000db0
 80077b4:	0800bbf0 	.word	0x0800bbf0
 80077b8:	0800af10 	.word	0x0800af10

080077bc <_send_lower>:
/// @brief send to lower computer message
/// @param cmd
/// @param tail_len  message length = head_len + tail_len
/// @param data     data region
/// @param data_len data region size
void _send_lower(ENUM_CMD_UPPER_t cmd, uint8_t tail_len, void* data, uint8_t data_size) {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	603a      	str	r2, [r7, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
 80077ca:	460b      	mov	r3, r1
 80077cc:	71bb      	strb	r3, [r7, #6]
 80077ce:	4613      	mov	r3, r2
 80077d0:	717b      	strb	r3, [r7, #5]
  CMD_HEAD_IMPROVE_t* p_head   = (CMD_HEAD_IMPROVE_t*)send_buf;
 80077d2:	4b3b      	ldr	r3, [pc, #236]	@ (80078c0 <_send_lower+0x104>)
 80077d4:	60fb      	str	r3, [r7, #12]
  uint8_t             head_len = sizeof(CMD_HEAD_IMPROVE_t);
 80077d6:	2305      	movs	r3, #5
 80077d8:	72fb      	strb	r3, [r7, #11]
  uint16_t            crc16;
  p_head->head   = 0xd0;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	22d0      	movs	r2, #208	@ 0xd0
 80077de:	701a      	strb	r2, [r3, #0]
  p_head->cmd    = (uint8_t)cmd;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	79fa      	ldrb	r2, [r7, #7]
 80077e4:	705a      	strb	r2, [r3, #1]
  p_head->encord = 0x01;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2201      	movs	r2, #1
 80077ea:	709a      	strb	r2, [r3, #2]
  p_head->addr   = 0x0b;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	220b      	movs	r2, #11
 80077f0:	70da      	strb	r2, [r3, #3]
  p_head->len    = tail_len;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	79ba      	ldrb	r2, [r7, #6]
 80077f6:	711a      	strb	r2, [r3, #4]
  // p_head->empty  = 0x00;

  for (int i = 0; i < sizeof(CMD_HEAD_IMPROVE_t); i++) {
 80077f8:	2300      	movs	r3, #0
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	e00d      	b.n	800781a <_send_lower+0x5e>
    LOGI("%02x", send_buf[i]);
 80077fe:	f7fb fb5b 	bl	8002eb8 <HAL_GetTick>
 8007802:	4601      	mov	r1, r0
 8007804:	4a2e      	ldr	r2, [pc, #184]	@ (80078c0 <_send_lower+0x104>)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	4413      	add	r3, r2
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	4a2d      	ldr	r2, [pc, #180]	@ (80078c4 <_send_lower+0x108>)
 800780e:	482e      	ldr	r0, [pc, #184]	@ (80078c8 <_send_lower+0x10c>)
 8007810:	f002 fc26 	bl	800a060 <iprintf>
  for (int i = 0; i < sizeof(CMD_HEAD_IMPROVE_t); i++) {
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	3301      	adds	r3, #1
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b04      	cmp	r3, #4
 800781e:	d9ee      	bls.n	80077fe <_send_lower+0x42>
  }

  memcpy(&send_buf[head_len], (uint8_t*)data, data_size);
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	4a27      	ldr	r2, [pc, #156]	@ (80078c0 <_send_lower+0x104>)
 8007824:	4413      	add	r3, r2
 8007826:	797a      	ldrb	r2, [r7, #5]
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f002 fce9 	bl	800a202 <memcpy>
  send_len           = head_len + data_size;
 8007830:	7afa      	ldrb	r2, [r7, #11]
 8007832:	797b      	ldrb	r3, [r7, #5]
 8007834:	4413      	add	r3, r2
 8007836:	b2da      	uxtb	r2, r3
 8007838:	4b24      	ldr	r3, [pc, #144]	@ (80078cc <_send_lower+0x110>)
 800783a:	701a      	strb	r2, [r3, #0]
  send_buf[send_len] = 0xd1;
 800783c:	4b23      	ldr	r3, [pc, #140]	@ (80078cc <_send_lower+0x110>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	4b1f      	ldr	r3, [pc, #124]	@ (80078c0 <_send_lower+0x104>)
 8007844:	21d1      	movs	r1, #209	@ 0xd1
 8007846:	5499      	strb	r1, [r3, r2]
  send_len += 1;
 8007848:	4b20      	ldr	r3, [pc, #128]	@ (80078cc <_send_lower+0x110>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	b2da      	uxtb	r2, r3
 8007850:	4b1e      	ldr	r3, [pc, #120]	@ (80078cc <_send_lower+0x110>)
 8007852:	701a      	strb	r2, [r3, #0]

  crc16 = CRC16_Calculate(send_buf, send_len);
 8007854:	4b1d      	ldr	r3, [pc, #116]	@ (80078cc <_send_lower+0x110>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	4619      	mov	r1, r3
 800785a:	4819      	ldr	r0, [pc, #100]	@ (80078c0 <_send_lower+0x104>)
 800785c:	f7ff fde4 	bl	8007428 <CRC16_Calculate>
 8007860:	4603      	mov	r3, r0
 8007862:	813b      	strh	r3, [r7, #8]
  memcpy(&send_buf[send_len], &crc16, sizeof(uint16_t));
 8007864:	4b19      	ldr	r3, [pc, #100]	@ (80078cc <_send_lower+0x110>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	4b15      	ldr	r3, [pc, #84]	@ (80078c0 <_send_lower+0x104>)
 800786c:	4413      	add	r3, r2
 800786e:	893a      	ldrh	r2, [r7, #8]
 8007870:	801a      	strh	r2, [r3, #0]
  send_len += 2;
 8007872:	4b16      	ldr	r3, [pc, #88]	@ (80078cc <_send_lower+0x110>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	3302      	adds	r3, #2
 8007878:	b2da      	uxtb	r2, r3
 800787a:	4b14      	ldr	r3, [pc, #80]	@ (80078cc <_send_lower+0x110>)
 800787c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < send_len; i++)  //
 800787e:	2300      	movs	r3, #0
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	e00d      	b.n	80078a0 <_send_lower+0xe4>
    LOGI("%02x", send_buf[i]);
 8007884:	f7fb fb18 	bl	8002eb8 <HAL_GetTick>
 8007888:	4601      	mov	r1, r0
 800788a:	4a0d      	ldr	r2, [pc, #52]	@ (80078c0 <_send_lower+0x104>)
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	4413      	add	r3, r2
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	4a0c      	ldr	r2, [pc, #48]	@ (80078c4 <_send_lower+0x108>)
 8007894:	480c      	ldr	r0, [pc, #48]	@ (80078c8 <_send_lower+0x10c>)
 8007896:	f002 fbe3 	bl	800a060 <iprintf>
  for (int i = 0; i < send_len; i++)  //
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	3301      	adds	r3, #1
 800789e:	613b      	str	r3, [r7, #16]
 80078a0:	4b0a      	ldr	r3, [pc, #40]	@ (80078cc <_send_lower+0x110>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	dbeb      	blt.n	8007884 <_send_lower+0xc8>

  // 数据发送
  wireless_send(send_buf, send_len);
 80078ac:	4b07      	ldr	r3, [pc, #28]	@ (80078cc <_send_lower+0x110>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	4619      	mov	r1, r3
 80078b2:	4803      	ldr	r0, [pc, #12]	@ (80078c0 <_send_lower+0x104>)
 80078b4:	f002 f868 	bl	8009988 <wireless_send>
}
 80078b8:	bf00      	nop
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	200016e8 	.word	0x200016e8
 80078c4:	0800bc04 	.word	0x0800bc04
 80078c8:	0800af8c 	.word	0x0800af8c
 80078cc:	200017e8 	.word	0x200017e8

080078d0 <move_data_pack_low>:

void move_data_pack_low(uint8_t* data_region) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  Motor_t*       servo_info = get_servo_info();
 80078d8:	f001 fbea 	bl	80090b0 <get_servo_info>
 80078dc:	6138      	str	r0, [r7, #16]
  Move_Action_t* p_action   = (Move_Action_t*)data_region;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60fb      	str	r3, [r7, #12]

  p_action->x_pos       = get_Position_mm(GetMoterStateReg(), 4);
 80078e2:	f7f8 fcd3 	bl	800028c <GetMoterStateReg>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2104      	movs	r1, #4
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 fbea 	bl	80090c4 <get_Position_mm>
 80078f0:	4603      	mov	r3, r0
 80078f2:	461a      	mov	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8a3 2001 	strh.w	r2, [r3, #1]
  p_action->x_speed     = servo_info->speed;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	b29a      	uxth	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8a3 2003 	strh.w	r2, [r3, #3]
  p_action->motor_state = 0xa1;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	22a1      	movs	r2, #161	@ 0xa1
 800790a:	72da      	strb	r2, [r3, #11]
  p_action->direct      = servo_info->diretion;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	7a1a      	ldrb	r2, [r3, #8]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	729a      	strb	r2, [r3, #10]
  // p_action->y_pos           = 0x0001;
  // p_action->y_speed         = 0x0001;
  // p_action->action_state    = 0x01;

  // action_mode = p_action->action_state;
  for (int i = 0; i < sizeof(Move_Action_t); i++) {
 8007914:	2300      	movs	r3, #0
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	e00d      	b.n	8007936 <move_data_pack_low+0x66>
    LOGI("%02x", data_region[i]);
 800791a:	f7fb facd 	bl	8002eb8 <HAL_GetTick>
 800791e:	4601      	mov	r1, r0
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	4413      	add	r3, r2
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	4a07      	ldr	r2, [pc, #28]	@ (8007948 <move_data_pack_low+0x78>)
 800792a:	4808      	ldr	r0, [pc, #32]	@ (800794c <move_data_pack_low+0x7c>)
 800792c:	f002 fb98 	bl	800a060 <iprintf>
  for (int i = 0; i < sizeof(Move_Action_t); i++) {
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	3301      	adds	r3, #1
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b0b      	cmp	r3, #11
 800793a:	d9ee      	bls.n	800791a <move_data_pack_low+0x4a>
  }
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	0800bc10 	.word	0x0800bc10
 800794c:	0800af8c 	.word	0x0800af8c

08007950 <book_info_pack_low>:

void book_info_pack_low(uint8_t* data_region) {
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  Book_Info_Ack_Low_t* p_book_info_back = (Book_Info_Ack_Low_t*)data_region;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	60fb      	str	r3, [r7, #12]
  p_book_info_back->empty               = 0x01;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	701a      	strb	r2, [r3, #0]
  p_book_info_back->index_book          = book_index_ack;
 8007962:	4b05      	ldr	r3, [pc, #20]	@ (8007978 <book_info_pack_low+0x28>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8c3 2001 	str.w	r2, [r3, #1]
}
 800796c:	bf00      	nop
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	bc80      	pop	{r7}
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	200017ec 	.word	0x200017ec

0800797c <data_pack_lower>:

uint8_t data_pack_lower(ENUM_CMD_UPPER_t type, uint8_t* data_region) {
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	6039      	str	r1, [r7, #0]
 8007986:	71fb      	strb	r3, [r7, #7]
  uint8_t data_size;
  if (data_region == NULL) {
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <data_pack_lower+0x26>
    LOGE("data_region is null");
 800798e:	f7fb fa93 	bl	8002eb8 <HAL_GetTick>
 8007992:	4603      	mov	r3, r0
 8007994:	4a38      	ldr	r2, [pc, #224]	@ (8007a78 <data_pack_lower+0xfc>)
 8007996:	4619      	mov	r1, r3
 8007998:	4838      	ldr	r0, [pc, #224]	@ (8007a7c <data_pack_lower+0x100>)
 800799a:	f002 fb61 	bl	800a060 <iprintf>
    return;
 800799e:	bf00      	nop
 80079a0:	e066      	b.n	8007a70 <data_pack_lower+0xf4>
  }
  switch (type) {
 80079a2:	79fb      	ldrb	r3, [r7, #7]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d050      	beq.n	8007a4a <data_pack_lower+0xce>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	db60      	blt.n	8007a6e <data_pack_lower+0xf2>
 80079ac:	2b30      	cmp	r3, #48	@ 0x30
 80079ae:	dc5e      	bgt.n	8007a6e <data_pack_lower+0xf2>
 80079b0:	2b10      	cmp	r3, #16
 80079b2:	db5c      	blt.n	8007a6e <data_pack_lower+0xf2>
 80079b4:	3b10      	subs	r3, #16
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	d859      	bhi.n	8007a6e <data_pack_lower+0xf2>
 80079ba:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <data_pack_lower+0x44>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	08007a5d 	.word	0x08007a5d
 80079c4:	08007a51 	.word	0x08007a51
 80079c8:	08007a6f 	.word	0x08007a6f
 80079cc:	08007a6f 	.word	0x08007a6f
 80079d0:	08007a6f 	.word	0x08007a6f
 80079d4:	08007a6f 	.word	0x08007a6f
 80079d8:	08007a6f 	.word	0x08007a6f
 80079dc:	08007a6f 	.word	0x08007a6f
 80079e0:	08007a6f 	.word	0x08007a6f
 80079e4:	08007a6f 	.word	0x08007a6f
 80079e8:	08007a6f 	.word	0x08007a6f
 80079ec:	08007a6f 	.word	0x08007a6f
 80079f0:	08007a6f 	.word	0x08007a6f
 80079f4:	08007a6f 	.word	0x08007a6f
 80079f8:	08007a6f 	.word	0x08007a6f
 80079fc:	08007a6f 	.word	0x08007a6f
 8007a00:	08007a63 	.word	0x08007a63
 8007a04:	08007a4b 	.word	0x08007a4b
 8007a08:	08007a6f 	.word	0x08007a6f
 8007a0c:	08007a6f 	.word	0x08007a6f
 8007a10:	08007a6f 	.word	0x08007a6f
 8007a14:	08007a6f 	.word	0x08007a6f
 8007a18:	08007a6f 	.word	0x08007a6f
 8007a1c:	08007a6f 	.word	0x08007a6f
 8007a20:	08007a6f 	.word	0x08007a6f
 8007a24:	08007a6f 	.word	0x08007a6f
 8007a28:	08007a6f 	.word	0x08007a6f
 8007a2c:	08007a6f 	.word	0x08007a6f
 8007a30:	08007a6f 	.word	0x08007a6f
 8007a34:	08007a6f 	.word	0x08007a6f
 8007a38:	08007a6f 	.word	0x08007a6f
 8007a3c:	08007a6f 	.word	0x08007a6f
 8007a40:	08007a45 	.word	0x08007a45
    case kSynClock:
      data_size = 1;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
      break;
 8007a48:	e011      	b.n	8007a6e <data_pack_lower+0xf2>
    case kInit:
    case kInquire:
      data_size = 1;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4e:	e00e      	b.n	8007a6e <data_pack_lower+0xf2>
    case kInquireBookInfo:
      data_size = 5;
 8007a50:	2305      	movs	r3, #5
 8007a52:	73fb      	strb	r3, [r7, #15]
      book_info_pack_low(data_region);
 8007a54:	6838      	ldr	r0, [r7, #0]
 8007a56:	f7ff ff7b 	bl	8007950 <book_info_pack_low>
      break;
 8007a5a:	e008      	b.n	8007a6e <data_pack_lower+0xf2>
    case kInquireBookNum:
      data_size = 4;
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a60:	e005      	b.n	8007a6e <data_pack_lower+0xf2>
    case kMoveAction:
      data_size = sizeof(Move_Action_t);
 8007a62:	230c      	movs	r3, #12
 8007a64:	73fb      	strb	r3, [r7, #15]
      move_data_pack_low(data_region);
 8007a66:	6838      	ldr	r0, [r7, #0]
 8007a68:	f7ff ff32 	bl	80078d0 <move_data_pack_low>
      break;
 8007a6c:	bf00      	nop
  }
  return data_size;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	0800bc24 	.word	0x0800bc24
 8007a7c:	0800afac 	.word	0x0800afac

08007a80 <send_lower>:

void send_lower(ENUM_CMD_UPPER_t cmd, uint8_t tail_len, uint8_t* data) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	603a      	str	r2, [r7, #0]
 8007a8a:	71fb      	strb	r3, [r7, #7]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	71bb      	strb	r3, [r7, #6]
  // LOGI("TAIL LEN is %02x", tail_len);
  // memcpy(data_temp, up_recv_buf + sizeof(CMD_HEAD_t), up_recv_len - sizeof(CMD_HEAD_t) - 3);
  // for (int i = 0; i < tail_len; i++) {
  //   LOGI("%02X", data[i]);
  // }
  data_len = data_pack_lower(cmd, data);
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff ff71 	bl	800797c <data_pack_lower>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
  _send_lower(cmd, tail_len, data, data_len);
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	79b9      	ldrb	r1, [r7, #6]
 8007aa2:	79f8      	ldrb	r0, [r7, #7]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	f7ff fe89 	bl	80077bc <_send_lower>
}
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <low_send>:

void low_send(void) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b0c4      	sub	sp, #272	@ 0x110
 8007ab8:	af00      	add	r7, sp, #0
  } s_State = START;

  static uint32_t time;
  Notion_t        notion;

  switch (s_State) {
 8007aba:	4b61      	ldr	r3, [pc, #388]	@ (8007c40 <low_send+0x18c>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	f200 80b9 	bhi.w	8007c36 <low_send+0x182>
 8007ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8007acc <low_send+0x18>)
 8007ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aca:	bf00      	nop
 8007acc:	08007ae5 	.word	0x08007ae5
 8007ad0:	08007b09 	.word	0x08007b09
 8007ad4:	08007ba5 	.word	0x08007ba5
 8007ad8:	08007c07 	.word	0x08007c07
 8007adc:	08007c37 	.word	0x08007c37
 8007ae0:	08007c1f 	.word	0x08007c1f
    case START:
      notion  = notify_low_send_pop();
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fd56 	bl	8007598 <notify_low_send_pop>
 8007aec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007af0:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8007af4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007af8:	4611      	mov	r1, r2
 8007afa:	2283      	movs	r2, #131	@ 0x83
 8007afc:	4618      	mov	r0, r3
 8007afe:	f002 fb80 	bl	800a202 <memcpy>
      s_State = SEND;
 8007b02:	4b4f      	ldr	r3, [pc, #316]	@ (8007c40 <low_send+0x18c>)
 8007b04:	2201      	movs	r2, #1
 8007b06:	701a      	strb	r2, [r3, #0]
    case SEND:
      if (notion.state == kEmpty) {
 8007b08:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d103      	bne.n	8007b18 <low_send+0x64>
        // LOGI("notion is empty");
        s_State = START;
 8007b10:	4b4b      	ldr	r3, [pc, #300]	@ (8007c40 <low_send+0x18c>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
        s_State = WAIT;
      } else if (kSendAck) {
        send_lower(notion.cmd_head, notion.len, notion.data_regeion);
        s_State = START;
      }
      break;
 8007b16:	e08e      	b.n	8007c36 <low_send+0x182>
      } else if (notion.state == kError) {
 8007b18:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d10b      	bne.n	8007b38 <low_send+0x84>
        LOGI("notion is error");
 8007b20:	f7fb f9ca 	bl	8002eb8 <HAL_GetTick>
 8007b24:	4603      	mov	r3, r0
 8007b26:	4a47      	ldr	r2, [pc, #284]	@ (8007c44 <low_send+0x190>)
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4847      	ldr	r0, [pc, #284]	@ (8007c48 <low_send+0x194>)
 8007b2c:	f002 fa98 	bl	800a060 <iprintf>
        s_State = START;
 8007b30:	4b43      	ldr	r3, [pc, #268]	@ (8007c40 <low_send+0x18c>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	701a      	strb	r2, [r3, #0]
      break;
 8007b36:	e07e      	b.n	8007c36 <low_send+0x182>
      } else if (notion.state == kSend) {
 8007b38:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d123      	bne.n	8007b88 <low_send+0xd4>
        LOGI("notion is SEND");
 8007b40:	f7fb f9ba 	bl	8002eb8 <HAL_GetTick>
 8007b44:	4603      	mov	r3, r0
 8007b46:	4a3f      	ldr	r2, [pc, #252]	@ (8007c44 <low_send+0x190>)
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4840      	ldr	r0, [pc, #256]	@ (8007c4c <low_send+0x198>)
 8007b4c:	f002 fa88 	bl	800a060 <iprintf>
        LOGI("notion is %2x", notion.len);
 8007b50:	f7fb f9b2 	bl	8002eb8 <HAL_GetTick>
 8007b54:	4601      	mov	r1, r0
 8007b56:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8007b5a:	4a3a      	ldr	r2, [pc, #232]	@ (8007c44 <low_send+0x190>)
 8007b5c:	483c      	ldr	r0, [pc, #240]	@ (8007c50 <low_send+0x19c>)
 8007b5e:	f002 fa7f 	bl	800a060 <iprintf>
        send_lower(notion.cmd_head, notion.len, notion.data_regeion);
 8007b62:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 8007b66:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 8007b6a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007b6e:	3303      	adds	r3, #3
 8007b70:	461a      	mov	r2, r3
 8007b72:	f7ff ff85 	bl	8007a80 <send_lower>
        time    = HAL_GetTick();
 8007b76:	f7fb f99f 	bl	8002eb8 <HAL_GetTick>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	4a35      	ldr	r2, [pc, #212]	@ (8007c54 <low_send+0x1a0>)
 8007b7e:	6013      	str	r3, [r2, #0]
        s_State = WAIT;
 8007b80:	4b2f      	ldr	r3, [pc, #188]	@ (8007c40 <low_send+0x18c>)
 8007b82:	2202      	movs	r2, #2
 8007b84:	701a      	strb	r2, [r3, #0]
      break;
 8007b86:	e056      	b.n	8007c36 <low_send+0x182>
        send_lower(notion.cmd_head, notion.len, notion.data_regeion);
 8007b88:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 8007b8c:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 8007b90:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007b94:	3303      	adds	r3, #3
 8007b96:	461a      	mov	r2, r3
 8007b98:	f7ff ff72 	bl	8007a80 <send_lower>
        s_State = START;
 8007b9c:	4b28      	ldr	r3, [pc, #160]	@ (8007c40 <low_send+0x18c>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	701a      	strb	r2, [r3, #0]
      break;
 8007ba2:	e048      	b.n	8007c36 <low_send+0x182>
    case WAIT:

      if (has_pass_time(time) > WAIT_RECV_TIMEOUT) {
 8007ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8007c54 <low_send+0x1a0>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f002 f97f 	bl	8009eac <has_pass_time>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	dd03      	ble.n	8007bc0 <low_send+0x10c>
        // LOGI("timeout");
        s_State = TIMEOUT;
 8007bb8:	4b21      	ldr	r3, [pc, #132]	@ (8007c40 <low_send+0x18c>)
 8007bba:	2205      	movs	r2, #5
 8007bbc:	701a      	strb	r2, [r3, #0]
        break;
 8007bbe:	e03a      	b.n	8007c36 <low_send+0x182>
      }

      notion = notify_low_recv_pop();
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff fda4 	bl	8007710 <notify_low_recv_pop>
 8007bc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007bcc:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8007bd0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	2283      	movs	r2, #131	@ 0x83
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f002 fb12 	bl	800a202 <memcpy>
      if (notion.state == kError) {
 8007bde:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d103      	bne.n	8007bee <low_send+0x13a>
        s_State = ERROR;
 8007be6:	4b16      	ldr	r3, [pc, #88]	@ (8007c40 <low_send+0x18c>)
 8007be8:	2204      	movs	r2, #4
 8007bea:	701a      	strb	r2, [r3, #0]
        break;
 8007bec:	e023      	b.n	8007c36 <low_send+0x182>
      } else if (notion.state == kRecvSucess) {
 8007bee:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d103      	bne.n	8007bfe <low_send+0x14a>
        // LOGI("success");
        s_State = SUCCESS;
 8007bf6:	4b12      	ldr	r3, [pc, #72]	@ (8007c40 <low_send+0x18c>)
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	701a      	strb	r2, [r3, #0]
        break;
 8007bfc:	e01b      	b.n	8007c36 <low_send+0x182>
      }

      s_State = WAIT;
 8007bfe:	4b10      	ldr	r3, [pc, #64]	@ (8007c40 <low_send+0x18c>)
 8007c00:	2202      	movs	r2, #2
 8007c02:	701a      	strb	r2, [r3, #0]
      break;
 8007c04:	e017      	b.n	8007c36 <low_send+0x182>
    case SUCCESS:
      LOGI("success");
 8007c06:	f7fb f957 	bl	8002eb8 <HAL_GetTick>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8007c44 <low_send+0x190>)
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4811      	ldr	r0, [pc, #68]	@ (8007c58 <low_send+0x1a4>)
 8007c12:	f002 fa25 	bl	800a060 <iprintf>
      s_State = START;
 8007c16:	4b0a      	ldr	r3, [pc, #40]	@ (8007c40 <low_send+0x18c>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	701a      	strb	r2, [r3, #0]
      break;
 8007c1c:	e00b      	b.n	8007c36 <low_send+0x182>
    case TIMEOUT:
      LOGI("timeout");
 8007c1e:	f7fb f94b 	bl	8002eb8 <HAL_GetTick>
 8007c22:	4603      	mov	r3, r0
 8007c24:	4a07      	ldr	r2, [pc, #28]	@ (8007c44 <low_send+0x190>)
 8007c26:	4619      	mov	r1, r3
 8007c28:	480c      	ldr	r0, [pc, #48]	@ (8007c5c <low_send+0x1a8>)
 8007c2a:	f002 fa19 	bl	800a060 <iprintf>
      s_State = SEND;
 8007c2e:	4b04      	ldr	r3, [pc, #16]	@ (8007c40 <low_send+0x18c>)
 8007c30:	2201      	movs	r2, #1
 8007c32:	701a      	strb	r2, [r3, #0]
      break;
 8007c34:	bf00      	nop
  }
}
 8007c36:	bf00      	nop
 8007c38:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	200017f0 	.word	0x200017f0
 8007c44:	0800bc34 	.word	0x0800bc34
 8007c48:	0800afdc 	.word	0x0800afdc
 8007c4c:	0800b008 	.word	0x0800b008
 8007c50:	0800b034 	.word	0x0800b034
 8007c54:	200017f4 	.word	0x200017f4
 8007c58:	0800b060 	.word	0x0800b060
 8007c5c:	0800b084 	.word	0x0800b084

08007c60 <get_lower_cache>:

uint8_t* get_lower_cache(void) { return low_recv_buf; }
 8007c60:	b480      	push	{r7}
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	4b02      	ldr	r3, [pc, #8]	@ (8007c70 <get_lower_cache+0x10>)
 8007c66:	4618      	mov	r0, r3
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	200015e4 	.word	0x200015e4

08007c74 <set_lower_recv_len>:

uint8_t* get_lower_send_cache(void) { return send_buf; }

void set_lower_send_len(uint8_t len) { send_len = len; }
void set_lower_recv_len(uint8_t len) { low_recv_len = len; }
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	71fb      	strb	r3, [r7, #7]
 8007c7e:	4a04      	ldr	r2, [pc, #16]	@ (8007c90 <set_lower_recv_len+0x1c>)
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	7013      	strb	r3, [r2, #0]
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	200016e4 	.word	0x200016e4

08007c94 <set_lower_book_ack>:

 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	4a03      	ldr	r2, [pc, #12]	@ (8007cac <set_lower_book_ack+0x18>)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr
 8007cac:	200017ec 	.word	0x200017ec

08007cb0 <upper_communite_init>:

static uint32_t low_clock;

static uint8_t empty;

void upper_communite_init(void) { registCallback(EVENT_UpSend, upp_send); }  // 只能运行一次所以pass掉
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	4902      	ldr	r1, [pc, #8]	@ (8007cc0 <upper_communite_init+0x10>)
 8007cb6:	2004      	movs	r0, #4
 8007cb8:	f002 f862 	bl	8009d80 <registCallback>
 8007cbc:	bf00      	nop
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	08008229 	.word	0x08008229

08007cc4 <CRC16_Calculate>:

static uint16_t CRC16_Calculate(uint8_t* data, uint8_t len) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 8007cd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007cd4:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	e022      	b.n	8007d26 <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	8afb      	ldrh	r3, [r7, #22]
 8007cec:	4053      	eors	r3, r2
 8007cee:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	e011      	b.n	8007d1a <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 8007cf6:	8afb      	ldrh	r3, [r7, #22]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d006      	beq.n	8007d0e <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 8007d00:	8afb      	ldrh	r3, [r7, #22]
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	4b10      	ldr	r3, [pc, #64]	@ (8007d48 <CRC16_Calculate+0x84>)
 8007d08:	4053      	eors	r3, r2
 8007d0a:	82fb      	strh	r3, [r7, #22]
 8007d0c:	e002      	b.n	8007d14 <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 8007d0e:	8afb      	ldrh	r3, [r7, #22]
 8007d10:	085b      	lsrs	r3, r3, #1
 8007d12:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3301      	adds	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b07      	cmp	r3, #7
 8007d1e:	ddea      	ble.n	8007cf6 <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	3301      	adds	r3, #1
 8007d24:	613b      	str	r3, [r7, #16]
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	dbd8      	blt.n	8007ce0 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 8007d2e:	f7fb f8c3 	bl	8002eb8 <HAL_GetTick>
 8007d32:	4601      	mov	r1, r0
 8007d34:	8afb      	ldrh	r3, [r7, #22]
 8007d36:	4a05      	ldr	r2, [pc, #20]	@ (8007d4c <CRC16_Calculate+0x88>)
 8007d38:	4805      	ldr	r0, [pc, #20]	@ (8007d50 <CRC16_Calculate+0x8c>)
 8007d3a:	f002 f991 	bl	800a060 <iprintf>
  return crc16;
 8007d3e:	8afb      	ldrh	r3, [r7, #22]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	ffffa001 	.word	0xffffa001
 8007d4c:	0800bc40 	.word	0x0800bc40
 8007d50:	0800b0a8 	.word	0x0800b0a8

08007d54 <notify_up_push>:

void notify_up_push(uint8_t cmd, uint8_t len, uint8_t* p_data, LOWER_NOTION notion) {
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	603a      	str	r2, [r7, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	4603      	mov	r3, r0
 8007d60:	71fb      	strb	r3, [r7, #7]
 8007d62:	460b      	mov	r3, r1
 8007d64:	71bb      	strb	r3, [r7, #6]
 8007d66:	4613      	mov	r3, r2
 8007d68:	717b      	strb	r3, [r7, #5]
  if ((notify_up_head + 1) % QUEUE_NUM == notify_up_tail) {
 8007d6a:	4b27      	ldr	r3, [pc, #156]	@ (8007e08 <notify_up_push+0xb4>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	425a      	negs	r2, r3
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	f002 020f 	and.w	r2, r2, #15
 8007d7a:	bf58      	it	pl
 8007d7c:	4253      	negpl	r3, r2
 8007d7e:	4a23      	ldr	r2, [pc, #140]	@ (8007e0c <notify_up_push+0xb8>)
 8007d80:	7812      	ldrb	r2, [r2, #0]
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d108      	bne.n	8007d98 <notify_up_push+0x44>
    LOGW("notify up queue full");
 8007d86:	f7fb f897 	bl	8002eb8 <HAL_GetTick>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4a20      	ldr	r2, [pc, #128]	@ (8007e10 <notify_up_push+0xbc>)
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4820      	ldr	r0, [pc, #128]	@ (8007e14 <notify_up_push+0xc0>)
 8007d92:	f002 f965 	bl	800a060 <iprintf>
    return;
 8007d96:	e033      	b.n	8007e00 <notify_up_push+0xac>
  }

  Notion_t* p_notion = &notify_up_queue[notify_up_head];
 8007d98:	4b1b      	ldr	r3, [pc, #108]	@ (8007e08 <notify_up_push+0xb4>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4613      	mov	r3, r2
 8007da0:	019b      	lsls	r3, r3, #6
 8007da2:	4413      	add	r3, r2
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	4413      	add	r3, r2
 8007da8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e18 <notify_up_push+0xc4>)
 8007daa:	4413      	add	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
  p_notion->cmd_head = cmd;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	79fa      	ldrb	r2, [r7, #7]
 8007db2:	705a      	strb	r2, [r3, #1]
  // memcpy(&(p_notion->cmd_head), p_cmd_head, sizeof(CMD_HEAD_IMPROVE_t));
  if (len != 0) {
 8007db4:	79bb      	ldrb	r3, [r7, #6]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <notify_up_push+0x7c>
    memcpy(p_notion->data_regeion, p_data, len - 3);  // 3 == 1 + 2  1 == 帧尾  2 == crc16;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	1cd8      	adds	r0, r3, #3
 8007dbe:	79bb      	ldrb	r3, [r7, #6]
 8007dc0:	3b03      	subs	r3, #3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	f002 fa1c 	bl	800a202 <memcpy>
    p_notion->len = len;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	79ba      	ldrb	r2, [r7, #6]
 8007dce:	709a      	strb	r2, [r3, #2]
  }

  p_notion->state = notion;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	797a      	ldrb	r2, [r7, #5]
 8007dd4:	701a      	strb	r2, [r3, #0]
  notify_up_head  = (notify_up_head + 1) % QUEUE_NUM;
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8007e08 <notify_up_push+0xb4>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	425a      	negs	r2, r3
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	f002 020f 	and.w	r2, r2, #15
 8007de6:	bf58      	it	pl
 8007de8:	4253      	negpl	r3, r2
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	4b06      	ldr	r3, [pc, #24]	@ (8007e08 <notify_up_push+0xb4>)
 8007dee:	701a      	strb	r2, [r3, #0]
  LOGW("upper push success");
 8007df0:	f7fb f862 	bl	8002eb8 <HAL_GetTick>
 8007df4:	4603      	mov	r3, r0
 8007df6:	4a06      	ldr	r2, [pc, #24]	@ (8007e10 <notify_up_push+0xbc>)
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4808      	ldr	r0, [pc, #32]	@ (8007e1c <notify_up_push+0xc8>)
 8007dfc:	f002 f930 	bl	800a060 <iprintf>
}
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20002230 	.word	0x20002230
 8007e0c:	20002231 	.word	0x20002231
 8007e10:	0800bc50 	.word	0x0800bc50
 8007e14:	0800b0d0 	.word	0x0800b0d0
 8007e18:	20001a00 	.word	0x20001a00
 8007e1c:	0800b100 	.word	0x0800b100

08007e20 <notify_up_pop>:

Notion_t notify_up_pop(void) {
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b0a4      	sub	sp, #144	@ 0x90
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  Notion_t notion = {.state = kEmpty};
 8007e28:	f107 030c 	add.w	r3, r7, #12
 8007e2c:	2283      	movs	r2, #131	@ 0x83
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f002 f96a 	bl	800a10a <memset>
  if (notify_up_tail == notify_up_head) {
 8007e36:	4b20      	ldr	r3, [pc, #128]	@ (8007eb8 <notify_up_pop+0x98>)
 8007e38:	781a      	ldrb	r2, [r3, #0]
 8007e3a:	4b20      	ldr	r3, [pc, #128]	@ (8007ebc <notify_up_pop+0x9c>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d108      	bne.n	8007e54 <notify_up_pop+0x34>
    // LOGW("notify up queue empty");
    return notion;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f107 030c 	add.w	r3, r7, #12
 8007e4a:	2283      	movs	r2, #131	@ 0x83
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	f002 f9d8 	bl	800a202 <memcpy>
 8007e52:	e02d      	b.n	8007eb0 <notify_up_pop+0x90>
  }

  notion         = notify_up_queue[notify_up_tail];
 8007e54:	4b18      	ldr	r3, [pc, #96]	@ (8007eb8 <notify_up_pop+0x98>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4919      	ldr	r1, [pc, #100]	@ (8007ec0 <notify_up_pop+0xa0>)
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	019b      	lsls	r3, r3, #6
 8007e60:	4413      	add	r3, r2
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	4413      	add	r3, r2
 8007e66:	18ca      	adds	r2, r1, r3
 8007e68:	f107 030c 	add.w	r3, r7, #12
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	2283      	movs	r2, #131	@ 0x83
 8007e70:	4618      	mov	r0, r3
 8007e72:	f002 f9c6 	bl	800a202 <memcpy>
  notify_up_tail = (notify_up_tail + 1) % QUEUE_NUM;
 8007e76:	4b10      	ldr	r3, [pc, #64]	@ (8007eb8 <notify_up_pop+0x98>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	425a      	negs	r2, r3
 8007e7e:	f003 030f 	and.w	r3, r3, #15
 8007e82:	f002 020f 	and.w	r2, r2, #15
 8007e86:	bf58      	it	pl
 8007e88:	4253      	negpl	r3, r2
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb8 <notify_up_pop+0x98>)
 8007e8e:	701a      	strb	r2, [r3, #0]
  LOGW("notify pop success state is : %02x", notion.state);
 8007e90:	f7fb f812 	bl	8002eb8 <HAL_GetTick>
 8007e94:	4601      	mov	r1, r0
 8007e96:	7b3b      	ldrb	r3, [r7, #12]
 8007e98:	4a0a      	ldr	r2, [pc, #40]	@ (8007ec4 <notify_up_pop+0xa4>)
 8007e9a:	480b      	ldr	r0, [pc, #44]	@ (8007ec8 <notify_up_pop+0xa8>)
 8007e9c:	f002 f8e0 	bl	800a060 <iprintf>
  return notion;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f107 030c 	add.w	r3, r7, #12
 8007ea8:	2283      	movs	r2, #131	@ 0x83
 8007eaa:	4619      	mov	r1, r3
 8007eac:	f002 f9a9 	bl	800a202 <memcpy>
}
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	3790      	adds	r7, #144	@ 0x90
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20002231 	.word	0x20002231
 8007ebc:	20002230 	.word	0x20002230
 8007ec0:	20001a00 	.word	0x20001a00
 8007ec4:	0800bc60 	.word	0x0800bc60
 8007ec8:	0800b130 	.word	0x0800b130

08007ecc <data_pack_upper>:

uint8_t data_pack_upper(ENUM_CMD_UPPER_t type, uint8_t* data_region) {
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
  uint8_t data_size;
  if (data_region == NULL) {
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d109      	bne.n	8007ef2 <data_pack_upper+0x26>
    LOGE("data_region is null");
 8007ede:	f7fa ffeb 	bl	8002eb8 <HAL_GetTick>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	4a3f      	ldr	r2, [pc, #252]	@ (8007fe4 <data_pack_upper+0x118>)
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	483f      	ldr	r0, [pc, #252]	@ (8007fe8 <data_pack_upper+0x11c>)
 8007eea:	f002 f8b9 	bl	800a060 <iprintf>
    return;
 8007eee:	bf00      	nop
 8007ef0:	e073      	b.n	8007fda <data_pack_upper+0x10e>
  }
  switch (type) {
 8007ef2:	79fb      	ldrb	r3, [r7, #7]
 8007ef4:	2b40      	cmp	r3, #64	@ 0x40
 8007ef6:	d06c      	beq.n	8007fd2 <data_pack_upper+0x106>
 8007ef8:	2b40      	cmp	r3, #64	@ 0x40
 8007efa:	dc6d      	bgt.n	8007fd8 <data_pack_upper+0x10c>
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d04d      	beq.n	8007f9c <data_pack_upper+0xd0>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	db69      	blt.n	8007fd8 <data_pack_upper+0x10c>
 8007f04:	2b30      	cmp	r3, #48	@ 0x30
 8007f06:	dc67      	bgt.n	8007fd8 <data_pack_upper+0x10c>
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	db65      	blt.n	8007fd8 <data_pack_upper+0x10c>
 8007f0c:	3b10      	subs	r3, #16
 8007f0e:	2b20      	cmp	r3, #32
 8007f10:	d862      	bhi.n	8007fd8 <data_pack_upper+0x10c>
 8007f12:	a201      	add	r2, pc, #4	@ (adr r2, 8007f18 <data_pack_upper+0x4c>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007fc1 	.word	0x08007fc1
 8007f1c:	08007fb5 	.word	0x08007fb5
 8007f20:	08007fd9 	.word	0x08007fd9
 8007f24:	08007fd9 	.word	0x08007fd9
 8007f28:	08007fd9 	.word	0x08007fd9
 8007f2c:	08007fd9 	.word	0x08007fd9
 8007f30:	08007fd9 	.word	0x08007fd9
 8007f34:	08007fd9 	.word	0x08007fd9
 8007f38:	08007fd9 	.word	0x08007fd9
 8007f3c:	08007fd9 	.word	0x08007fd9
 8007f40:	08007fd9 	.word	0x08007fd9
 8007f44:	08007fd9 	.word	0x08007fd9
 8007f48:	08007fd9 	.word	0x08007fd9
 8007f4c:	08007fd9 	.word	0x08007fd9
 8007f50:	08007fd9 	.word	0x08007fd9
 8007f54:	08007fd9 	.word	0x08007fd9
 8007f58:	08007fa9 	.word	0x08007fa9
 8007f5c:	08007fc7 	.word	0x08007fc7
 8007f60:	08007fd9 	.word	0x08007fd9
 8007f64:	08007fd9 	.word	0x08007fd9
 8007f68:	08007fd9 	.word	0x08007fd9
 8007f6c:	08007fd9 	.word	0x08007fd9
 8007f70:	08007fd9 	.word	0x08007fd9
 8007f74:	08007fd9 	.word	0x08007fd9
 8007f78:	08007fd9 	.word	0x08007fd9
 8007f7c:	08007fd9 	.word	0x08007fd9
 8007f80:	08007fd9 	.word	0x08007fd9
 8007f84:	08007fd9 	.word	0x08007fd9
 8007f88:	08007fd9 	.word	0x08007fd9
 8007f8c:	08007fd9 	.word	0x08007fd9
 8007f90:	08007fd9 	.word	0x08007fd9
 8007f94:	08007fd9 	.word	0x08007fd9
 8007f98:	08007fd9 	.word	0x08007fd9
    case kInit:
      data_size = sizeof(Upper_Init_t);
 8007f9c:	2308      	movs	r3, #8
 8007f9e:	73fb      	strb	r3, [r7, #15]
      init_data_pack(data_region);
 8007fa0:	6838      	ldr	r0, [r7, #0]
 8007fa2:	f000 f927 	bl	80081f4 <init_data_pack>
      break;
 8007fa6:	e017      	b.n	8007fd8 <data_pack_upper+0x10c>
    case kMoveAction:
      data_size = sizeof(Move_Action_t);
 8007fa8:	230c      	movs	r3, #12
 8007faa:	73fb      	strb	r3, [r7, #15]
      move_data_pack(data_region);
 8007fac:	6838      	ldr	r0, [r7, #0]
 8007fae:	f000 f8bb 	bl	8008128 <move_data_pack>
      break;
 8007fb2:	e011      	b.n	8007fd8 <data_pack_upper+0x10c>

    case kInquireBookInfo:
      data_size = sizeof(Book_Info_Upper_t);
 8007fb4:	2315      	movs	r3, #21
 8007fb6:	73fb      	strb	r3, [r7, #15]
      book_info_pack(data_region);
 8007fb8:	6838      	ldr	r0, [r7, #0]
 8007fba:	f000 f8f5 	bl	80081a8 <book_info_pack>
      break;
 8007fbe:	e00b      	b.n	8007fd8 <data_pack_upper+0x10c>
    case kInquireBookNum:
      data_size = 5;
 8007fc0:	2305      	movs	r3, #5
 8007fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc4:	e008      	b.n	8007fd8 <data_pack_upper+0x10c>
    case kInquire:
      data_size = sizeof(Move_Action_t);
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	73fb      	strb	r3, [r7, #15]
      move_data_pack(data_region);
 8007fca:	6838      	ldr	r0, [r7, #0]
 8007fcc:	f000 f8ac 	bl	8008128 <move_data_pack>
      break;
 8007fd0:	e002      	b.n	8007fd8 <data_pack_upper+0x10c>
    case kResetPos:
      data_size = 2;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd6:	bf00      	nop
    case kSynClock:
      break;
  }

  return data_size;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	0800bc70 	.word	0x0800bc70
 8007fe8:	0800b170 	.word	0x0800b170

08007fec <send_upper>:

void send_upper(ENUM_CMD_UPPER_t cmd, uint8_t tail_len, uint8_t* data) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	603a      	str	r2, [r7, #0]
 8007ff6:	71fb      	strb	r3, [r7, #7]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	71bb      	strb	r3, [r7, #6]
  // uint8_t data_temp[DATA_REGION_SIZE];
  // memcpy(data_temp, up_recv_buf + sizeof(CMD_HEAD_t), up_recv_len - sizeof(CMD_HEAD_t) - 3);
  //  for (int i = 0; i < up_recv_len - 6 - 3; i++) {
  //    LOGI("%02x", ((uint8_t*)data_temp)[i]);
  //  }
  data_len = data_pack_upper(cmd, data);
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff ff63 	bl	8007ecc <data_pack_upper>
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
  _send_upper(cmd, tail_len, data, data_len);
 800800a:	79f8      	ldrb	r0, [r7, #7]
 800800c:	79b9      	ldrb	r1, [r7, #6]
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	f000 f805 	bl	8008020 <_send_upper>
}
 8008016:	bf00      	nop
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <_send_upper>:
/// @brief send to upper computer message
/// @param cmd
/// @param tail_len  message length = head_len + tail_len
/// @param data     data region
/// @param data_len data region size
void _send_upper(ENUM_CMD_UPPER_t cmd, uint8_t tail_len, void* data, uint8_t data_size) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	603a      	str	r2, [r7, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	4603      	mov	r3, r0
 800802c:	71fb      	strb	r3, [r7, #7]
 800802e:	460b      	mov	r3, r1
 8008030:	71bb      	strb	r3, [r7, #6]
 8008032:	4613      	mov	r3, r2
 8008034:	717b      	strb	r3, [r7, #5]
  CMD_HEAD_IMPROVE_t* p_head   = (CMD_HEAD_IMPROVE_t*)send_buf;
 8008036:	4b36      	ldr	r3, [pc, #216]	@ (8008110 <_send_upper+0xf0>)
 8008038:	613b      	str	r3, [r7, #16]
  uint8_t             head_len = sizeof(CMD_HEAD_IMPROVE_t);
 800803a:	2305      	movs	r3, #5
 800803c:	73fb      	strb	r3, [r7, #15]
  uint16_t            crc16;
  p_head->head   = 0x70;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	2270      	movs	r2, #112	@ 0x70
 8008042:	701a      	strb	r2, [r3, #0]
  p_head->cmd    = (uint8_t)cmd;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	79fa      	ldrb	r2, [r7, #7]
 8008048:	705a      	strb	r2, [r3, #1]
  p_head->encord = 0x01;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	2201      	movs	r2, #1
 800804e:	709a      	strb	r2, [r3, #2]
  p_head->addr   = 0x0a;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	220a      	movs	r2, #10
 8008054:	70da      	strb	r2, [r3, #3]
  p_head->len    = tail_len;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	79ba      	ldrb	r2, [r7, #6]
 800805a:	711a      	strb	r2, [r3, #4]
  //   p_head->empty  = 0x00;

  LOGI("tail_len is %02x", tail_len);
 800805c:	f7fa ff2c 	bl	8002eb8 <HAL_GetTick>
 8008060:	4601      	mov	r1, r0
 8008062:	79bb      	ldrb	r3, [r7, #6]
 8008064:	4a2b      	ldr	r2, [pc, #172]	@ (8008114 <_send_upper+0xf4>)
 8008066:	482c      	ldr	r0, [pc, #176]	@ (8008118 <_send_upper+0xf8>)
 8008068:	f001 fffa 	bl	800a060 <iprintf>
  // data region copy
  memcpy(&send_buf[head_len], (uint8_t*)data, data_size);
 800806c:	7bfb      	ldrb	r3, [r7, #15]
 800806e:	4a28      	ldr	r2, [pc, #160]	@ (8008110 <_send_upper+0xf0>)
 8008070:	4413      	add	r3, r2
 8008072:	797a      	ldrb	r2, [r7, #5]
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	4618      	mov	r0, r3
 8008078:	f002 f8c3 	bl	800a202 <memcpy>
  send_len = head_len + data_size;
 800807c:	7bfa      	ldrb	r2, [r7, #15]
 800807e:	797b      	ldrb	r3, [r7, #5]
 8008080:	4413      	add	r3, r2
 8008082:	b2da      	uxtb	r2, r3
 8008084:	4b25      	ldr	r3, [pc, #148]	@ (800811c <_send_upper+0xfc>)
 8008086:	701a      	strb	r2, [r3, #0]

  send_buf[send_len] = 0x71;
 8008088:	4b24      	ldr	r3, [pc, #144]	@ (800811c <_send_upper+0xfc>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	4b20      	ldr	r3, [pc, #128]	@ (8008110 <_send_upper+0xf0>)
 8008090:	2171      	movs	r1, #113	@ 0x71
 8008092:	5499      	strb	r1, [r3, r2]
  send_len += 1;
 8008094:	4b21      	ldr	r3, [pc, #132]	@ (800811c <_send_upper+0xfc>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	3301      	adds	r3, #1
 800809a:	b2da      	uxtb	r2, r3
 800809c:	4b1f      	ldr	r3, [pc, #124]	@ (800811c <_send_upper+0xfc>)
 800809e:	701a      	strb	r2, [r3, #0]

  crc16 = CRC16_Calculate(send_buf, send_len);
 80080a0:	4b1e      	ldr	r3, [pc, #120]	@ (800811c <_send_upper+0xfc>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	4619      	mov	r1, r3
 80080a6:	481a      	ldr	r0, [pc, #104]	@ (8008110 <_send_upper+0xf0>)
 80080a8:	f7ff fe0c 	bl	8007cc4 <CRC16_Calculate>
 80080ac:	4603      	mov	r3, r0
 80080ae:	81bb      	strh	r3, [r7, #12]
  memcpy(&send_buf[send_len], &crc16, sizeof(uint16_t));
 80080b0:	4b1a      	ldr	r3, [pc, #104]	@ (800811c <_send_upper+0xfc>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	4b16      	ldr	r3, [pc, #88]	@ (8008110 <_send_upper+0xf0>)
 80080b8:	4413      	add	r3, r2
 80080ba:	89ba      	ldrh	r2, [r7, #12]
 80080bc:	801a      	strh	r2, [r3, #0]
  send_len += 2;
 80080be:	4b17      	ldr	r3, [pc, #92]	@ (800811c <_send_upper+0xfc>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	3302      	adds	r3, #2
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	4b15      	ldr	r3, [pc, #84]	@ (800811c <_send_upper+0xfc>)
 80080c8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < send_len; i++)  //
 80080ca:	2300      	movs	r3, #0
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	e00d      	b.n	80080ec <_send_upper+0xcc>
    LOGI("%02x", send_buf[i]);
 80080d0:	f7fa fef2 	bl	8002eb8 <HAL_GetTick>
 80080d4:	4601      	mov	r1, r0
 80080d6:	4a0e      	ldr	r2, [pc, #56]	@ (8008110 <_send_upper+0xf0>)
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	4413      	add	r3, r2
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	4a0d      	ldr	r2, [pc, #52]	@ (8008114 <_send_upper+0xf4>)
 80080e0:	480f      	ldr	r0, [pc, #60]	@ (8008120 <_send_upper+0x100>)
 80080e2:	f001 ffbd 	bl	800a060 <iprintf>
  for (int i = 0; i < send_len; i++)  //
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	3301      	adds	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	4b0b      	ldr	r3, [pc, #44]	@ (800811c <_send_upper+0xfc>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	dbeb      	blt.n	80080d0 <_send_upper+0xb0>
  // wireless_send(send_buf, send_len);

  HAL_UART_Transmit(&huart4, send_buf, send_len, 100);
 80080f8:	4b08      	ldr	r3, [pc, #32]	@ (800811c <_send_upper+0xfc>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	2364      	movs	r3, #100	@ 0x64
 8008100:	4903      	ldr	r1, [pc, #12]	@ (8008110 <_send_upper+0xf0>)
 8008102:	4808      	ldr	r0, [pc, #32]	@ (8008124 <_send_upper+0x104>)
 8008104:	f7fe f944 	bl	8006390 <HAL_UART_Transmit>
}
 8008108:	bf00      	nop
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	200017f8 	.word	0x200017f8
 8008114:	0800bc80 	.word	0x0800bc80
 8008118:	0800b1a0 	.word	0x0800b1a0
 800811c:	200018f8 	.word	0x200018f8
 8008120:	0800b1cc 	.word	0x0800b1cc
 8008124:	20000344 	.word	0x20000344

08008128 <move_data_pack>:

void move_data_pack(uint8_t* data_region) {
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  Motor_t*       servo_info = get_servo_info();
 8008130:	f000 ffbe 	bl	80090b0 <get_servo_info>
 8008134:	6138      	str	r0, [r7, #16]
  Move_Action_t* p_action   = (Move_Action_t*)data_region;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60fb      	str	r3, [r7, #12]

  p_action->x_pos       = get_Position_mm(GetMoterStateReg(), 4);
 800813a:	f7f8 f8a7 	bl	800028c <GetMoterStateReg>
 800813e:	4603      	mov	r3, r0
 8008140:	2104      	movs	r1, #4
 8008142:	4618      	mov	r0, r3
 8008144:	f000 ffbe 	bl	80090c4 <get_Position_mm>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8a3 2001 	strh.w	r2, [r3, #1]
  p_action->x_speed     = servo_info->speed;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	88db      	ldrh	r3, [r3, #6]
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8a3 2003 	strh.w	r2, [r3, #3]
  p_action->motor_state = 0xa1;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	22a1      	movs	r2, #161	@ 0xa1
 8008162:	72da      	strb	r2, [r3, #11]
  p_action->direct      = servo_info->diretion;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	7a1a      	ldrb	r2, [r3, #8]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	729a      	strb	r2, [r3, #10]
  // p_action->y_pos           = 0x0001;
  // p_action->y_speed         = 0x0001;
  // p_action->action_state    = 0x01;

  // action_mode = p_action->action_state;
  for (int i = 0; i < sizeof(Move_Action_t); i++) {
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	e00d      	b.n	800818e <move_data_pack+0x66>
    LOGI("%02x", data_region[i]);
 8008172:	f7fa fea1 	bl	8002eb8 <HAL_GetTick>
 8008176:	4601      	mov	r1, r0
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4413      	add	r3, r2
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	4a07      	ldr	r2, [pc, #28]	@ (80081a0 <move_data_pack+0x78>)
 8008182:	4808      	ldr	r0, [pc, #32]	@ (80081a4 <move_data_pack+0x7c>)
 8008184:	f001 ff6c 	bl	800a060 <iprintf>
  for (int i = 0; i < sizeof(Move_Action_t); i++) {
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	3301      	adds	r3, #1
 800818c:	617b      	str	r3, [r7, #20]
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	2b0b      	cmp	r3, #11
 8008192:	d9ee      	bls.n	8008172 <move_data_pack+0x4a>
  }
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	0800bc8c 	.word	0x0800bc8c
 80081a4:	0800b1cc 	.word	0x0800b1cc

080081a8 <book_info_pack>:

void book_num_pack(uint8_t* data_region) { uint32_t* p_num = (uint32_t*)data_region; }

void book_info_pack(uint8_t* data_region) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  Book_Info_Upper_t* p_book_info_low = (Book_Info_Lower_t*)data_region;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	613b      	str	r3, [r7, #16]
  // Book_Info_Upper_t* p_book_info_up  = (Book_Info_Upper_t*)data_region;
  Motor_t* servo = get_servo_info();
 80081b4:	f000 ff7c 	bl	80090b0 <get_servo_info>
 80081b8:	60f8      	str	r0, [r7, #12]

  // p_book_info_up->y_pox        = p_book_info_low->y_pox;
  // p_book_info_up->reak_freq    = p_book_info_low->reak_freq;
  // p_book_info_up->average_rssi = p_book_info_low->average_rssi;

  for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	e00d      	b.n	80081dc <book_info_pack+0x34>
    LOGI("%02x", data_region[i]);
 80081c0:	f7fa fe7a 	bl	8002eb8 <HAL_GetTick>
 80081c4:	4601      	mov	r1, r0
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	4413      	add	r3, r2
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	4a07      	ldr	r2, [pc, #28]	@ (80081ec <book_info_pack+0x44>)
 80081d0:	4807      	ldr	r0, [pc, #28]	@ (80081f0 <book_info_pack+0x48>)
 80081d2:	f001 ff45 	bl	800a060 <iprintf>
  for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	3301      	adds	r3, #1
 80081da:	617b      	str	r3, [r7, #20]
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	2b14      	cmp	r3, #20
 80081e0:	d9ee      	bls.n	80081c0 <book_info_pack+0x18>
  }
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	0800bc9c 	.word	0x0800bc9c
 80081f0:	0800b1cc 	.word	0x0800b1cc

080081f4 <init_data_pack>:

void init_data_pack(uint8_t* data_region) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  Motor_t*      servo_info  = get_servo_info();
 80081fc:	f000 ff58 	bl	80090b0 <get_servo_info>
 8008200:	60f8      	str	r0, [r7, #12]
  Upper_Init_t* p_init      = (Upper_Init_t*)data_region;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60bb      	str	r3, [r7, #8]
  p_init->servo_conect      = servo_info->connect;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	885b      	ldrh	r3, [r3, #2]
 800820a:	b29b      	uxth	r3, r3
 800820c:	b2da      	uxtb	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	705a      	strb	r2, [r3, #1]
  p_init->servo_reset_state = servo_info->state;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	b29b      	uxth	r3, r3
 8008218:	b2da      	uxtb	r2, r3
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	709a      	strb	r2, [r3, #2]
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <upp_send>:
//       REST_UPPER_SEND();
//       break;
//   }
// }

void upp_send(void) {
 8008228:	b580      	push	{r7, lr}
 800822a:	b0c4      	sub	sp, #272	@ 0x110
 800822c:	af00      	add	r7, sp, #0
  } s_State = START;

  static uint32_t time;
  Notion_t        notion;

  switch (s_State) {
 800822e:	4b5a      	ldr	r3, [pc, #360]	@ (8008398 <upp_send+0x170>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b05      	cmp	r3, #5
 8008234:	f200 80aa 	bhi.w	800838c <upp_send+0x164>
 8008238:	a201      	add	r2, pc, #4	@ (adr r2, 8008240 <upp_send+0x18>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	08008259 	.word	0x08008259
 8008244:	0800827d 	.word	0x0800827d
 8008248:	080082d9 	.word	0x080082d9
 800824c:	0800835b 	.word	0x0800835b
 8008250:	0800838d 	.word	0x0800838d
 8008254:	08008373 	.word	0x08008373
    case START:
      notion  = notify_up_pop();
 8008258:	463b      	mov	r3, r7
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff fde0 	bl	8007e20 <notify_up_pop>
 8008260:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008264:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8008268:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800826c:	4611      	mov	r1, r2
 800826e:	2283      	movs	r2, #131	@ 0x83
 8008270:	4618      	mov	r0, r3
 8008272:	f001 ffc6 	bl	800a202 <memcpy>
      s_State = SEND;
 8008276:	4b48      	ldr	r3, [pc, #288]	@ (8008398 <upp_send+0x170>)
 8008278:	2201      	movs	r2, #1
 800827a:	701a      	strb	r2, [r3, #0]
    case SEND:
      if (notion.state == kEmpty) {
 800827c:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d103      	bne.n	800828c <upp_send+0x64>
        // LOGI("notion is empty");
        s_State = START;
 8008284:	4b44      	ldr	r3, [pc, #272]	@ (8008398 <upp_send+0x170>)
 8008286:	2200      	movs	r2, #0
 8008288:	701a      	strb	r2, [r3, #0]
      } else if (notion.state == kSend) {
        send_upper(notion.cmd_head, notion.len, notion.data_regeion);
        time    = HAL_GetTick();
        s_State = START;
      }
      break;
 800828a:	e07e      	b.n	800838a <upp_send+0x162>
      } else if (notion.state == kBookEmpty) {
 800828c:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8008290:	2b05      	cmp	r3, #5
 8008292:	d10a      	bne.n	80082aa <upp_send+0x82>
        _send_upper(notion.cmd_head, 4, &empty, 1);
 8008294:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 8008298:	2301      	movs	r3, #1
 800829a:	4a40      	ldr	r2, [pc, #256]	@ (800839c <upp_send+0x174>)
 800829c:	2104      	movs	r1, #4
 800829e:	f7ff febf 	bl	8008020 <_send_upper>
        s_State = START;
 80082a2:	4b3d      	ldr	r3, [pc, #244]	@ (8008398 <upp_send+0x170>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	701a      	strb	r2, [r3, #0]
      break;
 80082a8:	e06f      	b.n	800838a <upp_send+0x162>
      } else if (notion.state == kSend) {
 80082aa:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d16b      	bne.n	800838a <upp_send+0x162>
        send_upper(notion.cmd_head, notion.len, notion.data_regeion);
 80082b2:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 80082b6:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 80082ba:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80082be:	3303      	adds	r3, #3
 80082c0:	461a      	mov	r2, r3
 80082c2:	f7ff fe93 	bl	8007fec <send_upper>
        time    = HAL_GetTick();
 80082c6:	f7fa fdf7 	bl	8002eb8 <HAL_GetTick>
 80082ca:	4603      	mov	r3, r0
 80082cc:	4a34      	ldr	r2, [pc, #208]	@ (80083a0 <upp_send+0x178>)
 80082ce:	6013      	str	r3, [r2, #0]
        s_State = START;
 80082d0:	4b31      	ldr	r3, [pc, #196]	@ (8008398 <upp_send+0x170>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]
      break;
 80082d6:	e058      	b.n	800838a <upp_send+0x162>
    case WAIT:

      if (has_pass_time(time) > WAIT_RECV_TIMEOUT) {
 80082d8:	4b31      	ldr	r3, [pc, #196]	@ (80083a0 <upp_send+0x178>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 fde5 	bl	8009eac <has_pass_time>
 80082e2:	4603      	mov	r3, r0
 80082e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80082e8:	4293      	cmp	r3, r2
 80082ea:	dd0b      	ble.n	8008304 <upp_send+0xdc>
        LOGI("timeout");
 80082ec:	f7fa fde4 	bl	8002eb8 <HAL_GetTick>
 80082f0:	4603      	mov	r3, r0
 80082f2:	4a2c      	ldr	r2, [pc, #176]	@ (80083a4 <upp_send+0x17c>)
 80082f4:	4619      	mov	r1, r3
 80082f6:	482c      	ldr	r0, [pc, #176]	@ (80083a8 <upp_send+0x180>)
 80082f8:	f001 feb2 	bl	800a060 <iprintf>
        s_State = START;
 80082fc:	4b26      	ldr	r3, [pc, #152]	@ (8008398 <upp_send+0x170>)
 80082fe:	2200      	movs	r2, #0
 8008300:	701a      	strb	r2, [r3, #0]
        break;
 8008302:	e043      	b.n	800838c <upp_send+0x164>
      }

      notion = notify_up_pop();
 8008304:	463b      	mov	r3, r7
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff fd8a 	bl	8007e20 <notify_up_pop>
 800830c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008310:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8008314:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008318:	4611      	mov	r1, r2
 800831a:	2283      	movs	r2, #131	@ 0x83
 800831c:	4618      	mov	r0, r3
 800831e:	f001 ff70 	bl	800a202 <memcpy>
      if (notion.state == kError) {
 8008322:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8008326:	2b04      	cmp	r3, #4
 8008328:	d103      	bne.n	8008332 <upp_send+0x10a>
        s_State = ERROR;
 800832a:	4b1b      	ldr	r3, [pc, #108]	@ (8008398 <upp_send+0x170>)
 800832c:	2204      	movs	r2, #4
 800832e:	701a      	strb	r2, [r3, #0]
        break;
 8008330:	e02c      	b.n	800838c <upp_send+0x164>
      } else if (notion.state == kRecvSucess) {
 8008332:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8008336:	2b02      	cmp	r3, #2
 8008338:	d10b      	bne.n	8008352 <upp_send+0x12a>
        LOGI("success");
 800833a:	f7fa fdbd 	bl	8002eb8 <HAL_GetTick>
 800833e:	4603      	mov	r3, r0
 8008340:	4a18      	ldr	r2, [pc, #96]	@ (80083a4 <upp_send+0x17c>)
 8008342:	4619      	mov	r1, r3
 8008344:	4819      	ldr	r0, [pc, #100]	@ (80083ac <upp_send+0x184>)
 8008346:	f001 fe8b 	bl	800a060 <iprintf>
        s_State = SUCCESS;
 800834a:	4b13      	ldr	r3, [pc, #76]	@ (8008398 <upp_send+0x170>)
 800834c:	2203      	movs	r2, #3
 800834e:	701a      	strb	r2, [r3, #0]
        break;
 8008350:	e01c      	b.n	800838c <upp_send+0x164>
      }

      s_State = WAIT;
 8008352:	4b11      	ldr	r3, [pc, #68]	@ (8008398 <upp_send+0x170>)
 8008354:	2202      	movs	r2, #2
 8008356:	701a      	strb	r2, [r3, #0]
      break;
 8008358:	e018      	b.n	800838c <upp_send+0x164>
    case SUCCESS:
      LOGI("success");
 800835a:	f7fa fdad 	bl	8002eb8 <HAL_GetTick>
 800835e:	4603      	mov	r3, r0
 8008360:	4a10      	ldr	r2, [pc, #64]	@ (80083a4 <upp_send+0x17c>)
 8008362:	4619      	mov	r1, r3
 8008364:	4811      	ldr	r0, [pc, #68]	@ (80083ac <upp_send+0x184>)
 8008366:	f001 fe7b 	bl	800a060 <iprintf>
      s_State = START;
 800836a:	4b0b      	ldr	r3, [pc, #44]	@ (8008398 <upp_send+0x170>)
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
      break;
 8008370:	e00c      	b.n	800838c <upp_send+0x164>
    case TIMEOUT:
      LOGI("timeout");
 8008372:	f7fa fda1 	bl	8002eb8 <HAL_GetTick>
 8008376:	4603      	mov	r3, r0
 8008378:	4a0a      	ldr	r2, [pc, #40]	@ (80083a4 <upp_send+0x17c>)
 800837a:	4619      	mov	r1, r3
 800837c:	480a      	ldr	r0, [pc, #40]	@ (80083a8 <upp_send+0x180>)
 800837e:	f001 fe6f 	bl	800a060 <iprintf>
      s_State = START;
 8008382:	4b05      	ldr	r3, [pc, #20]	@ (8008398 <upp_send+0x170>)
 8008384:	2200      	movs	r2, #0
 8008386:	701a      	strb	r2, [r3, #0]
      break;
 8008388:	e000      	b.n	800838c <upp_send+0x164>
      break;
 800838a:	bf00      	nop
  }
}
 800838c:	bf00      	nop
 800838e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20002233 	.word	0x20002233
 800839c:	20002232 	.word	0x20002232
 80083a0:	20002234 	.word	0x20002234
 80083a4:	0800bcac 	.word	0x0800bcac
 80083a8:	0800b1ec 	.word	0x0800b1ec
 80083ac:	0800b210 	.word	0x0800b210

080083b0 <get_upper_cache>:

uint8_t* get_upper_cache(void) { return up_recv_buf; }
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	4b02      	ldr	r3, [pc, #8]	@ (80083c0 <get_upper_cache+0x10>)
 80083b6:	4618      	mov	r0, r3
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	200018fc 	.word	0x200018fc

080083c4 <set_upper_recv_len>:
void     set_upper_recv_len(uint8_t len) { up_recv_len = len; }
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	71fb      	strb	r3, [r7, #7]
 80083ce:	4a04      	ldr	r2, [pc, #16]	@ (80083e0 <set_upper_recv_len+0x1c>)
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	7013      	strb	r3, [r2, #0]
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	200019fc 	.word	0x200019fc

080083e4 <endianness_change_little>:
#include "endianness_change.h"

#include <stdint.h>
uint32_t endianness_change_little(uint32_t data, uint8_t len) {
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  uint8_t* p_d  = (uint8_t*)&data;
 80083f0:	1d3b      	adds	r3, r7, #4
 80083f2:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < len; i++) {
 80083f8:	2300      	movs	r3, #0
 80083fa:	613b      	str	r3, [r7, #16]
 80083fc:	e012      	b.n	8008424 <endianness_change_little+0x40>
    temp |= (p_d[i]) << 8 * (len - i - 1);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	4619      	mov	r1, r3
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	fa01 f303 	lsl.w	r3, r1, r3
 8008416:	461a      	mov	r2, r3
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	4313      	orrs	r3, r2
 800841c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < len; i++) {
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	3301      	adds	r3, #1
 8008422:	613b      	str	r3, [r7, #16]
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	429a      	cmp	r2, r3
 800842a:	dbe8      	blt.n	80083fe <endianness_change_little+0x1a>
  }
  return temp;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	4618      	mov	r0, r3
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr

08008438 <__io_putchar>:
//   return ch;
// }

// �ض��� printf
int __io_putchar(int ch)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, 0xffff);
 8008440:	1d39      	adds	r1, r7, #4
 8008442:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008446:	2201      	movs	r2, #1
 8008448:	4803      	ldr	r0, [pc, #12]	@ (8008458 <__io_putchar+0x20>)
 800844a:	f7fd ffa1 	bl	8006390 <HAL_UART_Transmit>
  return ch;
 800844e:	687b      	ldr	r3, [r7, #4]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	2000038c 	.word	0x2000038c

0800845c <app_communicate_init>:
static uint8_t action_mode = 0xff;

static bool     book_ack;
static uint32_t u32_empty;

void app_communicate_init(void) {
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0
  lower_communite_init();
 8008460:	f7fe ffd8 	bl	8007414 <lower_communite_init>
  upper_communite_init();
 8008464:	f7ff fc24 	bl	8007cb0 <upper_communite_init>
}
 8008468:	bf00      	nop
 800846a:	bd80      	pop	{r7, pc}

0800846c <app_comunicate>:

void app_comunicate(void) {
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
  if (s_lower_process) {
 8008470:	4b08      	ldr	r3, [pc, #32]	@ (8008494 <app_comunicate+0x28>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <app_comunicate+0x10>
    // LOGI("TEST1");
    lower_apply_improve();
 8008478:	f000 f810 	bl	800849c <lower_apply_improve>
  }
  if (s_upper_process) {
 800847c:	4b06      	ldr	r3, [pc, #24]	@ (8008498 <app_comunicate+0x2c>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <app_comunicate+0x1c>
    // LOGI("TEST21");
    upper_apply_improve();
 8008484:	f000 f9f4 	bl	8008870 <upper_apply_improve>
  }

  low_send();
 8008488:	f7ff fb14 	bl	8007ab4 <low_send>
  upp_send();
 800848c:	f7ff fecc 	bl	8008228 <upp_send>
}
 8008490:	bf00      	nop
 8008492:	bd80      	pop	{r7, pc}
 8008494:	20002250 	.word	0x20002250
 8008498:	20002251 	.word	0x20002251

0800849c <lower_apply_improve>:

void lower_apply_improve(void) {
 800849c:	b580      	push	{r7, lr}
 800849e:	b08a      	sub	sp, #40	@ 0x28
 80084a0:	af00      	add	r7, sp, #0

  } s_lower_State = START;
  static uint32_t time;
  static bool     clock_step;

  switch (s_lower_State) {
 80084a2:	4bb0      	ldr	r3, [pc, #704]	@ (8008764 <lower_apply_improve+0x2c8>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <lower_apply_improve+0x14>
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d03d      	beq.n	800852a <lower_apply_improve+0x8e>
      LOGI("CMD ANALYSE");
      s_lower_State = START;
      REST_LOWER_RECV();
      break;
  }
}
 80084ae:	e1cd      	b.n	800884c <lower_apply_improve+0x3b0>
      p_low_recv = get_lower_cache();
 80084b0:	f7ff fbd6 	bl	8007c60 <get_lower_cache>
 80084b4:	4603      	mov	r3, r0
 80084b6:	4aac      	ldr	r2, [pc, #688]	@ (8008768 <lower_apply_improve+0x2cc>)
 80084b8:	6013      	str	r3, [r2, #0]
      memcpy(&head_low_cache, p_low_recv, sizeof(CMD_HEAD_IMPROVE_t));
 80084ba:	4bab      	ldr	r3, [pc, #684]	@ (8008768 <lower_apply_improve+0x2cc>)
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	4bab      	ldr	r3, [pc, #684]	@ (800876c <lower_apply_improve+0x2d0>)
 80084c0:	6810      	ldr	r0, [r2, #0]
 80084c2:	6018      	str	r0, [r3, #0]
 80084c4:	7912      	ldrb	r2, [r2, #4]
 80084c6:	711a      	strb	r2, [r3, #4]
      for (int i = 0; i < sizeof(CMD_HEAD_IMPROVE_t); i++) {
 80084c8:	2300      	movs	r3, #0
 80084ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80084cc:	e00e      	b.n	80084ec <lower_apply_improve+0x50>
        LOGI("%02x", p_low_recv[i]);
 80084ce:	f7fa fcf3 	bl	8002eb8 <HAL_GetTick>
 80084d2:	4601      	mov	r1, r0
 80084d4:	4ba4      	ldr	r3, [pc, #656]	@ (8008768 <lower_apply_improve+0x2cc>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	4413      	add	r3, r2
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	4aa4      	ldr	r2, [pc, #656]	@ (8008770 <lower_apply_improve+0x2d4>)
 80084e0:	48a4      	ldr	r0, [pc, #656]	@ (8008774 <lower_apply_improve+0x2d8>)
 80084e2:	f001 fdbd 	bl	800a060 <iprintf>
      for (int i = 0; i < sizeof(CMD_HEAD_IMPROVE_t); i++) {
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	3301      	adds	r3, #1
 80084ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80084ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d9ed      	bls.n	80084ce <lower_apply_improve+0x32>
      for (int i = 0; i < head_low_cache.len; i++) {
 80084f2:	2300      	movs	r3, #0
 80084f4:	623b      	str	r3, [r7, #32]
 80084f6:	e00f      	b.n	8008518 <lower_apply_improve+0x7c>
        LOGI("%02x", p_low_recv[sizeof(CMD_HEAD_IMPROVE_t) + i]);
 80084f8:	f7fa fcde 	bl	8002eb8 <HAL_GetTick>
 80084fc:	4601      	mov	r1, r0
 80084fe:	4b9a      	ldr	r3, [pc, #616]	@ (8008768 <lower_apply_improve+0x2cc>)
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	3305      	adds	r3, #5
 8008506:	4413      	add	r3, r2
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	4a99      	ldr	r2, [pc, #612]	@ (8008770 <lower_apply_improve+0x2d4>)
 800850c:	4899      	ldr	r0, [pc, #612]	@ (8008774 <lower_apply_improve+0x2d8>)
 800850e:	f001 fda7 	bl	800a060 <iprintf>
      for (int i = 0; i < head_low_cache.len; i++) {
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	3301      	adds	r3, #1
 8008516:	623b      	str	r3, [r7, #32]
 8008518:	4b94      	ldr	r3, [pc, #592]	@ (800876c <lower_apply_improve+0x2d0>)
 800851a:	791b      	ldrb	r3, [r3, #4]
 800851c:	461a      	mov	r2, r3
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	4293      	cmp	r3, r2
 8008522:	dbe9      	blt.n	80084f8 <lower_apply_improve+0x5c>
      s_lower_State = CMD_ANALYSE;
 8008524:	4b8f      	ldr	r3, [pc, #572]	@ (8008764 <lower_apply_improve+0x2c8>)
 8008526:	2201      	movs	r2, #1
 8008528:	701a      	strb	r2, [r3, #0]
      switch (head_low_cache.cmd) {
 800852a:	4b90      	ldr	r3, [pc, #576]	@ (800876c <lower_apply_improve+0x2d0>)
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d052      	beq.n	80085d8 <lower_apply_improve+0x13c>
 8008532:	2b00      	cmp	r3, #0
 8008534:	f2c0 8178 	blt.w	8008828 <lower_apply_improve+0x38c>
 8008538:	2b30      	cmp	r3, #48	@ 0x30
 800853a:	f300 8175 	bgt.w	8008828 <lower_apply_improve+0x38c>
 800853e:	2b10      	cmp	r3, #16
 8008540:	f2c0 8172 	blt.w	8008828 <lower_apply_improve+0x38c>
 8008544:	3b10      	subs	r3, #16
 8008546:	2b20      	cmp	r3, #32
 8008548:	f200 816e 	bhi.w	8008828 <lower_apply_improve+0x38c>
 800854c:	a201      	add	r2, pc, #4	@ (adr r2, 8008554 <lower_apply_improve+0xb8>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	080085d9 	.word	0x080085d9
 8008558:	08008663 	.word	0x08008663
 800855c:	08008829 	.word	0x08008829
 8008560:	08008829 	.word	0x08008829
 8008564:	08008829 	.word	0x08008829
 8008568:	08008829 	.word	0x08008829
 800856c:	08008829 	.word	0x08008829
 8008570:	08008829 	.word	0x08008829
 8008574:	08008829 	.word	0x08008829
 8008578:	08008829 	.word	0x08008829
 800857c:	08008829 	.word	0x08008829
 8008580:	08008829 	.word	0x08008829
 8008584:	08008829 	.word	0x08008829
 8008588:	08008829 	.word	0x08008829
 800858c:	08008829 	.word	0x08008829
 8008590:	08008829 	.word	0x08008829
 8008594:	080085d9 	.word	0x080085d9
 8008598:	080085d9 	.word	0x080085d9
 800859c:	08008829 	.word	0x08008829
 80085a0:	08008829 	.word	0x08008829
 80085a4:	08008829 	.word	0x08008829
 80085a8:	08008829 	.word	0x08008829
 80085ac:	08008829 	.word	0x08008829
 80085b0:	08008829 	.word	0x08008829
 80085b4:	08008829 	.word	0x08008829
 80085b8:	08008829 	.word	0x08008829
 80085bc:	08008829 	.word	0x08008829
 80085c0:	08008829 	.word	0x08008829
 80085c4:	08008829 	.word	0x08008829
 80085c8:	08008829 	.word	0x08008829
 80085cc:	08008829 	.word	0x08008829
 80085d0:	08008829 	.word	0x08008829
 80085d4:	080087a5 	.word	0x080087a5
          if (head_low_cache.cmd != head_up_cache.cmd) {
 80085d8:	4b64      	ldr	r3, [pc, #400]	@ (800876c <lower_apply_improve+0x2d0>)
 80085da:	785a      	ldrb	r2, [r3, #1]
 80085dc:	4b66      	ldr	r3, [pc, #408]	@ (8008778 <lower_apply_improve+0x2dc>)
 80085de:	785b      	ldrb	r3, [r3, #1]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d022      	beq.n	800862a <lower_apply_improve+0x18e>
            LOGI("low cmd is %02x", head_low_cache.cmd);
 80085e4:	f7fa fc68 	bl	8002eb8 <HAL_GetTick>
 80085e8:	4601      	mov	r1, r0
 80085ea:	4b60      	ldr	r3, [pc, #384]	@ (800876c <lower_apply_improve+0x2d0>)
 80085ec:	785b      	ldrb	r3, [r3, #1]
 80085ee:	4a60      	ldr	r2, [pc, #384]	@ (8008770 <lower_apply_improve+0x2d4>)
 80085f0:	4862      	ldr	r0, [pc, #392]	@ (800877c <lower_apply_improve+0x2e0>)
 80085f2:	f001 fd35 	bl	800a060 <iprintf>
            LOGI("up cmd is %02x", head_up_cache.cmd);
 80085f6:	f7fa fc5f 	bl	8002eb8 <HAL_GetTick>
 80085fa:	4601      	mov	r1, r0
 80085fc:	4b5e      	ldr	r3, [pc, #376]	@ (8008778 <lower_apply_improve+0x2dc>)
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	4a5b      	ldr	r2, [pc, #364]	@ (8008770 <lower_apply_improve+0x2d4>)
 8008602:	485f      	ldr	r0, [pc, #380]	@ (8008780 <lower_apply_improve+0x2e4>)
 8008604:	f001 fd2c 	bl	800a060 <iprintf>
            LOGI("CMD error");
 8008608:	f7fa fc56 	bl	8002eb8 <HAL_GetTick>
 800860c:	4603      	mov	r3, r0
 800860e:	4a58      	ldr	r2, [pc, #352]	@ (8008770 <lower_apply_improve+0x2d4>)
 8008610:	4619      	mov	r1, r3
 8008612:	485c      	ldr	r0, [pc, #368]	@ (8008784 <lower_apply_improve+0x2e8>)
 8008614:	f001 fd24 	bl	800a060 <iprintf>
            notify_low_recv_push(0, 0, NULL, kError);  // 接收失败，通知下位机控制块
 8008618:	2304      	movs	r3, #4
 800861a:	2200      	movs	r2, #0
 800861c:	2100      	movs	r1, #0
 800861e:	2000      	movs	r0, #0
 8008620:	f7ff f810 	bl	8007644 <notify_low_recv_push>
            s_lower_State = START;
 8008624:	4b4f      	ldr	r3, [pc, #316]	@ (8008764 <lower_apply_improve+0x2c8>)
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
          LOGI("CMD SUCESS");
 800862a:	f7fa fc45 	bl	8002eb8 <HAL_GetTick>
 800862e:	4603      	mov	r3, r0
 8008630:	4a4f      	ldr	r2, [pc, #316]	@ (8008770 <lower_apply_improve+0x2d4>)
 8008632:	4619      	mov	r1, r3
 8008634:	4854      	ldr	r0, [pc, #336]	@ (8008788 <lower_apply_improve+0x2ec>)
 8008636:	f001 fd13 	bl	800a060 <iprintf>
          notify_low_recv_push(0, 0, NULL, kRecvSucess);
 800863a:	2302      	movs	r3, #2
 800863c:	2200      	movs	r2, #0
 800863e:	2100      	movs	r1, #0
 8008640:	2000      	movs	r0, #0
 8008642:	f7fe ffff 	bl	8007644 <notify_low_recv_push>
          notify_up_push(head_low_cache.cmd, head_low_cache.len, &p_low_recv[sizeof(CMD_HEAD_IMPROVE_t)], kSend);  // 通知上位机控制块发送
 8008646:	4b49      	ldr	r3, [pc, #292]	@ (800876c <lower_apply_improve+0x2d0>)
 8008648:	7858      	ldrb	r0, [r3, #1]
 800864a:	4b48      	ldr	r3, [pc, #288]	@ (800876c <lower_apply_improve+0x2d0>)
 800864c:	7919      	ldrb	r1, [r3, #4]
 800864e:	4b46      	ldr	r3, [pc, #280]	@ (8008768 <lower_apply_improve+0x2cc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	1d5a      	adds	r2, r3, #5
 8008654:	2301      	movs	r3, #1
 8008656:	f7ff fb7d 	bl	8007d54 <notify_up_push>
          s_lower_State = START;
 800865a:	4b42      	ldr	r3, [pc, #264]	@ (8008764 <lower_apply_improve+0x2c8>)
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
          break;
 8008660:	e0e2      	b.n	8008828 <lower_apply_improve+0x38c>
          Book_Info_Lower_t* p_book_low     = (Book_Info_Lower_t*)&(p_low_recv[sizeof(CMD_HEAD_IMPROVE_t)]);
 8008662:	4b41      	ldr	r3, [pc, #260]	@ (8008768 <lower_apply_improve+0x2cc>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3305      	adds	r3, #5
 8008668:	61bb      	str	r3, [r7, #24]
          Book_Info_Upper_t* p_book_info_up = (Book_Info_Upper_t*)&(p_low_recv[sizeof(CMD_HEAD_IMPROVE_t)]);
 800866a:	4b3f      	ldr	r3, [pc, #252]	@ (8008768 <lower_apply_improve+0x2cc>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3305      	adds	r3, #5
 8008670:	617b      	str	r3, [r7, #20]
          int32_t             time_sec = endianness_change_little(p_book_low->x_time, 4);
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8008678:	2104      	movs	r1, #4
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff feb2 	bl	80083e4 <endianness_change_little>
 8008680:	4603      	mov	r3, r0
 8008682:	613b      	str	r3, [r7, #16]
          Moter_Config_t*     p_servo  = get_servo_config();
 8008684:	f000 fd0a 	bl	800909c <get_servo_config>
 8008688:	60f8      	str	r0, [r7, #12]
          LOGI("x_time is %08x", p_book_low->x_time);
 800868a:	f7fa fc15 	bl	8002eb8 <HAL_GetTick>
 800868e:	4601      	mov	r1, r0
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8008696:	4a36      	ldr	r2, [pc, #216]	@ (8008770 <lower_apply_improve+0x2d4>)
 8008698:	483c      	ldr	r0, [pc, #240]	@ (800878c <lower_apply_improve+0x2f0>)
 800869a:	f001 fce1 	bl	800a060 <iprintf>
          LOGI("sec is %d", time_sec);
 800869e:	f7fa fc0b 	bl	8002eb8 <HAL_GetTick>
 80086a2:	4601      	mov	r1, r0
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	4a32      	ldr	r2, [pc, #200]	@ (8008770 <lower_apply_improve+0x2d4>)
 80086a8:	4839      	ldr	r0, [pc, #228]	@ (8008790 <lower_apply_improve+0x2f4>)
 80086aa:	f001 fcd9 	bl	800a060 <iprintf>
          LOGI("syn clock is %d", syn_clock);
 80086ae:	f7fa fc03 	bl	8002eb8 <HAL_GetTick>
 80086b2:	4601      	mov	r1, r0
 80086b4:	4b37      	ldr	r3, [pc, #220]	@ (8008794 <lower_apply_improve+0x2f8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008770 <lower_apply_improve+0x2d4>)
 80086ba:	4837      	ldr	r0, [pc, #220]	@ (8008798 <lower_apply_improve+0x2fc>)
 80086bc:	f001 fcd0 	bl	800a060 <iprintf>
          LOGI("speed is %d", p_servo->speed);
 80086c0:	f7fa fbfa 	bl	8002eb8 <HAL_GetTick>
 80086c4:	4601      	mov	r1, r0
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	88db      	ldrh	r3, [r3, #6]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	4a28      	ldr	r2, [pc, #160]	@ (8008770 <lower_apply_improve+0x2d4>)
 80086ce:	4833      	ldr	r0, [pc, #204]	@ (800879c <lower_apply_improve+0x300>)
 80086d0:	f001 fcc6 	bl	800a060 <iprintf>
          p_book_info_up->x_pos = (uint16_t)((time_sec - syn_clock) / UNIT_SPEED_CLOCK_RATIO(p_servo->speed));
 80086d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008794 <lower_apply_improve+0x2f8>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	1ad2      	subs	r2, r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	88db      	ldrh	r3, [r3, #6]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	4619      	mov	r1, r3
 80086e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80086e8:	fb93 f3f1 	sdiv	r3, r3, r1
 80086ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f8a3 200f 	strh.w	r2, [r3, #15]
          p_book_info_up->y_pox        = p_book_low->y_pox;
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 80086fe:	b29a      	uxth	r2, r3
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f8a3 2011 	strh.w	r2, [r3, #17]
          p_book_info_up->reak_freq    = p_book_low->reak_freq;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	7d5a      	ldrb	r2, [r3, #21]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	74da      	strb	r2, [r3, #19]
          p_book_info_up->average_rssi = p_book_low->average_rssi;
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	7d9a      	ldrb	r2, [r3, #22]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	751a      	strb	r2, [r3, #20]
          for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
 8008716:	2300      	movs	r3, #0
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	e00f      	b.n	800873c <lower_apply_improve+0x2a0>
            LOGI("%02x", p_low_recv[sizeof(CMD_HEAD_IMPROVE_t) + i]);
 800871c:	f7fa fbcc 	bl	8002eb8 <HAL_GetTick>
 8008720:	4601      	mov	r1, r0
 8008722:	4b11      	ldr	r3, [pc, #68]	@ (8008768 <lower_apply_improve+0x2cc>)
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	3305      	adds	r3, #5
 800872a:	4413      	add	r3, r2
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	4a10      	ldr	r2, [pc, #64]	@ (8008770 <lower_apply_improve+0x2d4>)
 8008730:	4810      	ldr	r0, [pc, #64]	@ (8008774 <lower_apply_improve+0x2d8>)
 8008732:	f001 fc95 	bl	800a060 <iprintf>
          for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	3301      	adds	r3, #1
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2b14      	cmp	r3, #20
 8008740:	d9ec      	bls.n	800871c <lower_apply_improve+0x280>
          set_lower_book_ack(p_book_low->index);
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff faa3 	bl	8007c94 <set_lower_book_ack>
          input_book_info(p_book_info_up);
 800874e:	6978      	ldr	r0, [r7, #20]
 8008750:	f001 fa24 	bl	8009b9c <input_book_info>
          book_ack = true;
 8008754:	4b12      	ldr	r3, [pc, #72]	@ (80087a0 <lower_apply_improve+0x304>)
 8008756:	2201      	movs	r2, #1
 8008758:	701a      	strb	r2, [r3, #0]
          s_lower_State = START;
 800875a:	4b02      	ldr	r3, [pc, #8]	@ (8008764 <lower_apply_improve+0x2c8>)
 800875c:	2200      	movs	r2, #0
 800875e:	701a      	strb	r2, [r3, #0]
          break;
 8008760:	e062      	b.n	8008828 <lower_apply_improve+0x38c>
 8008762:	bf00      	nop
 8008764:	20002260 	.word	0x20002260
 8008768:	20002248 	.word	0x20002248
 800876c:	20002240 	.word	0x20002240
 8008770:	0800bcb8 	.word	0x0800bcb8
 8008774:	0800b234 	.word	0x0800b234
 8008778:	20002238 	.word	0x20002238
 800877c:	0800b254 	.word	0x0800b254
 8008780:	0800b280 	.word	0x0800b280
 8008784:	0800b2ac 	.word	0x0800b2ac
 8008788:	0800b2d4 	.word	0x0800b2d4
 800878c:	0800b2fc 	.word	0x0800b2fc
 8008790:	0800b328 	.word	0x0800b328
 8008794:	20002254 	.word	0x20002254
 8008798:	0800b350 	.word	0x0800b350
 800879c:	0800b37c 	.word	0x0800b37c
 80087a0:	20002258 	.word	0x20002258
          syn_clock &= 0x00;
 80087a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008854 <lower_apply_improve+0x3b8>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	601a      	str	r2, [r3, #0]
          syn_clock |= ((uint32_t)p_low_recv[sizeof(CMD_HEAD_IMPROVE_t) + 1]) << 24;
 80087aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008858 <lower_apply_improve+0x3bc>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3306      	adds	r3, #6
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	061b      	lsls	r3, r3, #24
 80087b4:	4a27      	ldr	r2, [pc, #156]	@ (8008854 <lower_apply_improve+0x3b8>)
 80087b6:	6812      	ldr	r2, [r2, #0]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	461a      	mov	r2, r3
 80087bc:	4b25      	ldr	r3, [pc, #148]	@ (8008854 <lower_apply_improve+0x3b8>)
 80087be:	601a      	str	r2, [r3, #0]
          syn_clock |= ((uint32_t)p_low_recv[sizeof(CMD_HEAD_IMPROVE_t) + 2]) << 16;
 80087c0:	4b25      	ldr	r3, [pc, #148]	@ (8008858 <lower_apply_improve+0x3bc>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3307      	adds	r3, #7
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	041b      	lsls	r3, r3, #16
 80087ca:	4a22      	ldr	r2, [pc, #136]	@ (8008854 <lower_apply_improve+0x3b8>)
 80087cc:	6812      	ldr	r2, [r2, #0]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	461a      	mov	r2, r3
 80087d2:	4b20      	ldr	r3, [pc, #128]	@ (8008854 <lower_apply_improve+0x3b8>)
 80087d4:	601a      	str	r2, [r3, #0]
          syn_clock |= ((uint32_t)p_low_recv[sizeof(CMD_HEAD_IMPROVE_t) + 3]) << 8;
 80087d6:	4b20      	ldr	r3, [pc, #128]	@ (8008858 <lower_apply_improve+0x3bc>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3308      	adds	r3, #8
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008854 <lower_apply_improve+0x3b8>)
 80087e2:	6812      	ldr	r2, [r2, #0]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	461a      	mov	r2, r3
 80087e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008854 <lower_apply_improve+0x3b8>)
 80087ea:	601a      	str	r2, [r3, #0]
          syn_clock |= ((uint32_t)p_low_recv[sizeof(CMD_HEAD_IMPROVE_t) + 4]) << 0;
 80087ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008858 <lower_apply_improve+0x3bc>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3309      	adds	r3, #9
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	4b17      	ldr	r3, [pc, #92]	@ (8008854 <lower_apply_improve+0x3b8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	461a      	mov	r2, r3
 80087fe:	4b15      	ldr	r3, [pc, #84]	@ (8008854 <lower_apply_improve+0x3b8>)
 8008800:	601a      	str	r2, [r3, #0]
          notify_low_recv_push(0, 0, NULL, kRecvSucess);
 8008802:	2302      	movs	r3, #2
 8008804:	2200      	movs	r2, #0
 8008806:	2100      	movs	r1, #0
 8008808:	2000      	movs	r0, #0
 800880a:	f7fe ff1b 	bl	8007644 <notify_low_recv_push>
          LOGI("SYNCLCK is %08x", syn_clock);
 800880e:	f7fa fb53 	bl	8002eb8 <HAL_GetTick>
 8008812:	4601      	mov	r1, r0
 8008814:	4b0f      	ldr	r3, [pc, #60]	@ (8008854 <lower_apply_improve+0x3b8>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a10      	ldr	r2, [pc, #64]	@ (800885c <lower_apply_improve+0x3c0>)
 800881a:	4811      	ldr	r0, [pc, #68]	@ (8008860 <lower_apply_improve+0x3c4>)
 800881c:	f001 fc20 	bl	800a060 <iprintf>
          s_lower_State = START;
 8008820:	4b10      	ldr	r3, [pc, #64]	@ (8008864 <lower_apply_improve+0x3c8>)
 8008822:	2200      	movs	r2, #0
 8008824:	701a      	strb	r2, [r3, #0]
          break;
 8008826:	bf00      	nop
      LOGI("CMD ANALYSE");
 8008828:	f7fa fb46 	bl	8002eb8 <HAL_GetTick>
 800882c:	4603      	mov	r3, r0
 800882e:	4a0b      	ldr	r2, [pc, #44]	@ (800885c <lower_apply_improve+0x3c0>)
 8008830:	4619      	mov	r1, r3
 8008832:	480d      	ldr	r0, [pc, #52]	@ (8008868 <lower_apply_improve+0x3cc>)
 8008834:	f001 fc14 	bl	800a060 <iprintf>
      s_lower_State = START;
 8008838:	4b0a      	ldr	r3, [pc, #40]	@ (8008864 <lower_apply_improve+0x3c8>)
 800883a:	2200      	movs	r2, #0
 800883c:	701a      	strb	r2, [r3, #0]
      REST_LOWER_RECV();
 800883e:	4b09      	ldr	r3, [pc, #36]	@ (8008864 <lower_apply_improve+0x3c8>)
 8008840:	2200      	movs	r2, #0
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	4b09      	ldr	r3, [pc, #36]	@ (800886c <lower_apply_improve+0x3d0>)
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]
      break;
 800884a:	bf00      	nop
}
 800884c:	bf00      	nop
 800884e:	3728      	adds	r7, #40	@ 0x28
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	20002254 	.word	0x20002254
 8008858:	20002248 	.word	0x20002248
 800885c:	0800bcb8 	.word	0x0800bcb8
 8008860:	0800b3a4 	.word	0x0800b3a4
 8008864:	20002260 	.word	0x20002260
 8008868:	0800b3d0 	.word	0x0800b3d0
 800886c:	20002250 	.word	0x20002250

08008870 <upper_apply_improve>:
//   }

//   return false;
// }

void upper_apply_improve(void) {
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
    CMD_ANALYSE,
  } s_upper_State = START;
  static uint32_t time;
  static uint8_t  empty;
  static uint16_t u16_empty;
  switch (s_upper_State) {
 8008876:	4ba1      	ldr	r3, [pc, #644]	@ (8008afc <upper_apply_improve+0x28c>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <upper_apply_improve+0x14>
 800887e:	2b01      	cmp	r3, #1
 8008880:	d028      	beq.n	80088d4 <upper_apply_improve+0x64>
      LOGI("CMD ANALYSE");
      s_upper_State = START;
      REST_UPPER_SEND();
      break;
  }
}
 8008882:	e137      	b.n	8008af4 <upper_apply_improve+0x284>
      p_up_recv = get_upper_cache();
 8008884:	f7ff fd94 	bl	80083b0 <get_upper_cache>
 8008888:	4603      	mov	r3, r0
 800888a:	4a9d      	ldr	r2, [pc, #628]	@ (8008b00 <upper_apply_improve+0x290>)
 800888c:	6013      	str	r3, [r2, #0]
      memcpy(&head_up_cache, p_up_recv, sizeof(CMD_HEAD_IMPROVE_t));
 800888e:	4b9c      	ldr	r3, [pc, #624]	@ (8008b00 <upper_apply_improve+0x290>)
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	4b9c      	ldr	r3, [pc, #624]	@ (8008b04 <upper_apply_improve+0x294>)
 8008894:	6810      	ldr	r0, [r2, #0]
 8008896:	6018      	str	r0, [r3, #0]
 8008898:	7912      	ldrb	r2, [r2, #4]
 800889a:	711a      	strb	r2, [r3, #4]
      for (int i = 0; i < head_up_cache.len; i++) {
 800889c:	2300      	movs	r3, #0
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e00f      	b.n	80088c2 <upper_apply_improve+0x52>
        LOGI("%02x", p_up_recv[sizeof(CMD_HEAD_IMPROVE_t) + i]);
 80088a2:	f7fa fb09 	bl	8002eb8 <HAL_GetTick>
 80088a6:	4601      	mov	r1, r0
 80088a8:	4b95      	ldr	r3, [pc, #596]	@ (8008b00 <upper_apply_improve+0x290>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	3305      	adds	r3, #5
 80088b0:	4413      	add	r3, r2
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	4a94      	ldr	r2, [pc, #592]	@ (8008b08 <upper_apply_improve+0x298>)
 80088b6:	4895      	ldr	r0, [pc, #596]	@ (8008b0c <upper_apply_improve+0x29c>)
 80088b8:	f001 fbd2 	bl	800a060 <iprintf>
      for (int i = 0; i < head_up_cache.len; i++) {
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	3301      	adds	r3, #1
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	4b90      	ldr	r3, [pc, #576]	@ (8008b04 <upper_apply_improve+0x294>)
 80088c4:	791b      	ldrb	r3, [r3, #4]
 80088c6:	461a      	mov	r2, r3
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	4293      	cmp	r3, r2
 80088cc:	dbe9      	blt.n	80088a2 <upper_apply_improve+0x32>
      s_upper_State = CMD_ANALYSE;
 80088ce:	4b8b      	ldr	r3, [pc, #556]	@ (8008afc <upper_apply_improve+0x28c>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	701a      	strb	r2, [r3, #0]
      switch (head_up_cache.cmd) {
 80088d4:	4b8b      	ldr	r3, [pc, #556]	@ (8008b04 <upper_apply_improve+0x294>)
 80088d6:	785b      	ldrb	r3, [r3, #1]
 80088d8:	2b21      	cmp	r3, #33	@ 0x21
 80088da:	dc4d      	bgt.n	8008978 <upper_apply_improve+0x108>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f2c0 80f7 	blt.w	8008ad0 <upper_apply_improve+0x260>
 80088e2:	2b21      	cmp	r3, #33	@ 0x21
 80088e4:	f200 80f4 	bhi.w	8008ad0 <upper_apply_improve+0x260>
 80088e8:	a201      	add	r2, pc, #4	@ (adr r2, 80088f0 <upper_apply_improve+0x80>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	0800897f 	.word	0x0800897f
 80088f4:	08008ad1 	.word	0x08008ad1
 80088f8:	08008ad1 	.word	0x08008ad1
 80088fc:	08008ad1 	.word	0x08008ad1
 8008900:	08008ad1 	.word	0x08008ad1
 8008904:	08008ad1 	.word	0x08008ad1
 8008908:	08008ad1 	.word	0x08008ad1
 800890c:	08008ad1 	.word	0x08008ad1
 8008910:	08008ad1 	.word	0x08008ad1
 8008914:	08008ad1 	.word	0x08008ad1
 8008918:	08008ad1 	.word	0x08008ad1
 800891c:	08008ad1 	.word	0x08008ad1
 8008920:	08008ad1 	.word	0x08008ad1
 8008924:	08008ad1 	.word	0x08008ad1
 8008928:	08008ad1 	.word	0x08008ad1
 800892c:	08008ad1 	.word	0x08008ad1
 8008930:	0800897f 	.word	0x0800897f
 8008934:	08008a4f 	.word	0x08008a4f
 8008938:	08008ad1 	.word	0x08008ad1
 800893c:	08008ad1 	.word	0x08008ad1
 8008940:	08008ad1 	.word	0x08008ad1
 8008944:	08008ad1 	.word	0x08008ad1
 8008948:	08008ad1 	.word	0x08008ad1
 800894c:	08008ad1 	.word	0x08008ad1
 8008950:	08008ad1 	.word	0x08008ad1
 8008954:	08008ad1 	.word	0x08008ad1
 8008958:	08008ad1 	.word	0x08008ad1
 800895c:	08008ad1 	.word	0x08008ad1
 8008960:	08008ad1 	.word	0x08008ad1
 8008964:	08008ad1 	.word	0x08008ad1
 8008968:	08008ad1 	.word	0x08008ad1
 800896c:	08008ad1 	.word	0x08008ad1
 8008970:	08008995 	.word	0x08008995
 8008974:	08008a39 	.word	0x08008a39
 8008978:	2b40      	cmp	r3, #64	@ 0x40
 800897a:	d044      	beq.n	8008a06 <upper_apply_improve+0x196>
 800897c:	e0a8      	b.n	8008ad0 <upper_apply_improve+0x260>
          notify_low_send_push(head_up_cache.cmd, head_up_cache.len, &(p_up_recv[sizeof(CMD_HEAD_IMPROVE_t)]), kSend);
 800897e:	4b61      	ldr	r3, [pc, #388]	@ (8008b04 <upper_apply_improve+0x294>)
 8008980:	7858      	ldrb	r0, [r3, #1]
 8008982:	4b60      	ldr	r3, [pc, #384]	@ (8008b04 <upper_apply_improve+0x294>)
 8008984:	7919      	ldrb	r1, [r3, #4]
 8008986:	4b5e      	ldr	r3, [pc, #376]	@ (8008b00 <upper_apply_improve+0x290>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	1d5a      	adds	r2, r3, #5
 800898c:	2301      	movs	r3, #1
 800898e:	f7fe fd93 	bl	80074b8 <notify_low_send_push>
          break;
 8008992:	e09d      	b.n	8008ad0 <upper_apply_improve+0x260>
          Move_Action_t* p_action = (Move_Action_t*)(&(p_up_recv[sizeof(CMD_HEAD_IMPROVE_t)]));  // 1 == 空闲数据位
 8008994:	4b5a      	ldr	r3, [pc, #360]	@ (8008b00 <upper_apply_improve+0x290>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3305      	adds	r3, #5
 800899a:	60fb      	str	r3, [r7, #12]
          action_mode = p_action->action_state;  // 记录盘点
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	7a5a      	ldrb	r2, [r3, #9]
 80089a0:	4b5b      	ldr	r3, [pc, #364]	@ (8008b10 <upper_apply_improve+0x2a0>)
 80089a2:	701a      	strb	r2, [r3, #0]
          servo_config_updata(kPos, endianness_change_little(p_action->x_pos, 2));      // 记录位置
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	2102      	movs	r1, #2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff fd18 	bl	80083e4 <endianness_change_little>
 80089b4:	4603      	mov	r3, r0
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	4619      	mov	r1, r3
 80089ba:	2002      	movs	r0, #2
 80089bc:	f000 fafc 	bl	8008fb8 <servo_config_updata>
          servo_config_updata(kSpeed, endianness_change_little(p_action->x_speed, 2));  // 记录速度
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2102      	movs	r1, #2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff fd0a 	bl	80083e4 <endianness_change_little>
 80089d0:	4603      	mov	r3, r0
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4619      	mov	r1, r3
 80089d6:	2003      	movs	r0, #3
 80089d8:	f000 faee 	bl	8008fb8 <servo_config_updata>
          servo_config_updata(kActionMode, kMoveAction);
 80089dc:	2120      	movs	r1, #32
 80089de:	2007      	movs	r0, #7
 80089e0:	f000 faea 	bl	8008fb8 <servo_config_updata>
          notify_low_send_push(kSynClock, 4, &empty, kSend);
 80089e4:	2301      	movs	r3, #1
 80089e6:	4a4b      	ldr	r2, [pc, #300]	@ (8008b14 <upper_apply_improve+0x2a4>)
 80089e8:	2104      	movs	r1, #4
 80089ea:	2030      	movs	r0, #48	@ 0x30
 80089ec:	f7fe fd64 	bl	80074b8 <notify_low_send_push>
          notify_low_send_push(head_up_cache.cmd, head_up_cache.len, &(p_up_recv[sizeof(CMD_HEAD_IMPROVE_t)]), kSend);
 80089f0:	4b44      	ldr	r3, [pc, #272]	@ (8008b04 <upper_apply_improve+0x294>)
 80089f2:	7858      	ldrb	r0, [r3, #1]
 80089f4:	4b43      	ldr	r3, [pc, #268]	@ (8008b04 <upper_apply_improve+0x294>)
 80089f6:	7919      	ldrb	r1, [r3, #4]
 80089f8:	4b41      	ldr	r3, [pc, #260]	@ (8008b00 <upper_apply_improve+0x290>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	1d5a      	adds	r2, r3, #5
 80089fe:	2301      	movs	r3, #1
 8008a00:	f7fe fd5a 	bl	80074b8 <notify_low_send_push>
          break;
 8008a04:	e064      	b.n	8008ad0 <upper_apply_improve+0x260>
          uint8_t reset_mode = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	74fb      	strb	r3, [r7, #19]
          reset_mode         = p_up_recv[sizeof(CMD_HEAD_IMPROVE_t) + 1];
 8008a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8008b00 <upper_apply_improve+0x290>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	799b      	ldrb	r3, [r3, #6]
 8008a10:	74fb      	strb	r3, [r7, #19]
          LOGI("reset is %d", reset_mode);
 8008a12:	f7fa fa51 	bl	8002eb8 <HAL_GetTick>
 8008a16:	4601      	mov	r1, r0
 8008a18:	7cfb      	ldrb	r3, [r7, #19]
 8008a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8008b08 <upper_apply_improve+0x298>)
 8008a1c:	483e      	ldr	r0, [pc, #248]	@ (8008b18 <upper_apply_improve+0x2a8>)
 8008a1e:	f001 fb1f 	bl	800a060 <iprintf>
          servo_config_updata(kActionMode, kResetPos);  // 复位模式
 8008a22:	2140      	movs	r1, #64	@ 0x40
 8008a24:	2007      	movs	r0, #7
 8008a26:	f000 fac7 	bl	8008fb8 <servo_config_updata>
          servo_config_updata(kResetMode, reset_mode);  // 记录手动或自动复位
 8008a2a:	7cfb      	ldrb	r3, [r7, #19]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	4619      	mov	r1, r3
 8008a30:	2006      	movs	r0, #6
 8008a32:	f000 fac1 	bl	8008fb8 <servo_config_updata>
          break;
 8008a36:	e04b      	b.n	8008ad0 <upper_apply_improve+0x260>
          notify_low_send_push(head_up_cache.cmd, head_up_cache.len, &(p_up_recv[sizeof(CMD_HEAD_IMPROVE_t)]), kSend);
 8008a38:	4b32      	ldr	r3, [pc, #200]	@ (8008b04 <upper_apply_improve+0x294>)
 8008a3a:	7858      	ldrb	r0, [r3, #1]
 8008a3c:	4b31      	ldr	r3, [pc, #196]	@ (8008b04 <upper_apply_improve+0x294>)
 8008a3e:	7919      	ldrb	r1, [r3, #4]
 8008a40:	4b2f      	ldr	r3, [pc, #188]	@ (8008b00 <upper_apply_improve+0x290>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	1d5a      	adds	r2, r3, #5
 8008a46:	2301      	movs	r3, #1
 8008a48:	f7fe fd36 	bl	80074b8 <notify_low_send_push>
          break;
 8008a4c:	e040      	b.n	8008ad0 <upper_apply_improve+0x260>
          uint32_t index = 0;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60bb      	str	r3, [r7, #8]
          index |= p_up_recv[sizeof(CMD_HEAD_IMPROVE_t) + 1] << 24;  //*((uint32_t*)&(p_up_recv[sizeof(CMD_HEAD_IMPROVE_t)]));
 8008a52:	4b2b      	ldr	r3, [pc, #172]	@ (8008b00 <upper_apply_improve+0x290>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3306      	adds	r3, #6
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	061b      	lsls	r3, r3, #24
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60bb      	str	r3, [r7, #8]
          index |= p_up_recv[sizeof(CMD_HEAD_IMPROVE_t) + 2] << 16;
 8008a62:	4b27      	ldr	r3, [pc, #156]	@ (8008b00 <upper_apply_improve+0x290>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3307      	adds	r3, #7
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	041b      	lsls	r3, r3, #16
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60bb      	str	r3, [r7, #8]
          index |= p_up_recv[sizeof(CMD_HEAD_IMPROVE_t) + 3] << 8;
 8008a72:	4b23      	ldr	r3, [pc, #140]	@ (8008b00 <upper_apply_improve+0x290>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	021b      	lsls	r3, r3, #8
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60bb      	str	r3, [r7, #8]
          index |= p_up_recv[sizeof(CMD_HEAD_IMPROVE_t) + 4] << 0;
 8008a82:	4b1f      	ldr	r3, [pc, #124]	@ (8008b00 <upper_apply_improve+0x290>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3309      	adds	r3, #9
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60bb      	str	r3, [r7, #8]
          LOGI("finding index %04x", index);
 8008a92:	f7fa fa11 	bl	8002eb8 <HAL_GetTick>
 8008a96:	4601      	mov	r1, r0
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008b08 <upper_apply_improve+0x298>)
 8008a9c:	481f      	ldr	r0, [pc, #124]	@ (8008b1c <upper_apply_improve+0x2ac>)
 8008a9e:	f001 fadf 	bl	800a060 <iprintf>
          p_book_dabase = output_book_info(index);
 8008aa2:	68b8      	ldr	r0, [r7, #8]
 8008aa4:	f001 f8fa 	bl	8009c9c <output_book_info>
 8008aa8:	6078      	str	r0, [r7, #4]
          if (p_book_dabase == NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d107      	bne.n	8008ac0 <upper_apply_improve+0x250>
            notify_up_push(head_up_cache.cmd, 0, NULL, kBookEmpty);
 8008ab0:	4b14      	ldr	r3, [pc, #80]	@ (8008b04 <upper_apply_improve+0x294>)
 8008ab2:	7858      	ldrb	r0, [r3, #1]
 8008ab4:	2305      	movs	r3, #5
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2100      	movs	r1, #0
 8008aba:	f7ff f94b 	bl	8007d54 <notify_up_push>
          break;
 8008abe:	e006      	b.n	8008ace <upper_apply_improve+0x25e>
            notify_up_push(head_up_cache.cmd, sizeof(Book_Info_Lower_t) + 3, p_book_dabase, kSend);
 8008ac0:	4b10      	ldr	r3, [pc, #64]	@ (8008b04 <upper_apply_improve+0x294>)
 8008ac2:	7858      	ldrb	r0, [r3, #1]
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	211a      	movs	r1, #26
 8008aca:	f7ff f943 	bl	8007d54 <notify_up_push>
          break;
 8008ace:	bf00      	nop
      LOGI("CMD ANALYSE");
 8008ad0:	f7fa f9f2 	bl	8002eb8 <HAL_GetTick>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8008b08 <upper_apply_improve+0x298>)
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4811      	ldr	r0, [pc, #68]	@ (8008b20 <upper_apply_improve+0x2b0>)
 8008adc:	f001 fac0 	bl	800a060 <iprintf>
      s_upper_State = START;
 8008ae0:	4b06      	ldr	r3, [pc, #24]	@ (8008afc <upper_apply_improve+0x28c>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
      REST_UPPER_SEND();
 8008ae6:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <upper_apply_improve+0x28c>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	4b0d      	ldr	r3, [pc, #52]	@ (8008b24 <upper_apply_improve+0x2b4>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	701a      	strb	r2, [r3, #0]
      break;
 8008af2:	bf00      	nop
}
 8008af4:	bf00      	nop
 8008af6:	3718      	adds	r7, #24
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	20002261 	.word	0x20002261
 8008b00:	2000224c 	.word	0x2000224c
 8008b04:	20002238 	.word	0x20002238
 8008b08:	0800bccc 	.word	0x0800bccc
 8008b0c:	0800b234 	.word	0x0800b234
 8008b10:	20000009 	.word	0x20000009
 8008b14:	20002262 	.word	0x20002262
 8008b18:	0800b3f8 	.word	0x0800b3f8
 8008b1c:	0800b420 	.word	0x0800b420
 8008b20:	0800b3d0 	.word	0x0800b3d0
 8008b24:	20002251 	.word	0x20002251

08008b28 <book_ack_func>:

void book_ack_func(void) {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  if (book_ack) {
 8008b2c:	4b07      	ldr	r3, [pc, #28]	@ (8008b4c <book_ack_func+0x24>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d008      	beq.n	8008b46 <book_ack_func+0x1e>
    notify_low_send_push(kInquireBookInfo, 8, &u32_empty, kSendAck);
 8008b34:	2306      	movs	r3, #6
 8008b36:	4a06      	ldr	r2, [pc, #24]	@ (8008b50 <book_ack_func+0x28>)
 8008b38:	2108      	movs	r1, #8
 8008b3a:	2011      	movs	r0, #17
 8008b3c:	f7fe fcbc 	bl	80074b8 <notify_low_send_push>
    book_ack = false;
 8008b40:	4b02      	ldr	r3, [pc, #8]	@ (8008b4c <book_ack_func+0x24>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	701a      	strb	r2, [r3, #0]
  }
}
 8008b46:	bf00      	nop
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20002258 	.word	0x20002258
 8008b50:	2000225c 	.word	0x2000225c

08008b54 <set_upper_process>:
    1.发信号给下位机
    2.发信号给上位机
  */
}

void    set_upper_process(bool state) { s_upper_process = state; }
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	71fb      	strb	r3, [r7, #7]
 8008b5e:	4a04      	ldr	r2, [pc, #16]	@ (8008b70 <set_upper_process+0x1c>)
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	7013      	strb	r3, [r2, #0]
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bc80      	pop	{r7}
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	20002251 	.word	0x20002251

08008b74 <set_lower_process>:
void    set_lower_process(bool state) { s_lower_process = state; }
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	71fb      	strb	r3, [r7, #7]
 8008b7e:	4a04      	ldr	r2, [pc, #16]	@ (8008b90 <set_lower_process+0x1c>)
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	7013      	strb	r3, [r2, #0]
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bc80      	pop	{r7}
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20002250 	.word	0x20002250

08008b94 <app_servo_action_init>:
static uint8_t ack_reset;

static FSM_STATE_t app_move(void);
static FSM_STATE_t app_reset(void);

void app_servo_action_init(void) { p_servo_config = get_servo_config(); }
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	f000 fa80 	bl	800909c <get_servo_config>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	4a02      	ldr	r2, [pc, #8]	@ (8008ba8 <app_servo_action_init+0x14>)
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	bf00      	nop
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20002264 	.word	0x20002264

08008bac <app_action>:

void app_action(void) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  switch (s_State_Servo) {
 8008bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c5c <app_action+0xb0>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d021      	beq.n	8008bfc <app_action+0x50>
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	dc4c      	bgt.n	8008c56 <app_action+0xaa>
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d002      	beq.n	8008bc6 <app_action+0x1a>
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d02d      	beq.n	8008c20 <app_action+0x74>
        p_servo_config->motion_mode = 0;
        s_State_Servo               = STOP;
      }
      break;
  }
}
 8008bc4:	e047      	b.n	8008c56 <app_action+0xaa>
      if (p_servo_config->motion_mode != kResetPos) {
 8008bc6:	4b26      	ldr	r3, [pc, #152]	@ (8008c60 <app_action+0xb4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	7adb      	ldrb	r3, [r3, #11]
 8008bcc:	2b40      	cmp	r3, #64	@ 0x40
 8008bce:	d139      	bne.n	8008c44 <app_action+0x98>
      if (!app_reset()) {
 8008bd0:	f000 f918 	bl	8008e04 <app_reset>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d036      	beq.n	8008c48 <app_action+0x9c>
      ack_reset = 0x02;
 8008bda:	4b22      	ldr	r3, [pc, #136]	@ (8008c64 <app_action+0xb8>)
 8008bdc:	2202      	movs	r2, #2
 8008bde:	701a      	strb	r2, [r3, #0]
      notify_up_push(kResetPos, 5, &ack_reset, kSend);
 8008be0:	2301      	movs	r3, #1
 8008be2:	4a20      	ldr	r2, [pc, #128]	@ (8008c64 <app_action+0xb8>)
 8008be4:	2105      	movs	r1, #5
 8008be6:	2040      	movs	r0, #64	@ 0x40
 8008be8:	f7ff f8b4 	bl	8007d54 <notify_up_push>
      p_servo_config->motion_mode = 0;
 8008bec:	4b1c      	ldr	r3, [pc, #112]	@ (8008c60 <app_action+0xb4>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	72da      	strb	r2, [r3, #11]
      s_State_Servo               = STOP;
 8008bf4:	4b19      	ldr	r3, [pc, #100]	@ (8008c5c <app_action+0xb0>)
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	701a      	strb	r2, [r3, #0]
      break;
 8008bfa:	e02c      	b.n	8008c56 <app_action+0xaa>
      if (p_servo_config->motion_mode == kMoveAction) {
 8008bfc:	4b18      	ldr	r3, [pc, #96]	@ (8008c60 <app_action+0xb4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	7adb      	ldrb	r3, [r3, #11]
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	d103      	bne.n	8008c0e <app_action+0x62>
        s_State_Servo = MOVING;
 8008c06:	4b15      	ldr	r3, [pc, #84]	@ (8008c5c <app_action+0xb0>)
 8008c08:	2202      	movs	r2, #2
 8008c0a:	701a      	strb	r2, [r3, #0]
      break;
 8008c0c:	e01e      	b.n	8008c4c <app_action+0xa0>
      } else if (p_servo_config->motion_mode == kResetMode) {
 8008c0e:	4b14      	ldr	r3, [pc, #80]	@ (8008c60 <app_action+0xb4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	7adb      	ldrb	r3, [r3, #11]
 8008c14:	2b06      	cmp	r3, #6
 8008c16:	d119      	bne.n	8008c4c <app_action+0xa0>
        s_State_Servo = SETUP_RESET_POS;
 8008c18:	4b10      	ldr	r3, [pc, #64]	@ (8008c5c <app_action+0xb0>)
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	701a      	strb	r2, [r3, #0]
      break;
 8008c1e:	e015      	b.n	8008c4c <app_action+0xa0>
      if (p_servo_config->motion_mode == kMoveAction) {
 8008c20:	4b0f      	ldr	r3, [pc, #60]	@ (8008c60 <app_action+0xb4>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	7adb      	ldrb	r3, [r3, #11]
 8008c26:	2b20      	cmp	r3, #32
 8008c28:	d112      	bne.n	8008c50 <app_action+0xa4>
        if (!app_move()) {
 8008c2a:	f000 f81d 	bl	8008c68 <app_move>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00f      	beq.n	8008c54 <app_action+0xa8>
        p_servo_config->motion_mode = 0;
 8008c34:	4b0a      	ldr	r3, [pc, #40]	@ (8008c60 <app_action+0xb4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	72da      	strb	r2, [r3, #11]
        s_State_Servo               = STOP;
 8008c3c:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <app_action+0xb0>)
 8008c3e:	2203      	movs	r2, #3
 8008c40:	701a      	strb	r2, [r3, #0]
      break;
 8008c42:	e005      	b.n	8008c50 <app_action+0xa4>
        break;
 8008c44:	bf00      	nop
 8008c46:	e006      	b.n	8008c56 <app_action+0xaa>
        break;
 8008c48:	bf00      	nop
 8008c4a:	e004      	b.n	8008c56 <app_action+0xaa>
      break;
 8008c4c:	bf00      	nop
 8008c4e:	e002      	b.n	8008c56 <app_action+0xaa>
      break;
 8008c50:	bf00      	nop
 8008c52:	e000      	b.n	8008c56 <app_action+0xaa>
          break;
 8008c54:	bf00      	nop
}
 8008c56:	bf00      	nop
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	2000000a 	.word	0x2000000a
 8008c60:	20002264 	.word	0x20002264
 8008c64:	20002268 	.word	0x20002268

08008c68 <app_move>:

FSM_STATE_t app_move(void) {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
    STOP,
  } s_State = START;
  static int16_t pos_cur;
  static int16_t pos_tar;
  uint8_t        direction_moving;
  switch (s_State) {
 8008c6e:	4b5e      	ldr	r3, [pc, #376]	@ (8008de8 <app_move+0x180>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	f200 80b3 	bhi.w	8008dde <app_move+0x176>
 8008c78:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <app_move+0x18>)
 8008c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7e:	bf00      	nop
 8008c80:	08008c91 	.word	0x08008c91
 8008c84:	08008ca5 	.word	0x08008ca5
 8008c88:	08008d47 	.word	0x08008d47
 8008c8c:	08008dbf 	.word	0x08008dbf
    case START:

      pos_tar = p_servo_config->pos;  // get_servo_config_pos();
 8008c90:	4b56      	ldr	r3, [pc, #344]	@ (8008dec <app_move+0x184>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	889b      	ldrh	r3, [r3, #4]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	b21a      	sxth	r2, r3
 8008c9a:	4b55      	ldr	r3, [pc, #340]	@ (8008df0 <app_move+0x188>)
 8008c9c:	801a      	strh	r2, [r3, #0]
      s_State = MOVE;
 8008c9e:	4b52      	ldr	r3, [pc, #328]	@ (8008de8 <app_move+0x180>)
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	701a      	strb	r2, [r3, #0]
    case MOVE:
      pos_cur = get_Position_mm(GetMoterStateReg(), 4);
 8008ca4:	f7f7 faf2 	bl	800028c <GetMoterStateReg>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2104      	movs	r1, #4
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fa09 	bl	80090c4 <get_Position_mm>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	b21a      	sxth	r2, r3
 8008cb6:	4b4f      	ldr	r3, [pc, #316]	@ (8008df4 <app_move+0x18c>)
 8008cb8:	801a      	strh	r2, [r3, #0]
      // if (ON_LEFT == p_servo_config->location) {
      //   direction_moving =
      // }
      if (pos_cur > pos_tar + 10) {
 8008cba:	4b4e      	ldr	r3, [pc, #312]	@ (8008df4 <app_move+0x18c>)
 8008cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8008df0 <app_move+0x188>)
 8008cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cc8:	330a      	adds	r3, #10
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	dd02      	ble.n	8008cd4 <app_move+0x6c>
        direction_moving = KGoLeft;
 8008cce:	23cc      	movs	r3, #204	@ 0xcc
 8008cd0:	71fb      	strb	r3, [r7, #7]
 8008cd2:	e024      	b.n	8008d1e <app_move+0xb6>
      } else if (pos_cur < pos_tar - 10) {
 8008cd4:	4b47      	ldr	r3, [pc, #284]	@ (8008df4 <app_move+0x18c>)
 8008cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4b44      	ldr	r3, [pc, #272]	@ (8008df0 <app_move+0x188>)
 8008cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ce2:	3b0a      	subs	r3, #10
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	da02      	bge.n	8008cee <app_move+0x86>
        direction_moving = KGoRight;
 8008ce8:	230c      	movs	r3, #12
 8008cea:	71fb      	strb	r3, [r7, #7]
 8008cec:	e017      	b.n	8008d1e <app_move+0xb6>
      } else if (pos_cur >= pos_tar - 10 && pos_cur <= pos_tar + 10) {
 8008cee:	4b41      	ldr	r3, [pc, #260]	@ (8008df4 <app_move+0x18c>)
 8008cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8008df0 <app_move+0x188>)
 8008cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cfc:	3b0a      	subs	r3, #10
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	db0d      	blt.n	8008d1e <app_move+0xb6>
 8008d02:	4b3c      	ldr	r3, [pc, #240]	@ (8008df4 <app_move+0x18c>)
 8008d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	4b39      	ldr	r3, [pc, #228]	@ (8008df0 <app_move+0x188>)
 8008d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d10:	330a      	adds	r3, #10
 8008d12:	429a      	cmp	r2, r3
 8008d14:	dc03      	bgt.n	8008d1e <app_move+0xb6>
        s_State = STOP;
 8008d16:	4b34      	ldr	r3, [pc, #208]	@ (8008de8 <app_move+0x180>)
 8008d18:	2203      	movs	r2, #3
 8008d1a:	701a      	strb	r2, [r3, #0]
        break;
 8008d1c:	e05f      	b.n	8008dde <app_move+0x176>
      }

      if (servo_move(direction_moving)) {
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 facd 	bl	80092c0 <servo_move>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d053      	beq.n	8008dd4 <app_move+0x16c>
        servo_info_updata(direction_moving, p_servo_config->speed);
 8008d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8008dec <app_move+0x184>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	88db      	ldrh	r3, [r3, #6]
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	4611      	mov	r1, r2
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 f90f 	bl	8008f5c <servo_info_updata>
        s_State = ARRIVE_WAIT;
 8008d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008de8 <app_move+0x180>)
 8008d40:	2202      	movs	r2, #2
 8008d42:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008d44:	e046      	b.n	8008dd4 <app_move+0x16c>
    case ARRIVE_WAIT:
      pos_cur = get_Position_mm(GetMoterStateReg(), 4);
 8008d46:	f7f7 faa1 	bl	800028c <GetMoterStateReg>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2104      	movs	r1, #4
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 f9b8 	bl	80090c4 <get_Position_mm>
 8008d54:	4603      	mov	r3, r0
 8008d56:	b21a      	sxth	r2, r3
 8008d58:	4b26      	ldr	r3, [pc, #152]	@ (8008df4 <app_move+0x18c>)
 8008d5a:	801a      	strh	r2, [r3, #0]
      LOGI("pos_tar1 is :%04x", pos_tar);
 8008d5c:	f7fa f8ac 	bl	8002eb8 <HAL_GetTick>
 8008d60:	4601      	mov	r1, r0
 8008d62:	4b23      	ldr	r3, [pc, #140]	@ (8008df0 <app_move+0x188>)
 8008d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d68:	4a23      	ldr	r2, [pc, #140]	@ (8008df8 <app_move+0x190>)
 8008d6a:	4824      	ldr	r0, [pc, #144]	@ (8008dfc <app_move+0x194>)
 8008d6c:	f001 f978 	bl	800a060 <iprintf>
      LOGI("cur pos is %04x", pos_cur);
 8008d70:	f7fa f8a2 	bl	8002eb8 <HAL_GetTick>
 8008d74:	4601      	mov	r1, r0
 8008d76:	4b1f      	ldr	r3, [pc, #124]	@ (8008df4 <app_move+0x18c>)
 8008d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8008df8 <app_move+0x190>)
 8008d7e:	4820      	ldr	r0, [pc, #128]	@ (8008e00 <app_move+0x198>)
 8008d80:	f001 f96e 	bl	800a060 <iprintf>
      if (pos_cur >= pos_tar - 10 && pos_cur <= pos_tar + 10 && pos_cur != 0xff) {
 8008d84:	4b1b      	ldr	r3, [pc, #108]	@ (8008df4 <app_move+0x18c>)
 8008d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4b18      	ldr	r3, [pc, #96]	@ (8008df0 <app_move+0x188>)
 8008d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d92:	3b0a      	subs	r3, #10
 8008d94:	429a      	cmp	r2, r3
 8008d96:	db1f      	blt.n	8008dd8 <app_move+0x170>
 8008d98:	4b16      	ldr	r3, [pc, #88]	@ (8008df4 <app_move+0x18c>)
 8008d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	4b13      	ldr	r3, [pc, #76]	@ (8008df0 <app_move+0x188>)
 8008da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008da6:	330a      	adds	r3, #10
 8008da8:	429a      	cmp	r2, r3
 8008daa:	dc15      	bgt.n	8008dd8 <app_move+0x170>
 8008dac:	4b11      	ldr	r3, [pc, #68]	@ (8008df4 <app_move+0x18c>)
 8008dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008db2:	2bff      	cmp	r3, #255	@ 0xff
 8008db4:	d010      	beq.n	8008dd8 <app_move+0x170>
        s_State = STOP;
 8008db6:	4b0c      	ldr	r3, [pc, #48]	@ (8008de8 <app_move+0x180>)
 8008db8:	2203      	movs	r2, #3
 8008dba:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008dbc:	e00c      	b.n	8008dd8 <app_move+0x170>
    case STOP:
      if (servo_speed_set(0)) {
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	f000 fa06 	bl	80091d0 <servo_speed_set>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d008      	beq.n	8008ddc <app_move+0x174>
        s_State = START;
 8008dca:	4b07      	ldr	r3, [pc, #28]	@ (8008de8 <app_move+0x180>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	701a      	strb	r2, [r3, #0]
        return fsm_cpl;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e005      	b.n	8008de0 <app_move+0x178>
      break;
 8008dd4:	bf00      	nop
 8008dd6:	e002      	b.n	8008dde <app_move+0x176>
      break;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <app_move+0x176>
      }

      break;
 8008ddc:	bf00      	nop
  }

  return fsm_onging;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20002269 	.word	0x20002269
 8008dec:	20002264 	.word	0x20002264
 8008df0:	2000226a 	.word	0x2000226a
 8008df4:	2000226c 	.word	0x2000226c
 8008df8:	0800bce0 	.word	0x0800bce0
 8008dfc:	0800b450 	.word	0x0800b450
 8008e00:	0800b480 	.word	0x0800b480

08008e04 <app_reset>:

FSM_STATE_t app_reset(void) {
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
    CLEAR_PLUSE,
    STOP,
  } s_State = START;
  uint8_t                direction_moving;
  static Moter_Config_t* servo_config;
  switch (s_State) {
 8008e0a:	4b42      	ldr	r3, [pc, #264]	@ (8008f14 <app_reset+0x110>)
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d87a      	bhi.n	8008f08 <app_reset+0x104>
 8008e12:	a201      	add	r2, pc, #4	@ (adr r2, 8008e18 <app_reset+0x14>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008e2d 	.word	0x08008e2d
 8008e1c:	08008e4b 	.word	0x08008e4b
 8008e20:	08008e8d 	.word	0x08008e8d
 8008e24:	08008ebb 	.word	0x08008ebb
 8008e28:	08008ecd 	.word	0x08008ecd
    case START:
      servo_config = get_servo_config();
 8008e2c:	f000 f936 	bl	800909c <get_servo_config>
 8008e30:	4603      	mov	r3, r0
 8008e32:	4a39      	ldr	r2, [pc, #228]	@ (8008f18 <app_reset+0x114>)
 8008e34:	6013      	str	r3, [r2, #0]
      s_State      = MOVE;
 8008e36:	4b37      	ldr	r3, [pc, #220]	@ (8008f14 <app_reset+0x110>)
 8008e38:	2201      	movs	r2, #1
 8008e3a:	701a      	strb	r2, [r3, #0]
      if (ON_LEFT == servo_config->location) {
        direction_moving = KGoLeft;
      } else if (ON_RIGHT == servo_config->location) {
 8008e3c:	4b36      	ldr	r3, [pc, #216]	@ (8008f18 <app_reset+0x114>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	7a5b      	ldrb	r3, [r3, #9]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <app_reset+0x46>
        direction_moving = KGoRight;
 8008e46:	230c      	movs	r3, #12
 8008e48:	71fb      	strb	r3, [r7, #7]
      }
    case MOVE:
      if (p_servo_config->reset_mode == 0x01) {
 8008e4a:	4b34      	ldr	r3, [pc, #208]	@ (8008f1c <app_reset+0x118>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	7a9b      	ldrb	r3, [r3, #10]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d103      	bne.n	8008e5c <app_reset+0x58>
        s_State = ARRIVE_WAIT;
 8008e54:	4b2f      	ldr	r3, [pc, #188]	@ (8008f14 <app_reset+0x110>)
 8008e56:	2202      	movs	r2, #2
 8008e58:	701a      	strb	r2, [r3, #0]
          LOGI("wait reset pos");
          s_State = ARRIVE_WAIT;
        }
      }

      break;
 8008e5a:	e052      	b.n	8008f02 <app_reset+0xfe>
      } else if (p_servo_config->reset_mode == 0x02) {  // 先设0x02为自动复位
 8008e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8008f1c <app_reset+0x118>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	7a9b      	ldrb	r3, [r3, #10]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d14d      	bne.n	8008f02 <app_reset+0xfe>
        if (servo_move(direction_moving)) {
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fa29 	bl	80092c0 <servo_move>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d046      	beq.n	8008f02 <app_reset+0xfe>
          LOGI("wait reset pos");
 8008e74:	f7fa f820 	bl	8002eb8 <HAL_GetTick>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	4a29      	ldr	r2, [pc, #164]	@ (8008f20 <app_reset+0x11c>)
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4829      	ldr	r0, [pc, #164]	@ (8008f24 <app_reset+0x120>)
 8008e80:	f001 f8ee 	bl	800a060 <iprintf>
          s_State = ARRIVE_WAIT;
 8008e84:	4b23      	ldr	r3, [pc, #140]	@ (8008f14 <app_reset+0x110>)
 8008e86:	2202      	movs	r2, #2
 8008e88:	701a      	strb	r2, [r3, #0]
      break;
 8008e8a:	e03a      	b.n	8008f02 <app_reset+0xfe>

    case ARRIVE_WAIT:
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	4826      	ldr	r0, [pc, #152]	@ (8008f28 <app_reset+0x124>)
 8008e90:	f7fb f966 	bl	8004160 <HAL_GPIO_ReadPin>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10b      	bne.n	8008eb2 <app_reset+0xae>
        s_State = CLEAR_PLUSE;
 8008e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8008f14 <app_reset+0x110>)
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	701a      	strb	r2, [r3, #0]
        LOGI("ON");
 8008ea0:	f7fa f80a 	bl	8002eb8 <HAL_GetTick>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8008f20 <app_reset+0x11c>)
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4820      	ldr	r0, [pc, #128]	@ (8008f2c <app_reset+0x128>)
 8008eac:	f001 f8d8 	bl	800a060 <iprintf>
        break;
 8008eb0:	e02a      	b.n	8008f08 <app_reset+0x104>
      }
      // } else if (LimitSensorOFF_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {
      //   LOGI("OFF");
      // }
      //  LOGI("ARRIVE WAIT");
      s_State = ARRIVE_WAIT;
 8008eb2:	4b18      	ldr	r3, [pc, #96]	@ (8008f14 <app_reset+0x110>)
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	701a      	strb	r2, [r3, #0]
      break;
 8008eb8:	e026      	b.n	8008f08 <app_reset+0x104>

    case CLEAR_PLUSE:
      if (!Clear_Pluse()) {
 8008eba:	f000 fba7 	bl	800960c <Clear_Pluse>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d120      	bne.n	8008f06 <app_reset+0x102>
        s_State = STOP;
 8008ec4:	4b13      	ldr	r3, [pc, #76]	@ (8008f14 <app_reset+0x110>)
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	701a      	strb	r2, [r3, #0]
        break;
 8008eca:	e01d      	b.n	8008f08 <app_reset+0x104>
      }
      break;
    case STOP:

      if (servo_speed_set(0)) {
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f000 f97f 	bl	80091d0 <servo_speed_set>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d010      	beq.n	8008efa <app_reset+0xf6>
        LOGI("RESET POS SUCESS");
 8008ed8:	f7f9 ffee 	bl	8002eb8 <HAL_GetTick>
 8008edc:	4603      	mov	r3, r0
 8008ede:	4a10      	ldr	r2, [pc, #64]	@ (8008f20 <app_reset+0x11c>)
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4813      	ldr	r0, [pc, #76]	@ (8008f30 <app_reset+0x12c>)
 8008ee4:	f001 f8bc 	bl	800a060 <iprintf>

        servo_config_updata(kResetState, 0x01);
 8008ee8:	2101      	movs	r1, #1
 8008eea:	2000      	movs	r0, #0
 8008eec:	f000 f864 	bl	8008fb8 <servo_config_updata>
        s_State = START;
 8008ef0:	4b08      	ldr	r3, [pc, #32]	@ (8008f14 <app_reset+0x110>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	701a      	strb	r2, [r3, #0]
        return fsm_cpl;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e007      	b.n	8008f0a <app_reset+0x106>
      }
      s_State = STOP;
 8008efa:	4b06      	ldr	r3, [pc, #24]	@ (8008f14 <app_reset+0x110>)
 8008efc:	2204      	movs	r2, #4
 8008efe:	701a      	strb	r2, [r3, #0]
      break;
 8008f00:	e002      	b.n	8008f08 <app_reset+0x104>
      break;
 8008f02:	bf00      	nop
 8008f04:	e000      	b.n	8008f08 <app_reset+0x104>
      break;
 8008f06:	bf00      	nop
  }
  return fsm_onging;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	2000226e 	.word	0x2000226e
 8008f18:	20002270 	.word	0x20002270
 8008f1c:	20002264 	.word	0x20002264
 8008f20:	0800bcec 	.word	0x0800bcec
 8008f24:	0800b4ac 	.word	0x0800b4ac
 8008f28:	40011000 	.word	0x40011000
 8008f2c:	0800b4d8 	.word	0x0800b4d8
 8008f30:	0800b4f8 	.word	0x0800b4f8

08008f34 <servo_config_init>:

Motor_t               Servo_info;
Check_Device_Info_t   check_info;
static Moter_Config_t Servo_Config;

void servo_config_init(void) {
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
  Servo_Config.location    = ON_LEFT;  // 伺服电机位置
 8008f38:	4b07      	ldr	r3, [pc, #28]	@ (8008f58 <servo_config_init+0x24>)
 8008f3a:	22ff      	movs	r2, #255	@ 0xff
 8008f3c:	725a      	strb	r2, [r3, #9]
  Servo_Config.speed       = 30;
 8008f3e:	4b06      	ldr	r3, [pc, #24]	@ (8008f58 <servo_config_init+0x24>)
 8008f40:	221e      	movs	r2, #30
 8008f42:	80da      	strh	r2, [r3, #6]
  Servo_Config.reset_state = 0;  // 未复位
 8008f44:	4b04      	ldr	r3, [pc, #16]	@ (8008f58 <servo_config_init+0x24>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	801a      	strh	r2, [r3, #0]
  Servo_Config.connect     = 1;  // 已经连接
 8008f4a:	4b03      	ldr	r3, [pc, #12]	@ (8008f58 <servo_config_init+0x24>)
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	805a      	strh	r2, [r3, #2]
}
 8008f50:	bf00      	nop
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bc80      	pop	{r7}
 8008f56:	4770      	bx	lr
 8008f58:	20002280 	.word	0x20002280

08008f5c <servo_info_updata>:

void servo_info_updata(ENUM_SERVO_INFO info_type, uint16_t info) {
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	460a      	mov	r2, r1
 8008f66:	71fb      	strb	r3, [r7, #7]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	80bb      	strh	r3, [r7, #4]
  switch (info_type) {
 8008f6c:	79fb      	ldrb	r3, [r7, #7]
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d81b      	bhi.n	8008faa <servo_info_updata+0x4e>
 8008f72:	a201      	add	r2, pc, #4	@ (adr r2, 8008f78 <servo_info_updata+0x1c>)
 8008f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f78:	08008f89 	.word	0x08008f89
 8008f7c:	08008f91 	.word	0x08008f91
 8008f80:	08008f99 	.word	0x08008f99
 8008f84:	08008fa1 	.word	0x08008fa1
    case kConnectInfo:
      Servo_info.connect = info;
 8008f88:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb4 <servo_info_updata+0x58>)
 8008f8a:	88bb      	ldrh	r3, [r7, #4]
 8008f8c:	8053      	strh	r3, [r2, #2]
      break;
 8008f8e:	e00c      	b.n	8008faa <servo_info_updata+0x4e>
    case kPosInfo:
      Servo_info.pos = info;
 8008f90:	4a08      	ldr	r2, [pc, #32]	@ (8008fb4 <servo_info_updata+0x58>)
 8008f92:	88bb      	ldrh	r3, [r7, #4]
 8008f94:	8093      	strh	r3, [r2, #4]
      break;
 8008f96:	e008      	b.n	8008faa <servo_info_updata+0x4e>
    case kSpeedInfo:
      Servo_info.speed = info;
 8008f98:	4a06      	ldr	r2, [pc, #24]	@ (8008fb4 <servo_info_updata+0x58>)
 8008f9a:	88bb      	ldrh	r3, [r7, #4]
 8008f9c:	80d3      	strh	r3, [r2, #6]
      break;
 8008f9e:	e004      	b.n	8008faa <servo_info_updata+0x4e>
    case kDirectionInfo:
      Servo_info.diretion = (uint8_t)info;
 8008fa0:	88bb      	ldrh	r3, [r7, #4]
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	4b03      	ldr	r3, [pc, #12]	@ (8008fb4 <servo_info_updata+0x58>)
 8008fa6:	721a      	strb	r2, [r3, #8]
      break;
 8008fa8:	bf00      	nop
      // case kResetInfo:
      //   Servo_info.reset_state = (uint8_t)info;
      //   break;
  }
}
 8008faa:	bf00      	nop
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bc80      	pop	{r7}
 8008fb2:	4770      	bx	lr
 8008fb4:	20002274 	.word	0x20002274

08008fb8 <servo_config_updata>:
      check_info.radar_connect = (uint8_t)config_info;
      break;
  }
}

void servo_config_updata(ENUM_CONFIG_SERVO config_type, uint16_t config_info) {
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	460a      	mov	r2, r1
 8008fc2:	71fb      	strb	r3, [r7, #7]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	80bb      	strh	r3, [r7, #4]
  switch (config_type) {
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	2b07      	cmp	r3, #7
 8008fcc:	d85a      	bhi.n	8009084 <servo_config_updata+0xcc>
 8008fce:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <servo_config_updata+0x1c>)
 8008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd4:	08008ff5 	.word	0x08008ff5
 8008fd8:	08008ffd 	.word	0x08008ffd
 8008fdc:	08009005 	.word	0x08009005
 8008fe0:	08009049 	.word	0x08009049
 8008fe4:	08009067 	.word	0x08009067
 8008fe8:	08009085 	.word	0x08009085
 8008fec:	08009071 	.word	0x08009071
 8008ff0:	0800907b 	.word	0x0800907b
    case kResetState:
      Servo_Config.reset_state = config_info;
 8008ff4:	4a25      	ldr	r2, [pc, #148]	@ (800908c <servo_config_updata+0xd4>)
 8008ff6:	88bb      	ldrh	r3, [r7, #4]
 8008ff8:	8013      	strh	r3, [r2, #0]
      break;
 8008ffa:	e043      	b.n	8009084 <servo_config_updata+0xcc>
    case kConnect:
      Servo_Config.connect = config_info;
 8008ffc:	4a23      	ldr	r2, [pc, #140]	@ (800908c <servo_config_updata+0xd4>)
 8008ffe:	88bb      	ldrh	r3, [r7, #4]
 8009000:	8053      	strh	r3, [r2, #2]
      break;
 8009002:	e03f      	b.n	8009084 <servo_config_updata+0xcc>
    case kPos:

      if (config_info >= 1000) {
 8009004:	88bb      	ldrh	r3, [r7, #4]
 8009006:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800900a:	d303      	bcc.n	8009014 <servo_config_updata+0x5c>
        config_info = 1000;
 800900c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009010:	80bb      	strh	r3, [r7, #4]
 8009012:	e004      	b.n	800901e <servo_config_updata+0x66>
      } else if (config_info <= 0) {
 8009014:	88bb      	ldrh	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <servo_config_updata+0x66>
        config_info = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	80bb      	strh	r3, [r7, #4]
      }

      Servo_Config.pos = config_info;
 800901e:	4a1b      	ldr	r2, [pc, #108]	@ (800908c <servo_config_updata+0xd4>)
 8009020:	88bb      	ldrh	r3, [r7, #4]
 8009022:	8093      	strh	r3, [r2, #4]
      LOGI("SERVO POS %04X", Servo_Config.pos);
 8009024:	f7f9 ff48 	bl	8002eb8 <HAL_GetTick>
 8009028:	4601      	mov	r1, r0
 800902a:	4b18      	ldr	r3, [pc, #96]	@ (800908c <servo_config_updata+0xd4>)
 800902c:	889b      	ldrh	r3, [r3, #4]
 800902e:	4a18      	ldr	r2, [pc, #96]	@ (8009090 <servo_config_updata+0xd8>)
 8009030:	4818      	ldr	r0, [pc, #96]	@ (8009094 <servo_config_updata+0xdc>)
 8009032:	f001 f815 	bl	800a060 <iprintf>
      LOGI("SERV1 POS %04X", config_info);
 8009036:	f7f9 ff3f 	bl	8002eb8 <HAL_GetTick>
 800903a:	4601      	mov	r1, r0
 800903c:	88bb      	ldrh	r3, [r7, #4]
 800903e:	4a14      	ldr	r2, [pc, #80]	@ (8009090 <servo_config_updata+0xd8>)
 8009040:	4815      	ldr	r0, [pc, #84]	@ (8009098 <servo_config_updata+0xe0>)
 8009042:	f001 f80d 	bl	800a060 <iprintf>

      break;
 8009046:	e01d      	b.n	8009084 <servo_config_updata+0xcc>
    case kSpeed:
      if (config_info >= 100) {
 8009048:	88bb      	ldrh	r3, [r7, #4]
 800904a:	2b63      	cmp	r3, #99	@ 0x63
 800904c:	d902      	bls.n	8009054 <servo_config_updata+0x9c>
        config_info = 100;
 800904e:	2364      	movs	r3, #100	@ 0x64
 8009050:	80bb      	strh	r3, [r7, #4]
 8009052:	e004      	b.n	800905e <servo_config_updata+0xa6>
      } else if (config_info <= 0) {
 8009054:	88bb      	ldrh	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <servo_config_updata+0xa6>
        config_info = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	80bb      	strh	r3, [r7, #4]
      }
      Servo_Config.speed = config_info;
 800905e:	4a0b      	ldr	r2, [pc, #44]	@ (800908c <servo_config_updata+0xd4>)
 8009060:	88bb      	ldrh	r3, [r7, #4]
 8009062:	80d3      	strh	r3, [r2, #6]
      break;
 8009064:	e00e      	b.n	8009084 <servo_config_updata+0xcc>
    case kDirection:
      Servo_Config.diretion = (uint8_t)config_info;
 8009066:	88bb      	ldrh	r3, [r7, #4]
 8009068:	b2da      	uxtb	r2, r3
 800906a:	4b08      	ldr	r3, [pc, #32]	@ (800908c <servo_config_updata+0xd4>)
 800906c:	721a      	strb	r2, [r3, #8]
      break;
 800906e:	e009      	b.n	8009084 <servo_config_updata+0xcc>
    case kResetMode:
      Servo_Config.reset_mode = (uint8_t)config_info;
 8009070:	88bb      	ldrh	r3, [r7, #4]
 8009072:	b2da      	uxtb	r2, r3
 8009074:	4b05      	ldr	r3, [pc, #20]	@ (800908c <servo_config_updata+0xd4>)
 8009076:	729a      	strb	r2, [r3, #10]
      break;
 8009078:	e004      	b.n	8009084 <servo_config_updata+0xcc>
    case kActionMode:
      Servo_Config.motion_mode = (uint8_t)config_info;
 800907a:	88bb      	ldrh	r3, [r7, #4]
 800907c:	b2da      	uxtb	r2, r3
 800907e:	4b03      	ldr	r3, [pc, #12]	@ (800908c <servo_config_updata+0xd4>)
 8009080:	72da      	strb	r2, [r3, #11]
      break;
 8009082:	bf00      	nop
  }
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	20002280 	.word	0x20002280
 8009090:	0800bcf8 	.word	0x0800bcf8
 8009094:	0800b524 	.word	0x0800b524
 8009098:	0800b550 	.word	0x0800b550

0800909c <get_servo_config>:

Moter_Config_t* get_servo_config(void) { return &Servo_Config; }
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
 80090a0:	4b02      	ldr	r3, [pc, #8]	@ (80090ac <get_servo_config+0x10>)
 80090a2:	4618      	mov	r0, r3
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	20002280 	.word	0x20002280

080090b0 <get_servo_info>:
uint16_t get_servo_config_pos(void) {
  LOGI("TAR POS IS : %04x", Servo_Config.pos);
  return Servo_Config.pos;
}

Motor_t* get_servo_info(void) { return &Servo_info; }
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	4b02      	ldr	r3, [pc, #8]	@ (80090c0 <get_servo_info+0x10>)
 80090b6:	4618      	mov	r0, r3
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bc80      	pop	{r7}
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	20002274 	.word	0x20002274

080090c4 <get_Position_mm>:

uint16_t get_Position_mm(uint8_t* buf, uint8_t len) {  // 计算获取当前距离
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  uint16_t       Position_mm_buf;
  uint32_t       Position_um;
  uint32_t       time = HAL_GetTick();
 80090d0:	f7f9 fef2 	bl	8002eb8 <HAL_GetTick>
 80090d4:	6138      	str	r0, [r7, #16]
  static uint8_t num;

  while (!Servo_info.uart_recv_state) {
 80090d6:	e014      	b.n	8009102 <get_Position_mm+0x3e>
    if (has_pass_time(time) > 100) {
 80090d8:	6938      	ldr	r0, [r7, #16]
 80090da:	f000 fee7 	bl	8009eac <has_pass_time>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b64      	cmp	r3, #100	@ 0x64
 80090e2:	d90a      	bls.n	80090fa <get_Position_mm+0x36>
      LOGW("time out");
 80090e4:	f7f9 fee8 	bl	8002eb8 <HAL_GetTick>
 80090e8:	4603      	mov	r3, r0
 80090ea:	4a33      	ldr	r2, [pc, #204]	@ (80091b8 <get_Position_mm+0xf4>)
 80090ec:	4619      	mov	r1, r3
 80090ee:	4833      	ldr	r0, [pc, #204]	@ (80091bc <get_Position_mm+0xf8>)
 80090f0:	f000 ffb6 	bl	800a060 <iprintf>
      return 0xffff;
 80090f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80090f8:	e059      	b.n	80091ae <get_Position_mm+0xea>
    }
    Uart_Send_MovementRegister_ServoMotor(0, 0);
 80090fa:	2100      	movs	r1, #0
 80090fc:	2000      	movs	r0, #0
 80090fe:	f7f7 ffb5 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
  while (!Servo_info.uart_recv_state) {
 8009102:	4b2f      	ldr	r3, [pc, #188]	@ (80091c0 <get_Position_mm+0xfc>)
 8009104:	7a5b      	ldrb	r3, [r3, #9]
 8009106:	f083 0301 	eor.w	r3, r3, #1
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e3      	bne.n	80090d8 <get_Position_mm+0x14>
  }
  Servo_info.uart_recv_state = false;
 8009110:	4b2b      	ldr	r3, [pc, #172]	@ (80091c0 <get_Position_mm+0xfc>)
 8009112:	2200      	movs	r2, #0
 8009114:	725a      	strb	r2, [r3, #9]
  // for (int i = 0; i < 4; i++) {
  //   LOGI("%02x", buf[i]);
  // }

  if (0x80 == (buf[2] & 0x80)) {  // 负方向，向右
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	3302      	adds	r3, #2
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	b25b      	sxtb	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	da1e      	bge.n	8009160 <get_Position_mm+0x9c>
    Position_um = 0xFFFFFFFF - (((uint32_t)buf[2] << 24) + ((uint32_t)buf[3] << 16) + ((uint32_t)buf[0] << 8) + ((uint32_t)buf[1] << 0));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3302      	adds	r3, #2
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	061a      	lsls	r2, r3, #24
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3303      	adds	r3, #3
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	041b      	lsls	r3, r3, #16
 8009132:	441a      	add	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	4413      	add	r3, r2
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	3201      	adds	r2, #1
 8009140:	7812      	ldrb	r2, [r2, #0]
 8009142:	4413      	add	r3, r2
 8009144:	43db      	mvns	r3, r3
 8009146:	617b      	str	r3, [r7, #20]
    Position_um = Position_um + 1;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	3301      	adds	r3, #1
 800914c:	617b      	str	r3, [r7, #20]
    LOGI("right");
 800914e:	f7f9 feb3 	bl	8002eb8 <HAL_GetTick>
 8009152:	4603      	mov	r3, r0
 8009154:	4a18      	ldr	r2, [pc, #96]	@ (80091b8 <get_Position_mm+0xf4>)
 8009156:	4619      	mov	r1, r3
 8009158:	481a      	ldr	r0, [pc, #104]	@ (80091c4 <get_Position_mm+0x100>)
 800915a:	f000 ff81 	bl	800a060 <iprintf>
 800915e:	e01f      	b.n	80091a0 <get_Position_mm+0xdc>
    // Direction_of_position = MINUS_Right;
  } else if (0x00 == (buf[2] & 0x80)) {  // 正方向，向左
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3302      	adds	r3, #2
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	b25b      	sxtb	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	db19      	blt.n	80091a0 <get_Position_mm+0xdc>
    Position_um = ((uint32_t)buf[2] << 24) + ((uint32_t)buf[3] << 16) + ((uint32_t)buf[0] << 8) + ((uint32_t)buf[1] << 0);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	3302      	adds	r3, #2
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	061a      	lsls	r2, r3, #24
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3303      	adds	r3, #3
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	041b      	lsls	r3, r3, #16
 800917c:	441a      	add	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	021b      	lsls	r3, r3, #8
 8009184:	4413      	add	r3, r2
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	3201      	adds	r2, #1
 800918a:	7812      	ldrb	r2, [r2, #0]
 800918c:	4413      	add	r3, r2
 800918e:	617b      	str	r3, [r7, #20]
    LOGI("left");
 8009190:	f7f9 fe92 	bl	8002eb8 <HAL_GetTick>
 8009194:	4603      	mov	r3, r0
 8009196:	4a08      	ldr	r2, [pc, #32]	@ (80091b8 <get_Position_mm+0xf4>)
 8009198:	4619      	mov	r1, r3
 800919a:	480b      	ldr	r0, [pc, #44]	@ (80091c8 <get_Position_mm+0x104>)
 800919c:	f000 ff60 	bl	800a060 <iprintf>
    // Direction_of_position = PLUS_Left;
  }
  Position_mm_buf = (uint16_t)(Position_um / 1000);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	4a0a      	ldr	r2, [pc, #40]	@ (80091cc <get_Position_mm+0x108>)
 80091a4:	fba2 2303 	umull	r2, r3, r2, r3
 80091a8:	099b      	lsrs	r3, r3, #6
 80091aa:	81fb      	strh	r3, [r7, #14]
  // if (Position_mm_buf > 5000) {
  //   return 0;
  // }

  // LOGI("DIS %d", Position_mm_buf);
  return Position_mm_buf;
 80091ac:	89fb      	ldrh	r3, [r7, #14]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	0800bd0c 	.word	0x0800bd0c
 80091bc:	0800b5ac 	.word	0x0800b5ac
 80091c0:	20002274 	.word	0x20002274
 80091c4:	0800b5d0 	.word	0x0800b5d0
 80091c8:	0800b5f4 	.word	0x0800b5f4
 80091cc:	10624dd3 	.word	0x10624dd3

080091d0 <servo_speed_set>:

FSM_STATE_t servo_speed_set(uint16_t speed) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	80fb      	strh	r3, [r7, #6]
  uint32_t time = HAL_GetTick();
 80091da:	f7f9 fe6d 	bl	8002eb8 <HAL_GetTick>
 80091de:	6178      	str	r0, [r7, #20]
  uint8_t* ack  = NULL;
 80091e0:	2300      	movs	r3, #0
 80091e2:	613b      	str	r3, [r7, #16]
  uint16_t data = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	81fb      	strh	r3, [r7, #14]
  while (!Servo_info.uart_recv_state) {
 80091e8:	e015      	b.n	8009216 <servo_speed_set+0x46>
    if (has_pass_time(time) > 500) {
 80091ea:	6978      	ldr	r0, [r7, #20]
 80091ec:	f000 fe5e 	bl	8009eac <has_pass_time>
 80091f0:	4603      	mov	r3, r0
 80091f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80091f6:	d909      	bls.n	800920c <servo_speed_set+0x3c>
      LOGE("time out");
 80091f8:	f7f9 fe5e 	bl	8002eb8 <HAL_GetTick>
 80091fc:	4603      	mov	r3, r0
 80091fe:	4a2a      	ldr	r2, [pc, #168]	@ (80092a8 <servo_speed_set+0xd8>)
 8009200:	4619      	mov	r1, r3
 8009202:	482a      	ldr	r0, [pc, #168]	@ (80092ac <servo_speed_set+0xdc>)
 8009204:	f000 ff2c 	bl	800a060 <iprintf>
      return fsm_timeout;
 8009208:	2302      	movs	r3, #2
 800920a:	e048      	b.n	800929e <servo_speed_set+0xce>
    }
    Uart_Send_MovementRegister_ServoMotor(3, speed);
 800920c:	88fb      	ldrh	r3, [r7, #6]
 800920e:	4619      	mov	r1, r3
 8009210:	2003      	movs	r0, #3
 8009212:	f7f7 ff2b 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
  while (!Servo_info.uart_recv_state) {
 8009216:	4b26      	ldr	r3, [pc, #152]	@ (80092b0 <servo_speed_set+0xe0>)
 8009218:	7a5b      	ldrb	r3, [r3, #9]
 800921a:	f083 0301 	eor.w	r3, r3, #1
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e2      	bne.n	80091ea <servo_speed_set+0x1a>
  }
  Servo_info.uart_recv_state = false;
 8009224:	4b22      	ldr	r3, [pc, #136]	@ (80092b0 <servo_speed_set+0xe0>)
 8009226:	2200      	movs	r2, #0
 8009228:	725a      	strb	r2, [r3, #9]
  ack                        = GetMoterAck();
 800922a:	f7f7 f825 	bl	8000278 <GetMoterAck>
 800922e:	6138      	str	r0, [r7, #16]

  /*************Debug****************/
  LOGI("ack is %02x", ack[0]);
 8009230:	f7f9 fe42 	bl	8002eb8 <HAL_GetTick>
 8009234:	4601      	mov	r1, r0
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	4a1b      	ldr	r2, [pc, #108]	@ (80092a8 <servo_speed_set+0xd8>)
 800923c:	481d      	ldr	r0, [pc, #116]	@ (80092b4 <servo_speed_set+0xe4>)
 800923e:	f000 ff0f 	bl	800a060 <iprintf>
  LOGI("ack is %02x", ack[1]);
 8009242:	f7f9 fe39 	bl	8002eb8 <HAL_GetTick>
 8009246:	4601      	mov	r1, r0
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	3301      	adds	r3, #1
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	4a16      	ldr	r2, [pc, #88]	@ (80092a8 <servo_speed_set+0xd8>)
 8009250:	4818      	ldr	r0, [pc, #96]	@ (80092b4 <servo_speed_set+0xe4>)
 8009252:	f000 ff05 	bl	800a060 <iprintf>
  /*********************************/
  if (NULL == ack) {
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <servo_speed_set+0xa2>
    LOGE("ack is null");
 800925c:	f7f9 fe2c 	bl	8002eb8 <HAL_GetTick>
 8009260:	4603      	mov	r3, r0
 8009262:	4a11      	ldr	r2, [pc, #68]	@ (80092a8 <servo_speed_set+0xd8>)
 8009264:	4619      	mov	r1, r3
 8009266:	4814      	ldr	r0, [pc, #80]	@ (80092b8 <servo_speed_set+0xe8>)
 8009268:	f000 fefa 	bl	800a060 <iprintf>
    return fsm_error;
 800926c:	f04f 33ff 	mov.w	r3, #4294967295
 8009270:	e015      	b.n	800929e <servo_speed_set+0xce>
  }

  if ((0x00 == ack[0] && speed == ack[1])) {
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d110      	bne.n	800929c <servo_speed_set+0xcc>
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	3301      	adds	r3, #1
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	4293      	cmp	r3, r2
 8009286:	d109      	bne.n	800929c <servo_speed_set+0xcc>
    LOGI("speed sucess");
 8009288:	f7f9 fe16 	bl	8002eb8 <HAL_GetTick>
 800928c:	4603      	mov	r3, r0
 800928e:	4a06      	ldr	r2, [pc, #24]	@ (80092a8 <servo_speed_set+0xd8>)
 8009290:	4619      	mov	r1, r3
 8009292:	480a      	ldr	r0, [pc, #40]	@ (80092bc <servo_speed_set+0xec>)
 8009294:	f000 fee4 	bl	800a060 <iprintf>
    return fsm_cpl;
 8009298:	2301      	movs	r3, #1
 800929a:	e000      	b.n	800929e <servo_speed_set+0xce>
  }

  return fsm_onging;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	0800bd1c 	.word	0x0800bd1c
 80092ac:	0800b614 	.word	0x0800b614
 80092b0:	20002274 	.word	0x20002274
 80092b4:	0800b638 	.word	0x0800b638
 80092b8:	0800b660 	.word	0x0800b660
 80092bc:	0800b688 	.word	0x0800b688

080092c0 <servo_move>:

FSM_STATE_t servo_move(ENUM_MOTOR_MOTION direction) {
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	71fb      	strb	r3, [r7, #7]
  uint32_t        time         = HAL_GetTick();
 80092ca:	f7f9 fdf5 	bl	8002eb8 <HAL_GetTick>
 80092ce:	6178      	str	r0, [r7, #20]
  uint8_t*        ack          = NULL;
 80092d0:	2300      	movs	r3, #0
 80092d2:	613b      	str	r3, [r7, #16]
  uint16_t        data         = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	81fb      	strh	r3, [r7, #14]
  Moter_Config_t* servo_config = get_servo_config();
 80092d8:	f7ff fee0 	bl	800909c <get_servo_config>
 80092dc:	60b8      	str	r0, [r7, #8]
  while (!Servo_info.uart_recv_state) {
 80092de:	e024      	b.n	800932a <servo_move+0x6a>
    if (has_pass_time(time) > 100) {
 80092e0:	6978      	ldr	r0, [r7, #20]
 80092e2:	f000 fde3 	bl	8009eac <has_pass_time>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b64      	cmp	r3, #100	@ 0x64
 80092ea:	d909      	bls.n	8009300 <servo_move+0x40>
      LOGE("time out");
 80092ec:	f7f9 fde4 	bl	8002eb8 <HAL_GetTick>
 80092f0:	4603      	mov	r3, r0
 80092f2:	4a3c      	ldr	r2, [pc, #240]	@ (80093e4 <servo_move+0x124>)
 80092f4:	4619      	mov	r1, r3
 80092f6:	483c      	ldr	r0, [pc, #240]	@ (80093e8 <servo_move+0x128>)
 80092f8:	f000 feb2 	bl	800a060 <iprintf>
      return fsm_timeout;
 80092fc:	2302      	movs	r3, #2
 80092fe:	e06c      	b.n	80093da <servo_move+0x11a>
      if (KGoLeft == direction)
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);
      else if (KGoRight == direction)
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);

    } else if (ON_RIGHT == servo_config->location) {
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	7a5b      	ldrb	r3, [r3, #9]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d110      	bne.n	800932a <servo_move+0x6a>
      if (KGoLeft == direction)
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	2bcc      	cmp	r3, #204	@ 0xcc
 800930c:	d105      	bne.n	800931a <servo_move+0x5a>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);
 800930e:	f241 3187 	movw	r1, #4999	@ 0x1387
 8009312:	2003      	movs	r0, #3
 8009314:	f7f7 feaa 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
 8009318:	e007      	b.n	800932a <servo_move+0x6a>
      else if (KGoRight == direction)
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	2b0c      	cmp	r3, #12
 800931e:	d104      	bne.n	800932a <servo_move+0x6a>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);
 8009320:	f241 3186 	movw	r1, #4998	@ 0x1386
 8009324:	2003      	movs	r0, #3
 8009326:	f7f7 fea1 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
  while (!Servo_info.uart_recv_state) {
 800932a:	4b30      	ldr	r3, [pc, #192]	@ (80093ec <servo_move+0x12c>)
 800932c:	7a5b      	ldrb	r3, [r3, #9]
 800932e:	f083 0301 	eor.w	r3, r3, #1
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1d3      	bne.n	80092e0 <servo_move+0x20>
    }
  }

  Servo_info.uart_recv_state = false;
 8009338:	4b2c      	ldr	r3, [pc, #176]	@ (80093ec <servo_move+0x12c>)
 800933a:	2200      	movs	r2, #0
 800933c:	725a      	strb	r2, [r3, #9]
  ack                        = GetMoterAck();
 800933e:	f7f6 ff9b 	bl	8000278 <GetMoterAck>
 8009342:	6138      	str	r0, [r7, #16]
  LOGI("ack is %02x", ack[0]);
 8009344:	f7f9 fdb8 	bl	8002eb8 <HAL_GetTick>
 8009348:	4601      	mov	r1, r0
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	4a25      	ldr	r2, [pc, #148]	@ (80093e4 <servo_move+0x124>)
 8009350:	4827      	ldr	r0, [pc, #156]	@ (80093f0 <servo_move+0x130>)
 8009352:	f000 fe85 	bl	800a060 <iprintf>
  LOGI("ack is %02x", ack[1]);
 8009356:	f7f9 fdaf 	bl	8002eb8 <HAL_GetTick>
 800935a:	4601      	mov	r1, r0
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	3301      	adds	r3, #1
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	4a20      	ldr	r2, [pc, #128]	@ (80093e4 <servo_move+0x124>)
 8009364:	4822      	ldr	r0, [pc, #136]	@ (80093f0 <servo_move+0x130>)
 8009366:	f000 fe7b 	bl	800a060 <iprintf>
  if (NULL == ack) {
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <servo_move+0xc6>
    LOGE("ack is null");
 8009370:	f7f9 fda2 	bl	8002eb8 <HAL_GetTick>
 8009374:	4603      	mov	r3, r0
 8009376:	4a1b      	ldr	r2, [pc, #108]	@ (80093e4 <servo_move+0x124>)
 8009378:	4619      	mov	r1, r3
 800937a:	481e      	ldr	r0, [pc, #120]	@ (80093f4 <servo_move+0x134>)
 800937c:	f000 fe70 	bl	800a060 <iprintf>
    return fsm_error;
 8009380:	f04f 33ff 	mov.w	r3, #4294967295
 8009384:	e029      	b.n	80093da <servo_move+0x11a>
  }
  data = ack[0];
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	81fb      	strh	r3, [r7, #14]
  data <<= 8;
 800938c:	89fb      	ldrh	r3, [r7, #14]
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	81fb      	strh	r3, [r7, #14]
  data |= ack[1];
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	3301      	adds	r3, #1
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	461a      	mov	r2, r3
 800939a:	89fb      	ldrh	r3, [r7, #14]
 800939c:	4313      	orrs	r3, r2
 800939e:	81fb      	strh	r3, [r7, #14]
  LOGI("data is %04x", data);
 80093a0:	f7f9 fd8a 	bl	8002eb8 <HAL_GetTick>
 80093a4:	4601      	mov	r1, r0
 80093a6:	89fb      	ldrh	r3, [r7, #14]
 80093a8:	4a0e      	ldr	r2, [pc, #56]	@ (80093e4 <servo_move+0x124>)
 80093aa:	4813      	ldr	r0, [pc, #76]	@ (80093f8 <servo_move+0x138>)
 80093ac:	f000 fe58 	bl	800a060 <iprintf>
  //(((uint16_t)ack[4] << 8) | ack[5])
  if (JOGmode_Data_CCW == data ||  //
 80093b0:	89fb      	ldrh	r3, [r7, #14]
 80093b2:	f241 3286 	movw	r2, #4998	@ 0x1386
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d004      	beq.n	80093c4 <servo_move+0x104>
 80093ba:	89fb      	ldrh	r3, [r7, #14]
 80093bc:	f241 3287 	movw	r2, #4999	@ 0x1387
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d109      	bne.n	80093d8 <servo_move+0x118>
      JOGmode_Data_CW == data) {
    LOGI("Is success");
 80093c4:	f7f9 fd78 	bl	8002eb8 <HAL_GetTick>
 80093c8:	4603      	mov	r3, r0
 80093ca:	4a06      	ldr	r2, [pc, #24]	@ (80093e4 <servo_move+0x124>)
 80093cc:	4619      	mov	r1, r3
 80093ce:	480b      	ldr	r0, [pc, #44]	@ (80093fc <servo_move+0x13c>)
 80093d0:	f000 fe46 	bl	800a060 <iprintf>
    return fsm_cpl;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e000      	b.n	80093da <servo_move+0x11a>
  }

  return fsm_onging;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3718      	adds	r7, #24
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	0800bd2c 	.word	0x0800bd2c
 80093e8:	0800b614 	.word	0x0800b614
 80093ec:	20002274 	.word	0x20002274
 80093f0:	0800b638 	.word	0x0800b638
 80093f4:	0800b660 	.word	0x0800b660
 80093f8:	0800b6b0 	.word	0x0800b6b0
 80093fc:	0800b6d8 	.word	0x0800b6d8

08009400 <clear_pluse_start>:

FSM_STATE_t clear_pluse_start(void) {
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
  uint32_t time = HAL_GetTick();
 8009406:	f7f9 fd57 	bl	8002eb8 <HAL_GetTick>
 800940a:	60f8      	str	r0, [r7, #12]
  uint8_t* ack  = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	60bb      	str	r3, [r7, #8]
  uint16_t data = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	80fb      	strh	r3, [r7, #6]

  while (!Servo_info.uart_recv_state) {
 8009414:	e013      	b.n	800943e <clear_pluse_start+0x3e>
    if (has_pass_time(time) > 100) {
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f000 fd48 	bl	8009eac <has_pass_time>
 800941c:	4603      	mov	r3, r0
 800941e:	2b64      	cmp	r3, #100	@ 0x64
 8009420:	d909      	bls.n	8009436 <clear_pluse_start+0x36>
      LOGE("time out");
 8009422:	f7f9 fd49 	bl	8002eb8 <HAL_GetTick>
 8009426:	4603      	mov	r3, r0
 8009428:	4a2f      	ldr	r2, [pc, #188]	@ (80094e8 <clear_pluse_start+0xe8>)
 800942a:	4619      	mov	r1, r3
 800942c:	482f      	ldr	r0, [pc, #188]	@ (80094ec <clear_pluse_start+0xec>)
 800942e:	f000 fe17 	bl	800a060 <iprintf>
      return fsm_timeout;
 8009432:	2302      	movs	r3, #2
 8009434:	e054      	b.n	80094e0 <clear_pluse_start+0xe0>
    }
    Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_Start_Data_P2_11);
 8009436:	2104      	movs	r1, #4
 8009438:	2004      	movs	r0, #4
 800943a:	f7f7 fe17 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
  while (!Servo_info.uart_recv_state) {
 800943e:	4b2c      	ldr	r3, [pc, #176]	@ (80094f0 <clear_pluse_start+0xf0>)
 8009440:	7a5b      	ldrb	r3, [r3, #9]
 8009442:	f083 0301 	eor.w	r3, r3, #1
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e4      	bne.n	8009416 <clear_pluse_start+0x16>
  }
  Servo_info.uart_recv_state = false;
 800944c:	4b28      	ldr	r3, [pc, #160]	@ (80094f0 <clear_pluse_start+0xf0>)
 800944e:	2200      	movs	r2, #0
 8009450:	725a      	strb	r2, [r3, #9]

  ack = GetMoterAck();
 8009452:	f7f6 ff11 	bl	8000278 <GetMoterAck>
 8009456:	60b8      	str	r0, [r7, #8]
  LOGI("ack is %02x", ack[0]);
 8009458:	f7f9 fd2e 	bl	8002eb8 <HAL_GetTick>
 800945c:	4601      	mov	r1, r0
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	4a21      	ldr	r2, [pc, #132]	@ (80094e8 <clear_pluse_start+0xe8>)
 8009464:	4823      	ldr	r0, [pc, #140]	@ (80094f4 <clear_pluse_start+0xf4>)
 8009466:	f000 fdfb 	bl	800a060 <iprintf>
  LOGI("ack is %02x", ack[1]);
 800946a:	f7f9 fd25 	bl	8002eb8 <HAL_GetTick>
 800946e:	4601      	mov	r1, r0
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	3301      	adds	r3, #1
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	4a1c      	ldr	r2, [pc, #112]	@ (80094e8 <clear_pluse_start+0xe8>)
 8009478:	481e      	ldr	r0, [pc, #120]	@ (80094f4 <clear_pluse_start+0xf4>)
 800947a:	f000 fdf1 	bl	800a060 <iprintf>

  if (NULL == ack) {
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10a      	bne.n	800949a <clear_pluse_start+0x9a>
    LOGE("ack is null");
 8009484:	f7f9 fd18 	bl	8002eb8 <HAL_GetTick>
 8009488:	4603      	mov	r3, r0
 800948a:	4a17      	ldr	r2, [pc, #92]	@ (80094e8 <clear_pluse_start+0xe8>)
 800948c:	4619      	mov	r1, r3
 800948e:	481a      	ldr	r0, [pc, #104]	@ (80094f8 <clear_pluse_start+0xf8>)
 8009490:	f000 fde6 	bl	800a060 <iprintf>
    return fsm_error;
 8009494:	f04f 33ff 	mov.w	r3, #4294967295
 8009498:	e022      	b.n	80094e0 <clear_pluse_start+0xe0>
  }

  data = ack[0];
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	80fb      	strh	r3, [r7, #6]
  data <<= 8;
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	021b      	lsls	r3, r3, #8
 80094a4:	80fb      	strh	r3, [r7, #6]
  data |= ack[1];
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	3301      	adds	r3, #1
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	461a      	mov	r2, r3
 80094ae:	88fb      	ldrh	r3, [r7, #6]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	80fb      	strh	r3, [r7, #6]
  LOGI("data is %04x", data);
 80094b4:	f7f9 fd00 	bl	8002eb8 <HAL_GetTick>
 80094b8:	4601      	mov	r1, r0
 80094ba:	88fb      	ldrh	r3, [r7, #6]
 80094bc:	4a0a      	ldr	r2, [pc, #40]	@ (80094e8 <clear_pluse_start+0xe8>)
 80094be:	480f      	ldr	r0, [pc, #60]	@ (80094fc <clear_pluse_start+0xfc>)
 80094c0:	f000 fdce 	bl	800a060 <iprintf>
  //(((uint16_t)ack[4] << 8) | ack[5])
  if (DI2_PulseClear_Start_Data_P2_11 == data) {
 80094c4:	88fb      	ldrh	r3, [r7, #6]
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d109      	bne.n	80094de <clear_pluse_start+0xde>
    LOGI("clear start plus is success");
 80094ca:	f7f9 fcf5 	bl	8002eb8 <HAL_GetTick>
 80094ce:	4603      	mov	r3, r0
 80094d0:	4a05      	ldr	r2, [pc, #20]	@ (80094e8 <clear_pluse_start+0xe8>)
 80094d2:	4619      	mov	r1, r3
 80094d4:	480a      	ldr	r0, [pc, #40]	@ (8009500 <clear_pluse_start+0x100>)
 80094d6:	f000 fdc3 	bl	800a060 <iprintf>
    return fsm_cpl;
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <clear_pluse_start+0xe0>
  }

  return fsm_onging;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	0800bd38 	.word	0x0800bd38
 80094ec:	0800b614 	.word	0x0800b614
 80094f0:	20002274 	.word	0x20002274
 80094f4:	0800b638 	.word	0x0800b638
 80094f8:	0800b660 	.word	0x0800b660
 80094fc:	0800b6b0 	.word	0x0800b6b0
 8009500:	0800b700 	.word	0x0800b700

08009504 <clear_pluse_end>:

FSM_STATE_t clear_pluse_end(void) {
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
  uint32_t time = HAL_GetTick();
 800950a:	f7f9 fcd5 	bl	8002eb8 <HAL_GetTick>
 800950e:	60f8      	str	r0, [r7, #12]
  uint8_t* ack  = NULL;
 8009510:	2300      	movs	r3, #0
 8009512:	60bb      	str	r3, [r7, #8]
  uint16_t data = 0;
 8009514:	2300      	movs	r3, #0
 8009516:	80fb      	strh	r3, [r7, #6]

  while (!Servo_info.uart_recv_state) {
 8009518:	e014      	b.n	8009544 <clear_pluse_end+0x40>
    if (has_pass_time(time) > 100) {
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f000 fcc6 	bl	8009eac <has_pass_time>
 8009520:	4603      	mov	r3, r0
 8009522:	2b64      	cmp	r3, #100	@ 0x64
 8009524:	d909      	bls.n	800953a <clear_pluse_end+0x36>
      LOGE("time out");
 8009526:	f7f9 fcc7 	bl	8002eb8 <HAL_GetTick>
 800952a:	4603      	mov	r3, r0
 800952c:	4a30      	ldr	r2, [pc, #192]	@ (80095f0 <clear_pluse_end+0xec>)
 800952e:	4619      	mov	r1, r3
 8009530:	4830      	ldr	r0, [pc, #192]	@ (80095f4 <clear_pluse_end+0xf0>)
 8009532:	f000 fd95 	bl	800a060 <iprintf>
      return fsm_timeout;
 8009536:	2302      	movs	r3, #2
 8009538:	e056      	b.n	80095e8 <clear_pluse_end+0xe4>
    }
    Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_End_Data_P2_11);
 800953a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800953e:	2004      	movs	r0, #4
 8009540:	f7f7 fd94 	bl	800106c <Uart_Send_MovementRegister_ServoMotor>
  while (!Servo_info.uart_recv_state) {
 8009544:	4b2c      	ldr	r3, [pc, #176]	@ (80095f8 <clear_pluse_end+0xf4>)
 8009546:	7a5b      	ldrb	r3, [r3, #9]
 8009548:	f083 0301 	eor.w	r3, r3, #1
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e3      	bne.n	800951a <clear_pluse_end+0x16>
  }

  Servo_info.uart_recv_state = false;
 8009552:	4b29      	ldr	r3, [pc, #164]	@ (80095f8 <clear_pluse_end+0xf4>)
 8009554:	2200      	movs	r2, #0
 8009556:	725a      	strb	r2, [r3, #9]

  ack = GetMoterAck();
 8009558:	f7f6 fe8e 	bl	8000278 <GetMoterAck>
 800955c:	60b8      	str	r0, [r7, #8]
  LOGI("ack is %02x", ack[0]);
 800955e:	f7f9 fcab 	bl	8002eb8 <HAL_GetTick>
 8009562:	4601      	mov	r1, r0
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	4a21      	ldr	r2, [pc, #132]	@ (80095f0 <clear_pluse_end+0xec>)
 800956a:	4824      	ldr	r0, [pc, #144]	@ (80095fc <clear_pluse_end+0xf8>)
 800956c:	f000 fd78 	bl	800a060 <iprintf>
  LOGI("ack is %02x", ack[1]);
 8009570:	f7f9 fca2 	bl	8002eb8 <HAL_GetTick>
 8009574:	4601      	mov	r1, r0
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	3301      	adds	r3, #1
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	4a1c      	ldr	r2, [pc, #112]	@ (80095f0 <clear_pluse_end+0xec>)
 800957e:	481f      	ldr	r0, [pc, #124]	@ (80095fc <clear_pluse_end+0xf8>)
 8009580:	f000 fd6e 	bl	800a060 <iprintf>

  if (NULL == ack) {
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <clear_pluse_end+0x9c>
    LOGE("ack is null");
 800958a:	f7f9 fc95 	bl	8002eb8 <HAL_GetTick>
 800958e:	4603      	mov	r3, r0
 8009590:	4a17      	ldr	r2, [pc, #92]	@ (80095f0 <clear_pluse_end+0xec>)
 8009592:	4619      	mov	r1, r3
 8009594:	481a      	ldr	r0, [pc, #104]	@ (8009600 <clear_pluse_end+0xfc>)
 8009596:	f000 fd63 	bl	800a060 <iprintf>
    return fsm_error;
 800959a:	f04f 33ff 	mov.w	r3, #4294967295
 800959e:	e023      	b.n	80095e8 <clear_pluse_end+0xe4>
  }

  data = ack[0];
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	80fb      	strh	r3, [r7, #6]
  data <<= 8;
 80095a6:	88fb      	ldrh	r3, [r7, #6]
 80095a8:	021b      	lsls	r3, r3, #8
 80095aa:	80fb      	strh	r3, [r7, #6]
  data |= ack[1];
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	3301      	adds	r3, #1
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	88fb      	ldrh	r3, [r7, #6]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	80fb      	strh	r3, [r7, #6]
  LOGI("data is %04x", data);
 80095ba:	f7f9 fc7d 	bl	8002eb8 <HAL_GetTick>
 80095be:	4601      	mov	r1, r0
 80095c0:	88fb      	ldrh	r3, [r7, #6]
 80095c2:	4a0b      	ldr	r2, [pc, #44]	@ (80095f0 <clear_pluse_end+0xec>)
 80095c4:	480f      	ldr	r0, [pc, #60]	@ (8009604 <clear_pluse_end+0x100>)
 80095c6:	f000 fd4b 	bl	800a060 <iprintf>
  //(((uint16_t)ack[4] << 8) | ack[5])
  if (DI2_PulseClear_End_Data_P2_11 == data) {
 80095ca:	88fb      	ldrh	r3, [r7, #6]
 80095cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095d0:	d109      	bne.n	80095e6 <clear_pluse_end+0xe2>
    LOGI("clear plus stop is success");
 80095d2:	f7f9 fc71 	bl	8002eb8 <HAL_GetTick>
 80095d6:	4603      	mov	r3, r0
 80095d8:	4a05      	ldr	r2, [pc, #20]	@ (80095f0 <clear_pluse_end+0xec>)
 80095da:	4619      	mov	r1, r3
 80095dc:	480a      	ldr	r0, [pc, #40]	@ (8009608 <clear_pluse_end+0x104>)
 80095de:	f000 fd3f 	bl	800a060 <iprintf>
    return fsm_cpl;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e000      	b.n	80095e8 <clear_pluse_end+0xe4>
  }

  return fsm_onging;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	0800bd4c 	.word	0x0800bd4c
 80095f4:	0800b614 	.word	0x0800b614
 80095f8:	20002274 	.word	0x20002274
 80095fc:	0800b638 	.word	0x0800b638
 8009600:	0800b660 	.word	0x0800b660
 8009604:	0800b6b0 	.word	0x0800b6b0
 8009608:	0800b738 	.word	0x0800b738

0800960c <Clear_Pluse>:

FSM_STATE_t Clear_Pluse(void) {
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
  static enum {
    START,
    CLEAR_START,
    CLEAR_END,
  } s_State = START;
  switch (s_State) {
 8009610:	4b13      	ldr	r3, [pc, #76]	@ (8009660 <Clear_Pluse+0x54>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b02      	cmp	r3, #2
 8009616:	d012      	beq.n	800963e <Clear_Pluse+0x32>
 8009618:	2b02      	cmp	r3, #2
 800961a:	dc1d      	bgt.n	8009658 <Clear_Pluse+0x4c>
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <Clear_Pluse+0x1a>
 8009620:	2b01      	cmp	r3, #1
 8009622:	d003      	beq.n	800962c <Clear_Pluse+0x20>
 8009624:	e018      	b.n	8009658 <Clear_Pluse+0x4c>
    case START:
      s_State = CLEAR_START;
 8009626:	4b0e      	ldr	r3, [pc, #56]	@ (8009660 <Clear_Pluse+0x54>)
 8009628:	2201      	movs	r2, #1
 800962a:	701a      	strb	r2, [r3, #0]

    case CLEAR_START:
      if (!clear_pluse_start()) {
 800962c:	f7ff fee8 	bl	8009400 <clear_pluse_start>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00d      	beq.n	8009652 <Clear_Pluse+0x46>
        break;
      }
      s_State = CLEAR_END;
 8009636:	4b0a      	ldr	r3, [pc, #40]	@ (8009660 <Clear_Pluse+0x54>)
 8009638:	2202      	movs	r2, #2
 800963a:	701a      	strb	r2, [r3, #0]
      break;
 800963c:	e00c      	b.n	8009658 <Clear_Pluse+0x4c>
    case CLEAR_END:
      if (!clear_pluse_end()) {
 800963e:	f7ff ff61 	bl	8009504 <clear_pluse_end>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d006      	beq.n	8009656 <Clear_Pluse+0x4a>
        break;
      }
      s_State = START;
 8009648:	4b05      	ldr	r3, [pc, #20]	@ (8009660 <Clear_Pluse+0x54>)
 800964a:	2200      	movs	r2, #0
 800964c:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 800964e:	2301      	movs	r3, #1
 8009650:	e003      	b.n	800965a <Clear_Pluse+0x4e>
        break;
 8009652:	bf00      	nop
 8009654:	e000      	b.n	8009658 <Clear_Pluse+0x4c>
        break;
 8009656:	bf00      	nop
      break;
  }

  return fsm_onging;
 8009658:	2300      	movs	r3, #0
 800965a:	4618      	mov	r0, r3
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	2000228c 	.word	0x2000228c

08009664 <upper_uart_reg_handle>:
static uint8_t rx_cache;
static bool    flag = false;

static void upper_packet_analys(void);

void upper_uart_reg_handle(UART_HandleTypeDef *h_uart, DMA_HandleTypeDef *h_dma) {
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  m_uart = h_uart;
 800966e:	4a05      	ldr	r2, [pc, #20]	@ (8009684 <upper_uart_reg_handle+0x20>)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6013      	str	r3, [r2, #0]
  m_dma  = h_dma;
 8009674:	4a04      	ldr	r2, [pc, #16]	@ (8009688 <upper_uart_reg_handle+0x24>)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	6013      	str	r3, [r2, #0]
}
 800967a:	bf00      	nop
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	bc80      	pop	{r7}
 8009682:	4770      	bx	lr
 8009684:	20002290 	.word	0x20002290
 8009688:	20002294 	.word	0x20002294

0800968c <upper_uart_init>:

void upper_uart_init(void) {
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
  registCallback(EVENT_UpperUart, upper_packet_analys);          // 注册事件表
 8009690:	490b      	ldr	r1, [pc, #44]	@ (80096c0 <upper_uart_init+0x34>)
 8009692:	2001      	movs	r0, #1
 8009694:	f000 fb74 	bl	8009d80 <registCallback>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 8009698:	4b0a      	ldr	r3, [pc, #40]	@ (80096c4 <upper_uart_init+0x38>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096a0:	4909      	ldr	r1, [pc, #36]	@ (80096c8 <upper_uart_init+0x3c>)
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fc ff1c 	bl	80064e0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 80096a8:	4b08      	ldr	r3, [pc, #32]	@ (80096cc <upper_uart_init+0x40>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	4b06      	ldr	r3, [pc, #24]	@ (80096cc <upper_uart_init+0x40>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f022 0204 	bic.w	r2, r2, #4
 80096ba:	601a      	str	r2, [r3, #0]
}
 80096bc:	bf00      	nop
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	08009795 	.word	0x08009795
 80096c4:	20002290 	.word	0x20002290
 80096c8:	20002298 	.word	0x20002298
 80096cc:	20002294 	.word	0x20002294

080096d0 <GetUpperUartHandle>:

UART_HandleTypeDef *GetUpperUartHandle(void) {
 80096d0:	b580      	push	{r7, lr}
 80096d2:	af00      	add	r7, sp, #0
  if (m_uart == NULL) {
 80096d4:	4b08      	ldr	r3, [pc, #32]	@ (80096f8 <GetUpperUartHandle+0x28>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <GetUpperUartHandle+0x22>
    LOGW("not get m_uart");
 80096dc:	f7f9 fbec 	bl	8002eb8 <HAL_GetTick>
 80096e0:	4603      	mov	r3, r0
 80096e2:	4a06      	ldr	r2, [pc, #24]	@ (80096fc <GetUpperUartHandle+0x2c>)
 80096e4:	4619      	mov	r1, r3
 80096e6:	4806      	ldr	r0, [pc, #24]	@ (8009700 <GetUpperUartHandle+0x30>)
 80096e8:	f000 fcba 	bl	800a060 <iprintf>
    return m_uart;
 80096ec:	4b02      	ldr	r3, [pc, #8]	@ (80096f8 <GetUpperUartHandle+0x28>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	e7ff      	b.n	80096f2 <GetUpperUartHandle+0x22>
  }
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20002290 	.word	0x20002290
 80096fc:	0800bd5c 	.word	0x0800bd5c
 8009700:	0800b770 	.word	0x0800b770

08009704 <CRC16_Calculate>:

static uint16_t CRC16_Calculate(uint8_t *data, uint8_t len) {
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 8009710:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009714:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 800971a:	2300      	movs	r3, #0
 800971c:	613b      	str	r3, [r7, #16]
 800971e:	e022      	b.n	8009766 <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	4413      	add	r3, r2
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	8afb      	ldrh	r3, [r7, #22]
 800972c:	4053      	eors	r3, r2
 800972e:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8009730:	2300      	movs	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	e011      	b.n	800975a <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 8009736:	8afb      	ldrh	r3, [r7, #22]
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	2b00      	cmp	r3, #0
 800973e:	d006      	beq.n	800974e <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 8009740:	8afb      	ldrh	r3, [r7, #22]
 8009742:	085b      	lsrs	r3, r3, #1
 8009744:	b29a      	uxth	r2, r3
 8009746:	4b10      	ldr	r3, [pc, #64]	@ (8009788 <CRC16_Calculate+0x84>)
 8009748:	4053      	eors	r3, r2
 800974a:	82fb      	strh	r3, [r7, #22]
 800974c:	e002      	b.n	8009754 <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 800974e:	8afb      	ldrh	r3, [r7, #22]
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3301      	adds	r3, #1
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b07      	cmp	r3, #7
 800975e:	ddea      	ble.n	8009736 <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3301      	adds	r3, #1
 8009764:	613b      	str	r3, [r7, #16]
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	429a      	cmp	r2, r3
 800976c:	dbd8      	blt.n	8009720 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 800976e:	f7f9 fba3 	bl	8002eb8 <HAL_GetTick>
 8009772:	4601      	mov	r1, r0
 8009774:	8afb      	ldrh	r3, [r7, #22]
 8009776:	4a05      	ldr	r2, [pc, #20]	@ (800978c <CRC16_Calculate+0x88>)
 8009778:	4805      	ldr	r0, [pc, #20]	@ (8009790 <CRC16_Calculate+0x8c>)
 800977a:	f000 fc71 	bl	800a060 <iprintf>
  return crc16;
 800977e:	8afb      	ldrh	r3, [r7, #22]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	ffffa001 	.word	0xffffa001
 800978c:	0800bd70 	.word	0x0800bd70
 8009790:	0800b79c 	.word	0x0800b79c

08009794 <upper_packet_analys>:

void upper_packet_analys(void) {
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
  uint8_t  type     = rx_buf[0];
 800979a:	4b2f      	ldr	r3, [pc, #188]	@ (8009858 <upper_packet_analys+0xc4>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	72fb      	strb	r3, [r7, #11]
  uint16_t pack_len = rx_buf[4];
 80097a0:	4b2d      	ldr	r3, [pc, #180]	@ (8009858 <upper_packet_analys+0xc4>)
 80097a2:	791b      	ldrb	r3, [r3, #4]
 80097a4:	813b      	strh	r3, [r7, #8]
  uint8_t *recv_cmd;
  // bool     transmit_state = get_transmit_state();

  for (int i = 0; i < rx_len; i++)  //
 80097a6:	2300      	movs	r3, #0
 80097a8:	60fb      	str	r3, [r7, #12]
 80097aa:	e00d      	b.n	80097c8 <upper_packet_analys+0x34>
    LOGI("%02x", rx_buf[i]);
 80097ac:	f7f9 fb84 	bl	8002eb8 <HAL_GetTick>
 80097b0:	4601      	mov	r1, r0
 80097b2:	4a29      	ldr	r2, [pc, #164]	@ (8009858 <upper_packet_analys+0xc4>)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	4a28      	ldr	r2, [pc, #160]	@ (800985c <upper_packet_analys+0xc8>)
 80097bc:	4828      	ldr	r0, [pc, #160]	@ (8009860 <upper_packet_analys+0xcc>)
 80097be:	f000 fc4f 	bl	800a060 <iprintf>
  for (int i = 0; i < rx_len; i++)  //
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3301      	adds	r3, #1
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	4b26      	ldr	r3, [pc, #152]	@ (8009864 <upper_packet_analys+0xd0>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	461a      	mov	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	4293      	cmp	r3, r2
 80097d2:	dbeb      	blt.n	80097ac <upper_packet_analys+0x18>

  if (type == 0x70 || type == 0xd0) {
 80097d4:	7afb      	ldrb	r3, [r7, #11]
 80097d6:	2b70      	cmp	r3, #112	@ 0x70
 80097d8:	d002      	beq.n	80097e0 <upper_packet_analys+0x4c>
 80097da:	7afb      	ldrb	r3, [r7, #11]
 80097dc:	2bd0      	cmp	r3, #208	@ 0xd0
 80097de:	d125      	bne.n	800982c <upper_packet_analys+0x98>
    recv_cmd = get_upper_cache();
 80097e0:	f7fe fde6 	bl	80083b0 <get_upper_cache>
 80097e4:	4603      	mov	r3, r0
 80097e6:	607b      	str	r3, [r7, #4]
    memcpy(recv_cmd, rx_buf, rx_len);
 80097e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009864 <upper_packet_analys+0xd0>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	491a      	ldr	r1, [pc, #104]	@ (8009858 <upper_packet_analys+0xc4>)
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fd06 	bl	800a202 <memcpy>
    set_upper_recv_len(rx_len);
 80097f6:	4b1b      	ldr	r3, [pc, #108]	@ (8009864 <upper_packet_analys+0xd0>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fde2 	bl	80083c4 <set_upper_recv_len>
    set_upper_process(true);
 8009800:	2001      	movs	r0, #1
 8009802:	f7ff f9a7 	bl	8008b54 <set_upper_process>
    LOGI("TYPE IS %02x", type);
 8009806:	f7f9 fb57 	bl	8002eb8 <HAL_GetTick>
 800980a:	4601      	mov	r1, r0
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	4a13      	ldr	r2, [pc, #76]	@ (800985c <upper_packet_analys+0xc8>)
 8009810:	4815      	ldr	r0, [pc, #84]	@ (8009868 <upper_packet_analys+0xd4>)
 8009812:	f000 fc25 	bl	800a060 <iprintf>
  if (type == 0x70 || type == 0xd0) {
 8009816:	bf00      	nop
  } else {
    LOGW("upper recv error %04x", type);
    return;
  }

  if (CRC16_Calculate(rx_buf, rx_len)) {
 8009818:	4b12      	ldr	r3, [pc, #72]	@ (8009864 <upper_packet_analys+0xd0>)
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	4619      	mov	r1, r3
 800981e:	480e      	ldr	r0, [pc, #56]	@ (8009858 <upper_packet_analys+0xc4>)
 8009820:	f7ff ff70 	bl	8009704 <CRC16_Calculate>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d012      	beq.n	8009850 <upper_packet_analys+0xbc>
 800982a:	e008      	b.n	800983e <upper_packet_analys+0xaa>
    LOGW("upper recv error %04x", type);
 800982c:	f7f9 fb44 	bl	8002eb8 <HAL_GetTick>
 8009830:	4601      	mov	r1, r0
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	4a09      	ldr	r2, [pc, #36]	@ (800985c <upper_packet_analys+0xc8>)
 8009836:	480d      	ldr	r0, [pc, #52]	@ (800986c <upper_packet_analys+0xd8>)
 8009838:	f000 fc12 	bl	800a060 <iprintf>
    return;
 800983c:	e008      	b.n	8009850 <upper_packet_analys+0xbc>
    LOGE("CRC error");
 800983e:	f7f9 fb3b 	bl	8002eb8 <HAL_GetTick>
 8009842:	4603      	mov	r3, r0
 8009844:	4a05      	ldr	r2, [pc, #20]	@ (800985c <upper_packet_analys+0xc8>)
 8009846:	4619      	mov	r1, r3
 8009848:	4809      	ldr	r0, [pc, #36]	@ (8009870 <upper_packet_analys+0xdc>)
 800984a:	f000 fc09 	bl	800a060 <iprintf>
    return;
 800984e:	bf00      	nop
  }
}
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20002298 	.word	0x20002298
 800985c:	0800bd80 	.word	0x0800bd80
 8009860:	0800b7c4 	.word	0x0800b7c4
 8009864:	20002398 	.word	0x20002398
 8009868:	0800b7e4 	.word	0x0800b7e4
 800986c:	0800b80c 	.word	0x0800b80c
 8009870:	0800b840 	.word	0x0800b840

08009874 <upper_receive_rx_data>:

void upper_receive_rx_data(void) {
 8009874:	b580      	push	{r7, lr}
 8009876:	af00      	add	r7, sp, #0
  flag = true;
 8009878:	4b15      	ldr	r3, [pc, #84]	@ (80098d0 <upper_receive_rx_data+0x5c>)
 800987a:	2201      	movs	r2, #1
 800987c:	701a      	strb	r2, [r3, #0]
  enterQueueEvent(EVENT_UpperUart);
 800987e:	2001      	movs	r0, #1
 8009880:	f000 fa96 	bl	8009db0 <enterQueueEvent>
  rx_len = RECV_BUF_LEN - __HAL_DMA_GET_COUNTER(m_dma);
 8009884:	4b13      	ldr	r3, [pc, #76]	@ (80098d4 <upper_receive_rx_data+0x60>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	b2db      	uxtb	r3, r3
 800988e:	425b      	negs	r3, r3
 8009890:	b2da      	uxtb	r2, r3
 8009892:	4b11      	ldr	r3, [pc, #68]	@ (80098d8 <upper_receive_rx_data+0x64>)
 8009894:	701a      	strb	r2, [r3, #0]
  LOGI("%d", rx_len);
 8009896:	f7f9 fb0f 	bl	8002eb8 <HAL_GetTick>
 800989a:	4601      	mov	r1, r0
 800989c:	4b0e      	ldr	r3, [pc, #56]	@ (80098d8 <upper_receive_rx_data+0x64>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	4a0e      	ldr	r2, [pc, #56]	@ (80098dc <upper_receive_rx_data+0x68>)
 80098a2:	480f      	ldr	r0, [pc, #60]	@ (80098e0 <upper_receive_rx_data+0x6c>)
 80098a4:	f000 fbdc 	bl	800a060 <iprintf>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 80098a8:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <upper_receive_rx_data+0x70>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098b0:	490d      	ldr	r1, [pc, #52]	@ (80098e8 <upper_receive_rx_data+0x74>)
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fc fe14 	bl	80064e0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 80098b8:	4b06      	ldr	r3, [pc, #24]	@ (80098d4 <upper_receive_rx_data+0x60>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	4b04      	ldr	r3, [pc, #16]	@ (80098d4 <upper_receive_rx_data+0x60>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 0204 	bic.w	r2, r2, #4
 80098ca:	601a      	str	r2, [r3, #0]
}
 80098cc:	bf00      	nop
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	20002399 	.word	0x20002399
 80098d4:	20002294 	.word	0x20002294
 80098d8:	20002398 	.word	0x20002398
 80098dc:	0800bd94 	.word	0x0800bd94
 80098e0:	0800b868 	.word	0x0800b868
 80098e4:	20002290 	.word	0x20002290
 80098e8:	20002298 	.word	0x20002298

080098ec <wireless_reg_handle>:

static uint8_t cmd = 0xff;

static void wireless_packet_analys(void);

void wireless_reg_handle(UART_HandleTypeDef *h_uart, DMA_HandleTypeDef *h_dma) {
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  m_uart = h_uart;
 80098f6:	4a05      	ldr	r2, [pc, #20]	@ (800990c <wireless_reg_handle+0x20>)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6013      	str	r3, [r2, #0]
  m_dma  = h_dma;
 80098fc:	4a04      	ldr	r2, [pc, #16]	@ (8009910 <wireless_reg_handle+0x24>)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	6013      	str	r3, [r2, #0]
}
 8009902:	bf00      	nop
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	bc80      	pop	{r7}
 800990a:	4770      	bx	lr
 800990c:	2000239c 	.word	0x2000239c
 8009910:	200023a0 	.word	0x200023a0

08009914 <wireless_init>:

void wireless_init(void) {
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  registCallback(EVENT_Wirless, wireless_packet_analys);         // 注册事件表
 8009918:	490b      	ldr	r1, [pc, #44]	@ (8009948 <wireless_init+0x34>)
 800991a:	2000      	movs	r0, #0
 800991c:	f000 fa30 	bl	8009d80 <registCallback>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 8009920:	4b0a      	ldr	r3, [pc, #40]	@ (800994c <wireless_init+0x38>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009928:	4909      	ldr	r1, [pc, #36]	@ (8009950 <wireless_init+0x3c>)
 800992a:	4618      	mov	r0, r3
 800992c:	f7fc fdd8 	bl	80064e0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 8009930:	4b08      	ldr	r3, [pc, #32]	@ (8009954 <wireless_init+0x40>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	4b06      	ldr	r3, [pc, #24]	@ (8009954 <wireless_init+0x40>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0204 	bic.w	r2, r2, #4
 8009942:	601a      	str	r2, [r3, #0]
}
 8009944:	bf00      	nop
 8009946:	bd80      	pop	{r7, pc}
 8009948:	08009a41 	.word	0x08009a41
 800994c:	2000239c 	.word	0x2000239c
 8009950:	200023a4 	.word	0x200023a4
 8009954:	200023a0 	.word	0x200023a0

08009958 <GetWireLessHandle>:

UART_HandleTypeDef *GetWireLessHandle(void) {
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
  if (m_uart == NULL) LOGW("not get m_uart");
 800995c:	4b07      	ldr	r3, [pc, #28]	@ (800997c <GetWireLessHandle+0x24>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d107      	bne.n	8009974 <GetWireLessHandle+0x1c>
 8009964:	f7f9 faa8 	bl	8002eb8 <HAL_GetTick>
 8009968:	4603      	mov	r3, r0
 800996a:	4a05      	ldr	r2, [pc, #20]	@ (8009980 <GetWireLessHandle+0x28>)
 800996c:	4619      	mov	r1, r3
 800996e:	4805      	ldr	r0, [pc, #20]	@ (8009984 <GetWireLessHandle+0x2c>)
 8009970:	f000 fb76 	bl	800a060 <iprintf>
  return m_uart;
 8009974:	4b01      	ldr	r3, [pc, #4]	@ (800997c <GetWireLessHandle+0x24>)
 8009976:	681b      	ldr	r3, [r3, #0]
}
 8009978:	4618      	mov	r0, r3
 800997a:	bd80      	pop	{r7, pc}
 800997c:	2000239c 	.word	0x2000239c
 8009980:	0800bdac 	.word	0x0800bdac
 8009984:	0800b888 	.word	0x0800b888

08009988 <wireless_send>:

void wireless_send(uint8_t *data, uint8_t len) { HAL_UART_Transmit(m_uart, data, len, 100); }
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
 8009994:	4b05      	ldr	r3, [pc, #20]	@ (80099ac <wireless_send+0x24>)
 8009996:	6818      	ldr	r0, [r3, #0]
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	b29a      	uxth	r2, r3
 800999c:	2364      	movs	r3, #100	@ 0x64
 800999e:	6879      	ldr	r1, [r7, #4]
 80099a0:	f7fc fcf6 	bl	8006390 <HAL_UART_Transmit>
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	2000239c 	.word	0x2000239c

080099b0 <CRC16_Calculate>:

static uint16_t CRC16_Calculate(uint8_t *data, uint8_t len) {
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 80099bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80099c0:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 80099c6:	2300      	movs	r3, #0
 80099c8:	613b      	str	r3, [r7, #16]
 80099ca:	e022      	b.n	8009a12 <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	4413      	add	r3, r2
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	8afb      	ldrh	r3, [r7, #22]
 80099d8:	4053      	eors	r3, r2
 80099da:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 80099dc:	2300      	movs	r3, #0
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	e011      	b.n	8009a06 <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 80099e2:	8afb      	ldrh	r3, [r7, #22]
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d006      	beq.n	80099fa <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 80099ec:	8afb      	ldrh	r3, [r7, #22]
 80099ee:	085b      	lsrs	r3, r3, #1
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	4b10      	ldr	r3, [pc, #64]	@ (8009a34 <CRC16_Calculate+0x84>)
 80099f4:	4053      	eors	r3, r2
 80099f6:	82fb      	strh	r3, [r7, #22]
 80099f8:	e002      	b.n	8009a00 <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 80099fa:	8afb      	ldrh	r3, [r7, #22]
 80099fc:	085b      	lsrs	r3, r3, #1
 80099fe:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3301      	adds	r3, #1
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2b07      	cmp	r3, #7
 8009a0a:	ddea      	ble.n	80099e2 <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	613b      	str	r3, [r7, #16]
 8009a12:	78fb      	ldrb	r3, [r7, #3]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	dbd8      	blt.n	80099cc <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 8009a1a:	f7f9 fa4d 	bl	8002eb8 <HAL_GetTick>
 8009a1e:	4601      	mov	r1, r0
 8009a20:	8afb      	ldrh	r3, [r7, #22]
 8009a22:	4a05      	ldr	r2, [pc, #20]	@ (8009a38 <CRC16_Calculate+0x88>)
 8009a24:	4805      	ldr	r0, [pc, #20]	@ (8009a3c <CRC16_Calculate+0x8c>)
 8009a26:	f000 fb1b 	bl	800a060 <iprintf>
  return crc16;
 8009a2a:	8afb      	ldrh	r3, [r7, #22]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	ffffa001 	.word	0xffffa001
 8009a38:	0800bdc0 	.word	0x0800bdc0
 8009a3c:	0800b8b4 	.word	0x0800b8b4

08009a40 <wireless_packet_analys>:

void wireless_packet_analys(void) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
  uint8_t  type     = rx_buf[0];
 8009a46:	4b30      	ldr	r3, [pc, #192]	@ (8009b08 <wireless_packet_analys+0xc8>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	72fb      	strb	r3, [r7, #11]
  uint16_t pack_len = rx_buf[4];
 8009a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8009b08 <wireless_packet_analys+0xc8>)
 8009a4e:	791b      	ldrb	r3, [r3, #4]
 8009a50:	813b      	strh	r3, [r7, #8]
  uint8_t *recv_cmd;
  // bool     transmit_state = get_transmit_state();
  for (int i = 0; i < rx_len; i++)  //
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	e00d      	b.n	8009a74 <wireless_packet_analys+0x34>
    LOGI("%02x", rx_buf[i]);
 8009a58:	f7f9 fa2e 	bl	8002eb8 <HAL_GetTick>
 8009a5c:	4601      	mov	r1, r0
 8009a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8009b08 <wireless_packet_analys+0xc8>)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	4a29      	ldr	r2, [pc, #164]	@ (8009b0c <wireless_packet_analys+0xcc>)
 8009a68:	4829      	ldr	r0, [pc, #164]	@ (8009b10 <wireless_packet_analys+0xd0>)
 8009a6a:	f000 faf9 	bl	800a060 <iprintf>
  for (int i = 0; i < rx_len; i++)  //
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3301      	adds	r3, #1
 8009a72:	60fb      	str	r3, [r7, #12]
 8009a74:	4b27      	ldr	r3, [pc, #156]	@ (8009b14 <wireless_packet_analys+0xd4>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	dbeb      	blt.n	8009a58 <wireless_packet_analys+0x18>
  LOGI("WIRLESS");
 8009a80:	f7f9 fa1a 	bl	8002eb8 <HAL_GetTick>
 8009a84:	4603      	mov	r3, r0
 8009a86:	4a21      	ldr	r2, [pc, #132]	@ (8009b0c <wireless_packet_analys+0xcc>)
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4823      	ldr	r0, [pc, #140]	@ (8009b18 <wireless_packet_analys+0xd8>)
 8009a8c:	f000 fae8 	bl	800a060 <iprintf>
  if (type == 0x70 || type == 0xd0) {
 8009a90:	7afb      	ldrb	r3, [r7, #11]
 8009a92:	2b70      	cmp	r3, #112	@ 0x70
 8009a94:	d002      	beq.n	8009a9c <wireless_packet_analys+0x5c>
 8009a96:	7afb      	ldrb	r3, [r7, #11]
 8009a98:	2bd0      	cmp	r3, #208	@ 0xd0
 8009a9a:	d11f      	bne.n	8009adc <wireless_packet_analys+0x9c>
    recv_cmd = get_lower_cache();
 8009a9c:	f7fe f8e0 	bl	8007c60 <get_lower_cache>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	607b      	str	r3, [r7, #4]
    memcpy(recv_cmd, rx_buf, rx_len);
 8009aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b14 <wireless_packet_analys+0xd4>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4917      	ldr	r1, [pc, #92]	@ (8009b08 <wireless_packet_analys+0xc8>)
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fba8 	bl	800a202 <memcpy>
    set_lower_recv_len(rx_len);
 8009ab2:	4b18      	ldr	r3, [pc, #96]	@ (8009b14 <wireless_packet_analys+0xd4>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe f8dc 	bl	8007c74 <set_lower_recv_len>
    set_lower_process(true);
 8009abc:	2001      	movs	r0, #1
 8009abe:	f7ff f859 	bl	8008b74 <set_lower_process>
  if (type == 0x70 || type == 0xd0) {
 8009ac2:	bf00      	nop
  } else {
    LOGW("wirless recv error %02x", type);
    return;
  }

  if (CRC16_Calculate(rx_buf, 5 + pack_len)) {
 8009ac4:	893b      	ldrh	r3, [r7, #8]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	3305      	adds	r3, #5
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	4619      	mov	r1, r3
 8009ace:	480e      	ldr	r0, [pc, #56]	@ (8009b08 <wireless_packet_analys+0xc8>)
 8009ad0:	f7ff ff6e 	bl	80099b0 <CRC16_Calculate>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d012      	beq.n	8009b00 <wireless_packet_analys+0xc0>
 8009ada:	e008      	b.n	8009aee <wireless_packet_analys+0xae>
    LOGW("wirless recv error %02x", type);
 8009adc:	f7f9 f9ec 	bl	8002eb8 <HAL_GetTick>
 8009ae0:	4601      	mov	r1, r0
 8009ae2:	7afb      	ldrb	r3, [r7, #11]
 8009ae4:	4a09      	ldr	r2, [pc, #36]	@ (8009b0c <wireless_packet_analys+0xcc>)
 8009ae6:	480d      	ldr	r0, [pc, #52]	@ (8009b1c <wireless_packet_analys+0xdc>)
 8009ae8:	f000 faba 	bl	800a060 <iprintf>
    return;
 8009aec:	e008      	b.n	8009b00 <wireless_packet_analys+0xc0>
    LOGE("CRC error");
 8009aee:	f7f9 f9e3 	bl	8002eb8 <HAL_GetTick>
 8009af2:	4603      	mov	r3, r0
 8009af4:	4a05      	ldr	r2, [pc, #20]	@ (8009b0c <wireless_packet_analys+0xcc>)
 8009af6:	4619      	mov	r1, r3
 8009af8:	4809      	ldr	r0, [pc, #36]	@ (8009b20 <wireless_packet_analys+0xe0>)
 8009afa:	f000 fab1 	bl	800a060 <iprintf>
    return;
 8009afe:	bf00      	nop
  }
}
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	200023a4 	.word	0x200023a4
 8009b0c:	0800bdd0 	.word	0x0800bdd0
 8009b10:	0800b8dc 	.word	0x0800b8dc
 8009b14:	200024a4 	.word	0x200024a4
 8009b18:	0800b8fc 	.word	0x0800b8fc
 8009b1c:	0800b920 	.word	0x0800b920
 8009b20:	0800b954 	.word	0x0800b954

08009b24 <receive_rx_data>:

void receive_rx_data(void) {
 8009b24:	b580      	push	{r7, lr}
 8009b26:	af00      	add	r7, sp, #0
  flag = true;
 8009b28:	4b15      	ldr	r3, [pc, #84]	@ (8009b80 <receive_rx_data+0x5c>)
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	701a      	strb	r2, [r3, #0]
  enterQueueEvent(EVENT_Wirless);
 8009b2e:	2000      	movs	r0, #0
 8009b30:	f000 f93e 	bl	8009db0 <enterQueueEvent>
  rx_len = WIRELESS_MAX_BUF_LEN - __HAL_DMA_GET_COUNTER(m_dma);
 8009b34:	4b13      	ldr	r3, [pc, #76]	@ (8009b84 <receive_rx_data+0x60>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	425b      	negs	r3, r3
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	4b11      	ldr	r3, [pc, #68]	@ (8009b88 <receive_rx_data+0x64>)
 8009b44:	701a      	strb	r2, [r3, #0]
  LOGI("%d", rx_len);
 8009b46:	f7f9 f9b7 	bl	8002eb8 <HAL_GetTick>
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b88 <receive_rx_data+0x64>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	4a0e      	ldr	r2, [pc, #56]	@ (8009b8c <receive_rx_data+0x68>)
 8009b52:	480f      	ldr	r0, [pc, #60]	@ (8009b90 <receive_rx_data+0x6c>)
 8009b54:	f000 fa84 	bl	800a060 <iprintf>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 8009b58:	4b0e      	ldr	r3, [pc, #56]	@ (8009b94 <receive_rx_data+0x70>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b60:	490d      	ldr	r1, [pc, #52]	@ (8009b98 <receive_rx_data+0x74>)
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fc fcbc 	bl	80064e0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 8009b68:	4b06      	ldr	r3, [pc, #24]	@ (8009b84 <receive_rx_data+0x60>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	4b04      	ldr	r3, [pc, #16]	@ (8009b84 <receive_rx_data+0x60>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0204 	bic.w	r2, r2, #4
 8009b7a:	601a      	str	r2, [r3, #0]
}
 8009b7c:	bf00      	nop
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	200024a5 	.word	0x200024a5
 8009b84:	200023a0 	.word	0x200023a0
 8009b88:	200024a4 	.word	0x200024a4
 8009b8c:	0800bde8 	.word	0x0800bde8
 8009b90:	0800b97c 	.word	0x0800b97c
 8009b94:	2000239c 	.word	0x2000239c
 8009b98:	200023a4 	.word	0x200023a4

08009b9c <input_book_info>:
  }
  book_dabase[DATA_REGION_SIZE - 1].next = 0;
}

// uint8_t node_alloc() { if (free_head == INVALID_INDEX) }
void input_book_info(Book_Info_Upper_t *book) {
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  if (book == NULL) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d108      	bne.n	8009bbc <input_book_info+0x20>
    LOGE("book info is empty");
 8009baa:	f7f9 f985 	bl	8002eb8 <HAL_GetTick>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4a31      	ldr	r2, [pc, #196]	@ (8009c78 <input_book_info+0xdc>)
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4831      	ldr	r0, [pc, #196]	@ (8009c7c <input_book_info+0xe0>)
 8009bb6:	f000 fa53 	bl	800a060 <iprintf>
    return;
 8009bba:	e059      	b.n	8009c70 <input_book_info+0xd4>

  // if ((book_head + 1) % DATA_REGION_SIZE == book_tail) {
  //   LOGE("book database has full");
  // }

  if ((book_head + 1) % DATA_REGION_SIZE == 0) {
 8009bbc:	4b30      	ldr	r3, [pc, #192]	@ (8009c80 <input_book_info+0xe4>)
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10e      	bne.n	8009be8 <input_book_info+0x4c>
    ++book_overflow;
 8009bca:	4b2e      	ldr	r3, [pc, #184]	@ (8009c84 <input_book_info+0xe8>)
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8009c84 <input_book_info+0xe8>)
 8009bd4:	801a      	strh	r2, [r3, #0]
    LOGE("database overflow %d", book_overflow);
 8009bd6:	f7f9 f96f 	bl	8002eb8 <HAL_GetTick>
 8009bda:	4601      	mov	r1, r0
 8009bdc:	4b29      	ldr	r3, [pc, #164]	@ (8009c84 <input_book_info+0xe8>)
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	4a25      	ldr	r2, [pc, #148]	@ (8009c78 <input_book_info+0xdc>)
 8009be2:	4829      	ldr	r0, [pc, #164]	@ (8009c88 <input_book_info+0xec>)
 8009be4:	f000 fa3c 	bl	800a060 <iprintf>
  }

  memcpy(&book_info[book_head], book, sizeof(Book_Info_Upper_t));
 8009be8:	4b25      	ldr	r3, [pc, #148]	@ (8009c80 <input_book_info+0xe4>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	461a      	mov	r2, r3
 8009bee:	4613      	mov	r3, r2
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	4413      	add	r3, r2
 8009bf4:	00da      	lsls	r2, r3, #3
 8009bf6:	1ad2      	subs	r2, r2, r3
 8009bf8:	4b24      	ldr	r3, [pc, #144]	@ (8009c8c <input_book_info+0xf0>)
 8009bfa:	4413      	add	r3, r2
 8009bfc:	2215      	movs	r2, #21
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 fafe 	bl	800a202 <memcpy>
  for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	e016      	b.n	8009c3a <input_book_info+0x9e>
    LOGI("%x", ((uint8_t *)(&book_info[book_head]))[i]);
 8009c0c:	f7f9 f954 	bl	8002eb8 <HAL_GetTick>
 8009c10:	4601      	mov	r1, r0
 8009c12:	4b1b      	ldr	r3, [pc, #108]	@ (8009c80 <input_book_info+0xe4>)
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	4613      	mov	r3, r2
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	4413      	add	r3, r2
 8009c1e:	00da      	lsls	r2, r3, #3
 8009c20:	1ad2      	subs	r2, r2, r3
 8009c22:	4b1a      	ldr	r3, [pc, #104]	@ (8009c8c <input_book_info+0xf0>)
 8009c24:	441a      	add	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4413      	add	r3, r2
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	4a12      	ldr	r2, [pc, #72]	@ (8009c78 <input_book_info+0xdc>)
 8009c2e:	4818      	ldr	r0, [pc, #96]	@ (8009c90 <input_book_info+0xf4>)
 8009c30:	f000 fa16 	bl	800a060 <iprintf>
  for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b14      	cmp	r3, #20
 8009c3e:	d9e5      	bls.n	8009c0c <input_book_info+0x70>
  }
  book_data_have = 1;
 8009c40:	4b14      	ldr	r3, [pc, #80]	@ (8009c94 <input_book_info+0xf8>)
 8009c42:	2201      	movs	r2, #1
 8009c44:	801a      	strh	r2, [r3, #0]
  book_head      = (book_head + 1) % DATA_REGION_SIZE;
 8009c46:	4b0e      	ldr	r3, [pc, #56]	@ (8009c80 <input_book_info+0xe4>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	425a      	negs	r2, r3
 8009c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009c56:	bf58      	it	pl
 8009c58:	4253      	negpl	r3, r2
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	4b08      	ldr	r3, [pc, #32]	@ (8009c80 <input_book_info+0xe4>)
 8009c5e:	701a      	strb	r2, [r3, #0]
  LOGI("input book sucess");
 8009c60:	f7f9 f92a 	bl	8002eb8 <HAL_GetTick>
 8009c64:	4603      	mov	r3, r0
 8009c66:	4a04      	ldr	r2, [pc, #16]	@ (8009c78 <input_book_info+0xdc>)
 8009c68:	4619      	mov	r1, r3
 8009c6a:	480b      	ldr	r0, [pc, #44]	@ (8009c98 <input_book_info+0xfc>)
 8009c6c:	f000 f9f8 	bl	800a060 <iprintf>
}
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	0800bdf8 	.word	0x0800bdf8
 8009c7c:	0800b99c 	.word	0x0800b99c
 8009c80:	20002f28 	.word	0x20002f28
 8009c84:	20002f2c 	.word	0x20002f2c
 8009c88:	0800b9cc 	.word	0x0800b9cc
 8009c8c:	200024a8 	.word	0x200024a8
 8009c90:	0800b9fc 	.word	0x0800b9fc
 8009c94:	20002f2a 	.word	0x20002f2a
 8009c98:	0800ba1c 	.word	0x0800ba1c

08009c9c <output_book_info>:

//   LOGI("output book sucess");
//   return book_temp;
// }

Book_Info_Upper_t *output_book_info(uint32_t index) {
 8009c9c:	b590      	push	{r4, r7, lr}
 8009c9e:	b08b      	sub	sp, #44	@ 0x2c
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  // if (book_tail == book_head) {
  //   LOGE("book database is empty");
  //   return NULL;
  // }

  if (0 == book_data_have) LOGE("book database is empty");
 8009ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8009d64 <output_book_info+0xc8>)
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d107      	bne.n	8009cbc <output_book_info+0x20>
 8009cac:	f7f9 f904 	bl	8002eb8 <HAL_GetTick>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8009d68 <output_book_info+0xcc>)
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	482d      	ldr	r0, [pc, #180]	@ (8009d6c <output_book_info+0xd0>)
 8009cb8:	f000 f9d2 	bl	800a060 <iprintf>

  // for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
  //   LOGI("%x", ((uint8_t *)(&book_info[index]))[i]);
  // }

  for (int i = 0; i < DATA_REGION_SIZE; i++) {
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cc0:	e03f      	b.n	8009d42 <output_book_info+0xa6>
    if (book_info[i].index == endianness_change_little(index, 4)) {
 8009cc2:	492b      	ldr	r1, [pc, #172]	@ (8009d70 <output_book_info+0xd4>)
 8009cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	4413      	add	r3, r2
 8009ccc:	00da      	lsls	r2, r3, #3
 8009cce:	1ad2      	subs	r2, r2, r3
 8009cd0:	188b      	adds	r3, r1, r2
 8009cd2:	f8d3 4002 	ldr.w	r4, [r3, #2]
 8009cd6:	2104      	movs	r1, #4
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7fe fb83 	bl	80083e4 <endianness_change_little>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	d12b      	bne.n	8009d3c <output_book_info+0xa0>
      // book_tail = (book_tail + 1) % DATA_REGION_SIZE;
      LOGI("output book sucess");
 8009ce4:	f7f9 f8e8 	bl	8002eb8 <HAL_GetTick>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	4a1f      	ldr	r2, [pc, #124]	@ (8009d68 <output_book_info+0xcc>)
 8009cec:	4619      	mov	r1, r3
 8009cee:	4821      	ldr	r0, [pc, #132]	@ (8009d74 <output_book_info+0xd8>)
 8009cf0:	f000 f9b6 	bl	800a060 <iprintf>
      for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	623b      	str	r3, [r7, #32]
 8009cf8:	e014      	b.n	8009d24 <output_book_info+0x88>
        LOGI("%x", ((uint8_t *)(&book_info[index]))[i]);
 8009cfa:	f7f9 f8dd 	bl	8002eb8 <HAL_GetTick>
 8009cfe:	4601      	mov	r1, r0
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	4613      	mov	r3, r2
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	4413      	add	r3, r2
 8009d08:	00da      	lsls	r2, r3, #3
 8009d0a:	1ad2      	subs	r2, r2, r3
 8009d0c:	4b18      	ldr	r3, [pc, #96]	@ (8009d70 <output_book_info+0xd4>)
 8009d0e:	441a      	add	r2, r3
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	4413      	add	r3, r2
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	4a14      	ldr	r2, [pc, #80]	@ (8009d68 <output_book_info+0xcc>)
 8009d18:	4817      	ldr	r0, [pc, #92]	@ (8009d78 <output_book_info+0xdc>)
 8009d1a:	f000 f9a1 	bl	800a060 <iprintf>
      for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	3301      	adds	r3, #1
 8009d22:	623b      	str	r3, [r7, #32]
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	2b14      	cmp	r3, #20
 8009d28:	d9e7      	bls.n	8009cfa <output_book_info+0x5e>
      }
      return &book_info[i];
 8009d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	4413      	add	r3, r2
 8009d32:	00da      	lsls	r2, r3, #3
 8009d34:	1ad2      	subs	r2, r2, r3
 8009d36:	4b0e      	ldr	r3, [pc, #56]	@ (8009d70 <output_book_info+0xd4>)
 8009d38:	4413      	add	r3, r2
 8009d3a:	e00e      	b.n	8009d5a <output_book_info+0xbe>
  for (int i = 0; i < DATA_REGION_SIZE; i++) {
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3e:	3301      	adds	r3, #1
 8009d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d44:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d46:	ddbc      	ble.n	8009cc2 <output_book_info+0x26>
    }
  }

  LOGE("book index not exist");
 8009d48:	f7f9 f8b6 	bl	8002eb8 <HAL_GetTick>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	4a06      	ldr	r2, [pc, #24]	@ (8009d68 <output_book_info+0xcc>)
 8009d50:	4619      	mov	r1, r3
 8009d52:	480a      	ldr	r0, [pc, #40]	@ (8009d7c <output_book_info+0xe0>)
 8009d54:	f000 f984 	bl	800a060 <iprintf>
  return NULL;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	372c      	adds	r7, #44	@ 0x2c
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd90      	pop	{r4, r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20002f2a 	.word	0x20002f2a
 8009d68:	0800be08 	.word	0x0800be08
 8009d6c:	0800ba4c 	.word	0x0800ba4c
 8009d70:	200024a8 	.word	0x200024a8
 8009d74:	0800ba80 	.word	0x0800ba80
 8009d78:	0800b9fc 	.word	0x0800b9fc
 8009d7c:	0800bab0 	.word	0x0800bab0

08009d80 <registCallback>:
static uint8_t eventQueueHead = 0;
static uint8_t eventQueueTail = 0;

static EVENT_t m_cbs[EVENT_QUEUE_SIZE];  // 事件队列表

void registCallback(EVENT_TYPE type, event_callback cb) {
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	6039      	str	r1, [r7, #0]
 8009d8a:	71fb      	strb	r3, [r7, #7]
  m_cbs[type].type     = type;
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	4907      	ldr	r1, [pc, #28]	@ (8009dac <registCallback+0x2c>)
 8009d90:	79fa      	ldrb	r2, [r7, #7]
 8009d92:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
  m_cbs[type].callback = cb;
 8009d96:	79fb      	ldrb	r3, [r7, #7]
 8009d98:	4a04      	ldr	r2, [pc, #16]	@ (8009dac <registCallback+0x2c>)
 8009d9a:	00db      	lsls	r3, r3, #3
 8009d9c:	4413      	add	r3, r2
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	605a      	str	r2, [r3, #4]
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bc80      	pop	{r7}
 8009daa:	4770      	bx	lr
 8009dac:	20002fb4 	.word	0x20002fb4

08009db0 <enterQueueEvent>:

void enterQueueEvent(EVENT_TYPE type) {
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	4603      	mov	r3, r0
 8009db8:	71fb      	strb	r3, [r7, #7]
  if ((eventQueueHead + 1) % EVENT_QUEUE_SIZE == eventQueueTail) {
 8009dba:	4b1d      	ldr	r3, [pc, #116]	@ (8009e30 <enterQueueEvent+0x80>)
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	425a      	negs	r2, r3
 8009dc2:	f003 030f 	and.w	r3, r3, #15
 8009dc6:	f002 020f 	and.w	r2, r2, #15
 8009dca:	bf58      	it	pl
 8009dcc:	4253      	negpl	r3, r2
 8009dce:	4a19      	ldr	r2, [pc, #100]	@ (8009e34 <enterQueueEvent+0x84>)
 8009dd0:	7812      	ldrb	r2, [r2, #0]
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d108      	bne.n	8009de8 <enterQueueEvent+0x38>
    LOGW("event queue full");
 8009dd6:	f7f9 f86f 	bl	8002eb8 <HAL_GetTick>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	4a16      	ldr	r2, [pc, #88]	@ (8009e38 <enterQueueEvent+0x88>)
 8009dde:	4619      	mov	r1, r3
 8009de0:	4816      	ldr	r0, [pc, #88]	@ (8009e3c <enterQueueEvent+0x8c>)
 8009de2:	f000 f93d 	bl	800a060 <iprintf>
    return;
 8009de6:	e01f      	b.n	8009e28 <enterQueueEvent+0x78>
  }
  eventQueue[eventQueueHead].type     = type;
 8009de8:	4b11      	ldr	r3, [pc, #68]	@ (8009e30 <enterQueueEvent+0x80>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	4619      	mov	r1, r3
 8009dee:	4a14      	ldr	r2, [pc, #80]	@ (8009e40 <enterQueueEvent+0x90>)
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
  eventQueue[eventQueueHead].callback = m_cbs[type].callback;
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	4a0d      	ldr	r2, [pc, #52]	@ (8009e30 <enterQueueEvent+0x80>)
 8009dfa:	7812      	ldrb	r2, [r2, #0]
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	4a11      	ldr	r2, [pc, #68]	@ (8009e44 <enterQueueEvent+0x94>)
 8009e00:	00db      	lsls	r3, r3, #3
 8009e02:	4413      	add	r3, r2
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	490e      	ldr	r1, [pc, #56]	@ (8009e40 <enterQueueEvent+0x90>)
 8009e08:	00c3      	lsls	r3, r0, #3
 8009e0a:	440b      	add	r3, r1
 8009e0c:	605a      	str	r2, [r3, #4]
  eventQueueHead                      = (eventQueueHead + 1) % EVENT_QUEUE_SIZE;
 8009e0e:	4b08      	ldr	r3, [pc, #32]	@ (8009e30 <enterQueueEvent+0x80>)
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	3301      	adds	r3, #1
 8009e14:	425a      	negs	r2, r3
 8009e16:	f003 030f 	and.w	r3, r3, #15
 8009e1a:	f002 020f 	and.w	r2, r2, #15
 8009e1e:	bf58      	it	pl
 8009e20:	4253      	negpl	r3, r2
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	4b02      	ldr	r3, [pc, #8]	@ (8009e30 <enterQueueEvent+0x80>)
 8009e26:	701a      	strb	r2, [r3, #0]
}
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20002fb0 	.word	0x20002fb0
 8009e34:	20002fb1 	.word	0x20002fb1
 8009e38:	0800be1c 	.word	0x0800be1c
 8009e3c:	0800bae0 	.word	0x0800bae0
 8009e40:	20002f30 	.word	0x20002f30
 8009e44:	20002fb4 	.word	0x20002fb4

08009e48 <process_event>:

void process_event(void) {
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
  while (eventQueueTail != eventQueueHead) {
 8009e4e:	e01b      	b.n	8009e88 <process_event+0x40>
    EVENT_t event = eventQueue[eventQueueTail];
 8009e50:	4b13      	ldr	r3, [pc, #76]	@ (8009ea0 <process_event+0x58>)
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	4913      	ldr	r1, [pc, #76]	@ (8009ea4 <process_event+0x5c>)
 8009e56:	463a      	mov	r2, r7
 8009e58:	00db      	lsls	r3, r3, #3
 8009e5a:	440b      	add	r3, r1
 8009e5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e60:	e882 0003 	stmia.w	r2, {r0, r1}
    if (event.callback != NULL) {
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <process_event+0x26>
      event.callback();  // 调用回调函数
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4798      	blx	r3
    }
    eventQueueTail = (eventQueueTail + 1) % EVENT_QUEUE_SIZE;
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea0 <process_event+0x58>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	3301      	adds	r3, #1
 8009e74:	425a      	negs	r2, r3
 8009e76:	f003 030f 	and.w	r3, r3, #15
 8009e7a:	f002 020f 	and.w	r2, r2, #15
 8009e7e:	bf58      	it	pl
 8009e80:	4253      	negpl	r3, r2
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	4b06      	ldr	r3, [pc, #24]	@ (8009ea0 <process_event+0x58>)
 8009e86:	701a      	strb	r2, [r3, #0]
  while (eventQueueTail != eventQueueHead) {
 8009e88:	4b05      	ldr	r3, [pc, #20]	@ (8009ea0 <process_event+0x58>)
 8009e8a:	781a      	ldrb	r2, [r3, #0]
 8009e8c:	4b06      	ldr	r3, [pc, #24]	@ (8009ea8 <process_event+0x60>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d1dd      	bne.n	8009e50 <process_event+0x8>
  }
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20002fb1 	.word	0x20002fb1
 8009ea4:	20002f30 	.word	0x20002f30
 8009ea8:	20002fb0 	.word	0x20002fb0

08009eac <has_pass_time>:
#include "tick.h"

#include "stm32f1xx_hal.h"

uint32_t has_pass_time(uint32_t last_time)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
    int32_t pass_time;
    pass_time = HAL_GetTick() - last_time;
 8009eb4:	f7f9 f800 	bl	8002eb8 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	60fb      	str	r3, [r7, #12]
    if (pass_time >= 0)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	db01      	blt.n	8009eca <has_pass_time+0x1e>
        return pass_time;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	e003      	b.n	8009ed2 <has_pass_time+0x26>
    else
        return UINT32_MAX - last_time - pass_time;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	43da      	mvns	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <std>:
 8009edc:	2300      	movs	r3, #0
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009eea:	6083      	str	r3, [r0, #8]
 8009eec:	8181      	strh	r1, [r0, #12]
 8009eee:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ef0:	81c2      	strh	r2, [r0, #14]
 8009ef2:	6183      	str	r3, [r0, #24]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	2208      	movs	r2, #8
 8009ef8:	305c      	adds	r0, #92	@ 0x5c
 8009efa:	f000 f906 	bl	800a10a <memset>
 8009efe:	4b0d      	ldr	r3, [pc, #52]	@ (8009f34 <std+0x58>)
 8009f00:	6224      	str	r4, [r4, #32]
 8009f02:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f04:	4b0c      	ldr	r3, [pc, #48]	@ (8009f38 <std+0x5c>)
 8009f06:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f08:	4b0c      	ldr	r3, [pc, #48]	@ (8009f3c <std+0x60>)
 8009f0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f40 <std+0x64>)
 8009f0e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009f10:	4b0c      	ldr	r3, [pc, #48]	@ (8009f44 <std+0x68>)
 8009f12:	429c      	cmp	r4, r3
 8009f14:	d006      	beq.n	8009f24 <std+0x48>
 8009f16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009f1a:	4294      	cmp	r4, r2
 8009f1c:	d002      	beq.n	8009f24 <std+0x48>
 8009f1e:	33d0      	adds	r3, #208	@ 0xd0
 8009f20:	429c      	cmp	r4, r3
 8009f22:	d105      	bne.n	8009f30 <std+0x54>
 8009f24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f2c:	f000 b966 	b.w	800a1fc <__retarget_lock_init_recursive>
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	bf00      	nop
 8009f34:	0800a085 	.word	0x0800a085
 8009f38:	0800a0a7 	.word	0x0800a0a7
 8009f3c:	0800a0df 	.word	0x0800a0df
 8009f40:	0800a103 	.word	0x0800a103
 8009f44:	20003034 	.word	0x20003034

08009f48 <stdio_exit_handler>:
 8009f48:	4a02      	ldr	r2, [pc, #8]	@ (8009f54 <stdio_exit_handler+0xc>)
 8009f4a:	4903      	ldr	r1, [pc, #12]	@ (8009f58 <stdio_exit_handler+0x10>)
 8009f4c:	4803      	ldr	r0, [pc, #12]	@ (8009f5c <stdio_exit_handler+0x14>)
 8009f4e:	f000 b869 	b.w	800a024 <_fwalk_sglue>
 8009f52:	bf00      	nop
 8009f54:	2000000c 	.word	0x2000000c
 8009f58:	0800aaad 	.word	0x0800aaad
 8009f5c:	2000001c 	.word	0x2000001c

08009f60 <cleanup_stdio>:
 8009f60:	6841      	ldr	r1, [r0, #4]
 8009f62:	4b0c      	ldr	r3, [pc, #48]	@ (8009f94 <cleanup_stdio+0x34>)
 8009f64:	b510      	push	{r4, lr}
 8009f66:	4299      	cmp	r1, r3
 8009f68:	4604      	mov	r4, r0
 8009f6a:	d001      	beq.n	8009f70 <cleanup_stdio+0x10>
 8009f6c:	f000 fd9e 	bl	800aaac <_fflush_r>
 8009f70:	68a1      	ldr	r1, [r4, #8]
 8009f72:	4b09      	ldr	r3, [pc, #36]	@ (8009f98 <cleanup_stdio+0x38>)
 8009f74:	4299      	cmp	r1, r3
 8009f76:	d002      	beq.n	8009f7e <cleanup_stdio+0x1e>
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 fd97 	bl	800aaac <_fflush_r>
 8009f7e:	68e1      	ldr	r1, [r4, #12]
 8009f80:	4b06      	ldr	r3, [pc, #24]	@ (8009f9c <cleanup_stdio+0x3c>)
 8009f82:	4299      	cmp	r1, r3
 8009f84:	d004      	beq.n	8009f90 <cleanup_stdio+0x30>
 8009f86:	4620      	mov	r0, r4
 8009f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f8c:	f000 bd8e 	b.w	800aaac <_fflush_r>
 8009f90:	bd10      	pop	{r4, pc}
 8009f92:	bf00      	nop
 8009f94:	20003034 	.word	0x20003034
 8009f98:	2000309c 	.word	0x2000309c
 8009f9c:	20003104 	.word	0x20003104

08009fa0 <global_stdio_init.part.0>:
 8009fa0:	b510      	push	{r4, lr}
 8009fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8009fd0 <global_stdio_init.part.0+0x30>)
 8009fa4:	4c0b      	ldr	r4, [pc, #44]	@ (8009fd4 <global_stdio_init.part.0+0x34>)
 8009fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8009fd8 <global_stdio_init.part.0+0x38>)
 8009fa8:	4620      	mov	r0, r4
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	2104      	movs	r1, #4
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f7ff ff94 	bl	8009edc <std>
 8009fb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009fb8:	2201      	movs	r2, #1
 8009fba:	2109      	movs	r1, #9
 8009fbc:	f7ff ff8e 	bl	8009edc <std>
 8009fc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fca:	2112      	movs	r1, #18
 8009fcc:	f7ff bf86 	b.w	8009edc <std>
 8009fd0:	2000316c 	.word	0x2000316c
 8009fd4:	20003034 	.word	0x20003034
 8009fd8:	08009f49 	.word	0x08009f49

08009fdc <__sfp_lock_acquire>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	@ (8009fe4 <__sfp_lock_acquire+0x8>)
 8009fde:	f000 b90e 	b.w	800a1fe <__retarget_lock_acquire_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	20003175 	.word	0x20003175

08009fe8 <__sfp_lock_release>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	@ (8009ff0 <__sfp_lock_release+0x8>)
 8009fea:	f000 b909 	b.w	800a200 <__retarget_lock_release_recursive>
 8009fee:	bf00      	nop
 8009ff0:	20003175 	.word	0x20003175

08009ff4 <__sinit>:
 8009ff4:	b510      	push	{r4, lr}
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	f7ff fff0 	bl	8009fdc <__sfp_lock_acquire>
 8009ffc:	6a23      	ldr	r3, [r4, #32]
 8009ffe:	b11b      	cbz	r3, 800a008 <__sinit+0x14>
 800a000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a004:	f7ff bff0 	b.w	8009fe8 <__sfp_lock_release>
 800a008:	4b04      	ldr	r3, [pc, #16]	@ (800a01c <__sinit+0x28>)
 800a00a:	6223      	str	r3, [r4, #32]
 800a00c:	4b04      	ldr	r3, [pc, #16]	@ (800a020 <__sinit+0x2c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1f5      	bne.n	800a000 <__sinit+0xc>
 800a014:	f7ff ffc4 	bl	8009fa0 <global_stdio_init.part.0>
 800a018:	e7f2      	b.n	800a000 <__sinit+0xc>
 800a01a:	bf00      	nop
 800a01c:	08009f61 	.word	0x08009f61
 800a020:	2000316c 	.word	0x2000316c

0800a024 <_fwalk_sglue>:
 800a024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a028:	4607      	mov	r7, r0
 800a02a:	4688      	mov	r8, r1
 800a02c:	4614      	mov	r4, r2
 800a02e:	2600      	movs	r6, #0
 800a030:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a034:	f1b9 0901 	subs.w	r9, r9, #1
 800a038:	d505      	bpl.n	800a046 <_fwalk_sglue+0x22>
 800a03a:	6824      	ldr	r4, [r4, #0]
 800a03c:	2c00      	cmp	r4, #0
 800a03e:	d1f7      	bne.n	800a030 <_fwalk_sglue+0xc>
 800a040:	4630      	mov	r0, r6
 800a042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a046:	89ab      	ldrh	r3, [r5, #12]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d907      	bls.n	800a05c <_fwalk_sglue+0x38>
 800a04c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a050:	3301      	adds	r3, #1
 800a052:	d003      	beq.n	800a05c <_fwalk_sglue+0x38>
 800a054:	4629      	mov	r1, r5
 800a056:	4638      	mov	r0, r7
 800a058:	47c0      	blx	r8
 800a05a:	4306      	orrs	r6, r0
 800a05c:	3568      	adds	r5, #104	@ 0x68
 800a05e:	e7e9      	b.n	800a034 <_fwalk_sglue+0x10>

0800a060 <iprintf>:
 800a060:	b40f      	push	{r0, r1, r2, r3}
 800a062:	b507      	push	{r0, r1, r2, lr}
 800a064:	4906      	ldr	r1, [pc, #24]	@ (800a080 <iprintf+0x20>)
 800a066:	ab04      	add	r3, sp, #16
 800a068:	6808      	ldr	r0, [r1, #0]
 800a06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a06e:	6881      	ldr	r1, [r0, #8]
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	f000 f9f3 	bl	800a45c <_vfiprintf_r>
 800a076:	b003      	add	sp, #12
 800a078:	f85d eb04 	ldr.w	lr, [sp], #4
 800a07c:	b004      	add	sp, #16
 800a07e:	4770      	bx	lr
 800a080:	20000018 	.word	0x20000018

0800a084 <__sread>:
 800a084:	b510      	push	{r4, lr}
 800a086:	460c      	mov	r4, r1
 800a088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a08c:	f000 f868 	bl	800a160 <_read_r>
 800a090:	2800      	cmp	r0, #0
 800a092:	bfab      	itete	ge
 800a094:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a096:	89a3      	ldrhlt	r3, [r4, #12]
 800a098:	181b      	addge	r3, r3, r0
 800a09a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a09e:	bfac      	ite	ge
 800a0a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a0a2:	81a3      	strhlt	r3, [r4, #12]
 800a0a4:	bd10      	pop	{r4, pc}

0800a0a6 <__swrite>:
 800a0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0aa:	461f      	mov	r7, r3
 800a0ac:	898b      	ldrh	r3, [r1, #12]
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	05db      	lsls	r3, r3, #23
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	4616      	mov	r6, r2
 800a0b6:	d505      	bpl.n	800a0c4 <__swrite+0x1e>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c0:	f000 f83c 	bl	800a13c <_lseek_r>
 800a0c4:	89a3      	ldrh	r3, [r4, #12]
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0cc:	81a3      	strh	r3, [r4, #12]
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	463b      	mov	r3, r7
 800a0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0da:	f000 b853 	b.w	800a184 <_write_r>

0800a0de <__sseek>:
 800a0de:	b510      	push	{r4, lr}
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e6:	f000 f829 	bl	800a13c <_lseek_r>
 800a0ea:	1c43      	adds	r3, r0, #1
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	bf15      	itete	ne
 800a0f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a0f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a0f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a0fa:	81a3      	strheq	r3, [r4, #12]
 800a0fc:	bf18      	it	ne
 800a0fe:	81a3      	strhne	r3, [r4, #12]
 800a100:	bd10      	pop	{r4, pc}

0800a102 <__sclose>:
 800a102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a106:	f000 b809 	b.w	800a11c <_close_r>

0800a10a <memset>:
 800a10a:	4603      	mov	r3, r0
 800a10c:	4402      	add	r2, r0
 800a10e:	4293      	cmp	r3, r2
 800a110:	d100      	bne.n	800a114 <memset+0xa>
 800a112:	4770      	bx	lr
 800a114:	f803 1b01 	strb.w	r1, [r3], #1
 800a118:	e7f9      	b.n	800a10e <memset+0x4>
	...

0800a11c <_close_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	2300      	movs	r3, #0
 800a120:	4d05      	ldr	r5, [pc, #20]	@ (800a138 <_close_r+0x1c>)
 800a122:	4604      	mov	r4, r0
 800a124:	4608      	mov	r0, r1
 800a126:	602b      	str	r3, [r5, #0]
 800a128:	f7f8 f934 	bl	8002394 <_close>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d102      	bne.n	800a136 <_close_r+0x1a>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	b103      	cbz	r3, 800a136 <_close_r+0x1a>
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	20003170 	.word	0x20003170

0800a13c <_lseek_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4604      	mov	r4, r0
 800a140:	4608      	mov	r0, r1
 800a142:	4611      	mov	r1, r2
 800a144:	2200      	movs	r2, #0
 800a146:	4d05      	ldr	r5, [pc, #20]	@ (800a15c <_lseek_r+0x20>)
 800a148:	602a      	str	r2, [r5, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f7f8 f946 	bl	80023dc <_lseek>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_lseek_r+0x1e>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_lseek_r+0x1e>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	20003170 	.word	0x20003170

0800a160 <_read_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	4611      	mov	r1, r2
 800a168:	2200      	movs	r2, #0
 800a16a:	4d05      	ldr	r5, [pc, #20]	@ (800a180 <_read_r+0x20>)
 800a16c:	602a      	str	r2, [r5, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	f7f8 f8d7 	bl	8002322 <_read>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	d102      	bne.n	800a17e <_read_r+0x1e>
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	b103      	cbz	r3, 800a17e <_read_r+0x1e>
 800a17c:	6023      	str	r3, [r4, #0]
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
 800a180:	20003170 	.word	0x20003170

0800a184 <_write_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4604      	mov	r4, r0
 800a188:	4608      	mov	r0, r1
 800a18a:	4611      	mov	r1, r2
 800a18c:	2200      	movs	r2, #0
 800a18e:	4d05      	ldr	r5, [pc, #20]	@ (800a1a4 <_write_r+0x20>)
 800a190:	602a      	str	r2, [r5, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	f7f8 f8e2 	bl	800235c <_write>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	d102      	bne.n	800a1a2 <_write_r+0x1e>
 800a19c:	682b      	ldr	r3, [r5, #0]
 800a19e:	b103      	cbz	r3, 800a1a2 <_write_r+0x1e>
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	bd38      	pop	{r3, r4, r5, pc}
 800a1a4:	20003170 	.word	0x20003170

0800a1a8 <__errno>:
 800a1a8:	4b01      	ldr	r3, [pc, #4]	@ (800a1b0 <__errno+0x8>)
 800a1aa:	6818      	ldr	r0, [r3, #0]
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	20000018 	.word	0x20000018

0800a1b4 <__libc_init_array>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	2600      	movs	r6, #0
 800a1b8:	4d0c      	ldr	r5, [pc, #48]	@ (800a1ec <__libc_init_array+0x38>)
 800a1ba:	4c0d      	ldr	r4, [pc, #52]	@ (800a1f0 <__libc_init_array+0x3c>)
 800a1bc:	1b64      	subs	r4, r4, r5
 800a1be:	10a4      	asrs	r4, r4, #2
 800a1c0:	42a6      	cmp	r6, r4
 800a1c2:	d109      	bne.n	800a1d8 <__libc_init_array+0x24>
 800a1c4:	f000 fdd0 	bl	800ad68 <_init>
 800a1c8:	2600      	movs	r6, #0
 800a1ca:	4d0a      	ldr	r5, [pc, #40]	@ (800a1f4 <__libc_init_array+0x40>)
 800a1cc:	4c0a      	ldr	r4, [pc, #40]	@ (800a1f8 <__libc_init_array+0x44>)
 800a1ce:	1b64      	subs	r4, r4, r5
 800a1d0:	10a4      	asrs	r4, r4, #2
 800a1d2:	42a6      	cmp	r6, r4
 800a1d4:	d105      	bne.n	800a1e2 <__libc_init_array+0x2e>
 800a1d6:	bd70      	pop	{r4, r5, r6, pc}
 800a1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1dc:	4798      	blx	r3
 800a1de:	3601      	adds	r6, #1
 800a1e0:	e7ee      	b.n	800a1c0 <__libc_init_array+0xc>
 800a1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1e6:	4798      	blx	r3
 800a1e8:	3601      	adds	r6, #1
 800a1ea:	e7f2      	b.n	800a1d2 <__libc_init_array+0x1e>
 800a1ec:	0800be60 	.word	0x0800be60
 800a1f0:	0800be60 	.word	0x0800be60
 800a1f4:	0800be60 	.word	0x0800be60
 800a1f8:	0800be64 	.word	0x0800be64

0800a1fc <__retarget_lock_init_recursive>:
 800a1fc:	4770      	bx	lr

0800a1fe <__retarget_lock_acquire_recursive>:
 800a1fe:	4770      	bx	lr

0800a200 <__retarget_lock_release_recursive>:
 800a200:	4770      	bx	lr

0800a202 <memcpy>:
 800a202:	440a      	add	r2, r1
 800a204:	4291      	cmp	r1, r2
 800a206:	f100 33ff 	add.w	r3, r0, #4294967295
 800a20a:	d100      	bne.n	800a20e <memcpy+0xc>
 800a20c:	4770      	bx	lr
 800a20e:	b510      	push	{r4, lr}
 800a210:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a214:	4291      	cmp	r1, r2
 800a216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a21a:	d1f9      	bne.n	800a210 <memcpy+0xe>
 800a21c:	bd10      	pop	{r4, pc}
	...

0800a220 <_free_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4605      	mov	r5, r0
 800a224:	2900      	cmp	r1, #0
 800a226:	d040      	beq.n	800a2aa <_free_r+0x8a>
 800a228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a22c:	1f0c      	subs	r4, r1, #4
 800a22e:	2b00      	cmp	r3, #0
 800a230:	bfb8      	it	lt
 800a232:	18e4      	addlt	r4, r4, r3
 800a234:	f000 f8de 	bl	800a3f4 <__malloc_lock>
 800a238:	4a1c      	ldr	r2, [pc, #112]	@ (800a2ac <_free_r+0x8c>)
 800a23a:	6813      	ldr	r3, [r2, #0]
 800a23c:	b933      	cbnz	r3, 800a24c <_free_r+0x2c>
 800a23e:	6063      	str	r3, [r4, #4]
 800a240:	6014      	str	r4, [r2, #0]
 800a242:	4628      	mov	r0, r5
 800a244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a248:	f000 b8da 	b.w	800a400 <__malloc_unlock>
 800a24c:	42a3      	cmp	r3, r4
 800a24e:	d908      	bls.n	800a262 <_free_r+0x42>
 800a250:	6820      	ldr	r0, [r4, #0]
 800a252:	1821      	adds	r1, r4, r0
 800a254:	428b      	cmp	r3, r1
 800a256:	bf01      	itttt	eq
 800a258:	6819      	ldreq	r1, [r3, #0]
 800a25a:	685b      	ldreq	r3, [r3, #4]
 800a25c:	1809      	addeq	r1, r1, r0
 800a25e:	6021      	streq	r1, [r4, #0]
 800a260:	e7ed      	b.n	800a23e <_free_r+0x1e>
 800a262:	461a      	mov	r2, r3
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	b10b      	cbz	r3, 800a26c <_free_r+0x4c>
 800a268:	42a3      	cmp	r3, r4
 800a26a:	d9fa      	bls.n	800a262 <_free_r+0x42>
 800a26c:	6811      	ldr	r1, [r2, #0]
 800a26e:	1850      	adds	r0, r2, r1
 800a270:	42a0      	cmp	r0, r4
 800a272:	d10b      	bne.n	800a28c <_free_r+0x6c>
 800a274:	6820      	ldr	r0, [r4, #0]
 800a276:	4401      	add	r1, r0
 800a278:	1850      	adds	r0, r2, r1
 800a27a:	4283      	cmp	r3, r0
 800a27c:	6011      	str	r1, [r2, #0]
 800a27e:	d1e0      	bne.n	800a242 <_free_r+0x22>
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	4408      	add	r0, r1
 800a286:	6010      	str	r0, [r2, #0]
 800a288:	6053      	str	r3, [r2, #4]
 800a28a:	e7da      	b.n	800a242 <_free_r+0x22>
 800a28c:	d902      	bls.n	800a294 <_free_r+0x74>
 800a28e:	230c      	movs	r3, #12
 800a290:	602b      	str	r3, [r5, #0]
 800a292:	e7d6      	b.n	800a242 <_free_r+0x22>
 800a294:	6820      	ldr	r0, [r4, #0]
 800a296:	1821      	adds	r1, r4, r0
 800a298:	428b      	cmp	r3, r1
 800a29a:	bf01      	itttt	eq
 800a29c:	6819      	ldreq	r1, [r3, #0]
 800a29e:	685b      	ldreq	r3, [r3, #4]
 800a2a0:	1809      	addeq	r1, r1, r0
 800a2a2:	6021      	streq	r1, [r4, #0]
 800a2a4:	6063      	str	r3, [r4, #4]
 800a2a6:	6054      	str	r4, [r2, #4]
 800a2a8:	e7cb      	b.n	800a242 <_free_r+0x22>
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	2000317c 	.word	0x2000317c

0800a2b0 <sbrk_aligned>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	4e0f      	ldr	r6, [pc, #60]	@ (800a2f0 <sbrk_aligned+0x40>)
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	6831      	ldr	r1, [r6, #0]
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	b911      	cbnz	r1, 800a2c2 <sbrk_aligned+0x12>
 800a2bc:	f000 fcb2 	bl	800ac24 <_sbrk_r>
 800a2c0:	6030      	str	r0, [r6, #0]
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f000 fcad 	bl	800ac24 <_sbrk_r>
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	d103      	bne.n	800a2d6 <sbrk_aligned+0x26>
 800a2ce:	f04f 34ff 	mov.w	r4, #4294967295
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	bd70      	pop	{r4, r5, r6, pc}
 800a2d6:	1cc4      	adds	r4, r0, #3
 800a2d8:	f024 0403 	bic.w	r4, r4, #3
 800a2dc:	42a0      	cmp	r0, r4
 800a2de:	d0f8      	beq.n	800a2d2 <sbrk_aligned+0x22>
 800a2e0:	1a21      	subs	r1, r4, r0
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f000 fc9e 	bl	800ac24 <_sbrk_r>
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d1f2      	bne.n	800a2d2 <sbrk_aligned+0x22>
 800a2ec:	e7ef      	b.n	800a2ce <sbrk_aligned+0x1e>
 800a2ee:	bf00      	nop
 800a2f0:	20003178 	.word	0x20003178

0800a2f4 <_malloc_r>:
 800a2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	1ccd      	adds	r5, r1, #3
 800a2fa:	f025 0503 	bic.w	r5, r5, #3
 800a2fe:	3508      	adds	r5, #8
 800a300:	2d0c      	cmp	r5, #12
 800a302:	bf38      	it	cc
 800a304:	250c      	movcc	r5, #12
 800a306:	2d00      	cmp	r5, #0
 800a308:	4606      	mov	r6, r0
 800a30a:	db01      	blt.n	800a310 <_malloc_r+0x1c>
 800a30c:	42a9      	cmp	r1, r5
 800a30e:	d904      	bls.n	800a31a <_malloc_r+0x26>
 800a310:	230c      	movs	r3, #12
 800a312:	6033      	str	r3, [r6, #0]
 800a314:	2000      	movs	r0, #0
 800a316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3f0 <_malloc_r+0xfc>
 800a31e:	f000 f869 	bl	800a3f4 <__malloc_lock>
 800a322:	f8d8 3000 	ldr.w	r3, [r8]
 800a326:	461c      	mov	r4, r3
 800a328:	bb44      	cbnz	r4, 800a37c <_malloc_r+0x88>
 800a32a:	4629      	mov	r1, r5
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff ffbf 	bl	800a2b0 <sbrk_aligned>
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	4604      	mov	r4, r0
 800a336:	d158      	bne.n	800a3ea <_malloc_r+0xf6>
 800a338:	f8d8 4000 	ldr.w	r4, [r8]
 800a33c:	4627      	mov	r7, r4
 800a33e:	2f00      	cmp	r7, #0
 800a340:	d143      	bne.n	800a3ca <_malloc_r+0xd6>
 800a342:	2c00      	cmp	r4, #0
 800a344:	d04b      	beq.n	800a3de <_malloc_r+0xea>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	4639      	mov	r1, r7
 800a34a:	4630      	mov	r0, r6
 800a34c:	eb04 0903 	add.w	r9, r4, r3
 800a350:	f000 fc68 	bl	800ac24 <_sbrk_r>
 800a354:	4581      	cmp	r9, r0
 800a356:	d142      	bne.n	800a3de <_malloc_r+0xea>
 800a358:	6821      	ldr	r1, [r4, #0]
 800a35a:	4630      	mov	r0, r6
 800a35c:	1a6d      	subs	r5, r5, r1
 800a35e:	4629      	mov	r1, r5
 800a360:	f7ff ffa6 	bl	800a2b0 <sbrk_aligned>
 800a364:	3001      	adds	r0, #1
 800a366:	d03a      	beq.n	800a3de <_malloc_r+0xea>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	442b      	add	r3, r5
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	f8d8 3000 	ldr.w	r3, [r8]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	bb62      	cbnz	r2, 800a3d0 <_malloc_r+0xdc>
 800a376:	f8c8 7000 	str.w	r7, [r8]
 800a37a:	e00f      	b.n	800a39c <_malloc_r+0xa8>
 800a37c:	6822      	ldr	r2, [r4, #0]
 800a37e:	1b52      	subs	r2, r2, r5
 800a380:	d420      	bmi.n	800a3c4 <_malloc_r+0xd0>
 800a382:	2a0b      	cmp	r2, #11
 800a384:	d917      	bls.n	800a3b6 <_malloc_r+0xc2>
 800a386:	1961      	adds	r1, r4, r5
 800a388:	42a3      	cmp	r3, r4
 800a38a:	6025      	str	r5, [r4, #0]
 800a38c:	bf18      	it	ne
 800a38e:	6059      	strne	r1, [r3, #4]
 800a390:	6863      	ldr	r3, [r4, #4]
 800a392:	bf08      	it	eq
 800a394:	f8c8 1000 	streq.w	r1, [r8]
 800a398:	5162      	str	r2, [r4, r5]
 800a39a:	604b      	str	r3, [r1, #4]
 800a39c:	4630      	mov	r0, r6
 800a39e:	f000 f82f 	bl	800a400 <__malloc_unlock>
 800a3a2:	f104 000b 	add.w	r0, r4, #11
 800a3a6:	1d23      	adds	r3, r4, #4
 800a3a8:	f020 0007 	bic.w	r0, r0, #7
 800a3ac:	1ac2      	subs	r2, r0, r3
 800a3ae:	bf1c      	itt	ne
 800a3b0:	1a1b      	subne	r3, r3, r0
 800a3b2:	50a3      	strne	r3, [r4, r2]
 800a3b4:	e7af      	b.n	800a316 <_malloc_r+0x22>
 800a3b6:	6862      	ldr	r2, [r4, #4]
 800a3b8:	42a3      	cmp	r3, r4
 800a3ba:	bf0c      	ite	eq
 800a3bc:	f8c8 2000 	streq.w	r2, [r8]
 800a3c0:	605a      	strne	r2, [r3, #4]
 800a3c2:	e7eb      	b.n	800a39c <_malloc_r+0xa8>
 800a3c4:	4623      	mov	r3, r4
 800a3c6:	6864      	ldr	r4, [r4, #4]
 800a3c8:	e7ae      	b.n	800a328 <_malloc_r+0x34>
 800a3ca:	463c      	mov	r4, r7
 800a3cc:	687f      	ldr	r7, [r7, #4]
 800a3ce:	e7b6      	b.n	800a33e <_malloc_r+0x4a>
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	42a3      	cmp	r3, r4
 800a3d6:	d1fb      	bne.n	800a3d0 <_malloc_r+0xdc>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	6053      	str	r3, [r2, #4]
 800a3dc:	e7de      	b.n	800a39c <_malloc_r+0xa8>
 800a3de:	230c      	movs	r3, #12
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	6033      	str	r3, [r6, #0]
 800a3e4:	f000 f80c 	bl	800a400 <__malloc_unlock>
 800a3e8:	e794      	b.n	800a314 <_malloc_r+0x20>
 800a3ea:	6005      	str	r5, [r0, #0]
 800a3ec:	e7d6      	b.n	800a39c <_malloc_r+0xa8>
 800a3ee:	bf00      	nop
 800a3f0:	2000317c 	.word	0x2000317c

0800a3f4 <__malloc_lock>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	@ (800a3fc <__malloc_lock+0x8>)
 800a3f6:	f7ff bf02 	b.w	800a1fe <__retarget_lock_acquire_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	20003174 	.word	0x20003174

0800a400 <__malloc_unlock>:
 800a400:	4801      	ldr	r0, [pc, #4]	@ (800a408 <__malloc_unlock+0x8>)
 800a402:	f7ff befd 	b.w	800a200 <__retarget_lock_release_recursive>
 800a406:	bf00      	nop
 800a408:	20003174 	.word	0x20003174

0800a40c <__sfputc_r>:
 800a40c:	6893      	ldr	r3, [r2, #8]
 800a40e:	b410      	push	{r4}
 800a410:	3b01      	subs	r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	6093      	str	r3, [r2, #8]
 800a416:	da07      	bge.n	800a428 <__sfputc_r+0x1c>
 800a418:	6994      	ldr	r4, [r2, #24]
 800a41a:	42a3      	cmp	r3, r4
 800a41c:	db01      	blt.n	800a422 <__sfputc_r+0x16>
 800a41e:	290a      	cmp	r1, #10
 800a420:	d102      	bne.n	800a428 <__sfputc_r+0x1c>
 800a422:	bc10      	pop	{r4}
 800a424:	f000 bb6a 	b.w	800aafc <__swbuf_r>
 800a428:	6813      	ldr	r3, [r2, #0]
 800a42a:	1c58      	adds	r0, r3, #1
 800a42c:	6010      	str	r0, [r2, #0]
 800a42e:	7019      	strb	r1, [r3, #0]
 800a430:	4608      	mov	r0, r1
 800a432:	bc10      	pop	{r4}
 800a434:	4770      	bx	lr

0800a436 <__sfputs_r>:
 800a436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a438:	4606      	mov	r6, r0
 800a43a:	460f      	mov	r7, r1
 800a43c:	4614      	mov	r4, r2
 800a43e:	18d5      	adds	r5, r2, r3
 800a440:	42ac      	cmp	r4, r5
 800a442:	d101      	bne.n	800a448 <__sfputs_r+0x12>
 800a444:	2000      	movs	r0, #0
 800a446:	e007      	b.n	800a458 <__sfputs_r+0x22>
 800a448:	463a      	mov	r2, r7
 800a44a:	4630      	mov	r0, r6
 800a44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a450:	f7ff ffdc 	bl	800a40c <__sfputc_r>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	d1f3      	bne.n	800a440 <__sfputs_r+0xa>
 800a458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a45c <_vfiprintf_r>:
 800a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	460d      	mov	r5, r1
 800a462:	4614      	mov	r4, r2
 800a464:	4698      	mov	r8, r3
 800a466:	4606      	mov	r6, r0
 800a468:	b09d      	sub	sp, #116	@ 0x74
 800a46a:	b118      	cbz	r0, 800a474 <_vfiprintf_r+0x18>
 800a46c:	6a03      	ldr	r3, [r0, #32]
 800a46e:	b90b      	cbnz	r3, 800a474 <_vfiprintf_r+0x18>
 800a470:	f7ff fdc0 	bl	8009ff4 <__sinit>
 800a474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a476:	07d9      	lsls	r1, r3, #31
 800a478:	d405      	bmi.n	800a486 <_vfiprintf_r+0x2a>
 800a47a:	89ab      	ldrh	r3, [r5, #12]
 800a47c:	059a      	lsls	r2, r3, #22
 800a47e:	d402      	bmi.n	800a486 <_vfiprintf_r+0x2a>
 800a480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a482:	f7ff febc 	bl	800a1fe <__retarget_lock_acquire_recursive>
 800a486:	89ab      	ldrh	r3, [r5, #12]
 800a488:	071b      	lsls	r3, r3, #28
 800a48a:	d501      	bpl.n	800a490 <_vfiprintf_r+0x34>
 800a48c:	692b      	ldr	r3, [r5, #16]
 800a48e:	b99b      	cbnz	r3, 800a4b8 <_vfiprintf_r+0x5c>
 800a490:	4629      	mov	r1, r5
 800a492:	4630      	mov	r0, r6
 800a494:	f000 fb70 	bl	800ab78 <__swsetup_r>
 800a498:	b170      	cbz	r0, 800a4b8 <_vfiprintf_r+0x5c>
 800a49a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a49c:	07dc      	lsls	r4, r3, #31
 800a49e:	d504      	bpl.n	800a4aa <_vfiprintf_r+0x4e>
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	b01d      	add	sp, #116	@ 0x74
 800a4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4aa:	89ab      	ldrh	r3, [r5, #12]
 800a4ac:	0598      	lsls	r0, r3, #22
 800a4ae:	d4f7      	bmi.n	800a4a0 <_vfiprintf_r+0x44>
 800a4b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4b2:	f7ff fea5 	bl	800a200 <__retarget_lock_release_recursive>
 800a4b6:	e7f3      	b.n	800a4a0 <_vfiprintf_r+0x44>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4bc:	2320      	movs	r3, #32
 800a4be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4c2:	2330      	movs	r3, #48	@ 0x30
 800a4c4:	f04f 0901 	mov.w	r9, #1
 800a4c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a678 <_vfiprintf_r+0x21c>
 800a4d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4d4:	4623      	mov	r3, r4
 800a4d6:	469a      	mov	sl, r3
 800a4d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4dc:	b10a      	cbz	r2, 800a4e2 <_vfiprintf_r+0x86>
 800a4de:	2a25      	cmp	r2, #37	@ 0x25
 800a4e0:	d1f9      	bne.n	800a4d6 <_vfiprintf_r+0x7a>
 800a4e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a4e6:	d00b      	beq.n	800a500 <_vfiprintf_r+0xa4>
 800a4e8:	465b      	mov	r3, fp
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	f7ff ffa1 	bl	800a436 <__sfputs_r>
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	f000 80a7 	beq.w	800a648 <_vfiprintf_r+0x1ec>
 800a4fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4fc:	445a      	add	r2, fp
 800a4fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800a500:	f89a 3000 	ldrb.w	r3, [sl]
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 809f 	beq.w	800a648 <_vfiprintf_r+0x1ec>
 800a50a:	2300      	movs	r3, #0
 800a50c:	f04f 32ff 	mov.w	r2, #4294967295
 800a510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a514:	f10a 0a01 	add.w	sl, sl, #1
 800a518:	9304      	str	r3, [sp, #16]
 800a51a:	9307      	str	r3, [sp, #28]
 800a51c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a520:	931a      	str	r3, [sp, #104]	@ 0x68
 800a522:	4654      	mov	r4, sl
 800a524:	2205      	movs	r2, #5
 800a526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a52a:	4853      	ldr	r0, [pc, #332]	@ (800a678 <_vfiprintf_r+0x21c>)
 800a52c:	f000 fb8a 	bl	800ac44 <memchr>
 800a530:	9a04      	ldr	r2, [sp, #16]
 800a532:	b9d8      	cbnz	r0, 800a56c <_vfiprintf_r+0x110>
 800a534:	06d1      	lsls	r1, r2, #27
 800a536:	bf44      	itt	mi
 800a538:	2320      	movmi	r3, #32
 800a53a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a53e:	0713      	lsls	r3, r2, #28
 800a540:	bf44      	itt	mi
 800a542:	232b      	movmi	r3, #43	@ 0x2b
 800a544:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a548:	f89a 3000 	ldrb.w	r3, [sl]
 800a54c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a54e:	d015      	beq.n	800a57c <_vfiprintf_r+0x120>
 800a550:	4654      	mov	r4, sl
 800a552:	2000      	movs	r0, #0
 800a554:	f04f 0c0a 	mov.w	ip, #10
 800a558:	9a07      	ldr	r2, [sp, #28]
 800a55a:	4621      	mov	r1, r4
 800a55c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a560:	3b30      	subs	r3, #48	@ 0x30
 800a562:	2b09      	cmp	r3, #9
 800a564:	d94b      	bls.n	800a5fe <_vfiprintf_r+0x1a2>
 800a566:	b1b0      	cbz	r0, 800a596 <_vfiprintf_r+0x13a>
 800a568:	9207      	str	r2, [sp, #28]
 800a56a:	e014      	b.n	800a596 <_vfiprintf_r+0x13a>
 800a56c:	eba0 0308 	sub.w	r3, r0, r8
 800a570:	fa09 f303 	lsl.w	r3, r9, r3
 800a574:	4313      	orrs	r3, r2
 800a576:	46a2      	mov	sl, r4
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	e7d2      	b.n	800a522 <_vfiprintf_r+0xc6>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	1d19      	adds	r1, r3, #4
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	9103      	str	r1, [sp, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	bfbb      	ittet	lt
 800a588:	425b      	neglt	r3, r3
 800a58a:	f042 0202 	orrlt.w	r2, r2, #2
 800a58e:	9307      	strge	r3, [sp, #28]
 800a590:	9307      	strlt	r3, [sp, #28]
 800a592:	bfb8      	it	lt
 800a594:	9204      	strlt	r2, [sp, #16]
 800a596:	7823      	ldrb	r3, [r4, #0]
 800a598:	2b2e      	cmp	r3, #46	@ 0x2e
 800a59a:	d10a      	bne.n	800a5b2 <_vfiprintf_r+0x156>
 800a59c:	7863      	ldrb	r3, [r4, #1]
 800a59e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5a0:	d132      	bne.n	800a608 <_vfiprintf_r+0x1ac>
 800a5a2:	9b03      	ldr	r3, [sp, #12]
 800a5a4:	3402      	adds	r4, #2
 800a5a6:	1d1a      	adds	r2, r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	9203      	str	r2, [sp, #12]
 800a5ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5b0:	9305      	str	r3, [sp, #20]
 800a5b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a67c <_vfiprintf_r+0x220>
 800a5b6:	2203      	movs	r2, #3
 800a5b8:	4650      	mov	r0, sl
 800a5ba:	7821      	ldrb	r1, [r4, #0]
 800a5bc:	f000 fb42 	bl	800ac44 <memchr>
 800a5c0:	b138      	cbz	r0, 800a5d2 <_vfiprintf_r+0x176>
 800a5c2:	2240      	movs	r2, #64	@ 0x40
 800a5c4:	9b04      	ldr	r3, [sp, #16]
 800a5c6:	eba0 000a 	sub.w	r0, r0, sl
 800a5ca:	4082      	lsls	r2, r0
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	3401      	adds	r4, #1
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d6:	2206      	movs	r2, #6
 800a5d8:	4829      	ldr	r0, [pc, #164]	@ (800a680 <_vfiprintf_r+0x224>)
 800a5da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5de:	f000 fb31 	bl	800ac44 <memchr>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d03f      	beq.n	800a666 <_vfiprintf_r+0x20a>
 800a5e6:	4b27      	ldr	r3, [pc, #156]	@ (800a684 <_vfiprintf_r+0x228>)
 800a5e8:	bb1b      	cbnz	r3, 800a632 <_vfiprintf_r+0x1d6>
 800a5ea:	9b03      	ldr	r3, [sp, #12]
 800a5ec:	3307      	adds	r3, #7
 800a5ee:	f023 0307 	bic.w	r3, r3, #7
 800a5f2:	3308      	adds	r3, #8
 800a5f4:	9303      	str	r3, [sp, #12]
 800a5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f8:	443b      	add	r3, r7
 800a5fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5fc:	e76a      	b.n	800a4d4 <_vfiprintf_r+0x78>
 800a5fe:	460c      	mov	r4, r1
 800a600:	2001      	movs	r0, #1
 800a602:	fb0c 3202 	mla	r2, ip, r2, r3
 800a606:	e7a8      	b.n	800a55a <_vfiprintf_r+0xfe>
 800a608:	2300      	movs	r3, #0
 800a60a:	f04f 0c0a 	mov.w	ip, #10
 800a60e:	4619      	mov	r1, r3
 800a610:	3401      	adds	r4, #1
 800a612:	9305      	str	r3, [sp, #20]
 800a614:	4620      	mov	r0, r4
 800a616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a61a:	3a30      	subs	r2, #48	@ 0x30
 800a61c:	2a09      	cmp	r2, #9
 800a61e:	d903      	bls.n	800a628 <_vfiprintf_r+0x1cc>
 800a620:	2b00      	cmp	r3, #0
 800a622:	d0c6      	beq.n	800a5b2 <_vfiprintf_r+0x156>
 800a624:	9105      	str	r1, [sp, #20]
 800a626:	e7c4      	b.n	800a5b2 <_vfiprintf_r+0x156>
 800a628:	4604      	mov	r4, r0
 800a62a:	2301      	movs	r3, #1
 800a62c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a630:	e7f0      	b.n	800a614 <_vfiprintf_r+0x1b8>
 800a632:	ab03      	add	r3, sp, #12
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	462a      	mov	r2, r5
 800a638:	4630      	mov	r0, r6
 800a63a:	4b13      	ldr	r3, [pc, #76]	@ (800a688 <_vfiprintf_r+0x22c>)
 800a63c:	a904      	add	r1, sp, #16
 800a63e:	f3af 8000 	nop.w
 800a642:	4607      	mov	r7, r0
 800a644:	1c78      	adds	r0, r7, #1
 800a646:	d1d6      	bne.n	800a5f6 <_vfiprintf_r+0x19a>
 800a648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a64a:	07d9      	lsls	r1, r3, #31
 800a64c:	d405      	bmi.n	800a65a <_vfiprintf_r+0x1fe>
 800a64e:	89ab      	ldrh	r3, [r5, #12]
 800a650:	059a      	lsls	r2, r3, #22
 800a652:	d402      	bmi.n	800a65a <_vfiprintf_r+0x1fe>
 800a654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a656:	f7ff fdd3 	bl	800a200 <__retarget_lock_release_recursive>
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	065b      	lsls	r3, r3, #25
 800a65e:	f53f af1f 	bmi.w	800a4a0 <_vfiprintf_r+0x44>
 800a662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a664:	e71e      	b.n	800a4a4 <_vfiprintf_r+0x48>
 800a666:	ab03      	add	r3, sp, #12
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	462a      	mov	r2, r5
 800a66c:	4630      	mov	r0, r6
 800a66e:	4b06      	ldr	r3, [pc, #24]	@ (800a688 <_vfiprintf_r+0x22c>)
 800a670:	a904      	add	r1, sp, #16
 800a672:	f000 f87d 	bl	800a770 <_printf_i>
 800a676:	e7e4      	b.n	800a642 <_vfiprintf_r+0x1e6>
 800a678:	0800be2c 	.word	0x0800be2c
 800a67c:	0800be32 	.word	0x0800be32
 800a680:	0800be36 	.word	0x0800be36
 800a684:	00000000 	.word	0x00000000
 800a688:	0800a437 	.word	0x0800a437

0800a68c <_printf_common>:
 800a68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a690:	4616      	mov	r6, r2
 800a692:	4698      	mov	r8, r3
 800a694:	688a      	ldr	r2, [r1, #8]
 800a696:	690b      	ldr	r3, [r1, #16]
 800a698:	4607      	mov	r7, r0
 800a69a:	4293      	cmp	r3, r2
 800a69c:	bfb8      	it	lt
 800a69e:	4613      	movlt	r3, r2
 800a6a0:	6033      	str	r3, [r6, #0]
 800a6a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6ac:	b10a      	cbz	r2, 800a6b2 <_printf_common+0x26>
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	6033      	str	r3, [r6, #0]
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	0699      	lsls	r1, r3, #26
 800a6b6:	bf42      	ittt	mi
 800a6b8:	6833      	ldrmi	r3, [r6, #0]
 800a6ba:	3302      	addmi	r3, #2
 800a6bc:	6033      	strmi	r3, [r6, #0]
 800a6be:	6825      	ldr	r5, [r4, #0]
 800a6c0:	f015 0506 	ands.w	r5, r5, #6
 800a6c4:	d106      	bne.n	800a6d4 <_printf_common+0x48>
 800a6c6:	f104 0a19 	add.w	sl, r4, #25
 800a6ca:	68e3      	ldr	r3, [r4, #12]
 800a6cc:	6832      	ldr	r2, [r6, #0]
 800a6ce:	1a9b      	subs	r3, r3, r2
 800a6d0:	42ab      	cmp	r3, r5
 800a6d2:	dc2b      	bgt.n	800a72c <_printf_common+0xa0>
 800a6d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a6d8:	6822      	ldr	r2, [r4, #0]
 800a6da:	3b00      	subs	r3, #0
 800a6dc:	bf18      	it	ne
 800a6de:	2301      	movne	r3, #1
 800a6e0:	0692      	lsls	r2, r2, #26
 800a6e2:	d430      	bmi.n	800a746 <_printf_common+0xba>
 800a6e4:	4641      	mov	r1, r8
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a6ec:	47c8      	blx	r9
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	d023      	beq.n	800a73a <_printf_common+0xae>
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	6922      	ldr	r2, [r4, #16]
 800a6f6:	f003 0306 	and.w	r3, r3, #6
 800a6fa:	2b04      	cmp	r3, #4
 800a6fc:	bf14      	ite	ne
 800a6fe:	2500      	movne	r5, #0
 800a700:	6833      	ldreq	r3, [r6, #0]
 800a702:	f04f 0600 	mov.w	r6, #0
 800a706:	bf08      	it	eq
 800a708:	68e5      	ldreq	r5, [r4, #12]
 800a70a:	f104 041a 	add.w	r4, r4, #26
 800a70e:	bf08      	it	eq
 800a710:	1aed      	subeq	r5, r5, r3
 800a712:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a716:	bf08      	it	eq
 800a718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a71c:	4293      	cmp	r3, r2
 800a71e:	bfc4      	itt	gt
 800a720:	1a9b      	subgt	r3, r3, r2
 800a722:	18ed      	addgt	r5, r5, r3
 800a724:	42b5      	cmp	r5, r6
 800a726:	d11a      	bne.n	800a75e <_printf_common+0xd2>
 800a728:	2000      	movs	r0, #0
 800a72a:	e008      	b.n	800a73e <_printf_common+0xb2>
 800a72c:	2301      	movs	r3, #1
 800a72e:	4652      	mov	r2, sl
 800a730:	4641      	mov	r1, r8
 800a732:	4638      	mov	r0, r7
 800a734:	47c8      	blx	r9
 800a736:	3001      	adds	r0, #1
 800a738:	d103      	bne.n	800a742 <_printf_common+0xb6>
 800a73a:	f04f 30ff 	mov.w	r0, #4294967295
 800a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a742:	3501      	adds	r5, #1
 800a744:	e7c1      	b.n	800a6ca <_printf_common+0x3e>
 800a746:	2030      	movs	r0, #48	@ 0x30
 800a748:	18e1      	adds	r1, r4, r3
 800a74a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a74e:	1c5a      	adds	r2, r3, #1
 800a750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a754:	4422      	add	r2, r4
 800a756:	3302      	adds	r3, #2
 800a758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a75c:	e7c2      	b.n	800a6e4 <_printf_common+0x58>
 800a75e:	2301      	movs	r3, #1
 800a760:	4622      	mov	r2, r4
 800a762:	4641      	mov	r1, r8
 800a764:	4638      	mov	r0, r7
 800a766:	47c8      	blx	r9
 800a768:	3001      	adds	r0, #1
 800a76a:	d0e6      	beq.n	800a73a <_printf_common+0xae>
 800a76c:	3601      	adds	r6, #1
 800a76e:	e7d9      	b.n	800a724 <_printf_common+0x98>

0800a770 <_printf_i>:
 800a770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a774:	7e0f      	ldrb	r7, [r1, #24]
 800a776:	4691      	mov	r9, r2
 800a778:	2f78      	cmp	r7, #120	@ 0x78
 800a77a:	4680      	mov	r8, r0
 800a77c:	460c      	mov	r4, r1
 800a77e:	469a      	mov	sl, r3
 800a780:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a786:	d807      	bhi.n	800a798 <_printf_i+0x28>
 800a788:	2f62      	cmp	r7, #98	@ 0x62
 800a78a:	d80a      	bhi.n	800a7a2 <_printf_i+0x32>
 800a78c:	2f00      	cmp	r7, #0
 800a78e:	f000 80d1 	beq.w	800a934 <_printf_i+0x1c4>
 800a792:	2f58      	cmp	r7, #88	@ 0x58
 800a794:	f000 80b8 	beq.w	800a908 <_printf_i+0x198>
 800a798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a79c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7a0:	e03a      	b.n	800a818 <_printf_i+0xa8>
 800a7a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7a6:	2b15      	cmp	r3, #21
 800a7a8:	d8f6      	bhi.n	800a798 <_printf_i+0x28>
 800a7aa:	a101      	add	r1, pc, #4	@ (adr r1, 800a7b0 <_printf_i+0x40>)
 800a7ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7b0:	0800a809 	.word	0x0800a809
 800a7b4:	0800a81d 	.word	0x0800a81d
 800a7b8:	0800a799 	.word	0x0800a799
 800a7bc:	0800a799 	.word	0x0800a799
 800a7c0:	0800a799 	.word	0x0800a799
 800a7c4:	0800a799 	.word	0x0800a799
 800a7c8:	0800a81d 	.word	0x0800a81d
 800a7cc:	0800a799 	.word	0x0800a799
 800a7d0:	0800a799 	.word	0x0800a799
 800a7d4:	0800a799 	.word	0x0800a799
 800a7d8:	0800a799 	.word	0x0800a799
 800a7dc:	0800a91b 	.word	0x0800a91b
 800a7e0:	0800a847 	.word	0x0800a847
 800a7e4:	0800a8d5 	.word	0x0800a8d5
 800a7e8:	0800a799 	.word	0x0800a799
 800a7ec:	0800a799 	.word	0x0800a799
 800a7f0:	0800a93d 	.word	0x0800a93d
 800a7f4:	0800a799 	.word	0x0800a799
 800a7f8:	0800a847 	.word	0x0800a847
 800a7fc:	0800a799 	.word	0x0800a799
 800a800:	0800a799 	.word	0x0800a799
 800a804:	0800a8dd 	.word	0x0800a8dd
 800a808:	6833      	ldr	r3, [r6, #0]
 800a80a:	1d1a      	adds	r2, r3, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6032      	str	r2, [r6, #0]
 800a810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a818:	2301      	movs	r3, #1
 800a81a:	e09c      	b.n	800a956 <_printf_i+0x1e6>
 800a81c:	6833      	ldr	r3, [r6, #0]
 800a81e:	6820      	ldr	r0, [r4, #0]
 800a820:	1d19      	adds	r1, r3, #4
 800a822:	6031      	str	r1, [r6, #0]
 800a824:	0606      	lsls	r6, r0, #24
 800a826:	d501      	bpl.n	800a82c <_printf_i+0xbc>
 800a828:	681d      	ldr	r5, [r3, #0]
 800a82a:	e003      	b.n	800a834 <_printf_i+0xc4>
 800a82c:	0645      	lsls	r5, r0, #25
 800a82e:	d5fb      	bpl.n	800a828 <_printf_i+0xb8>
 800a830:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a834:	2d00      	cmp	r5, #0
 800a836:	da03      	bge.n	800a840 <_printf_i+0xd0>
 800a838:	232d      	movs	r3, #45	@ 0x2d
 800a83a:	426d      	negs	r5, r5
 800a83c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a840:	230a      	movs	r3, #10
 800a842:	4858      	ldr	r0, [pc, #352]	@ (800a9a4 <_printf_i+0x234>)
 800a844:	e011      	b.n	800a86a <_printf_i+0xfa>
 800a846:	6821      	ldr	r1, [r4, #0]
 800a848:	6833      	ldr	r3, [r6, #0]
 800a84a:	0608      	lsls	r0, r1, #24
 800a84c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a850:	d402      	bmi.n	800a858 <_printf_i+0xe8>
 800a852:	0649      	lsls	r1, r1, #25
 800a854:	bf48      	it	mi
 800a856:	b2ad      	uxthmi	r5, r5
 800a858:	2f6f      	cmp	r7, #111	@ 0x6f
 800a85a:	6033      	str	r3, [r6, #0]
 800a85c:	bf14      	ite	ne
 800a85e:	230a      	movne	r3, #10
 800a860:	2308      	moveq	r3, #8
 800a862:	4850      	ldr	r0, [pc, #320]	@ (800a9a4 <_printf_i+0x234>)
 800a864:	2100      	movs	r1, #0
 800a866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a86a:	6866      	ldr	r6, [r4, #4]
 800a86c:	2e00      	cmp	r6, #0
 800a86e:	60a6      	str	r6, [r4, #8]
 800a870:	db05      	blt.n	800a87e <_printf_i+0x10e>
 800a872:	6821      	ldr	r1, [r4, #0]
 800a874:	432e      	orrs	r6, r5
 800a876:	f021 0104 	bic.w	r1, r1, #4
 800a87a:	6021      	str	r1, [r4, #0]
 800a87c:	d04b      	beq.n	800a916 <_printf_i+0x1a6>
 800a87e:	4616      	mov	r6, r2
 800a880:	fbb5 f1f3 	udiv	r1, r5, r3
 800a884:	fb03 5711 	mls	r7, r3, r1, r5
 800a888:	5dc7      	ldrb	r7, [r0, r7]
 800a88a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a88e:	462f      	mov	r7, r5
 800a890:	42bb      	cmp	r3, r7
 800a892:	460d      	mov	r5, r1
 800a894:	d9f4      	bls.n	800a880 <_printf_i+0x110>
 800a896:	2b08      	cmp	r3, #8
 800a898:	d10b      	bne.n	800a8b2 <_printf_i+0x142>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	07df      	lsls	r7, r3, #31
 800a89e:	d508      	bpl.n	800a8b2 <_printf_i+0x142>
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	6861      	ldr	r1, [r4, #4]
 800a8a4:	4299      	cmp	r1, r3
 800a8a6:	bfde      	ittt	le
 800a8a8:	2330      	movle	r3, #48	@ 0x30
 800a8aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8b2:	1b92      	subs	r2, r2, r6
 800a8b4:	6122      	str	r2, [r4, #16]
 800a8b6:	464b      	mov	r3, r9
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	f8cd a000 	str.w	sl, [sp]
 800a8c0:	aa03      	add	r2, sp, #12
 800a8c2:	f7ff fee3 	bl	800a68c <_printf_common>
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d14a      	bne.n	800a960 <_printf_i+0x1f0>
 800a8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ce:	b004      	add	sp, #16
 800a8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	f043 0320 	orr.w	r3, r3, #32
 800a8da:	6023      	str	r3, [r4, #0]
 800a8dc:	2778      	movs	r7, #120	@ 0x78
 800a8de:	4832      	ldr	r0, [pc, #200]	@ (800a9a8 <_printf_i+0x238>)
 800a8e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	6831      	ldr	r1, [r6, #0]
 800a8e8:	061f      	lsls	r7, r3, #24
 800a8ea:	f851 5b04 	ldr.w	r5, [r1], #4
 800a8ee:	d402      	bmi.n	800a8f6 <_printf_i+0x186>
 800a8f0:	065f      	lsls	r7, r3, #25
 800a8f2:	bf48      	it	mi
 800a8f4:	b2ad      	uxthmi	r5, r5
 800a8f6:	6031      	str	r1, [r6, #0]
 800a8f8:	07d9      	lsls	r1, r3, #31
 800a8fa:	bf44      	itt	mi
 800a8fc:	f043 0320 	orrmi.w	r3, r3, #32
 800a900:	6023      	strmi	r3, [r4, #0]
 800a902:	b11d      	cbz	r5, 800a90c <_printf_i+0x19c>
 800a904:	2310      	movs	r3, #16
 800a906:	e7ad      	b.n	800a864 <_printf_i+0xf4>
 800a908:	4826      	ldr	r0, [pc, #152]	@ (800a9a4 <_printf_i+0x234>)
 800a90a:	e7e9      	b.n	800a8e0 <_printf_i+0x170>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	f023 0320 	bic.w	r3, r3, #32
 800a912:	6023      	str	r3, [r4, #0]
 800a914:	e7f6      	b.n	800a904 <_printf_i+0x194>
 800a916:	4616      	mov	r6, r2
 800a918:	e7bd      	b.n	800a896 <_printf_i+0x126>
 800a91a:	6833      	ldr	r3, [r6, #0]
 800a91c:	6825      	ldr	r5, [r4, #0]
 800a91e:	1d18      	adds	r0, r3, #4
 800a920:	6961      	ldr	r1, [r4, #20]
 800a922:	6030      	str	r0, [r6, #0]
 800a924:	062e      	lsls	r6, r5, #24
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	d501      	bpl.n	800a92e <_printf_i+0x1be>
 800a92a:	6019      	str	r1, [r3, #0]
 800a92c:	e002      	b.n	800a934 <_printf_i+0x1c4>
 800a92e:	0668      	lsls	r0, r5, #25
 800a930:	d5fb      	bpl.n	800a92a <_printf_i+0x1ba>
 800a932:	8019      	strh	r1, [r3, #0]
 800a934:	2300      	movs	r3, #0
 800a936:	4616      	mov	r6, r2
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	e7bc      	b.n	800a8b6 <_printf_i+0x146>
 800a93c:	6833      	ldr	r3, [r6, #0]
 800a93e:	2100      	movs	r1, #0
 800a940:	1d1a      	adds	r2, r3, #4
 800a942:	6032      	str	r2, [r6, #0]
 800a944:	681e      	ldr	r6, [r3, #0]
 800a946:	6862      	ldr	r2, [r4, #4]
 800a948:	4630      	mov	r0, r6
 800a94a:	f000 f97b 	bl	800ac44 <memchr>
 800a94e:	b108      	cbz	r0, 800a954 <_printf_i+0x1e4>
 800a950:	1b80      	subs	r0, r0, r6
 800a952:	6060      	str	r0, [r4, #4]
 800a954:	6863      	ldr	r3, [r4, #4]
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	2300      	movs	r3, #0
 800a95a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a95e:	e7aa      	b.n	800a8b6 <_printf_i+0x146>
 800a960:	4632      	mov	r2, r6
 800a962:	4649      	mov	r1, r9
 800a964:	4640      	mov	r0, r8
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	47d0      	blx	sl
 800a96a:	3001      	adds	r0, #1
 800a96c:	d0ad      	beq.n	800a8ca <_printf_i+0x15a>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	079b      	lsls	r3, r3, #30
 800a972:	d413      	bmi.n	800a99c <_printf_i+0x22c>
 800a974:	68e0      	ldr	r0, [r4, #12]
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	4298      	cmp	r0, r3
 800a97a:	bfb8      	it	lt
 800a97c:	4618      	movlt	r0, r3
 800a97e:	e7a6      	b.n	800a8ce <_printf_i+0x15e>
 800a980:	2301      	movs	r3, #1
 800a982:	4632      	mov	r2, r6
 800a984:	4649      	mov	r1, r9
 800a986:	4640      	mov	r0, r8
 800a988:	47d0      	blx	sl
 800a98a:	3001      	adds	r0, #1
 800a98c:	d09d      	beq.n	800a8ca <_printf_i+0x15a>
 800a98e:	3501      	adds	r5, #1
 800a990:	68e3      	ldr	r3, [r4, #12]
 800a992:	9903      	ldr	r1, [sp, #12]
 800a994:	1a5b      	subs	r3, r3, r1
 800a996:	42ab      	cmp	r3, r5
 800a998:	dcf2      	bgt.n	800a980 <_printf_i+0x210>
 800a99a:	e7eb      	b.n	800a974 <_printf_i+0x204>
 800a99c:	2500      	movs	r5, #0
 800a99e:	f104 0619 	add.w	r6, r4, #25
 800a9a2:	e7f5      	b.n	800a990 <_printf_i+0x220>
 800a9a4:	0800be3d 	.word	0x0800be3d
 800a9a8:	0800be4e 	.word	0x0800be4e

0800a9ac <__sflush_r>:
 800a9ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b2:	0716      	lsls	r6, r2, #28
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	d454      	bmi.n	800aa64 <__sflush_r+0xb8>
 800a9ba:	684b      	ldr	r3, [r1, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dc02      	bgt.n	800a9c6 <__sflush_r+0x1a>
 800a9c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dd48      	ble.n	800aa58 <__sflush_r+0xac>
 800a9c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9c8:	2e00      	cmp	r6, #0
 800a9ca:	d045      	beq.n	800aa58 <__sflush_r+0xac>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a9d2:	682f      	ldr	r7, [r5, #0]
 800a9d4:	6a21      	ldr	r1, [r4, #32]
 800a9d6:	602b      	str	r3, [r5, #0]
 800a9d8:	d030      	beq.n	800aa3c <__sflush_r+0x90>
 800a9da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	0759      	lsls	r1, r3, #29
 800a9e0:	d505      	bpl.n	800a9ee <__sflush_r+0x42>
 800a9e2:	6863      	ldr	r3, [r4, #4]
 800a9e4:	1ad2      	subs	r2, r2, r3
 800a9e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9e8:	b10b      	cbz	r3, 800a9ee <__sflush_r+0x42>
 800a9ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9ec:	1ad2      	subs	r2, r2, r3
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9f4:	6a21      	ldr	r1, [r4, #32]
 800a9f6:	47b0      	blx	r6
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	d106      	bne.n	800aa0c <__sflush_r+0x60>
 800a9fe:	6829      	ldr	r1, [r5, #0]
 800aa00:	291d      	cmp	r1, #29
 800aa02:	d82b      	bhi.n	800aa5c <__sflush_r+0xb0>
 800aa04:	4a28      	ldr	r2, [pc, #160]	@ (800aaa8 <__sflush_r+0xfc>)
 800aa06:	40ca      	lsrs	r2, r1
 800aa08:	07d6      	lsls	r6, r2, #31
 800aa0a:	d527      	bpl.n	800aa5c <__sflush_r+0xb0>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	6062      	str	r2, [r4, #4]
 800aa10:	6922      	ldr	r2, [r4, #16]
 800aa12:	04d9      	lsls	r1, r3, #19
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	d504      	bpl.n	800aa22 <__sflush_r+0x76>
 800aa18:	1c42      	adds	r2, r0, #1
 800aa1a:	d101      	bne.n	800aa20 <__sflush_r+0x74>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	b903      	cbnz	r3, 800aa22 <__sflush_r+0x76>
 800aa20:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa24:	602f      	str	r7, [r5, #0]
 800aa26:	b1b9      	cbz	r1, 800aa58 <__sflush_r+0xac>
 800aa28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa2c:	4299      	cmp	r1, r3
 800aa2e:	d002      	beq.n	800aa36 <__sflush_r+0x8a>
 800aa30:	4628      	mov	r0, r5
 800aa32:	f7ff fbf5 	bl	800a220 <_free_r>
 800aa36:	2300      	movs	r3, #0
 800aa38:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa3a:	e00d      	b.n	800aa58 <__sflush_r+0xac>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4628      	mov	r0, r5
 800aa40:	47b0      	blx	r6
 800aa42:	4602      	mov	r2, r0
 800aa44:	1c50      	adds	r0, r2, #1
 800aa46:	d1c9      	bne.n	800a9dc <__sflush_r+0x30>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0c6      	beq.n	800a9dc <__sflush_r+0x30>
 800aa4e:	2b1d      	cmp	r3, #29
 800aa50:	d001      	beq.n	800aa56 <__sflush_r+0xaa>
 800aa52:	2b16      	cmp	r3, #22
 800aa54:	d11d      	bne.n	800aa92 <__sflush_r+0xe6>
 800aa56:	602f      	str	r7, [r5, #0]
 800aa58:	2000      	movs	r0, #0
 800aa5a:	e021      	b.n	800aaa0 <__sflush_r+0xf4>
 800aa5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa60:	b21b      	sxth	r3, r3
 800aa62:	e01a      	b.n	800aa9a <__sflush_r+0xee>
 800aa64:	690f      	ldr	r7, [r1, #16]
 800aa66:	2f00      	cmp	r7, #0
 800aa68:	d0f6      	beq.n	800aa58 <__sflush_r+0xac>
 800aa6a:	0793      	lsls	r3, r2, #30
 800aa6c:	bf18      	it	ne
 800aa6e:	2300      	movne	r3, #0
 800aa70:	680e      	ldr	r6, [r1, #0]
 800aa72:	bf08      	it	eq
 800aa74:	694b      	ldreq	r3, [r1, #20]
 800aa76:	1bf6      	subs	r6, r6, r7
 800aa78:	600f      	str	r7, [r1, #0]
 800aa7a:	608b      	str	r3, [r1, #8]
 800aa7c:	2e00      	cmp	r6, #0
 800aa7e:	ddeb      	ble.n	800aa58 <__sflush_r+0xac>
 800aa80:	4633      	mov	r3, r6
 800aa82:	463a      	mov	r2, r7
 800aa84:	4628      	mov	r0, r5
 800aa86:	6a21      	ldr	r1, [r4, #32]
 800aa88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800aa8c:	47e0      	blx	ip
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	dc07      	bgt.n	800aaa2 <__sflush_r+0xf6>
 800aa92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa9a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9e:	81a3      	strh	r3, [r4, #12]
 800aaa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa2:	4407      	add	r7, r0
 800aaa4:	1a36      	subs	r6, r6, r0
 800aaa6:	e7e9      	b.n	800aa7c <__sflush_r+0xd0>
 800aaa8:	20400001 	.word	0x20400001

0800aaac <_fflush_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	690b      	ldr	r3, [r1, #16]
 800aab0:	4605      	mov	r5, r0
 800aab2:	460c      	mov	r4, r1
 800aab4:	b913      	cbnz	r3, 800aabc <_fflush_r+0x10>
 800aab6:	2500      	movs	r5, #0
 800aab8:	4628      	mov	r0, r5
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	b118      	cbz	r0, 800aac6 <_fflush_r+0x1a>
 800aabe:	6a03      	ldr	r3, [r0, #32]
 800aac0:	b90b      	cbnz	r3, 800aac6 <_fflush_r+0x1a>
 800aac2:	f7ff fa97 	bl	8009ff4 <__sinit>
 800aac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d0f3      	beq.n	800aab6 <_fflush_r+0xa>
 800aace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aad0:	07d0      	lsls	r0, r2, #31
 800aad2:	d404      	bmi.n	800aade <_fflush_r+0x32>
 800aad4:	0599      	lsls	r1, r3, #22
 800aad6:	d402      	bmi.n	800aade <_fflush_r+0x32>
 800aad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aada:	f7ff fb90 	bl	800a1fe <__retarget_lock_acquire_recursive>
 800aade:	4628      	mov	r0, r5
 800aae0:	4621      	mov	r1, r4
 800aae2:	f7ff ff63 	bl	800a9ac <__sflush_r>
 800aae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aae8:	4605      	mov	r5, r0
 800aaea:	07da      	lsls	r2, r3, #31
 800aaec:	d4e4      	bmi.n	800aab8 <_fflush_r+0xc>
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	059b      	lsls	r3, r3, #22
 800aaf2:	d4e1      	bmi.n	800aab8 <_fflush_r+0xc>
 800aaf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaf6:	f7ff fb83 	bl	800a200 <__retarget_lock_release_recursive>
 800aafa:	e7dd      	b.n	800aab8 <_fflush_r+0xc>

0800aafc <__swbuf_r>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	460e      	mov	r6, r1
 800ab00:	4614      	mov	r4, r2
 800ab02:	4605      	mov	r5, r0
 800ab04:	b118      	cbz	r0, 800ab0e <__swbuf_r+0x12>
 800ab06:	6a03      	ldr	r3, [r0, #32]
 800ab08:	b90b      	cbnz	r3, 800ab0e <__swbuf_r+0x12>
 800ab0a:	f7ff fa73 	bl	8009ff4 <__sinit>
 800ab0e:	69a3      	ldr	r3, [r4, #24]
 800ab10:	60a3      	str	r3, [r4, #8]
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	071a      	lsls	r2, r3, #28
 800ab16:	d501      	bpl.n	800ab1c <__swbuf_r+0x20>
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	b943      	cbnz	r3, 800ab2e <__swbuf_r+0x32>
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	4628      	mov	r0, r5
 800ab20:	f000 f82a 	bl	800ab78 <__swsetup_r>
 800ab24:	b118      	cbz	r0, 800ab2e <__swbuf_r+0x32>
 800ab26:	f04f 37ff 	mov.w	r7, #4294967295
 800ab2a:	4638      	mov	r0, r7
 800ab2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	6922      	ldr	r2, [r4, #16]
 800ab32:	b2f6      	uxtb	r6, r6
 800ab34:	1a98      	subs	r0, r3, r2
 800ab36:	6963      	ldr	r3, [r4, #20]
 800ab38:	4637      	mov	r7, r6
 800ab3a:	4283      	cmp	r3, r0
 800ab3c:	dc05      	bgt.n	800ab4a <__swbuf_r+0x4e>
 800ab3e:	4621      	mov	r1, r4
 800ab40:	4628      	mov	r0, r5
 800ab42:	f7ff ffb3 	bl	800aaac <_fflush_r>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d1ed      	bne.n	800ab26 <__swbuf_r+0x2a>
 800ab4a:	68a3      	ldr	r3, [r4, #8]
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	60a3      	str	r3, [r4, #8]
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	6022      	str	r2, [r4, #0]
 800ab56:	701e      	strb	r6, [r3, #0]
 800ab58:	6962      	ldr	r2, [r4, #20]
 800ab5a:	1c43      	adds	r3, r0, #1
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d004      	beq.n	800ab6a <__swbuf_r+0x6e>
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	07db      	lsls	r3, r3, #31
 800ab64:	d5e1      	bpl.n	800ab2a <__swbuf_r+0x2e>
 800ab66:	2e0a      	cmp	r6, #10
 800ab68:	d1df      	bne.n	800ab2a <__swbuf_r+0x2e>
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	f7ff ff9d 	bl	800aaac <_fflush_r>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d0d9      	beq.n	800ab2a <__swbuf_r+0x2e>
 800ab76:	e7d6      	b.n	800ab26 <__swbuf_r+0x2a>

0800ab78 <__swsetup_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4b29      	ldr	r3, [pc, #164]	@ (800ac20 <__swsetup_r+0xa8>)
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	460c      	mov	r4, r1
 800ab82:	b118      	cbz	r0, 800ab8c <__swsetup_r+0x14>
 800ab84:	6a03      	ldr	r3, [r0, #32]
 800ab86:	b90b      	cbnz	r3, 800ab8c <__swsetup_r+0x14>
 800ab88:	f7ff fa34 	bl	8009ff4 <__sinit>
 800ab8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab90:	0719      	lsls	r1, r3, #28
 800ab92:	d422      	bmi.n	800abda <__swsetup_r+0x62>
 800ab94:	06da      	lsls	r2, r3, #27
 800ab96:	d407      	bmi.n	800aba8 <__swsetup_r+0x30>
 800ab98:	2209      	movs	r2, #9
 800ab9a:	602a      	str	r2, [r5, #0]
 800ab9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aba0:	f04f 30ff 	mov.w	r0, #4294967295
 800aba4:	81a3      	strh	r3, [r4, #12]
 800aba6:	e033      	b.n	800ac10 <__swsetup_r+0x98>
 800aba8:	0758      	lsls	r0, r3, #29
 800abaa:	d512      	bpl.n	800abd2 <__swsetup_r+0x5a>
 800abac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abae:	b141      	cbz	r1, 800abc2 <__swsetup_r+0x4a>
 800abb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abb4:	4299      	cmp	r1, r3
 800abb6:	d002      	beq.n	800abbe <__swsetup_r+0x46>
 800abb8:	4628      	mov	r0, r5
 800abba:	f7ff fb31 	bl	800a220 <_free_r>
 800abbe:	2300      	movs	r3, #0
 800abc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800abc8:	81a3      	strh	r3, [r4, #12]
 800abca:	2300      	movs	r3, #0
 800abcc:	6063      	str	r3, [r4, #4]
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	f043 0308 	orr.w	r3, r3, #8
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	b94b      	cbnz	r3, 800abf2 <__swsetup_r+0x7a>
 800abde:	89a3      	ldrh	r3, [r4, #12]
 800abe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800abe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abe8:	d003      	beq.n	800abf2 <__swsetup_r+0x7a>
 800abea:	4621      	mov	r1, r4
 800abec:	4628      	mov	r0, r5
 800abee:	f000 f85c 	bl	800acaa <__smakebuf_r>
 800abf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf6:	f013 0201 	ands.w	r2, r3, #1
 800abfa:	d00a      	beq.n	800ac12 <__swsetup_r+0x9a>
 800abfc:	2200      	movs	r2, #0
 800abfe:	60a2      	str	r2, [r4, #8]
 800ac00:	6962      	ldr	r2, [r4, #20]
 800ac02:	4252      	negs	r2, r2
 800ac04:	61a2      	str	r2, [r4, #24]
 800ac06:	6922      	ldr	r2, [r4, #16]
 800ac08:	b942      	cbnz	r2, 800ac1c <__swsetup_r+0xa4>
 800ac0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac0e:	d1c5      	bne.n	800ab9c <__swsetup_r+0x24>
 800ac10:	bd38      	pop	{r3, r4, r5, pc}
 800ac12:	0799      	lsls	r1, r3, #30
 800ac14:	bf58      	it	pl
 800ac16:	6962      	ldrpl	r2, [r4, #20]
 800ac18:	60a2      	str	r2, [r4, #8]
 800ac1a:	e7f4      	b.n	800ac06 <__swsetup_r+0x8e>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e7f7      	b.n	800ac10 <__swsetup_r+0x98>
 800ac20:	20000018 	.word	0x20000018

0800ac24 <_sbrk_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	2300      	movs	r3, #0
 800ac28:	4d05      	ldr	r5, [pc, #20]	@ (800ac40 <_sbrk_r+0x1c>)
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	4608      	mov	r0, r1
 800ac2e:	602b      	str	r3, [r5, #0]
 800ac30:	f7f7 fbe0 	bl	80023f4 <_sbrk>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d102      	bne.n	800ac3e <_sbrk_r+0x1a>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	b103      	cbz	r3, 800ac3e <_sbrk_r+0x1a>
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	20003170 	.word	0x20003170

0800ac44 <memchr>:
 800ac44:	4603      	mov	r3, r0
 800ac46:	b510      	push	{r4, lr}
 800ac48:	b2c9      	uxtb	r1, r1
 800ac4a:	4402      	add	r2, r0
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	d101      	bne.n	800ac56 <memchr+0x12>
 800ac52:	2000      	movs	r0, #0
 800ac54:	e003      	b.n	800ac5e <memchr+0x1a>
 800ac56:	7804      	ldrb	r4, [r0, #0]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	428c      	cmp	r4, r1
 800ac5c:	d1f6      	bne.n	800ac4c <memchr+0x8>
 800ac5e:	bd10      	pop	{r4, pc}

0800ac60 <__swhatbuf_r>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	460c      	mov	r4, r1
 800ac64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac68:	4615      	mov	r5, r2
 800ac6a:	2900      	cmp	r1, #0
 800ac6c:	461e      	mov	r6, r3
 800ac6e:	b096      	sub	sp, #88	@ 0x58
 800ac70:	da0c      	bge.n	800ac8c <__swhatbuf_r+0x2c>
 800ac72:	89a3      	ldrh	r3, [r4, #12]
 800ac74:	2100      	movs	r1, #0
 800ac76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac7a:	bf14      	ite	ne
 800ac7c:	2340      	movne	r3, #64	@ 0x40
 800ac7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac82:	2000      	movs	r0, #0
 800ac84:	6031      	str	r1, [r6, #0]
 800ac86:	602b      	str	r3, [r5, #0]
 800ac88:	b016      	add	sp, #88	@ 0x58
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	466a      	mov	r2, sp
 800ac8e:	f000 f849 	bl	800ad24 <_fstat_r>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	dbed      	blt.n	800ac72 <__swhatbuf_r+0x12>
 800ac96:	9901      	ldr	r1, [sp, #4]
 800ac98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aca0:	4259      	negs	r1, r3
 800aca2:	4159      	adcs	r1, r3
 800aca4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aca8:	e7eb      	b.n	800ac82 <__swhatbuf_r+0x22>

0800acaa <__smakebuf_r>:
 800acaa:	898b      	ldrh	r3, [r1, #12]
 800acac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acae:	079d      	lsls	r5, r3, #30
 800acb0:	4606      	mov	r6, r0
 800acb2:	460c      	mov	r4, r1
 800acb4:	d507      	bpl.n	800acc6 <__smakebuf_r+0x1c>
 800acb6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800acba:	6023      	str	r3, [r4, #0]
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	2301      	movs	r3, #1
 800acc0:	6163      	str	r3, [r4, #20]
 800acc2:	b003      	add	sp, #12
 800acc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acc6:	466a      	mov	r2, sp
 800acc8:	ab01      	add	r3, sp, #4
 800acca:	f7ff ffc9 	bl	800ac60 <__swhatbuf_r>
 800acce:	9f00      	ldr	r7, [sp, #0]
 800acd0:	4605      	mov	r5, r0
 800acd2:	4639      	mov	r1, r7
 800acd4:	4630      	mov	r0, r6
 800acd6:	f7ff fb0d 	bl	800a2f4 <_malloc_r>
 800acda:	b948      	cbnz	r0, 800acf0 <__smakebuf_r+0x46>
 800acdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ace0:	059a      	lsls	r2, r3, #22
 800ace2:	d4ee      	bmi.n	800acc2 <__smakebuf_r+0x18>
 800ace4:	f023 0303 	bic.w	r3, r3, #3
 800ace8:	f043 0302 	orr.w	r3, r3, #2
 800acec:	81a3      	strh	r3, [r4, #12]
 800acee:	e7e2      	b.n	800acb6 <__smakebuf_r+0xc>
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acfa:	81a3      	strh	r3, [r4, #12]
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	6020      	str	r0, [r4, #0]
 800ad00:	b15b      	cbz	r3, 800ad1a <__smakebuf_r+0x70>
 800ad02:	4630      	mov	r0, r6
 800ad04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad08:	f000 f81e 	bl	800ad48 <_isatty_r>
 800ad0c:	b128      	cbz	r0, 800ad1a <__smakebuf_r+0x70>
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	f023 0303 	bic.w	r3, r3, #3
 800ad14:	f043 0301 	orr.w	r3, r3, #1
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	431d      	orrs	r5, r3
 800ad1e:	81a5      	strh	r5, [r4, #12]
 800ad20:	e7cf      	b.n	800acc2 <__smakebuf_r+0x18>
	...

0800ad24 <_fstat_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	2300      	movs	r3, #0
 800ad28:	4d06      	ldr	r5, [pc, #24]	@ (800ad44 <_fstat_r+0x20>)
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	4611      	mov	r1, r2
 800ad30:	602b      	str	r3, [r5, #0]
 800ad32:	f7f7 fb3a 	bl	80023aa <_fstat>
 800ad36:	1c43      	adds	r3, r0, #1
 800ad38:	d102      	bne.n	800ad40 <_fstat_r+0x1c>
 800ad3a:	682b      	ldr	r3, [r5, #0]
 800ad3c:	b103      	cbz	r3, 800ad40 <_fstat_r+0x1c>
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	bd38      	pop	{r3, r4, r5, pc}
 800ad42:	bf00      	nop
 800ad44:	20003170 	.word	0x20003170

0800ad48 <_isatty_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	4d05      	ldr	r5, [pc, #20]	@ (800ad64 <_isatty_r+0x1c>)
 800ad4e:	4604      	mov	r4, r0
 800ad50:	4608      	mov	r0, r1
 800ad52:	602b      	str	r3, [r5, #0]
 800ad54:	f7f7 fb38 	bl	80023c8 <_isatty>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d102      	bne.n	800ad62 <_isatty_r+0x1a>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	b103      	cbz	r3, 800ad62 <_isatty_r+0x1a>
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	20003170 	.word	0x20003170

0800ad68 <_init>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	bf00      	nop
 800ad6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6e:	bc08      	pop	{r3}
 800ad70:	469e      	mov	lr, r3
 800ad72:	4770      	bx	lr

0800ad74 <_fini>:
 800ad74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad76:	bf00      	nop
 800ad78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7a:	bc08      	pop	{r3}
 800ad7c:	469e      	mov	lr, r3
 800ad7e:	4770      	bx	lr
