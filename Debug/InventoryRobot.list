
InventoryRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08008a9c  08008a9c  00009a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009070  08009070  0000b068  2**0
                  CONTENTS
  4 .ARM          00000000  08009070  08009070  0000b068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009070  08009070  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009070  08009070  0000a070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009074  08009074  0000a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009078  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  20000068  080090e0  0000b068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  080090e0  0000b7c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f6c  00000000  00000000  0000b091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb8  00000000  00000000  00020ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00024fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101f  00000000  00000000  00026470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000615e  00000000  00000000  0002748f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fff4  00000000  00000000  0002d5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a95db  00000000  00000000  0004d5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6bbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005abc  00000000  00000000  000f6c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000fc6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08008a84 	.word	0x08008a84

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08008a84 	.word	0x08008a84

08000224 <Events_MainLogic>:
#include "MainLogic.h"



uint8_t Flag_Events_MainLogic = 0;
void    Events_MainLogic(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  switch (Flag_Events_MainLogic) {
 8000228:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <Events_MainLogic+0x34>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <Events_MainLogic+0x12>
 8000230:	2b01      	cmp	r3, #1
 8000232:	d00b      	beq.n	800024c <Events_MainLogic+0x28>
      // Events_WirelessModule();//无线串口事件
      // Events_BLDCMotor();
      Events_ServoMotor();
    } break;
  }
}
 8000234:	e00d      	b.n	8000252 <Events_MainLogic+0x2e>
      HAL_TIM_Base_Start_IT(&htim1);
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <Events_MainLogic+0x38>)
 8000238:	f004 fe2c 	bl	8004e94 <HAL_TIM_Base_Start_IT>
      HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	4808      	ldr	r0, [pc, #32]	@ (8000260 <Events_MainLogic+0x3c>)
 8000240:	f004 ff3e 	bl	80050c0 <HAL_TIM_IC_Start_IT>
      Flag_Events_MainLogic = 1;
 8000244:	4b04      	ldr	r3, [pc, #16]	@ (8000258 <Events_MainLogic+0x34>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
    } break;
 800024a:	e002      	b.n	8000252 <Events_MainLogic+0x2e>
      Events_ServoMotor();
 800024c:	f000 f83e 	bl	80002cc <Events_ServoMotor>
    } break;
 8000250:	bf00      	nop
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000084 	.word	0x20000084
 800025c:	20000278 	.word	0x20000278
 8000260:	20000308 	.word	0x20000308

08000264 <motor_uart_init>:
static Event_t MotorUart;
static uint8_t motor_ack[2];

static void moteruart_receive(void);

void motor_uart_init(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  MotorUart.type = kPackIdle;
 8000268:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <motor_uart_init+0x1c>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
  MotorUart.func = moteruart_receive;
 800026e:	4b04      	ldr	r3, [pc, #16]	@ (8000280 <motor_uart_init+0x1c>)
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <motor_uart_init+0x20>)
 8000272:	605a      	str	r2, [r3, #4]
  reg_event(&MotorUart);
 8000274:	4802      	ldr	r0, [pc, #8]	@ (8000280 <motor_uart_init+0x1c>)
 8000276:	f007 fbe7 	bl	8007a48 <reg_event>
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	200001d4 	.word	0x200001d4
 8000284:	08001869 	.word	0x08001869

08000288 <GetMoterAck>:

uint8_t *GetMoterAck(void) { return motor_ack; }
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
 800028c:	4b02      	ldr	r3, [pc, #8]	@ (8000298 <GetMoterAck+0x10>)
 800028e:	4618      	mov	r0, r3
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	200001dc 	.word	0x200001dc

0800029c <GetMoterOnPos>:
int8_t   GetMoterOnPos(void) { return ServoMotor.MotorPosition; };
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
 80002a0:	4b03      	ldr	r3, [pc, #12]	@ (80002b0 <GetMoterOnPos+0x14>)
 80002a2:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 80002a6:	4618      	mov	r0, r3
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000088 	.word	0x20000088

080002b4 <GetMoterFlag>:
uint8_t  GetMoterFlag(void) { return ServoMotor.Flag_Event[2]; }
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	4b03      	ldr	r3, [pc, #12]	@ (80002c8 <GetMoterFlag+0x14>)
 80002ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80002be:	4618      	mov	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000088 	.word	0x20000088

080002cc <Events_ServoMotor>:
void test(uint8_t *buf) {
  for (uint8_t i = 0; i < 4; i++) {
    buf[i + 1] = ServoMotor.Flag_Event[i];
  }
}
void Events_ServoMotor(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  UartDriver_ServoMotor();
 80002d0:	f001 fc32 	bl	8001b38 <UartDriver_ServoMotor>
  switch (ServoMotor.Flag_Event[0]) {
 80002d4:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <Events_ServoMotor+0x28>)
 80002d6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d002      	beq.n	80002e4 <Events_ServoMotor+0x18>
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d003      	beq.n	80002ea <Events_ServoMotor+0x1e>
    } break;
    case 1: {
      Event_Movement_ServoMotor();
    } break;
  }
}
 80002e2:	e005      	b.n	80002f0 <Events_ServoMotor+0x24>
      Event_Init_ServoMotor();
 80002e4:	f000 f808 	bl	80002f8 <Event_Init_ServoMotor>
    } break;
 80002e8:	e002      	b.n	80002f0 <Events_ServoMotor+0x24>
      Event_Movement_ServoMotor();
 80002ea:	f000 fd15 	bl	8000d18 <Event_Movement_ServoMotor>
    } break;
 80002ee:	bf00      	nop
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000088 	.word	0x20000088

080002f8 <Event_Init_ServoMotor>:

void Event_Init_ServoMotor(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  // LOGI("STATE :1 %d", ServoMotor.Flag_Event[1]);
  switch (ServoMotor.Flag_Event[1]) {
 80002fc:	4b6e      	ldr	r3, [pc, #440]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 80002fe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000302:	2b1a      	cmp	r3, #26
 8000304:	f200 80d5 	bhi.w	80004b2 <Event_Init_ServoMotor+0x1ba>
 8000308:	a201      	add	r2, pc, #4	@ (adr r2, 8000310 <Event_Init_ServoMotor+0x18>)
 800030a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030e:	bf00      	nop
 8000310:	0800037d 	.word	0x0800037d
 8000314:	080004b3 	.word	0x080004b3
 8000318:	080003a1 	.word	0x080003a1
 800031c:	080004b3 	.word	0x080004b3
 8000320:	080003b7 	.word	0x080003b7
 8000324:	080004b3 	.word	0x080004b3
 8000328:	080003cd 	.word	0x080003cd
 800032c:	080004b3 	.word	0x080004b3
 8000330:	080003e3 	.word	0x080003e3
 8000334:	080004b3 	.word	0x080004b3
 8000338:	080003f9 	.word	0x080003f9
 800033c:	080004b3 	.word	0x080004b3
 8000340:	0800040f 	.word	0x0800040f
 8000344:	080004b3 	.word	0x080004b3
 8000348:	08000425 	.word	0x08000425
 800034c:	080004b3 	.word	0x080004b3
 8000350:	0800043b 	.word	0x0800043b
 8000354:	080004b3 	.word	0x080004b3
 8000358:	08000451 	.word	0x08000451
 800035c:	080004b3 	.word	0x080004b3
 8000360:	08000467 	.word	0x08000467
 8000364:	080004b3 	.word	0x080004b3
 8000368:	0800047d 	.word	0x0800047d
 800036c:	080004b3 	.word	0x080004b3
 8000370:	08000493 	.word	0x08000493
 8000374:	080004b3 	.word	0x080004b3
 8000378:	080004a9 	.word	0x080004a9
    case 0: {
      SetStatus_Power_ServoMotor(PowerON_ServoMotor);  // 打开伺服驱动器的电源
 800037c:	2000      	movs	r0, #0
 800037e:	f001 f9ff 	bl	8001780 <SetStatus_Power_ServoMotor>
      UartReceiveIT_ServoMotor();                      // 打开伺服驱动器的串口接收
 8000382:	f001 fa15 	bl	80017b0 <UartReceiveIT_ServoMotor>
      ServoMotor.address       = 0x01;                 // 伺服电机地址设置
 8000386:	4b4c      	ldr	r3, [pc, #304]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 8000388:	2201      	movs	r2, #1
 800038a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      ServoMotor.MotorPosition = ON_LEFT;
 800038e:	4b4a      	ldr	r3, [pc, #296]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 8000390:	22ff      	movs	r2, #255	@ 0xff
 8000392:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      ServoMotor.Flag_Event[1] = 1;  // 定时器定时变2，因为伺服驱动器启动时间大约5s
 8000396:	4b48      	ldr	r3, [pc, #288]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 8000398:	2201      	movs	r2, #1
 800039a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800039e:	e088      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 2: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003a0:	4846      	ldr	r0, [pc, #280]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 80003a2:	f000 fe81 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(0);  // 串口发送：检测状态监控寄存器1-5设置指令,发送是Read_Func，10words
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fee6 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 3;            // 等待串口返回，返回正确赋值14，错误赋值4，串口连上则赋值IsConnected = 1，超时5s：定时器赋值2重新发送
 80003ac:	4b42      	ldr	r3, [pc, #264]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 80003ae:	2203      	movs	r2, #3
 80003b0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003b4:	e07d      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 4: {  // 状态监控寄存器1-5配置错误，发送状态监控寄存器1配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003b6:	4841      	ldr	r0, [pc, #260]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 80003b8:	f000 fe76 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(1);  // 设置状态监控寄存器1，发送是Write_Once_Func
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 fedb 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 5;            // 等待串口返回，返回正确赋值6，错误或者超时2s，赋值4
 80003c2:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 80003c4:	2205      	movs	r2, #5
 80003c6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003ca:	e072      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 6: {  // 状态监控寄存器2配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003cc:	483b      	ldr	r0, [pc, #236]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 80003ce:	f000 fe6b 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(2);  // 设置状态监控寄存器2，发送是Write_Once_Func
 80003d2:	2002      	movs	r0, #2
 80003d4:	f000 fed0 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 7;            // 等待串口返回，返回正确赋值8，错误或者超时2s，赋值6
 80003d8:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 80003da:	2207      	movs	r2, #7
 80003dc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003e0:	e067      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 8: {  // 状态监控寄存器3配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003e2:	4836      	ldr	r0, [pc, #216]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 80003e4:	f000 fe60 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(3);  // 设置状态监控寄存器3，发送是Write_Once_Func
 80003e8:	2003      	movs	r0, #3
 80003ea:	f000 fec5 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 9;            // 等待串口返回，返回正确赋值10，错误或者超时2s，赋值8
 80003ee:	4b32      	ldr	r3, [pc, #200]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 80003f0:	2209      	movs	r2, #9
 80003f2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003f6:	e05c      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 10: {  // 状态监控寄存器4配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003f8:	4830      	ldr	r0, [pc, #192]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 80003fa:	f000 fe55 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(4);  // 设置状态监控寄存器4，发送是Write_Once_Func
 80003fe:	2004      	movs	r0, #4
 8000400:	f000 feba 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 11;           // 等待串口返回，返回正确赋值12，错误或者超时2s，赋值10
 8000404:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 8000406:	220b      	movs	r2, #11
 8000408:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800040c:	e051      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 12: {  // 状态监控寄存器5配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800040e:	482b      	ldr	r0, [pc, #172]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 8000410:	f000 fe4a 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(5);  // 设置状态监控寄存器5，发送是Write_Once_Func
 8000414:	2005      	movs	r0, #5
 8000416:	f000 feaf 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 13;           // 等待串口返回，返回正确赋值2,重读寄存器的状态，错误或者超时2s，赋值12
 800041a:	4b27      	ldr	r3, [pc, #156]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 800041c:	220d      	movs	r2, #13
 800041e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000422:	e046      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 14: {  // 状态监控寄存器都是正确的
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000424:	4825      	ldr	r0, [pc, #148]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 8000426:	f000 fe3f 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(6);  // 查询电子齿轮比分子分母的设置,发送是Read_Func，4words
 800042a:	2006      	movs	r0, #6
 800042c:	f000 fea4 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 15;           // 等待串口返回，返回正确赋值18,重读寄存器的设置，错误赋值16，超时2s，赋值14
 8000430:	4b21      	ldr	r3, [pc, #132]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 8000432:	220f      	movs	r2, #15
 8000434:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000438:	e03b      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 16: {
      //
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800043a:	4820      	ldr	r0, [pc, #128]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 800043c:	f000 fe34 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(7);  // 电子齿轮比分子分母的设置，发送是Write_Multi_Func，4words
 8000440:	2007      	movs	r0, #7
 8000442:	f000 fe99 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 17;           // 等待串口返回，返回正确赋值14,重读寄存器的设置，错误或者超时2s，赋值16
 8000446:	4b1c      	ldr	r3, [pc, #112]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 8000448:	2211      	movs	r2, #17
 800044a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800044e:	e030      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 18: {  // 读取脉冲清除模式，需要设置为0x11;
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000450:	481a      	ldr	r0, [pc, #104]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 8000452:	f000 fe29 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(8);  // 读取脉冲清除模式，需要设置为0x11，发送是Read_Func，1words
 8000456:	2008      	movs	r0, #8
 8000458:	f000 fe8e 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 19;           // 等待串口返回，返回正确赋值22,重读寄存器的设置，错误赋值20，超时2s，赋值18
 800045c:	4b16      	ldr	r3, [pc, #88]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 800045e:	2213      	movs	r2, #19
 8000460:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000464:	e025      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 20: {  // 脉冲清除模式，需要设置为0x11;
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000466:	4815      	ldr	r0, [pc, #84]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 8000468:	f000 fe1e 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(9);  // 脉冲清除模式，需要设置为0x11，发送是Write_Once_Func，1words
 800046c:	2009      	movs	r0, #9
 800046e:	f000 fe83 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 21;           // 等待串口返回，返回正确赋值18,重读寄存器的设置，错误超时2s，赋值20
 8000472:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 8000474:	2215      	movs	r2, #21
 8000476:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800047a:	e01a      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 22: {  //
      // 脉冲模式设置正确，读取EEPROM是否为不保存模式
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800047c:	480f      	ldr	r0, [pc, #60]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 800047e:	f000 fe13 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(10);  // 读取EEPROM是否为不保存模式，发送是Read_Func，1words
 8000482:	200a      	movs	r0, #10
 8000484:	f000 fe78 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 23;            // 等待串口返回，返回正确赋值26,重读寄存器的设置，错误赋值24，超时2s，赋值22
 8000488:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 800048a:	2217      	movs	r2, #23
 800048c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000490:	e00f      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 24: {
      //
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000492:	480a      	ldr	r0, [pc, #40]	@ (80004bc <Event_Init_ServoMotor+0x1c4>)
 8000494:	f000 fe08 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(11);  // 设置EEPROM为不保存模式，发送是Write_Once_Func，1words
 8000498:	200b      	movs	r0, #11
 800049a:	f000 fe6d 	bl	8001178 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 25;            // 等待串口返回，返回正确赋值22,重读寄存器的设置，错误超时2s，赋值24
 800049e:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 80004a0:	2219      	movs	r2, #25
 80004a2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80004a6:	e004      	b.n	80004b2 <Event_Init_ServoMotor+0x1ba>
    case 26: {  // 设置了EEPROM不保存模式
      ServoMotor.Flag_Event[0] = 1;
 80004a8:	4b03      	ldr	r3, [pc, #12]	@ (80004b8 <Event_Init_ServoMotor+0x1c0>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    } break;
 80004b0:	bf00      	nop
  }
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000088 	.word	0x20000088
 80004bc:	200000ba 	.word	0x200000ba

080004c0 <UartAction_ServoMotor>:
void UartAction_ServoMotor(uint8_t *buf, uint8_t len) {
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b0c5      	sub	sp, #276	@ 0x114
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80004ce:	6018      	str	r0, [r3, #0]
 80004d0:	460a      	mov	r2, r1
 80004d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004d6:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80004da:	701a      	strb	r2, [r3, #0]
  uint8_t uartbuf[255] = {0};
 80004dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	3304      	adds	r3, #4
 80004ea:	22fb      	movs	r2, #251	@ 0xfb
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f007 fc97 	bl	8007e22 <memset>
  uint8_t lenbuf       = len / 2;
 80004f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004f8:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	085b      	lsrs	r3, r3, #1
 8000500:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
  for (uint8_t i = 0; i < lenbuf; i++) {
 8000504:	2300      	movs	r3, #0
 8000506:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800050a:	e02f      	b.n	800056c <UartAction_ServoMotor+0xac>
    uartbuf[i] = Get_Regroup_ASCII(buf[2 * i], 0) | Get_Regroup_ASCII(buf[2 * i + 1], 1);
 800050c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	461a      	mov	r2, r3
 8000514:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000518:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4413      	add	r3, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f001 f971 	bl	800180c <Get_Regroup_ASCII>
 800052a:	4603      	mov	r3, r0
 800052c:	461c      	mov	r4, r3
 800052e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	3301      	adds	r3, #1
 8000536:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800053a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800053e:	6812      	ldr	r2, [r2, #0]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2101      	movs	r1, #1
 8000546:	4618      	mov	r0, r3
 8000548:	f001 f960 	bl	800180c <Get_Regroup_ASCII>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000554:	4322      	orrs	r2, r4
 8000556:	b2d1      	uxtb	r1, r2
 8000558:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800055c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000560:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < lenbuf; i++) {
 8000562:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000566:	3301      	adds	r3, #1
 8000568:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800056c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8000570:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8000574:	429a      	cmp	r2, r3
 8000576:	d3c9      	bcc.n	800050c <UartAction_ServoMotor+0x4c>
  }

  if (uartbuf[0] != ServoMotor.address && uartbuf[1] != (uint8_t)(ServoMotor.UartCurrentCmd[0] & 0xFF)) {
 8000578:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800057c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	4bbb      	ldr	r3, [pc, #748]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000584:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000588:	429a      	cmp	r2, r3
 800058a:	d00a      	beq.n	80005a2 <UartAction_ServoMotor+0xe2>
 800058c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000594:	785a      	ldrb	r2, [r3, #1]
 8000596:	4bb6      	ldr	r3, [pc, #728]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000598:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800059a:	b2db      	uxtb	r3, r3
 800059c:	429a      	cmp	r2, r3
 800059e:	f040 83ad 	bne.w	8000cfc <UartAction_ServoMotor+0x83c>
    return;
  }
  UartWrite_WirelessModule(uartbuf, lenbuf);
 80005a2:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fb24 	bl	8001bfc <UartWrite_WirelessModule>
  switch (uartbuf[1]) {
 80005b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005bc:	785b      	ldrb	r3, [r3, #1]
 80005be:	2b10      	cmp	r3, #16
 80005c0:	f000 8382 	beq.w	8000cc8 <UartAction_ServoMotor+0x808>
 80005c4:	2b10      	cmp	r3, #16
 80005c6:	f300 83a0 	bgt.w	8000d0a <UartAction_ServoMotor+0x84a>
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d003      	beq.n	80005d6 <UartAction_ServoMotor+0x116>
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	f000 80e4 	beq.w	800079c <UartAction_ServoMotor+0x2dc>
 80005d4:	e399      	b.n	8000d0a <UartAction_ServoMotor+0x84a>
    case Cmd_Read_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 寄存器
 80005d6:	4ba6      	ldr	r3, [pc, #664]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 80005d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80005da:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80005de:	f000 80bd 	beq.w	800075c <UartAction_ServoMotor+0x29c>
 80005e2:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80005e6:	f300 838b 	bgt.w	8000d00 <UartAction_ServoMotor+0x840>
 80005ea:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80005ee:	f000 809f 	beq.w	8000730 <UartAction_ServoMotor+0x270>
 80005f2:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80005f6:	f300 8383 	bgt.w	8000d00 <UartAction_ServoMotor+0x840>
 80005fa:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 80005fe:	d067      	beq.n	80006d0 <UartAction_ServoMotor+0x210>
 8000600:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 8000604:	f300 837c 	bgt.w	8000d00 <UartAction_ServoMotor+0x840>
 8000608:	2b12      	cmp	r3, #18
 800060a:	f000 80bd 	beq.w	8000788 <UartAction_ServoMotor+0x2c8>
 800060e:	2b22      	cmp	r3, #34	@ 0x22
 8000610:	f040 8376 	bne.w	8000d00 <UartAction_ServoMotor+0x840>
        case MonitorRegister_1_Data: {         // 含电机脉冲、扭矩、速度等
        } break;
        case MonitorRegister_1_Set: {  // 状态寄存器1设置地址，需要设置该位读取“回授位置（PUU）自定义单位，00h”
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000614:	4b96      	ldr	r3, [pc, #600]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000616:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000618:	2b01      	cmp	r3, #1
 800061a:	d057      	beq.n	80006cc <UartAction_ServoMotor+0x20c>
 800061c:	2b0a      	cmp	r3, #10
 800061e:	f040 80b5 	bne.w	800078c <UartAction_ServoMotor+0x2cc>
            case 1: {  // 单字节查询
            } break;
            case 10: {  // 查询状态监控寄存器1-5
              ServoMotor.IsConnected         = 1;
 8000622:	4b93      	ldr	r3, [pc, #588]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000624:	2201      	movs	r2, #1
 8000626:	705a      	strb	r2, [r3, #1]
              uint8_t MonitorRegisterSet_buf = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              // 检查uartbuf[4]的值，如果不等于PulseMonitor_0022H的低8位，则设置MonitorRegisterSet_buf的第0位（0x01）
              if (uartbuf[4] != (PulseMonitor_0022H & 0xFF)) {
 800062e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <UartAction_ServoMotor+0x188>
                MonitorRegisterSet_buf |= 0x01;
 800063c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              }
              // 检查uartbuf[8]的值，如果不等于TorqueMonitor_0024H的低8位，则设置MonitorRegisterSet_buf的第1位（0x02）
              if (uartbuf[8] != (TorqueMonitor_0024H & 0xFF)) {
 8000648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800064c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	2b0b      	cmp	r3, #11
 8000654:	d005      	beq.n	8000662 <UartAction_ServoMotor+0x1a2>
                MonitorRegisterSet_buf |= 0x02;
 8000656:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800065a:	f043 0302 	orr.w	r3, r3, #2
 800065e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              }
              // 检查uartbuf[12]的值，如果不等于SpeedMonitor_0026H的低8位，则设置MonitorRegisterSet_buf的第2位（0x04）
              if (uartbuf[12] != (SpeedMonitor_0026H & 0xFF)) {
 8000662:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800066a:	7b1b      	ldrb	r3, [r3, #12]
 800066c:	2b07      	cmp	r3, #7
 800066e:	d005      	beq.n	800067c <UartAction_ServoMotor+0x1bc>
                MonitorRegisterSet_buf |= 0x04;
 8000670:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              }
              // 检查uartbuf[16]的值，如果不等于Monitor_0028H的低8位，则设置MonitorRegisterSet_buf的第3位（0x08）
              if (uartbuf[16] != (Monitor_0028H & 0xFF)) {
 800067c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000684:	7c1b      	ldrb	r3, [r3, #16]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d005      	beq.n	8000696 <UartAction_ServoMotor+0x1d6>
                MonitorRegisterSet_buf |= 0x08;
 800068a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              }
              // 检查uartbuf[20]的值，如果不等于Monitor_002AH的低8位，则设置MonitorRegisterSet_buf的第4位（0x10）
              if (uartbuf[20] != (Monitor_002AH & 0xFF)) {
 8000696:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800069a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800069e:	7d1b      	ldrb	r3, [r3, #20]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d005      	beq.n	80006b0 <UartAction_ServoMotor+0x1f0>
                MonitorRegisterSet_buf |= 0x10;
 80006a4:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              }
              if (MonitorRegisterSet_buf) {    // 有配置错误
 80006b0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <UartAction_ServoMotor+0x202>
                ServoMotor.Flag_Event[1] = 4;  // 重新设置状态监控寄存器1
 80006b8:	4b6d      	ldr	r3, [pc, #436]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 80006ba:	2204      	movs	r2, #4
 80006bc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
              } else {                         // 配置正确
                ServoMotor.Flag_Event[1] = 14;
              }
            } break;
 80006c0:	e005      	b.n	80006ce <UartAction_ServoMotor+0x20e>
                ServoMotor.Flag_Event[1] = 14;
 80006c2:	4b6b      	ldr	r3, [pc, #428]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 80006c4:	220e      	movs	r2, #14
 80006c6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 80006ca:	e000      	b.n	80006ce <UartAction_ServoMotor+0x20e>
            } break;
 80006cc:	bf00      	nop
          }
        } break;
 80006ce:	e05d      	b.n	800078c <UartAction_ServoMotor+0x2cc>
        case GearRatioRegister_Numerator: {  // 电子齿轮比分子分母寄存器，需要设置分子160，分母94
          switch (ServoMotor.UartCurrentCmd[2]) {
 80006d0:	4b67      	ldr	r3, [pc, #412]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 80006d2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d15b      	bne.n	8000790 <UartAction_ServoMotor+0x2d0>
            case 4: {
              uint8_t GearRatioRegisterSet_buf = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              // 检查uartbuf[4]的值，如果不等于PulseMonitor_0022H的低8位，则设置MonitorRegisterSet_buf的第0位（0x01）
              if (uartbuf[4] != (GearRatio_Numerator_0158H & 0xFF)) {
 80006de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80006ea:	d005      	beq.n	80006f8 <UartAction_ServoMotor+0x238>
                GearRatioRegisterSet_buf |= 0x01;
 80006ec:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              }
              // 检查uartbuf[8]的值，如果不等于TorqueMonitor_0024H的低8位，则设置MonitorRegisterSet_buf的第1位（0x02）
              if (uartbuf[8] != (GearRatio_Denominator_015AH & 0xFF)) {
 80006f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000700:	7a1b      	ldrb	r3, [r3, #8]
 8000702:	2b5e      	cmp	r3, #94	@ 0x5e
 8000704:	d005      	beq.n	8000712 <UartAction_ServoMotor+0x252>
                GearRatioRegisterSet_buf |= 0x02;
 8000706:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              }
              if (GearRatioRegisterSet_buf) {   // 有配置错误
 8000712:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <UartAction_ServoMotor+0x264>
                ServoMotor.Flag_Event[1] = 16;  // 重新设置电子齿轮比分子分母寄存器
 800071a:	4b55      	ldr	r3, [pc, #340]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 800071c:	2210      	movs	r2, #16
 800071e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
              } else {                          // 配置正确
                ServoMotor.Flag_Event[1] = 18;
              }
            } break;
 8000722:	e003      	b.n	800072c <UartAction_ServoMotor+0x26c>
                ServoMotor.Flag_Event[1] = 18;
 8000724:	4b52      	ldr	r3, [pc, #328]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000726:	2212      	movs	r2, #18
 8000728:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800072c:	bf00      	nop
          }
        } break;
 800072e:	e02f      	b.n	8000790 <UartAction_ServoMotor+0x2d0>
        case AuxrFuncRegister_P2_30: {  // 0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000730:	4b4f      	ldr	r3, [pc, #316]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000732:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000734:	2b01      	cmp	r3, #1
 8000736:	d12d      	bne.n	8000794 <UartAction_ServoMotor+0x2d4>
            case 1: {
              if (uartbuf[4] == (EEPROM_Disable_P2_30 & 0xFF)) {  // 已经设置了EEPROM不保存
 8000738:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800073c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	2b05      	cmp	r3, #5
 8000744:	d104      	bne.n	8000750 <UartAction_ServoMotor+0x290>
                ServoMotor.Flag_Event[1] = 26;
 8000746:	4b4a      	ldr	r3, [pc, #296]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000748:	221a      	movs	r2, #26
 800074a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
              } else {
                ServoMotor.Flag_Event[1] = 24;
              }
            } break;
 800074e:	e003      	b.n	8000758 <UartAction_ServoMotor+0x298>
                ServoMotor.Flag_Event[1] = 24;
 8000750:	4b47      	ldr	r3, [pc, #284]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000752:	2218      	movs	r2, #24
 8000754:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000758:	bf00      	nop
          }
        } break;
 800075a:	e01b      	b.n	8000794 <UartAction_ServoMotor+0x2d4>
        case PulseReset_Register_P2_50: {  // 脉冲清除模式，需要设置为0x11;
          switch (ServoMotor.UartCurrentCmd[2]) {
 800075c:	4b44      	ldr	r3, [pc, #272]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 800075e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000760:	2b01      	cmp	r3, #1
 8000762:	d119      	bne.n	8000798 <UartAction_ServoMotor+0x2d8>
            case 1: {
              if (uartbuf[4] == (PulseReset_Data_P2_50 & 0xFF)) {  // 已经设置脉冲清除模式，为0x11;
 8000764:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	2b11      	cmp	r3, #17
 8000770:	d104      	bne.n	800077c <UartAction_ServoMotor+0x2bc>
                ServoMotor.Flag_Event[1] = 22;
 8000772:	4b3f      	ldr	r3, [pc, #252]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000774:	2216      	movs	r2, #22
 8000776:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
              } else {
                ServoMotor.Flag_Event[1] = 20;
              }
            } break;
 800077a:	e003      	b.n	8000784 <UartAction_ServoMotor+0x2c4>
                ServoMotor.Flag_Event[1] = 20;
 800077c:	4b3c      	ldr	r3, [pc, #240]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 800077e:	2214      	movs	r2, #20
 8000780:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000784:	bf00      	nop
          }
        } break;
 8000786:	e007      	b.n	8000798 <UartAction_ServoMotor+0x2d8>
        } break;
 8000788:	bf00      	nop
 800078a:	e2b9      	b.n	8000d00 <UartAction_ServoMotor+0x840>
        } break;
 800078c:	bf00      	nop
 800078e:	e2b7      	b.n	8000d00 <UartAction_ServoMotor+0x840>
        } break;
 8000790:	bf00      	nop
 8000792:	e2b5      	b.n	8000d00 <UartAction_ServoMotor+0x840>
        } break;
 8000794:	bf00      	nop
 8000796:	e2b3      	b.n	8000d00 <UartAction_ServoMotor+0x840>
        } break;
 8000798:	bf00      	nop
      }
    } break;
 800079a:	e2b1      	b.n	8000d00 <UartAction_ServoMotor+0x840>
    case Cmd_Write_Once_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 读取寄存器
 800079c:	4b34      	ldr	r3, [pc, #208]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 800079e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80007a0:	f240 420a 	movw	r2, #1034	@ 0x40a
 80007a4:	4293      	cmp	r3, r2
 80007a6:	f000 80db 	beq.w	8000960 <UartAction_ServoMotor+0x4a0>
 80007aa:	f240 420a 	movw	r2, #1034	@ 0x40a
 80007ae:	4293      	cmp	r3, r2
 80007b0:	f300 82a8 	bgt.w	8000d04 <UartAction_ServoMotor+0x844>
 80007b4:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80007b8:	f000 80cd 	beq.w	8000956 <UartAction_ServoMotor+0x496>
 80007bc:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80007c0:	f300 82a0 	bgt.w	8000d04 <UartAction_ServoMotor+0x844>
 80007c4:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80007c8:	f000 80c0 	beq.w	800094c <UartAction_ServoMotor+0x48c>
 80007cc:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80007d0:	f300 8298 	bgt.w	8000d04 <UartAction_ServoMotor+0x844>
 80007d4:	f240 2216 	movw	r2, #534	@ 0x216
 80007d8:	4293      	cmp	r3, r2
 80007da:	f000 809a 	beq.w	8000912 <UartAction_ServoMotor+0x452>
 80007de:	f240 2216 	movw	r2, #534	@ 0x216
 80007e2:	4293      	cmp	r3, r2
 80007e4:	f300 828e 	bgt.w	8000d04 <UartAction_ServoMotor+0x844>
 80007e8:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 80007ec:	d05e      	beq.n	80008ac <UartAction_ServoMotor+0x3ec>
 80007ee:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 80007f2:	f300 8287 	bgt.w	8000d04 <UartAction_ServoMotor+0x844>
 80007f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80007f8:	dc1c      	bgt.n	8000834 <UartAction_ServoMotor+0x374>
 80007fa:	2b22      	cmp	r3, #34	@ 0x22
 80007fc:	f2c0 8282 	blt.w	8000d04 <UartAction_ServoMotor+0x844>
 8000800:	3b22      	subs	r3, #34	@ 0x22
 8000802:	2b08      	cmp	r3, #8
 8000804:	f200 827e 	bhi.w	8000d04 <UartAction_ServoMotor+0x844>
 8000808:	a201      	add	r2, pc, #4	@ (adr r2, 8000810 <UartAction_ServoMotor+0x350>)
 800080a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080e:	bf00      	nop
 8000810:	0800083d 	.word	0x0800083d
 8000814:	08000d05 	.word	0x08000d05
 8000818:	08000847 	.word	0x08000847
 800081c:	08000d05 	.word	0x08000d05
 8000820:	08000851 	.word	0x08000851
 8000824:	08000d05 	.word	0x08000d05
 8000828:	0800085b 	.word	0x0800085b
 800082c:	08000d05 	.word	0x08000d05
 8000830:	08000865 	.word	0x08000865
 8000834:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000838:	d01c      	beq.n	8000874 <UartAction_ServoMotor+0x3b4>
              }
            } break;
          }
        } break;
      }
    } break;
 800083a:	e263      	b.n	8000d04 <UartAction_ServoMotor+0x844>
          ServoMotor.Flag_Event[1] = 6;        // 设置状态监控寄存器2
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 800083e:	2206      	movs	r2, #6
 8000840:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000844:	e23f      	b.n	8000cc6 <UartAction_ServoMotor+0x806>
          ServoMotor.Flag_Event[1] = 8;  // 设置状态监控寄存器3
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000848:	2208      	movs	r2, #8
 800084a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800084e:	e23a      	b.n	8000cc6 <UartAction_ServoMotor+0x806>
          ServoMotor.Flag_Event[1] = 10;  // 设置状态监控寄存器4
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000852:	220a      	movs	r2, #10
 8000854:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000858:	e235      	b.n	8000cc6 <UartAction_ServoMotor+0x806>
          ServoMotor.Flag_Event[1] = 12;  // 设置状态监控寄存器5
 800085a:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 800085c:	220c      	movs	r2, #12
 800085e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000862:	e230      	b.n	8000cc6 <UartAction_ServoMotor+0x806>
          ServoMotor.Flag_Event[1] = 2;  // 重新检查状态监控寄存器1-5
 8000864:	4b02      	ldr	r3, [pc, #8]	@ (8000870 <UartAction_ServoMotor+0x3b0>)
 8000866:	2202      	movs	r2, #2
 8000868:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800086c:	e22b      	b.n	8000cc6 <UartAction_ServoMotor+0x806>
 800086e:	bf00      	nop
 8000870:	20000088 	.word	0x20000088
          switch (ServoMotor.Flag_Event[2]) {
 8000874:	4bbe      	ldr	r3, [pc, #760]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000876:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800087a:	2b17      	cmp	r3, #23
 800087c:	f040 821e 	bne.w	8000cbc <UartAction_ServoMotor+0x7fc>
              ServoMotor.Flag_Event[2] = Szmode_Data_P1_01 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 24 : 22;
 8000880:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000884:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000890:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000894:	7952      	ldrb	r2, [r2, #5]
 8000896:	4313      	orrs	r3, r2
 8000898:	2b04      	cmp	r3, #4
 800089a:	d101      	bne.n	80008a0 <UartAction_ServoMotor+0x3e0>
 800089c:	2218      	movs	r2, #24
 800089e:	e000      	b.n	80008a2 <UartAction_ServoMotor+0x3e2>
 80008a0:	2216      	movs	r2, #22
 80008a2:	4bb3      	ldr	r3, [pc, #716]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 80008a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 80008a8:	bf00      	nop
        } break;
 80008aa:	e207      	b.n	8000cbc <UartAction_ServoMotor+0x7fc>
          switch (ServoMotor.Flag_Event[2]) {
 80008ac:	4bb0      	ldr	r3, [pc, #704]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 80008ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80008b2:	2b05      	cmp	r3, #5
 80008b4:	d002      	beq.n	80008bc <UartAction_ServoMotor+0x3fc>
 80008b6:	2b19      	cmp	r3, #25
 80008b8:	d015      	beq.n	80008e6 <UartAction_ServoMotor+0x426>
        } break;
 80008ba:	e204      	b.n	8000cc6 <UartAction_ServoMotor+0x806>
              ServoMotor.Flag_Event[2] = DI1_Data_ServoON == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 6 : 4;
 80008bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008cc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80008d0:	7952      	ldrb	r2, [r2, #5]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d101      	bne.n	80008dc <UartAction_ServoMotor+0x41c>
 80008d8:	2206      	movs	r2, #6
 80008da:	e000      	b.n	80008de <UartAction_ServoMotor+0x41e>
 80008dc:	2204      	movs	r2, #4
 80008de:	4ba4      	ldr	r3, [pc, #656]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 80008e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 80008e4:	e014      	b.n	8000910 <UartAction_ServoMotor+0x450>
              ServoMotor.Flag_Event[2] = DI1_Data_ServoON == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 26 : 24;
 80008e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008f6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80008fa:	7952      	ldrb	r2, [r2, #5]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d101      	bne.n	8000906 <UartAction_ServoMotor+0x446>
 8000902:	221a      	movs	r2, #26
 8000904:	e000      	b.n	8000908 <UartAction_ServoMotor+0x448>
 8000906:	2218      	movs	r2, #24
 8000908:	4b99      	ldr	r3, [pc, #612]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 800090a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 800090e:	bf00      	nop
        } break;
 8000910:	e1d9      	b.n	8000cc6 <UartAction_ServoMotor+0x806>
          switch (ServoMotor.Flag_Event[2]) {
 8000912:	4b97      	ldr	r3, [pc, #604]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000918:	2b15      	cmp	r3, #21
 800091a:	f040 81d1 	bne.w	8000cc0 <UartAction_ServoMotor+0x800>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_End_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 22 : 20;
 800091e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000922:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800092e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000932:	7952      	ldrb	r2, [r2, #5]
 8000934:	4313      	orrs	r3, r2
 8000936:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800093a:	d101      	bne.n	8000940 <UartAction_ServoMotor+0x480>
 800093c:	2216      	movs	r2, #22
 800093e:	e000      	b.n	8000942 <UartAction_ServoMotor+0x482>
 8000940:	2214      	movs	r2, #20
 8000942:	4b8b      	ldr	r3, [pc, #556]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000948:	bf00      	nop
        } break;
 800094a:	e1b9      	b.n	8000cc0 <UartAction_ServoMotor+0x800>
          ServoMotor.Flag_Event[1] = 22;  // 重新读取EEPROM设置是否为不保存模式
 800094c:	4b88      	ldr	r3, [pc, #544]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 800094e:	2216      	movs	r2, #22
 8000950:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000954:	e1b7      	b.n	8000cc6 <UartAction_ServoMotor+0x806>
          ServoMotor.Flag_Event[1] = 18;  // 重新读取脉冲清除模式
 8000956:	4b86      	ldr	r3, [pc, #536]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000958:	2212      	movs	r2, #18
 800095a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800095e:	e1b2      	b.n	8000cc6 <UartAction_ServoMotor+0x806>
          switch (ServoMotor.Flag_Event[2]) {
 8000960:	4b83      	ldr	r3, [pc, #524]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000966:	3b03      	subs	r3, #3
 8000968:	2b1a      	cmp	r3, #26
 800096a:	f200 81ab 	bhi.w	8000cc4 <UartAction_ServoMotor+0x804>
 800096e:	a201      	add	r2, pc, #4	@ (adr r2, 8000974 <UartAction_ServoMotor+0x4b4>)
 8000970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000974:	080009e1 	.word	0x080009e1
 8000978:	08000cc5 	.word	0x08000cc5
 800097c:	08000cc5 	.word	0x08000cc5
 8000980:	08000cc5 	.word	0x08000cc5
 8000984:	08000a0b 	.word	0x08000a0b
 8000988:	08000cc5 	.word	0x08000cc5
 800098c:	08000a35 	.word	0x08000a35
 8000990:	08000cc5 	.word	0x08000cc5
 8000994:	08000aa9 	.word	0x08000aa9
 8000998:	08000cc5 	.word	0x08000cc5
 800099c:	08000ad3 	.word	0x08000ad3
 80009a0:	08000cc5 	.word	0x08000cc5
 80009a4:	08000b47 	.word	0x08000b47
 80009a8:	08000cc5 	.word	0x08000cc5
 80009ac:	08000b75 	.word	0x08000b75
 80009b0:	08000cc5 	.word	0x08000cc5
 80009b4:	08000b9f 	.word	0x08000b9f
 80009b8:	08000cc5 	.word	0x08000cc5
 80009bc:	08000cc5 	.word	0x08000cc5
 80009c0:	08000cc5 	.word	0x08000cc5
 80009c4:	08000cc5 	.word	0x08000cc5
 80009c8:	08000cc5 	.word	0x08000cc5
 80009cc:	08000cc5 	.word	0x08000cc5
 80009d0:	08000cc5 	.word	0x08000cc5
 80009d4:	08000c11 	.word	0x08000c11
 80009d8:	08000cc5 	.word	0x08000cc5
 80009dc:	08000c3b 	.word	0x08000c3b
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 4 : 2;
 80009e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009e8:	791b      	ldrb	r3, [r3, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d108      	bne.n	8000a00 <UartAction_ServoMotor+0x540>
 80009ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009f6:	795b      	ldrb	r3, [r3, #5]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <UartAction_ServoMotor+0x540>
 80009fc:	2204      	movs	r2, #4
 80009fe:	e000      	b.n	8000a02 <UartAction_ServoMotor+0x542>
 8000a00:	2202      	movs	r2, #2
 8000a02:	4b5b      	ldr	r3, [pc, #364]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a08:	e157      	b.n	8000cba <UartAction_ServoMotor+0x7fa>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x14) ? 8 : 6;
 8000a0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a12:	791b      	ldrb	r3, [r3, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d108      	bne.n	8000a2a <UartAction_ServoMotor+0x56a>
 8000a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a20:	795b      	ldrb	r3, [r3, #5]
 8000a22:	2b14      	cmp	r3, #20
 8000a24:	d101      	bne.n	8000a2a <UartAction_ServoMotor+0x56a>
 8000a26:	2208      	movs	r2, #8
 8000a28:	e000      	b.n	8000a2c <UartAction_ServoMotor+0x56c>
 8000a2a:	2206      	movs	r2, #6
 8000a2c:	4b50      	ldr	r3, [pc, #320]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a32:	e142      	b.n	8000cba <UartAction_ServoMotor+0x7fa>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CCW往左动JOGmode_Data_CCW
 8000a34:	4b4e      	ldr	r3, [pc, #312]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000a36:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d116      	bne.n	8000a6c <UartAction_ServoMotor+0x5ac>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 10 : 8;
 8000a3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a46:	791b      	ldrb	r3, [r3, #4]
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a4e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a52:	7952      	ldrb	r2, [r2, #5]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <UartAction_ServoMotor+0x5a2>
 8000a5e:	220a      	movs	r2, #10
 8000a60:	e000      	b.n	8000a64 <UartAction_ServoMotor+0x5a4>
 8000a62:	2208      	movs	r2, #8
 8000a64:	4b42      	ldr	r3, [pc, #264]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a6a:	e11f      	b.n	8000cac <UartAction_ServoMotor+0x7ec>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CW往右动
 8000a6c:	4b40      	ldr	r3, [pc, #256]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000a6e:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a76:	f040 8119 	bne.w	8000cac <UartAction_ServoMotor+0x7ec>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 10 : 8;
 8000a7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a8a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a8e:	7952      	ldrb	r2, [r2, #5]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <UartAction_ServoMotor+0x5de>
 8000a9a:	220a      	movs	r2, #10
 8000a9c:	e000      	b.n	8000aa0 <UartAction_ServoMotor+0x5e0>
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000aa6:	e101      	b.n	8000cac <UartAction_ServoMotor+0x7ec>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 12 : 10;
 8000aa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ab0:	791b      	ldrb	r3, [r3, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d108      	bne.n	8000ac8 <UartAction_ServoMotor+0x608>
 8000ab6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d101      	bne.n	8000ac8 <UartAction_ServoMotor+0x608>
 8000ac4:	220c      	movs	r2, #12
 8000ac6:	e000      	b.n	8000aca <UartAction_ServoMotor+0x60a>
 8000ac8:	220a      	movs	r2, #10
 8000aca:	4b29      	ldr	r3, [pc, #164]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000ad0:	e0f3      	b.n	8000cba <UartAction_ServoMotor+0x7fa>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CW往右动
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000ad4:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d116      	bne.n	8000b0a <UartAction_ServoMotor+0x64a>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 14 : 12;
 8000adc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000aec:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000af0:	7952      	ldrb	r2, [r2, #5]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d101      	bne.n	8000b00 <UartAction_ServoMotor+0x640>
 8000afc:	220e      	movs	r2, #14
 8000afe:	e000      	b.n	8000b02 <UartAction_ServoMotor+0x642>
 8000b00:	220c      	movs	r2, #12
 8000b02:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b08:	e0d2      	b.n	8000cb0 <UartAction_ServoMotor+0x7f0>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CCW往左动
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000b0c:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b14:	f040 80cc 	bne.w	8000cb0 <UartAction_ServoMotor+0x7f0>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 14 : 12;
 8000b18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b20:	791b      	ldrb	r3, [r3, #4]
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b28:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000b2c:	7952      	ldrb	r2, [r2, #5]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <UartAction_ServoMotor+0x67c>
 8000b38:	220e      	movs	r2, #14
 8000b3a:	e000      	b.n	8000b3e <UartAction_ServoMotor+0x67e>
 8000b3c:	220c      	movs	r2, #12
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b44:	e0b4      	b.n	8000cb0 <UartAction_ServoMotor+0x7f0>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 16 : 14;
 8000b46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b4e:	791b      	ldrb	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d108      	bne.n	8000b66 <UartAction_ServoMotor+0x6a6>
 8000b54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b5c:	795b      	ldrb	r3, [r3, #5]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <UartAction_ServoMotor+0x6a6>
 8000b62:	2210      	movs	r2, #16
 8000b64:	e000      	b.n	8000b68 <UartAction_ServoMotor+0x6a8>
 8000b66:	220e      	movs	r2, #14
 8000b68:	4b01      	ldr	r3, [pc, #4]	@ (8000b70 <UartAction_ServoMotor+0x6b0>)
 8000b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b6e:	e0a4      	b.n	8000cba <UartAction_ServoMotor+0x7fa>
 8000b70:	20000088 	.word	0x20000088
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x01) ? 18 : 16;
 8000b74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b7c:	791b      	ldrb	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d108      	bne.n	8000b94 <UartAction_ServoMotor+0x6d4>
 8000b82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b8a:	795b      	ldrb	r3, [r3, #5]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d101      	bne.n	8000b94 <UartAction_ServoMotor+0x6d4>
 8000b90:	2212      	movs	r2, #18
 8000b92:	e000      	b.n	8000b96 <UartAction_ServoMotor+0x6d6>
 8000b94:	2210      	movs	r2, #16
 8000b96:	4b5f      	ldr	r3, [pc, #380]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b9c:	e08d      	b.n	8000cba <UartAction_ServoMotor+0x7fa>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CCW往左动JOGmode_Data_CCW
 8000b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000ba0:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d116      	bne.n	8000bd6 <UartAction_ServoMotor+0x716>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 18;
 8000ba8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bb0:	791b      	ldrb	r3, [r3, #4]
 8000bb2:	021b      	lsls	r3, r3, #8
 8000bb4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bb8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bbc:	7952      	ldrb	r2, [r2, #5]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d101      	bne.n	8000bcc <UartAction_ServoMotor+0x70c>
 8000bc8:	2214      	movs	r2, #20
 8000bca:	e000      	b.n	8000bce <UartAction_ServoMotor+0x70e>
 8000bcc:	2212      	movs	r2, #18
 8000bce:	4b51      	ldr	r3, [pc, #324]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000bd4:	e06e      	b.n	8000cb4 <UartAction_ServoMotor+0x7f4>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CW往右动
 8000bd6:	4b4f      	ldr	r3, [pc, #316]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000bd8:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	d168      	bne.n	8000cb4 <UartAction_ServoMotor+0x7f4>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 18;
 8000be2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000be6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bea:	791b      	ldrb	r3, [r3, #4]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bf2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bf6:	7952      	ldrb	r2, [r2, #5]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <UartAction_ServoMotor+0x746>
 8000c02:	2214      	movs	r2, #20
 8000c04:	e000      	b.n	8000c08 <UartAction_ServoMotor+0x748>
 8000c06:	2212      	movs	r2, #18
 8000c08:	4b42      	ldr	r3, [pc, #264]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c0e:	e051      	b.n	8000cb4 <UartAction_ServoMotor+0x7f4>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 28 : 26;
 8000c10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c18:	791b      	ldrb	r3, [r3, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d108      	bne.n	8000c30 <UartAction_ServoMotor+0x770>
 8000c1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c26:	795b      	ldrb	r3, [r3, #5]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d101      	bne.n	8000c30 <UartAction_ServoMotor+0x770>
 8000c2c:	221c      	movs	r2, #28
 8000c2e:	e000      	b.n	8000c32 <UartAction_ServoMotor+0x772>
 8000c30:	221a      	movs	r2, #26
 8000c32:	4b38      	ldr	r3, [pc, #224]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c38:	e03f      	b.n	8000cba <UartAction_ServoMotor+0x7fa>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CW往右动
 8000c3a:	4b36      	ldr	r3, [pc, #216]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000c3c:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d116      	bne.n	8000c72 <UartAction_ServoMotor+0x7b2>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 30 : 28;
 8000c44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c54:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c58:	7952      	ldrb	r2, [r2, #5]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <UartAction_ServoMotor+0x7a8>
 8000c64:	221e      	movs	r2, #30
 8000c66:	e000      	b.n	8000c6a <UartAction_ServoMotor+0x7aa>
 8000c68:	221c      	movs	r2, #28
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c70:	e022      	b.n	8000cb8 <UartAction_ServoMotor+0x7f8>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CCW往左动
 8000c72:	4b28      	ldr	r3, [pc, #160]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000c74:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7c:	d11c      	bne.n	8000cb8 <UartAction_ServoMotor+0x7f8>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 30 : 28;
 8000c7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c86:	791b      	ldrb	r3, [r3, #4]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c8e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c92:	7952      	ldrb	r2, [r2, #5]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <UartAction_ServoMotor+0x7e2>
 8000c9e:	221e      	movs	r2, #30
 8000ca0:	e000      	b.n	8000ca4 <UartAction_ServoMotor+0x7e4>
 8000ca2:	221c      	movs	r2, #28
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000caa:	e005      	b.n	8000cb8 <UartAction_ServoMotor+0x7f8>
            } break;
 8000cac:	bf00      	nop
 8000cae:	e009      	b.n	8000cc4 <UartAction_ServoMotor+0x804>
            } break;
 8000cb0:	bf00      	nop
 8000cb2:	e007      	b.n	8000cc4 <UartAction_ServoMotor+0x804>
            } break;
 8000cb4:	bf00      	nop
 8000cb6:	e005      	b.n	8000cc4 <UartAction_ServoMotor+0x804>
            } break;
 8000cb8:	bf00      	nop
        } break;
 8000cba:	e003      	b.n	8000cc4 <UartAction_ServoMotor+0x804>
        } break;
 8000cbc:	bf00      	nop
 8000cbe:	e021      	b.n	8000d04 <UartAction_ServoMotor+0x844>
        } break;
 8000cc0:	bf00      	nop
 8000cc2:	e01f      	b.n	8000d04 <UartAction_ServoMotor+0x844>
        } break;
 8000cc4:	bf00      	nop
    } break;
 8000cc6:	e01d      	b.n	8000d04 <UartAction_ServoMotor+0x844>
    case Cmd_Write_Multi_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 读取寄存器
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000cca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000ccc:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 8000cd0:	d11a      	bne.n	8000d08 <UartAction_ServoMotor+0x848>
        case GearRatioRegister_Numerator: {    // 电子齿轮比分子分母寄存器，需要设置分子160，分母94
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000cd4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d10e      	bne.n	8000cf8 <UartAction_ServoMotor+0x838>
            case 4: {
              if (uartbuf[5] == ServoMotor.UartCurrentCmd[2]) ServoMotor.Flag_Event[1] = 14;  // 重新电子齿轮比分子分母寄存器
 8000cda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ce2:	795b      	ldrb	r3, [r3, #5]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000ce8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d103      	bne.n	8000cf6 <UartAction_ServoMotor+0x836>
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <UartAction_ServoMotor+0x854>)
 8000cf0:	220e      	movs	r2, #14
 8000cf2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000cf6:	bf00      	nop
          }
        } break;
 8000cf8:	bf00      	nop
      }
    } break;
 8000cfa:	e005      	b.n	8000d08 <UartAction_ServoMotor+0x848>
    return;
 8000cfc:	bf00      	nop
 8000cfe:	e004      	b.n	8000d0a <UartAction_ServoMotor+0x84a>
    } break;
 8000d00:	bf00      	nop
 8000d02:	e002      	b.n	8000d0a <UartAction_ServoMotor+0x84a>
    } break;
 8000d04:	bf00      	nop
 8000d06:	e000      	b.n	8000d0a <UartAction_ServoMotor+0x84a>
    } break;
 8000d08:	bf00      	nop
  }
}
 8000d0a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000088 	.word	0x20000088

08000d18 <Event_Movement_ServoMotor>:
void Event_Movement_ServoMotor(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  // LOGI("STATE : %d", ServoMotor.Flag_Event[2]);
  switch (ServoMotor.Flag_Event[2]) {
 8000d1c:	4ba2      	ldr	r3, [pc, #648]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d22:	2b1c      	cmp	r3, #28
 8000d24:	f200 813d 	bhi.w	8000fa2 <Event_Movement_ServoMotor+0x28a>
 8000d28:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <Event_Movement_ServoMotor+0x18>)
 8000d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2e:	bf00      	nop
 8000d30:	08000da5 	.word	0x08000da5
 8000d34:	08000db9 	.word	0x08000db9
 8000d38:	08000ddb 	.word	0x08000ddb
 8000d3c:	08000fa3 	.word	0x08000fa3
 8000d40:	08000df3 	.word	0x08000df3
 8000d44:	08000fa3 	.word	0x08000fa3
 8000d48:	08000e0b 	.word	0x08000e0b
 8000d4c:	08000fa3 	.word	0x08000fa3
 8000d50:	08000e23 	.word	0x08000e23
 8000d54:	08000fa3 	.word	0x08000fa3
 8000d58:	08000e5f 	.word	0x08000e5f
 8000d5c:	08000fa3 	.word	0x08000fa3
 8000d60:	08000e87 	.word	0x08000e87
 8000d64:	08000fa3 	.word	0x08000fa3
 8000d68:	08000ec3 	.word	0x08000ec3
 8000d6c:	08000fa3 	.word	0x08000fa3
 8000d70:	08000ee9 	.word	0x08000ee9
 8000d74:	08000fa3 	.word	0x08000fa3
 8000d78:	08000ef1 	.word	0x08000ef1
 8000d7c:	08000fa3 	.word	0x08000fa3
 8000d80:	08000f2d 	.word	0x08000f2d
 8000d84:	08000fa3 	.word	0x08000fa3
 8000d88:	08000f59 	.word	0x08000f59
 8000d8c:	08000fa3 	.word	0x08000fa3
 8000d90:	08000f69 	.word	0x08000f69
 8000d94:	08000fa3 	.word	0x08000fa3
 8000d98:	08000f79 	.word	0x08000f79
 8000d9c:	08000fa3 	.word	0x08000fa3
 8000da0:	08000f89 	.word	0x08000f89
    case 0: {                     // 判断是否校准
      if (!ServoMotor.IsReset) {  // 没有校准
 8000da4:	4b80      	ldr	r3, [pc, #512]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000da6:	789b      	ldrb	r3, [r3, #2]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f040 80f5 	bne.w	8000f98 <Event_Movement_ServoMotor+0x280>
        ServoMotor.Flag_Event[2] = 1;
 8000dae:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    } break;
 8000db6:	e0ef      	b.n	8000f98 <Event_Movement_ServoMotor+0x280>
    case 1: {                                                                                                            // 没有校准的时候
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 一开始就有传感器触发的情况
 8000db8:	2102      	movs	r1, #2
 8000dba:	487c      	ldr	r0, [pc, #496]	@ (8000fac <Event_Movement_ServoMotor+0x294>)
 8000dbc:	f003 f9de 	bl	800417c <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <Event_Movement_ServoMotor+0xb8>
        ServoMotor.Flag_Event[2] = 2;
 8000dc6:	4b78      	ldr	r3, [pc, #480]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      } else {
        ServoMotor.Flag_Event[2] = 2;
      }
    } break;
 8000dce:	e0e8      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
        ServoMotor.Flag_Event[2] = 2;
 8000dd0:	4b75      	ldr	r3, [pc, #468]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000dd8:	e0e3      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 2: {  // 设备最低速度缓慢运动然后当刚离开传感器范围，随后又返回至刚触发瞬间
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000dda:	4875      	ldr	r0, [pc, #468]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000ddc:	f000 f964 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，如果一开始不设置速度0的话，可能会冲出去
 8000de0:	2100      	movs	r1, #0
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f96c 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 3;                 // 等待串口返回，赋值4，超时赋值2
 8000de8:	4b6f      	ldr	r3, [pc, #444]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000dea:	2203      	movs	r2, #3
 8000dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000df0:	e0d7      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 4: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000df2:	486f      	ldr	r0, [pc, #444]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000df4:	f000 f958 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(1, DI1_Data_ServoON);  // 打开伺服控制Servo ON
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 f960 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 5;                                // 等待串口返回，赋值6，超时赋值4
 8000e00:	4b69      	ldr	r3, [pc, #420]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000e02:	2205      	movs	r2, #5
 8000e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e08:	e0cb      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 6: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e0a:	4869      	ldr	r0, [pc, #420]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000e0c:	f000 f94c 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(3, 20);  // 设置速度1
 8000e10:	2114      	movs	r1, #20
 8000e12:	2003      	movs	r0, #3
 8000e14:	f000 f954 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>

      ServoMotor.Flag_Event[2] = 7;  // 等待串口返回，赋值8，超时赋值6
 8000e18:	4b63      	ldr	r3, [pc, #396]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e20:	e0bf      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 8: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e22:	4863      	ldr	r0, [pc, #396]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000e24:	f000 f940 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往左动，在左则往右动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000e28:	4b5f      	ldr	r3, [pc, #380]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000e2a:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d105      	bne.n	8000e3e <Event_Movement_ServoMotor+0x126>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // CCW往左动JOGmode_Data_CCW
 8000e32:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f942 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
 8000e3c:	e00a      	b.n	8000e54 <Event_Movement_ServoMotor+0x13c>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000e40:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d104      	bne.n	8000e54 <Event_Movement_ServoMotor+0x13c>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CW往右动
 8000e4a:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 f936 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
      }
      ServoMotor.Flag_Event[2] = 9;  // 等待串口返回，赋值10，超时赋值8
 8000e54:	4b54      	ldr	r3, [pc, #336]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000e56:	2209      	movs	r2, #9
 8000e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e5c:	e0a1      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 10: {
      if (LimitSensorOFF_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 刚好离开，马上停止
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4852      	ldr	r0, [pc, #328]	@ (8000fac <Event_Movement_ServoMotor+0x294>)
 8000e62:	f003 f98b 	bl	800417c <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	f040 8097 	bne.w	8000f9c <Event_Movement_ServoMotor+0x284>
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e6e:	4850      	ldr	r0, [pc, #320]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000e70:	f000 f91a 	bl	80010a8 <ResetTimerFlag_ServoMotor>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，停止
 8000e74:	2100      	movs	r1, #0
 8000e76:	2003      	movs	r0, #3
 8000e78:	f000 f922 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 11;                // 等待串口返回，赋值12，超时赋值10
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000e7e:	220b      	movs	r2, #11
 8000e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    } break;
 8000e84:	e08a      	b.n	8000f9c <Event_Movement_ServoMotor+0x284>
    case 12: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e86:	484a      	ldr	r0, [pc, #296]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000e88:	f000 f90e 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往右动，在左则往左动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000e8c:	4b46      	ldr	r3, [pc, #280]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000e8e:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d105      	bne.n	8000ea2 <Event_Movement_ServoMotor+0x18a>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CW往右动
 8000e96:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f000 f910 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
 8000ea0:	e00a      	b.n	8000eb8 <Event_Movement_ServoMotor+0x1a0>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000ea2:	4b41      	ldr	r3, [pc, #260]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000ea4:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d104      	bne.n	8000eb8 <Event_Movement_ServoMotor+0x1a0>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // CCW往左动
 8000eae:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f904 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
      }
      ServoMotor.Flag_Event[2] = 13;  // 等待串口返回，赋值14，超时赋值12
 8000eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000eba:	220d      	movs	r2, #13
 8000ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000ec0:	e06f      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 14: {
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 刚好回去
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	4839      	ldr	r0, [pc, #228]	@ (8000fac <Event_Movement_ServoMotor+0x294>)
 8000ec6:	f003 f959 	bl	800417c <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d167      	bne.n	8000fa0 <Event_Movement_ServoMotor+0x288>
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ed0:	4837      	ldr	r0, [pc, #220]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000ed2:	f000 f8e9 	bl	80010a8 <ResetTimerFlag_ServoMotor>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，停止
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f8f1 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 14;                // 等待串口返回，赋值16，超时赋值14
 8000ede:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000ee0:	220e      	movs	r2, #14
 8000ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      if (0) {  // 扭矩过大要停下来
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
        Uart_Send_MovementRegister_ServoMotor(3, 0);
        ServoMotor.Flag_Event[2] = 0;
      }
    } break;
 8000ee6:	e05b      	b.n	8000fa0 <Event_Movement_ServoMotor+0x288>
    // 缺一个开始信号
    case 16: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ee8:	4831      	ldr	r0, [pc, #196]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000eea:	f000 f8dd 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      //   ServoMotor.Flag_Event[2] = 18;
      // } else {
      //   ServoMotor.Flag_Event[2] = 16;  // 等待串口返回，赋值18，超时赋值16
      // }
      //   Uart_Send_MovementRegister_ServoMotor(2, PTmode_Data_P1_01); // 已经归位，重置脉冲计数,写入PT模式
    } break;
 8000eee:	e058      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 18: {  // 设置了PT模式，发送清除脉冲的指令，设置DI2
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ef0:	482f      	ldr	r0, [pc, #188]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000ef2:	f000 f8d9 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往右动，在左则往左动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000ef8:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d105      	bne.n	8000f0c <Event_Movement_ServoMotor+0x1f4>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // cCW往右动
 8000f00:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f8db 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
 8000f0a:	e00a      	b.n	8000f22 <Event_Movement_ServoMotor+0x20a>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000f0c:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000f0e:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f16:	d104      	bne.n	8000f22 <Event_Movement_ServoMotor+0x20a>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CCW往左动
 8000f18:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f8cf 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
      }
      // Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_Start_Data_P2_11); // 已经归位，重置脉冲计数,写入PT模式
      ServoMotor.Flag_Event[2] = 19;  // 等待串口返回，赋值20，超时赋值18
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000f24:	2213      	movs	r2, #19
 8000f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f2a:	e03a      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 20: {  // 设置了PT模式，发送清除脉冲的指令，复位DI2
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f2c:	4820      	ldr	r0, [pc, #128]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000f2e:	f000 f8bb 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      if (0x00 == GetCmdType()) {
 8000f32:	f006 fd3f 	bl	80079b4 <GetCmdType>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d108      	bne.n	8000f4e <Event_Movement_ServoMotor+0x236>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f8be 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 22;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000f46:	2216      	movs	r2, #22
 8000f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      } else {
        ServoMotor.Flag_Event[2] = 20;  // 等待串口返回，赋值18，超时赋值16
      }
      // Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_End_Data_P2_11); // 已经归位，重置脉冲计数,写入PT模式
      // ServoMotor.Flag_Event[2] = 21; // 等待串口返回，赋值22，超时赋值20
    } break;
 8000f4c:	e029      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
        ServoMotor.Flag_Event[2] = 20;  // 等待串口返回，赋值18，超时赋值16
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000f50:	2214      	movs	r2, #20
 8000f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f56:	e024      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 22: {  // 脉冲已经重置了，设置成Sz模式
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f58:	4815      	ldr	r0, [pc, #84]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000f5a:	f000 f8a5 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(4, Szmode_Data_P1_01); // 已经归位，重置脉冲计数,写入PT模式
      ServoMotor.Flag_Event[2] = 23;  // 等待串口返回，赋值24，超时赋值22
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000f60:	2217      	movs	r2, #23
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f66:	e01c      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 24: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f68:	4811      	ldr	r0, [pc, #68]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000f6a:	f000 f89d 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(1, DI1_Data_ServoON); // 打开伺服控制Servo ON
      ServoMotor.Flag_Event[2] = 25;  // 等待串口返回，赋值6，超时赋值4
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000f70:	2219      	movs	r2, #25
 8000f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f76:	e014      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 26: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000f7a:	f000 f895 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(3, 1); // 设置速度1
      ServoMotor.Flag_Event[2] = 27;  // 等待串口返回，赋值26，超时赋值24
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000f80:	221b      	movs	r2, #27
 8000f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f86:	e00c      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    case 28: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f88:	4809      	ldr	r0, [pc, #36]	@ (8000fb0 <Event_Movement_ServoMotor+0x298>)
 8000f8a:	f000 f88d 	bl	80010a8 <ResetTimerFlag_ServoMotor>
      ServoMotor.Flag_Event[2] = 29;  // 等待串口返回，赋值28，超时赋值26
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <Event_Movement_ServoMotor+0x290>)
 8000f90:	221d      	movs	r2, #29
 8000f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f96:	e004      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    } break;
 8000f98:	bf00      	nop
 8000f9a:	e002      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    } break;
 8000f9c:	bf00      	nop
 8000f9e:	e000      	b.n	8000fa2 <Event_Movement_ServoMotor+0x28a>
    } break;
 8000fa0:	bf00      	nop
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000088 	.word	0x20000088
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	200000bc 	.word	0x200000bc

08000fb4 <TimerTasks_ServoMotor>:
void TimerTasks_ServoMotor(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  UartRxdMonitor_ServoMotor(1);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f000 fd7b 	bl	8001ab4 <UartRxdMonitor_ServoMotor>
  if (ServoMotor.Flag_Event[1] == 1) {  // 初始化上电延迟
 8000fbe:	4b39      	ldr	r3, [pc, #228]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8000fc0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d113      	bne.n	8000ff0 <TimerTasks_ServoMotor+0x3c>
    ServoMotor.TimerFlag[0]++;
 8000fc8:	4b36      	ldr	r3, [pc, #216]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8000fca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b34      	ldr	r3, [pc, #208]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8000fd2:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ServoMotor.TimerFlag[0] >= 5000) {
 8000fd4:	4b33      	ldr	r3, [pc, #204]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8000fd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000fd8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d95e      	bls.n	800109e <TimerTasks_ServoMotor+0xea>
      ServoMotor.TimerFlag[0]  = 0;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	865a      	strh	r2, [r3, #50]	@ 0x32
      ServoMotor.Flag_Event[1] = 2;  // 检查状态监控寄存器1-5状态
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (ServoMotor.TimerFlag[0] >= 1000) {
      ServoMotor.TimerFlag[0]  = 0;
      ServoMotor.Flag_Event[1] = ServoMotor.Flag_Event[1] - 1;  // 超时没反应，返回上一次发送
    }
  }
}
 8000fee:	e056      	b.n	800109e <TimerTasks_ServoMotor+0xea>
  } else if (ServoMotor.Flag_Event[1] == 3 ||   //
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8000ff2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d03b      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 5 ||   //
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8000ffc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
  } else if (ServoMotor.Flag_Event[1] == 3 ||   //
 8001000:	2b05      	cmp	r3, #5
 8001002:	d036      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 7 ||   //
 8001004:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8001006:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 5 ||   //
 800100a:	2b07      	cmp	r3, #7
 800100c:	d031      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 9 ||   //
 800100e:	4b25      	ldr	r3, [pc, #148]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8001010:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 7 ||   //
 8001014:	2b09      	cmp	r3, #9
 8001016:	d02c      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 11 ||  //
 8001018:	4b22      	ldr	r3, [pc, #136]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 800101a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 9 ||   //
 800101e:	2b0b      	cmp	r3, #11
 8001020:	d027      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 13 ||  //
 8001022:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8001024:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 11 ||  //
 8001028:	2b0d      	cmp	r3, #13
 800102a:	d022      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 15 ||  //
 800102c:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 800102e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 13 ||  //
 8001032:	2b0f      	cmp	r3, #15
 8001034:	d01d      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 17 ||  //
 8001036:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8001038:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 15 ||  //
 800103c:	2b11      	cmp	r3, #17
 800103e:	d018      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 19 ||  //
 8001040:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8001042:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 17 ||  //
 8001046:	2b13      	cmp	r3, #19
 8001048:	d013      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 21 ||  //
 800104a:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 800104c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 19 ||  //
 8001050:	2b15      	cmp	r3, #21
 8001052:	d00e      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 23 ||  //
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8001056:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 21 ||  //
 800105a:	2b17      	cmp	r3, #23
 800105c:	d009      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 25 ||  //
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8001060:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 23 ||  //
 8001064:	2b19      	cmp	r3, #25
 8001066:	d004      	beq.n	8001072 <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 27) {  // 初始化检查指令，必须设置正确
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 800106a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 25 ||  //
 800106e:	2b1b      	cmp	r3, #27
 8001070:	d115      	bne.n	800109e <TimerTasks_ServoMotor+0xea>
    ServoMotor.TimerFlag[0]++;
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8001074:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001076:	3301      	adds	r3, #1
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 800107c:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ServoMotor.TimerFlag[0] >= 1000) {
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8001080:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001082:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001086:	d30a      	bcc.n	800109e <TimerTasks_ServoMotor+0xea>
      ServoMotor.TimerFlag[0]  = 0;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 800108a:	2200      	movs	r2, #0
 800108c:	865a      	strh	r2, [r3, #50]	@ 0x32
      ServoMotor.Flag_Event[1] = ServoMotor.Flag_Event[1] - 1;  // 超时没反应，返回上一次发送
 800108e:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 8001090:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001094:	3b01      	subs	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b02      	ldr	r3, [pc, #8]	@ (80010a4 <TimerTasks_ServoMotor+0xf0>)
 800109a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000088 	.word	0x20000088

080010a8 <ResetTimerFlag_ServoMotor>:
void ResetTimerFlag_ServoMotor(uint16_t *TimerFlag) { *TimerFlag = 0; }
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	801a      	strh	r2, [r3, #0]
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <Uart_Send_MovementRegister_ServoMotor>:
void Uart_Send_MovementRegister_ServoMotor(uint8_t mode, uint16_t Data) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	4603      	mov	r3, r0
 80010c8:	460a      	mov	r2, r1
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	4613      	mov	r3, r2
 80010ce:	80bb      	strh	r3, [r7, #4]
  LOGI("Send mov massage");
 80010d0:	f001 ff00 	bl	8002ed4 <HAL_GetTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a25      	ldr	r2, [pc, #148]	@ (800116c <Uart_Send_MovementRegister_ServoMotor+0xac>)
 80010d8:	4619      	mov	r1, r3
 80010da:	4825      	ldr	r0, [pc, #148]	@ (8001170 <Uart_Send_MovementRegister_ServoMotor+0xb0>)
 80010dc:	f006 fe4c 	bl	8007d78 <iprintf>
  switch (mode) {
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d83d      	bhi.n	8001162 <Uart_Send_MovementRegister_ServoMotor+0xa2>
 80010e6:	a201      	add	r2, pc, #4	@ (adr r2, 80010ec <Uart_Send_MovementRegister_ServoMotor+0x2c>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	08001101 	.word	0x08001101
 80010f0:	08001113 	.word	0x08001113
 80010f4:	08001127 	.word	0x08001127
 80010f8:	0800113b 	.word	0x0800113b
 80010fc:	0800114f 	.word	0x0800114f
    case 0: {  // 查询监视器1-5内容
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 10, MonitorRegister_1_Data, 0, Set_null_ServoMotor);
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <Uart_Send_MovementRegister_ServoMotor+0xb4>)
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2300      	movs	r3, #0
 8001106:	2212      	movs	r2, #18
 8001108:	210a      	movs	r1, #10
 800110a:	2003      	movs	r0, #3
 800110c:	f000 fa32 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001110:	e027      	b.n	8001162 <Uart_Send_MovementRegister_ServoMotor+0xa2>
    case 1: {  // 开启 或 关闭伺服控制
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, DI1_Register_P2_10, Data, Set_null_ServoMotor);
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <Uart_Send_MovementRegister_ServoMotor+0xb4>)
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	f44f 7205 	mov.w	r2, #532	@ 0x214
 800111c:	2100      	movs	r1, #0
 800111e:	2006      	movs	r0, #6
 8001120:	f000 fa28 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001124:	e01d      	b.n	8001162 <Uart_Send_MovementRegister_ServoMotor+0xa2>
    case 2: {  // 写入PT或Sz模式,写入4，设置速度模式，写入0，设置位置模式
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, PT_Szmode_Register_P1_01, Data, Set_null_ServoMotor);
 8001126:	88bb      	ldrh	r3, [r7, #4]
 8001128:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <Uart_Send_MovementRegister_ServoMotor+0xb4>)
 800112a:	9200      	str	r2, [sp, #0]
 800112c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001130:	2100      	movs	r1, #0
 8001132:	2006      	movs	r0, #6
 8001134:	f000 fa1e 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001138:	e013      	b.n	8001162 <Uart_Send_MovementRegister_ServoMotor+0xa2>
    case 3: {  // 速度控制
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, JOGmode_Register_P4_05, Data, Set_null_ServoMotor);
 800113a:	88bb      	ldrh	r3, [r7, #4]
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <Uart_Send_MovementRegister_ServoMotor+0xb4>)
 800113e:	9200      	str	r2, [sp, #0]
 8001140:	f240 420a 	movw	r2, #1034	@ 0x40a
 8001144:	2100      	movs	r1, #0
 8001146:	2006      	movs	r0, #6
 8001148:	f000 fa14 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800114c:	e009      	b.n	8001162 <Uart_Send_MovementRegister_ServoMotor+0xa2>
    case 4: {  // DI2设置0x0004-脉冲清除,0x0104	//脉冲恢复计数
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, DI2_PulseClear_Register_P2_11, Data, Set_null_ServoMotor);
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <Uart_Send_MovementRegister_ServoMotor+0xb4>)
 8001152:	9200      	str	r2, [sp, #0]
 8001154:	f240 2216 	movw	r2, #534	@ 0x216
 8001158:	2100      	movs	r1, #0
 800115a:	2006      	movs	r0, #6
 800115c:	f000 fa0a 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001160:	bf00      	nop
  }
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	08008f08 	.word	0x08008f08
 8001170:	08008a9c 	.word	0x08008a9c
 8001174:	200000c8 	.word	0x200000c8

08001178 <UartSend_MonitorRegister_ServoMotor>:
void UartSend_MonitorRegister_ServoMotor(uint8_t mode) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  switch (mode) {
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b0b      	cmp	r3, #11
 8001186:	f200 8095 	bhi.w	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
 800118a:	a201      	add	r2, pc, #4	@ (adr r2, 8001190 <UartSend_MonitorRegister_ServoMotor+0x18>)
 800118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001190:	080011c1 	.word	0x080011c1
 8001194:	080011d3 	.word	0x080011d3
 8001198:	080011e5 	.word	0x080011e5
 800119c:	080011f7 	.word	0x080011f7
 80011a0:	08001209 	.word	0x08001209
 80011a4:	0800121b 	.word	0x0800121b
 80011a8:	0800122d 	.word	0x0800122d
 80011ac:	08001241 	.word	0x08001241
 80011b0:	08001265 	.word	0x08001265
 80011b4:	08001279 	.word	0x08001279
 80011b8:	0800128d 	.word	0x0800128d
 80011bc:	080012a1 	.word	0x080012a1
    case 0: {  // 问询监视器1-5寄存器配置是否正确
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 10, MonitorRegister_1_Set, 0, Set_null_ServoMotor);
 80011c0:	4b3e      	ldr	r3, [pc, #248]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2300      	movs	r3, #0
 80011c6:	2222      	movs	r2, #34	@ 0x22
 80011c8:	210a      	movs	r1, #10
 80011ca:	2003      	movs	r0, #3
 80011cc:	f000 f9d2 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011d0:	e070      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 1: {  // 写入正确的监视器1寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_1_Set, PulseMonitor_0022H, Set_null_ServoMotor);
 80011d2:	4b3a      	ldr	r3, [pc, #232]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	2222      	movs	r2, #34	@ 0x22
 80011da:	2100      	movs	r1, #0
 80011dc:	2006      	movs	r0, #6
 80011de:	f000 f9c9 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011e2:	e067      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 2: {  // 写入正确的监视器2寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_2_Set, TorqueMonitor_0024H, Set_null_ServoMotor);
 80011e4:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	230b      	movs	r3, #11
 80011ea:	2224      	movs	r2, #36	@ 0x24
 80011ec:	2100      	movs	r1, #0
 80011ee:	2006      	movs	r0, #6
 80011f0:	f000 f9c0 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011f4:	e05e      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 3: {  // 写入正确的监视器3寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_3_Set, SpeedMonitor_0026H, Set_null_ServoMotor);
 80011f6:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2307      	movs	r3, #7
 80011fc:	2226      	movs	r2, #38	@ 0x26
 80011fe:	2100      	movs	r1, #0
 8001200:	2006      	movs	r0, #6
 8001202:	f000 f9b7 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001206:	e055      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 4: {  // 写入正确的监视器4寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_4_Set, Monitor_0028H, Set_null_ServoMotor);
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2303      	movs	r3, #3
 800120e:	2228      	movs	r2, #40	@ 0x28
 8001210:	2100      	movs	r1, #0
 8001212:	2006      	movs	r0, #6
 8001214:	f000 f9ae 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001218:	e04c      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 5: {  // 写入正确的监视器5寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_5_Set, Monitor_002AH, Set_null_ServoMotor);
 800121a:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2300      	movs	r3, #0
 8001220:	222a      	movs	r2, #42	@ 0x2a
 8001222:	2100      	movs	r1, #0
 8001224:	2006      	movs	r0, #6
 8001226:	f000 f9a5 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800122a:	e043      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 6: {  // 查询电子齿轮比分子分母的设置
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 4, GearRatioRegister_Numerator, 0, Set_null_ServoMotor);
 800122c:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2300      	movs	r3, #0
 8001232:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8001236:	2104      	movs	r1, #4
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f99b 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800123e:	e039      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 7: {  // 写入正确的电子齿轮比分子分母的设置，分子160，分母94，对应的皮带94mm一圈，计算得出1000脉冲/mm
      uint8_t uartsendbuf[8] = {0x00, 0xA0, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00};
 8001240:	4a1f      	ldr	r2, [pc, #124]	@ (80012c0 <UartSend_MonitorRegister_ServoMotor+0x148>)
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124a:	e883 0003 	stmia.w	r3, {r0, r1}
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Multi_Func_ServoMotor, 4, GearRatioRegister_Numerator, 0, uartsendbuf);
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2300      	movs	r3, #0
 8001256:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800125a:	2104      	movs	r1, #4
 800125c:	2010      	movs	r0, #16
 800125e:	f000 f989 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001262:	e027      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 8: {  // 读一次脉冲清除模式，需要设置为0x11;
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 1, PulseReset_Register_P2_50, 0, Set_null_ServoMotor);
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2300      	movs	r3, #0
 800126a:	f44f 7219 	mov.w	r2, #612	@ 0x264
 800126e:	2101      	movs	r1, #1
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f97f 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001276:	e01d      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 9: {  // 设置脉冲清除模式，需要设置为0x11;
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, PulseReset_Register_P2_50, PulseReset_Data_P2_50, Set_null_ServoMotor);
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2311      	movs	r3, #17
 800127e:	f44f 7219 	mov.w	r2, #612	@ 0x264
 8001282:	2100      	movs	r1, #0
 8001284:	2006      	movs	r0, #6
 8001286:	f000 f975 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800128a:	e013      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 10: {  // 读一次EEPROM的设置，0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 1, AuxrFuncRegister_P2_30, 0, Set_null_ServoMotor);
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2300      	movs	r3, #0
 8001292:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 8001296:	2101      	movs	r1, #1
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f96b 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800129e:	e009      	b.n	80012b4 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 11: {  // 设置EEPROM的为不保存模式，0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, AuxrFuncRegister_P2_30, EEPROM_Disable_P2_30, Set_null_ServoMotor);
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <UartSend_MonitorRegister_ServoMotor+0x144>)
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2305      	movs	r3, #5
 80012a6:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 80012aa:	2100      	movs	r1, #0
 80012ac:	2006      	movs	r0, #6
 80012ae:	f000 f961 	bl	8001574 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80012b2:	bf00      	nop
  }
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200000c8 	.word	0x200000c8
 80012c0:	08008ac8 	.word	0x08008ac8

080012c4 <Get_LRC_ServoMotor>:

uint16_t Get_LRC_ServoMotor(uint8_t *buf, uint8_t len) {
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
  uint16_t sumbuf = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	81fb      	strh	r3, [r7, #14]
  uint8_t  result = 0, result_h, result_l;
 80012d4:	2300      	movs	r3, #0
 80012d6:	72bb      	strb	r3, [r7, #10]
  uint16_t LRCbuf = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	81bb      	strh	r3, [r7, #12]
  for (uint8_t i = 0; i < len; i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	72fb      	strb	r3, [r7, #11]
 80012e0:	e00a      	b.n	80012f8 <Get_LRC_ServoMotor+0x34>
    sumbuf += buf[i];
 80012e2:	7afb      	ldrb	r3, [r7, #11]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	89fb      	ldrh	r3, [r7, #14]
 80012ee:	4413      	add	r3, r2
 80012f0:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++) {
 80012f2:	7afb      	ldrb	r3, [r7, #11]
 80012f4:	3301      	adds	r3, #1
 80012f6:	72fb      	strb	r3, [r7, #11]
 80012f8:	7afa      	ldrb	r2, [r7, #11]
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3f0      	bcc.n	80012e2 <Get_LRC_ServoMotor+0x1e>
  }
  result   = ~(sumbuf & 0xFF) + 1;
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	425b      	negs	r3, r3
 8001306:	72bb      	strb	r3, [r7, #10]
  result_h = result / 0x10;
 8001308:	7abb      	ldrb	r3, [r7, #10]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	727b      	strb	r3, [r7, #9]
  result_l = result % 0x10;
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	f003 030f 	and.w	r3, r3, #15
 8001314:	723b      	strb	r3, [r7, #8]
  if (0x00 <= result_h && result_h <= 0x09) {
 8001316:	7a7b      	ldrb	r3, [r7, #9]
 8001318:	2b09      	cmp	r3, #9
 800131a:	d80b      	bhi.n	8001334 <Get_LRC_ServoMotor+0x70>
    LRCbuf |= (uint16_t)(result_h + '0') << 8;
 800131c:	7a7b      	ldrb	r3, [r7, #9]
 800131e:	b29b      	uxth	r3, r3
 8001320:	3330      	adds	r3, #48	@ 0x30
 8001322:	b29b      	uxth	r3, r3
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	81bb      	strh	r3, [r7, #12]
 8001332:	e010      	b.n	8001356 <Get_LRC_ServoMotor+0x92>
  } else if (0x0A <= result_h && result_h <= 0x0F) {
 8001334:	7a7b      	ldrb	r3, [r7, #9]
 8001336:	2b09      	cmp	r3, #9
 8001338:	d90d      	bls.n	8001356 <Get_LRC_ServoMotor+0x92>
 800133a:	7a7b      	ldrb	r3, [r7, #9]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <Get_LRC_ServoMotor+0x92>
    LRCbuf |= (uint16_t)(result_h - 0x0A + 'A') << 8;
 8001340:	7a7b      	ldrb	r3, [r7, #9]
 8001342:	b29b      	uxth	r3, r3
 8001344:	3337      	adds	r3, #55	@ 0x37
 8001346:	b29b      	uxth	r3, r3
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	81bb      	strh	r3, [r7, #12]
  }
  if (0x00 <= result_l && result_l <= 0x09) {
 8001356:	7a3b      	ldrb	r3, [r7, #8]
 8001358:	2b09      	cmp	r3, #9
 800135a:	d80a      	bhi.n	8001372 <Get_LRC_ServoMotor+0xae>
    LRCbuf |= result_l + '0';
 800135c:	7a3b      	ldrb	r3, [r7, #8]
 800135e:	b29b      	uxth	r3, r3
 8001360:	3330      	adds	r3, #48	@ 0x30
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21a      	sxth	r2, r3
 8001366:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	b21b      	sxth	r3, r3
 800136e:	81bb      	strh	r3, [r7, #12]
 8001370:	e00f      	b.n	8001392 <Get_LRC_ServoMotor+0xce>
  } else if (0x0A <= result_l && result_l <= 0x0F) {
 8001372:	7a3b      	ldrb	r3, [r7, #8]
 8001374:	2b09      	cmp	r3, #9
 8001376:	d90c      	bls.n	8001392 <Get_LRC_ServoMotor+0xce>
 8001378:	7a3b      	ldrb	r3, [r7, #8]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	d809      	bhi.n	8001392 <Get_LRC_ServoMotor+0xce>
    LRCbuf |= result_l - 0x0A + 'A';
 800137e:	7a3b      	ldrb	r3, [r7, #8]
 8001380:	b29b      	uxth	r3, r3
 8001382:	3337      	adds	r3, #55	@ 0x37
 8001384:	b29b      	uxth	r3, r3
 8001386:	b21a      	sxth	r2, r3
 8001388:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	b21b      	sxth	r3, r3
 8001390:	81bb      	strh	r3, [r7, #12]
  }
  return LRCbuf;
 8001392:	89bb      	ldrh	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <UartWrite_HexToAscii_AddLRC_ServoMotor>:
void UartWrite_HexToAscii_AddLRC_ServoMotor(uint8_t *buf, uint8_t len) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b0c4      	sub	sp, #272	@ 0x110
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013ac:	6018      	str	r0, [r3, #0]
 80013ae:	460a      	mov	r2, r1
 80013b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013b4:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80013b8:	701a      	strb	r2, [r3, #0]
  uint8_t  Sendbuf[255] = {0};
 80013ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	3304      	adds	r3, #4
 80013c8:	22fb      	movs	r2, #251	@ 0xfb
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f006 fd28 	bl	8007e22 <memset>
  uint8_t  lenbuf       = 2 * len + 5;
 80013d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013d6:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	3305      	adds	r3, #5
 80013e2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  uint16_t LRCbuf       = Get_LRC_ServoMotor(buf, len);
 80013e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ea:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013f8:	4611      	mov	r1, r2
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	f7ff ff62 	bl	80012c4 <Get_LRC_ServoMotor>
 8001400:	4603      	mov	r3, r0
 8001402:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
  uint8_t  buf_h, buf_l;
  Sendbuf[0]          = ':';
 8001406:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800140a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800140e:	223a      	movs	r2, #58	@ 0x3a
 8001410:	701a      	strb	r2, [r3, #0]
  Sendbuf[lenbuf - 4] = LRCbuf >> 8;
 8001412:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	b29a      	uxth	r2, r3
 800141a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800141e:	3b04      	subs	r3, #4
 8001420:	b2d1      	uxtb	r1, r2
 8001422:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001426:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800142a:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 3] = LRCbuf & 0xFF;
 800142c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001430:	3b03      	subs	r3, #3
 8001432:	f8b7 210c 	ldrh.w	r2, [r7, #268]	@ 0x10c
 8001436:	b2d1      	uxtb	r1, r2
 8001438:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800143c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001440:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 2] = 0x0D;
 8001442:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001446:	3b02      	subs	r3, #2
 8001448:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800144c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001450:	210d      	movs	r1, #13
 8001452:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 1] = 0x0A;
 8001454:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001458:	3b01      	subs	r3, #1
 800145a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800145e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001462:	210a      	movs	r1, #10
 8001464:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < len; i++) {
 8001466:	2300      	movs	r3, #0
 8001468:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800146c:	e06b      	b.n	8001546 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x1a8>
    buf_h = buf[i] / 0x10;
 800146e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001472:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001476:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	4413      	add	r3, r2
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    buf_l = buf[i] % 0x10;
 8001486:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800148a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800148e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    if (0x00 <= buf_h && buf_h <= 0x09) {
 80014a0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80014a4:	2b09      	cmp	r3, #9
 80014a6:	d80d      	bhi.n	80014c4 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x126>
      Sendbuf[2 * i + 1] = buf_h + '0';
 80014a8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	3301      	adds	r3, #1
 80014b0:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 80014b4:	3230      	adds	r2, #48	@ 0x30
 80014b6:	b2d1      	uxtb	r1, r2
 80014b8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014bc:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014c0:	54d1      	strb	r1, [r2, r3]
 80014c2:	e014      	b.n	80014ee <UartWrite_HexToAscii_AddLRC_ServoMotor+0x150>
    } else if (0x0A <= buf_h && buf_h <= 0x0F) {
 80014c4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	d910      	bls.n	80014ee <UartWrite_HexToAscii_AddLRC_ServoMotor+0x150>
 80014cc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d80c      	bhi.n	80014ee <UartWrite_HexToAscii_AddLRC_ServoMotor+0x150>
      Sendbuf[2 * i + 1] = buf_h - 0x0A + 'A';
 80014d4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	3301      	adds	r3, #1
 80014dc:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 80014e0:	3237      	adds	r2, #55	@ 0x37
 80014e2:	b2d1      	uxtb	r1, r2
 80014e4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014e8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014ec:	54d1      	strb	r1, [r2, r3]
    }
    if (0x00 <= buf_l && buf_l <= 0x09) {
 80014ee:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 80014f2:	2b09      	cmp	r3, #9
 80014f4:	d80d      	bhi.n	8001512 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x174>
      Sendbuf[2 * i + 2] = buf_l + '0';
 80014f6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014fa:	3301      	adds	r3, #1
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 8001502:	3230      	adds	r2, #48	@ 0x30
 8001504:	b2d1      	uxtb	r1, r2
 8001506:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800150a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800150e:	54d1      	strb	r1, [r2, r3]
 8001510:	e014      	b.n	800153c <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19e>
    } else if (0x0A <= buf_l && buf_l <= 0x0F) {
 8001512:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 8001516:	2b09      	cmp	r3, #9
 8001518:	d910      	bls.n	800153c <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19e>
 800151a:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 800151e:	2b0f      	cmp	r3, #15
 8001520:	d80c      	bhi.n	800153c <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19e>
      Sendbuf[2 * i + 2] = buf_l - 0x0A + 'A';
 8001522:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001526:	3301      	adds	r3, #1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 800152e:	3237      	adds	r2, #55	@ 0x37
 8001530:	b2d1      	uxtb	r1, r2
 8001532:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001536:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800153a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < len; i++) {
 800153c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001540:	3301      	adds	r3, #1
 8001542:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001546:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800154a:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800154e:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d38a      	bcc.n	800146e <UartWrite_HexToAscii_AddLRC_ServoMotor+0xd0>
    }
  }
  // UartWrite_WirelessModule(Sendbuf, lenbuf);

  UartWrite_ServoMotor(Sendbuf, lenbuf);
 8001558:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800155c:	b29a      	uxth	r2, r3
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fa5f 	bl	8001a28 <UartWrite_ServoMotor>
}
 800156a:	bf00      	nop
 800156c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <Uart_ReadWriteRegister_ServoMotor>:

void Uart_ReadWriteRegister_ServoMotor(uint8_t Read_WriteFunc, uint8_t WordsNum, uint16_t Register, uint16_t Write_Once_ByteData, uint8_t *Write_Multi_Bytes) {
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b0c4      	sub	sp, #272	@ 0x110
 8001578:	af00      	add	r7, sp, #0
 800157a:	4605      	mov	r5, r0
 800157c:	460c      	mov	r4, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001586:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800158a:	462a      	mov	r2, r5
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001592:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001596:	4622      	mov	r2, r4
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800159e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015a2:	4602      	mov	r2, r0
 80015a4:	801a      	strh	r2, [r3, #0]
 80015a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015aa:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 80015ae:	460a      	mov	r2, r1
 80015b0:	801a      	strh	r2, [r3, #0]
  uint8_t UartSendbuf[255] = {0};
 80015b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	3304      	adds	r3, #4
 80015c0:	22fb      	movs	r2, #251	@ 0xfb
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f006 fc2c 	bl	8007e22 <memset>
  uint8_t lenbuf           = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  UartSendbuf[0]           = ServoMotor.address;
 80015d0:	4b6a      	ldr	r3, [pc, #424]	@ (800177c <Uart_ReadWriteRegister_ServoMotor+0x208>)
 80015d2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80015d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015de:	701a      	strb	r2, [r3, #0]
  UartSendbuf[1]           = Read_WriteFunc;
 80015e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015e8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015ec:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	705a      	strb	r2, [r3, #1]
  UartSendbuf[2]           = Register >> 8;
 80015f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	b29b      	uxth	r3, r3
 8001602:	b2da      	uxtb	r2, r3
 8001604:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001608:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800160c:	709a      	strb	r2, [r3, #2]
  UartSendbuf[3]           = Register & 0xFF;
 800160e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001612:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800161e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001622:	70da      	strb	r2, [r3, #3]
  switch (Read_WriteFunc) {
 8001624:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001628:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b10      	cmp	r3, #16
 8001630:	d037      	beq.n	80016a2 <Uart_ReadWriteRegister_ServoMotor+0x12e>
 8001632:	2b10      	cmp	r3, #16
 8001634:	f300 809d 	bgt.w	8001772 <Uart_ReadWriteRegister_ServoMotor+0x1fe>
 8001638:	2b03      	cmp	r3, #3
 800163a:	d002      	beq.n	8001642 <Uart_ReadWriteRegister_ServoMotor+0xce>
 800163c:	2b06      	cmp	r3, #6
 800163e:	d014      	beq.n	800166a <Uart_ReadWriteRegister_ServoMotor+0xf6>
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
        UartSendbuf[7 + i] = Write_Multi_Bytes[i];
      }
    } break;
    default:
      return;
 8001640:	e097      	b.n	8001772 <Uart_ReadWriteRegister_ServoMotor+0x1fe>
      lenbuf         = 6;
 8001642:	2306      	movs	r3, #6
 8001644:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = 0x00;
 8001648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800164c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001650:	2200      	movs	r2, #0
 8001652:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = WordsNum;
 8001654:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800165c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001660:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	715a      	strb	r2, [r3, #5]
    } break;
 8001668:	e063      	b.n	8001732 <Uart_ReadWriteRegister_ServoMotor+0x1be>
      lenbuf         = 6;
 800166a:	2306      	movs	r3, #6
 800166c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = Write_Once_ByteData >> 8;
 8001670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001674:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	b29b      	uxth	r3, r3
 800167e:	b2da      	uxtb	r2, r3
 8001680:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001688:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = Write_Once_ByteData & 0xFF;
 800168a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800168e:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800169a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800169e:	715a      	strb	r2, [r3, #5]
    } break;
 80016a0:	e047      	b.n	8001732 <Uart_ReadWriteRegister_ServoMotor+0x1be>
      lenbuf         = 7 + 2 * WordsNum;
 80016a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016a6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	3307      	adds	r3, #7
 80016b2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = 0x00;
 80016b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016be:	2200      	movs	r2, #0
 80016c0:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = WordsNum;
 80016c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016ca:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016ce:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80016d2:	7812      	ldrb	r2, [r2, #0]
 80016d4:	715a      	strb	r2, [r3, #5]
      UartSendbuf[6] = 2 * WordsNum;
 80016d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016da:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016ec:	719a      	strb	r2, [r3, #6]
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80016f4:	e012      	b.n	800171c <Uart_ReadWriteRegister_ServoMotor+0x1a8>
        UartSendbuf[7 + i] = Write_Multi_Bytes[i];
 80016f6:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80016fa:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80016fe:	441a      	add	r2, r3
 8001700:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001704:	3307      	adds	r3, #7
 8001706:	7811      	ldrb	r1, [r2, #0]
 8001708:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800170c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001710:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
 8001712:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001716:	3301      	adds	r3, #1
 8001718:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800171c:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8001720:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001724:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	429a      	cmp	r2, r3
 800172e:	dbe2      	blt.n	80016f6 <Uart_ReadWriteRegister_ServoMotor+0x182>
    } break;
 8001730:	bf00      	nop
  }
  ServoMotor.UartCurrentCmd[0] = Read_WriteFunc;
 8001732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001736:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <Uart_ReadWriteRegister_ServoMotor+0x208>)
 8001740:	859a      	strh	r2, [r3, #44]	@ 0x2c
  ServoMotor.UartCurrentCmd[1] = Register;
 8001742:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <Uart_ReadWriteRegister_ServoMotor+0x208>)
 8001744:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001748:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	85d3      	strh	r3, [r2, #46]	@ 0x2e
  ServoMotor.UartCurrentCmd[2] = WordsNum;
 8001750:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001754:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b07      	ldr	r3, [pc, #28]	@ (800177c <Uart_ReadWriteRegister_ServoMotor+0x208>)
 800175e:	861a      	strh	r2, [r3, #48]	@ 0x30
  UartWrite_HexToAscii_AddLRC_ServoMotor(UartSendbuf, lenbuf);
 8001760:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fe17 	bl	800139e <UartWrite_HexToAscii_AddLRC_ServoMotor>
 8001770:	e000      	b.n	8001774 <Uart_ReadWriteRegister_ServoMotor+0x200>
      return;
 8001772:	bf00      	nop
}
 8001774:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001778:	46bd      	mov	sp, r7
 800177a:	bdb0      	pop	{r4, r5, r7, pc}
 800177c:	20000088 	.word	0x20000088

08001780 <SetStatus_Power_ServoMotor>:

void SetStatus_Power_ServoMotor(uint8_t status) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(Power_ServoMotor_GPIO_Port, Power_ServoMotor_Pin, status);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	461a      	mov	r2, r3
 800178e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001792:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <SetStatus_Power_ServoMotor+0x28>)
 8001794:	f002 fd09 	bl	80041aa <HAL_GPIO_WritePin>
  ServoMotor.IsPowerOn = Power_ServoMotor_Pin == PowerON_ServoMotor ? 1 : 0;
 8001798:	4b04      	ldr	r3, [pc, #16]	@ (80017ac <SetStatus_Power_ServoMotor+0x2c>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40010800 	.word	0x40010800
 80017ac:	20000088 	.word	0x20000088

080017b0 <UartReceiveIT_ServoMotor>:
uint8_t GetStatus_Power_ServoMotor(void) { return ServoMotor.IsPowerOn; }

void UartReceiveIT_ServoMotor(void) {                                       // 读写器串口接收
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart_ServoMotor, (uint8_t *)Rxdbuf_ServoMotor, 1);  // 重新启动接收中断
 80017b4:	2201      	movs	r2, #1
 80017b6:	4903      	ldr	r1, [pc, #12]	@ (80017c4 <UartReceiveIT_ServoMotor+0x14>)
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <UartReceiveIT_ServoMotor+0x18>)
 80017ba:	f004 fe7a 	bl	80064b2 <HAL_UART_Receive_IT>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000cc 	.word	0x200000cc
 80017c8:	20000428 	.word	0x20000428

080017cc <UartGetData_ServoMotor>:
void UartGetData_ServoMotor(void) {  // 处理接收到的数据到新的数组，并重新接收
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  if (ServoMotor.Flag_Event[2] >= 14) {
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <UartGetData_ServoMotor+0x30>)
 80017d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017d6:	2b0d      	cmp	r3, #13
 80017d8:	d90a      	bls.n	80017f0 <UartGetData_ServoMotor+0x24>
    MotorUart.type = kMoterUart;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <UartGetData_ServoMotor+0x34>)
 80017dc:	2202      	movs	r2, #2
 80017de:	701a      	strb	r2, [r3, #0]
    LOGI("EVENT MOTOR");
 80017e0:	f001 fb78 	bl	8002ed4 <HAL_GetTick>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a07      	ldr	r2, [pc, #28]	@ (8001804 <UartGetData_ServoMotor+0x38>)
 80017e8:	4619      	mov	r1, r3
 80017ea:	4807      	ldr	r0, [pc, #28]	@ (8001808 <UartGetData_ServoMotor+0x3c>)
 80017ec:	f006 fac4 	bl	8007d78 <iprintf>
  }
  UartRegroup_ASCII_ServoMotor();
 80017f0:	f000 f8c0 	bl	8001974 <UartRegroup_ASCII_ServoMotor>

  UartReceiveIT_ServoMotor();
 80017f4:	f7ff ffdc 	bl	80017b0 <UartReceiveIT_ServoMotor>
  //	UartRxd_ServoMotor[CntRxd_ServoMotor] = Rxdbuf_ServoMotor[0];
  //	CntRxd_ServoMotor++;
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000088 	.word	0x20000088
 8001800:	200001d4 	.word	0x200001d4
 8001804:	08008f30 	.word	0x08008f30
 8001808:	08008ad0 	.word	0x08008ad0

0800180c <Get_Regroup_ASCII>:

uint8_t Get_Regroup_ASCII(uint8_t data, uint8_t H_L) {
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	460a      	mov	r2, r1
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	4613      	mov	r3, r2
 800181a:	71bb      	strb	r3, [r7, #6]
  uint8_t databuf;
  if ('0' <= data && data <= '9') {
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001820:	d906      	bls.n	8001830 <Get_Regroup_ASCII+0x24>
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b39      	cmp	r3, #57	@ 0x39
 8001826:	d803      	bhi.n	8001830 <Get_Regroup_ASCII+0x24>
    databuf = data - '0';
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	3b30      	subs	r3, #48	@ 0x30
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	e008      	b.n	8001842 <Get_Regroup_ASCII+0x36>
  } else if ('A' <= data && data <= 'F') {
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b40      	cmp	r3, #64	@ 0x40
 8001834:	d905      	bls.n	8001842 <Get_Regroup_ASCII+0x36>
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b46      	cmp	r3, #70	@ 0x46
 800183a:	d802      	bhi.n	8001842 <Get_Regroup_ASCII+0x36>
    databuf = data - 'A' + 0x0A;
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	3b37      	subs	r3, #55	@ 0x37
 8001840:	73fb      	strb	r3, [r7, #15]
  }
  if (H_L == 0) {
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d103      	bne.n	8001850 <Get_Regroup_ASCII+0x44>
    return databuf << 4;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	b2db      	uxtb	r3, r3
 800184e:	e005      	b.n	800185c <Get_Regroup_ASCII+0x50>
  } else if (H_L == 1) {
 8001850:	79bb      	ldrb	r3, [r7, #6]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <Get_Regroup_ASCII+0x4e>
    return databuf;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	e000      	b.n	800185c <Get_Regroup_ASCII+0x50>
  }
  return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
	...

08001868 <moteruart_receive>:

void moteruart_receive(void) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 800186e:	af00      	add	r7, sp, #0
  uint8_t len    = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
  uint8_t lenbuf = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
  uint8_t buf[255];
  uint8_t uartbuf[255];
  LOGI("SUCESS UART MOTOR");
 800187c:	f001 fb2a 	bl	8002ed4 <HAL_GetTick>
 8001880:	4603      	mov	r3, r0
 8001882:	4a38      	ldr	r2, [pc, #224]	@ (8001964 <moteruart_receive+0xfc>)
 8001884:	4619      	mov	r1, r3
 8001886:	4838      	ldr	r0, [pc, #224]	@ (8001968 <moteruart_receive+0x100>)
 8001888:	f006 fa76 	bl	8007d78 <iprintf>

  len    = UartRead_ServoMotor(buf, sizeof(buf));
 800188c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001890:	21ff      	movs	r1, #255	@ 0xff
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f8dc 	bl	8001a50 <UartRead_ServoMotor>
 8001898:	4603      	mov	r3, r0
 800189a:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
  lenbuf = len / 2;
 800189e:	f897 3206 	ldrb.w	r3, [r7, #518]	@ 0x206
 80018a2:	085b      	lsrs	r3, r3, #1
 80018a4:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
  for (uint8_t i = 0; i < lenbuf; i++) {
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
 80018ae:	e02a      	b.n	8001906 <moteruart_receive+0x9e>
    uartbuf[i] = Get_Regroup_ASCII(buf[2 * i], 0) | Get_Regroup_ASCII(buf[2 * i + 1], 1);
 80018b0:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018ba:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ffa2 	bl	800180c <Get_Regroup_ASCII>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461c      	mov	r4, r3
 80018cc:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	3301      	adds	r3, #1
 80018d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018d8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
 80018de:	2101      	movs	r1, #1
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff93 	bl	800180c <Get_Regroup_ASCII>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80018ee:	4322      	orrs	r2, r4
 80018f0:	b2d1      	uxtb	r1, r2
 80018f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018f6:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 80018fa:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < lenbuf; i++) {
 80018fc:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001900:	3301      	adds	r3, #1
 8001902:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
 8001906:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800190a:	f897 3205 	ldrb.w	r3, [r7, #517]	@ 0x205
 800190e:	429a      	cmp	r2, r3
 8001910:	d3ce      	bcc.n	80018b0 <moteruart_receive+0x48>
  }

  if (uartbuf[0] != ServoMotor.address && uartbuf[1] != (uint8_t)(ServoMotor.UartCurrentCmd[0] & 0xFF)) {
 8001912:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001916:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <moteruart_receive+0x104>)
 800191e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001922:	429a      	cmp	r2, r3
 8001924:	d009      	beq.n	800193a <moteruart_receive+0xd2>
 8001926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800192e:	785a      	ldrb	r2, [r3, #1]
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <moteruart_receive+0x104>)
 8001932:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001934:	b2db      	uxtb	r3, r3
 8001936:	429a      	cmp	r2, r3
 8001938:	d10e      	bne.n	8001958 <moteruart_receive+0xf0>
    return;
  }
  motor_ack[0] = uartbuf[4];
 800193a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800193e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001942:	791a      	ldrb	r2, [r3, #4]
 8001944:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <moteruart_receive+0x108>)
 8001946:	701a      	strb	r2, [r3, #0]
  motor_ack[1] = uartbuf[5];
 8001948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001950:	795a      	ldrb	r2, [r3, #5]
 8001952:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <moteruart_receive+0x108>)
 8001954:	705a      	strb	r2, [r3, #1]
 8001956:	e000      	b.n	800195a <moteruart_receive+0xf2>
    return;
 8001958:	bf00      	nop

  //   if ((uartbuf[4] == 0x00 && uartbuf[5] == 0x01)) {
  //   }
}
 800195a:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	bf00      	nop
 8001964:	08008f48 	.word	0x08008f48
 8001968:	08008af8 	.word	0x08008af8
 800196c:	20000088 	.word	0x20000088
 8001970:	200001dc 	.word	0x200001dc

08001974 <UartRegroup_ASCII_ServoMotor>:

void UartRegroup_ASCII_ServoMotor(void) {
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  if (Flag_UartRegroup_ASCII_ServoMotor == 2) {
 8001978:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <UartRegroup_ASCII_ServoMotor+0xa0>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d108      	bne.n	8001992 <UartRegroup_ASCII_ServoMotor+0x1e>
    Flag_UartRegroup_ASCII_ServoMotor = Rxdbuf_ServoMotor[0] == 0x0D ? 3 : 1;
 8001980:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <UartRegroup_ASCII_ServoMotor+0xa4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b0d      	cmp	r3, #13
 8001986:	d101      	bne.n	800198c <UartRegroup_ASCII_ServoMotor+0x18>
 8001988:	2203      	movs	r2, #3
 800198a:	e000      	b.n	800198e <UartRegroup_ASCII_ServoMotor+0x1a>
 800198c:	2201      	movs	r2, #1
 800198e:	4b21      	ldr	r3, [pc, #132]	@ (8001a14 <UartRegroup_ASCII_ServoMotor+0xa0>)
 8001990:	701a      	strb	r2, [r3, #0]
  }
  switch (Flag_UartRegroup_ASCII_ServoMotor) {
 8001992:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <UartRegroup_ASCII_ServoMotor+0xa0>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b04      	cmp	r3, #4
 8001998:	d838      	bhi.n	8001a0c <UartRegroup_ASCII_ServoMotor+0x98>
 800199a:	a201      	add	r2, pc, #4	@ (adr r2, 80019a0 <UartRegroup_ASCII_ServoMotor+0x2c>)
 800199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a0:	080019b5 	.word	0x080019b5
 80019a4:	080019c5 	.word	0x080019c5
 80019a8:	080019e3 	.word	0x080019e3
 80019ac:	080019fb 	.word	0x080019fb
 80019b0:	08001a03 	.word	0x08001a03
    case 0: {  // 帧头必须是':'(0x3A)
      if (Rxdbuf_ServoMotor[0] == ':') Flag_UartRegroup_ASCII_ServoMotor = 1;
 80019b4:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <UartRegroup_ASCII_ServoMotor+0xa4>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80019ba:	d126      	bne.n	8001a0a <UartRegroup_ASCII_ServoMotor+0x96>
 80019bc:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <UartRegroup_ASCII_ServoMotor+0xa0>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    } break;
 80019c2:	e022      	b.n	8001a0a <UartRegroup_ASCII_ServoMotor+0x96>
    case 1: {  // 高字节
      UartRxd_ServoMotor[CntRxd_ServoMotor++] = Rxdbuf_ServoMotor[0];
 80019c4:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <UartRegroup_ASCII_ServoMotor+0xa8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	b2d1      	uxtb	r1, r2
 80019cc:	4a13      	ldr	r2, [pc, #76]	@ (8001a1c <UartRegroup_ASCII_ServoMotor+0xa8>)
 80019ce:	7011      	strb	r1, [r2, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <UartRegroup_ASCII_ServoMotor+0xa4>)
 80019d4:	7819      	ldrb	r1, [r3, #0]
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <UartRegroup_ASCII_ServoMotor+0xac>)
 80019d8:	5499      	strb	r1, [r3, r2]
      Flag_UartRegroup_ASCII_ServoMotor       = 2;
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <UartRegroup_ASCII_ServoMotor+0xa0>)
 80019dc:	2202      	movs	r2, #2
 80019de:	701a      	strb	r2, [r3, #0]
    } break;
 80019e0:	e014      	b.n	8001a0c <UartRegroup_ASCII_ServoMotor+0x98>
    case 2: {  // 低字节
      UartRxd_ServoMotor[CntRxd_ServoMotor++] = Rxdbuf_ServoMotor[0];
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <UartRegroup_ASCII_ServoMotor+0xa8>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	b2d1      	uxtb	r1, r2
 80019ea:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <UartRegroup_ASCII_ServoMotor+0xa8>)
 80019ec:	7011      	strb	r1, [r2, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <UartRegroup_ASCII_ServoMotor+0xa4>)
 80019f2:	7819      	ldrb	r1, [r3, #0]
 80019f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <UartRegroup_ASCII_ServoMotor+0xac>)
 80019f6:	5499      	strb	r1, [r3, r2]
    } break;
 80019f8:	e008      	b.n	8001a0c <UartRegroup_ASCII_ServoMotor+0x98>
    case 3: {  // 0x0D
      Flag_UartRegroup_ASCII_ServoMotor = 4;
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <UartRegroup_ASCII_ServoMotor+0xa0>)
 80019fc:	2204      	movs	r2, #4
 80019fe:	701a      	strb	r2, [r3, #0]
    } break;
 8001a00:	e004      	b.n	8001a0c <UartRegroup_ASCII_ServoMotor+0x98>
    case 4: {  // 0x0A
      Flag_UartRxdMonitor_ServoMotor = 1;
 8001a02:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <UartRegroup_ASCII_ServoMotor+0xb0>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
    } break;
 8001a08:	e000      	b.n	8001a0c <UartRegroup_ASCII_ServoMotor+0x98>
    } break;
 8001a0a:	bf00      	nop
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	200001d0 	.word	0x200001d0
 8001a18:	200000cc 	.word	0x200000cc
 8001a1c:	200000cd 	.word	0x200000cd
 8001a20:	200000d0 	.word	0x200000d0
 8001a24:	200001cf 	.word	0x200001cf

08001a28 <UartWrite_ServoMotor>:

void UartWrite_ServoMotor(uint8_t *pData, uint16_t Size) {  // 发送给读写器
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart_ServoMotor, pData, Size, 1000);
 8001a34:	887a      	ldrh	r2, [r7, #2]
 8001a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <UartWrite_ServoMotor+0x24>)
 8001a3e:	f004 fcb5 	bl	80063ac <HAL_UART_Transmit>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000428 	.word	0x20000428

08001a50 <UartRead_ServoMotor>:
uint8_t UartRead_ServoMotor(uint8_t *buf, uint8_t len) {
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  if (len > CntRxd_ServoMotor) {
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <UartRead_ServoMotor+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d902      	bls.n	8001a6c <UartRead_ServoMotor+0x1c>
    len = CntRxd_ServoMotor;
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <UartRead_ServoMotor+0x58>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	70fb      	strb	r3, [r7, #3]
  }
  for (i = 0; i < len; i++) {
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e009      	b.n	8001a86 <UartRead_ServoMotor+0x36>
    buf[i] = UartRxd_ServoMotor[i];
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	440b      	add	r3, r1
 8001a7a:	490c      	ldr	r1, [pc, #48]	@ (8001aac <UartRead_ServoMotor+0x5c>)
 8001a7c:	5c8a      	ldrb	r2, [r1, r2]
 8001a7e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	3301      	adds	r3, #1
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3f1      	bcc.n	8001a72 <UartRead_ServoMotor+0x22>
  }
  CntRxd_ServoMotor                 = 0;
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <UartRead_ServoMotor+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
  Flag_UartRegroup_ASCII_ServoMotor = 0;
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <UartRead_ServoMotor+0x60>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
  return len;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	200000cd 	.word	0x200000cd
 8001aac:	200000d0 	.word	0x200000d0
 8001ab0:	200001d0 	.word	0x200001d0

08001ab4 <UartRxdMonitor_ServoMotor>:
void UartRxdMonitor_ServoMotor(uint8_t time_ms) {
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  static uint8_t cnt_bkp    = 0;
  static uint8_t idle_timer = 0;
  if (CntRxd_ServoMotor > 0) {
 8001abe:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <UartRxdMonitor_ServoMotor+0x70>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d026      	beq.n	8001b14 <UartRxdMonitor_ServoMotor+0x60>
    if (cnt_bkp != CntRxd_ServoMotor) {
 8001ac6:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <UartRxdMonitor_ServoMotor+0x74>)
 8001ac8:	781a      	ldrb	r2, [r3, #0]
 8001aca:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <UartRxdMonitor_ServoMotor+0x70>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d007      	beq.n	8001ae2 <UartRxdMonitor_ServoMotor+0x2e>
      cnt_bkp    = CntRxd_ServoMotor;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <UartRxdMonitor_ServoMotor+0x70>)
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <UartRxdMonitor_ServoMotor+0x74>)
 8001ad8:	701a      	strb	r2, [r3, #0]
      idle_timer = 0;
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <UartRxdMonitor_ServoMotor+0x78>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
      }
    }
  } else {
    cnt_bkp = 0;
  }
}
 8001ae0:	e01b      	b.n	8001b1a <UartRxdMonitor_ServoMotor+0x66>
      if (idle_timer < 10) {
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <UartRxdMonitor_ServoMotor+0x78>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b09      	cmp	r3, #9
 8001ae8:	d817      	bhi.n	8001b1a <UartRxdMonitor_ServoMotor+0x66>
        idle_timer += time_ms;
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <UartRxdMonitor_ServoMotor+0x78>)
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4413      	add	r3, r2
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <UartRxdMonitor_ServoMotor+0x78>)
 8001af6:	701a      	strb	r2, [r3, #0]
        if (idle_timer >= 10) {
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <UartRxdMonitor_ServoMotor+0x78>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d90c      	bls.n	8001b1a <UartRxdMonitor_ServoMotor+0x66>
          CntRxd_ServoMotor                 = 0;
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <UartRxdMonitor_ServoMotor+0x70>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
          Flag_UartRegroup_ASCII_ServoMotor = 0;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <UartRxdMonitor_ServoMotor+0x7c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
          Flag_UartRxdMonitor_ServoMotor    = 1;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <UartRxdMonitor_ServoMotor+0x80>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
}
 8001b12:	e002      	b.n	8001b1a <UartRxdMonitor_ServoMotor+0x66>
    cnt_bkp = 0;
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <UartRxdMonitor_ServoMotor+0x74>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	200000cd 	.word	0x200000cd
 8001b28:	200001de 	.word	0x200001de
 8001b2c:	200001df 	.word	0x200001df
 8001b30:	200001d0 	.word	0x200001d0
 8001b34:	200001cf 	.word	0x200001cf

08001b38 <UartDriver_ServoMotor>:
void UartDriver_ServoMotor(void) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b0c0      	sub	sp, #256	@ 0x100
 8001b3c:	af00      	add	r7, sp, #0
  uint8_t len;
  uint8_t buf[255] = {0};
 8001b3e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001b42:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	22fb      	movs	r2, #251	@ 0xfb
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f006 f966 	bl	8007e22 <memset>
  if (Flag_UartRxdMonitor_ServoMotor) {
 8001b56:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <UartDriver_ServoMotor+0x54>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d011      	beq.n	8001b82 <UartDriver_ServoMotor+0x4a>
    Flag_UartRxdMonitor_ServoMotor = 0;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <UartDriver_ServoMotor+0x54>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
    len                            = UartRead_ServoMotor(buf, sizeof(buf));
 8001b64:	463b      	mov	r3, r7
 8001b66:	21ff      	movs	r1, #255	@ 0xff
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff71 	bl	8001a50 <UartRead_ServoMotor>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
    UartAction_ServoMotor(buf, len);
 8001b74:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 8001b78:	463b      	mov	r3, r7
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fc9f 	bl	80004c0 <UartAction_ServoMotor>
  }
}
 8001b82:	bf00      	nop
 8001b84:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200001cf 	.word	0x200001cf

08001b90 <HAL_UART_RxCpltCallback>:
 */

#include "SystemTasks.h"
#include "module_driver/driver_wireless.h"
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	// }
	// if (huart->Instance == UartX_WirelessModule)
	// {
	// 	UartGetData_WirelessModule(); // 处理接收到的数据
	// }
	if (huart->Instance == UartX_ServoMotor)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <HAL_UART_RxCpltCallback+0x20>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_UART_RxCpltCallback+0x16>
	{
		UartGetData_ServoMotor(); // 处理接收到的数据
 8001ba2:	f7ff fe13 	bl	80017cc <UartGetData_ServoMotor>
	}
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
	if (huart == GetWireLessHandle())
 8001bc0:	f005 fe42 	bl	8007848 <GetWireLessHandle>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d101      	bne.n	8001bd0 <HAL_UARTEx_RxEventCallback+0x1c>
	{
		receive_rx_data();
 8001bcc:	f005 fefc 	bl	80079c8 <receive_rx_data>
	}
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) // 1ms
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		// TimerTasks_WirelessModule();
		// TimerTasks_Reader15693();
		TimerTasks_ServoMotor();
 8001bea:	f7ff f9e3 	bl	8000fb4 <TimerTasks_ServoMotor>
	}
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40012c00 	.word	0x40012c00

08001bfc <UartWrite_WirelessModule>:
	UartRxd_WirelessModule[CntRxd_WirelessModule] = Rxdbuf_WirelessModule[0];
	CntRxd_WirelessModule++;
	UartReceiveIT_WirelessModule();
}
void UartWrite_WirelessModule(uint8_t *pData, uint16_t Size)
{//发送给读写器
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart_WirelessModule,pData,Size,1000);
 8001c08:	887a      	ldrh	r2, [r7, #2]
 8001c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <UartWrite_WirelessModule+0x24>)
 8001c12:	f004 fbcb 	bl	80063ac <HAL_UART_Transmit>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000350 	.word	0x20000350

08001c24 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c34:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <MX_ADC1_Init+0x74>)
 8001c36:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <MX_ADC1_Init+0x78>)
 8001c38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	@ (8001c98 <MX_ADC1_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c40:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <MX_ADC1_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c46:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <MX_ADC1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <MX_ADC1_Init+0x74>)
 8001c4e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001c52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c54:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <MX_ADC1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <MX_ADC1_Init+0x74>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c60:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <MX_ADC1_Init+0x74>)
 8001c62:	f001 f941 	bl	8002ee8 <HAL_ADC_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c6c:	f000 faf5 	bl	800225a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c70:	2305      	movs	r3, #5
 8001c72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <MX_ADC1_Init+0x74>)
 8001c82:	f001 fa1b 	bl	80030bc <HAL_ADC_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001c8c:	f000 fae5 	bl	800225a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200001e0 	.word	0x200001e0
 8001c9c:	40012400 	.word	0x40012400

08001ca0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <HAL_ADC_MspInit+0x6c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d121      	bne.n	8001d04 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <HAL_ADC_MspInit+0x70>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <HAL_ADC_MspInit+0x70>)
 8001cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <HAL_ADC_MspInit+0x70>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_ADC_MspInit+0x70>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001d10 <HAL_ADC_MspInit+0x70>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <HAL_ADC_MspInit+0x70>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_ContactPoint_Pin|ADC_BAT_Pin|ADC_CurrentDetection_Pin;
 8001cf0:	23b0      	movs	r3, #176	@ 0xb0
 8001cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <HAL_ADC_MspInit+0x74>)
 8001d00:	f002 f8a8 	bl	8003e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40012400 	.word	0x40012400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010800 	.word	0x40010800

08001d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <MX_DMA_Init+0x38>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	4a0b      	ldr	r2, [pc, #44]	@ (8001d50 <MX_DMA_Init+0x38>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6153      	str	r3, [r2, #20]
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <MX_DMA_Init+0x38>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f001 fbcf 	bl	80034de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d40:	200f      	movs	r0, #15
 8001d42:	f001 fbe8 	bl	8003516 <HAL_NVIC_EnableIRQ>

}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000

08001d54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 0310 	add.w	r3, r7, #16
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d68:	4b44      	ldr	r3, [pc, #272]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a43      	ldr	r2, [pc, #268]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001d6e:	f043 0310 	orr.w	r3, r3, #16
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b41      	ldr	r3, [pc, #260]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d80:	4b3e      	ldr	r3, [pc, #248]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a3d      	ldr	r2, [pc, #244]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001d86:	f043 0320 	orr.w	r3, r3, #32
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	4b38      	ldr	r3, [pc, #224]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a37      	ldr	r2, [pc, #220]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b35      	ldr	r3, [pc, #212]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	4b32      	ldr	r3, [pc, #200]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a31      	ldr	r2, [pc, #196]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e7c <MX_GPIO_Init+0x128>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Power_EStopLED_Pin|Power_Host_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8001dce:	482c      	ldr	r0, [pc, #176]	@ (8001e80 <MX_GPIO_Init+0x12c>)
 8001dd0:	f002 f9eb 	bl	80041aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power_Sensor_GPIO_Port, Power_Sensor_Pin, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	4829      	ldr	r0, [pc, #164]	@ (8001e80 <MX_GPIO_Init+0x12c>)
 8001dda:	f002 f9e6 	bl	80041aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_DetectionSwitch_Pin|Power_BLDCMotor_Pin|Power_WirelessModule_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 6114 	mov.w	r1, #2368	@ 0x940
 8001de4:	4827      	ldr	r0, [pc, #156]	@ (8001e84 <MX_GPIO_Init+0x130>)
 8001de6:	f002 f9e0 	bl	80041aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Power_Reader15693_Pin|Power_Lidar2_Pin, GPIO_PIN_SET);
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001df0:	4824      	ldr	r0, [pc, #144]	@ (8001e84 <MX_GPIO_Init+0x130>)
 8001df2:	f002 f9da 	bl	80041aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Power_Lidar1_Pin|Direction_Ctl_BLDCMotor_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2118      	movs	r1, #24
 8001dfa:	4823      	ldr	r0, [pc, #140]	@ (8001e88 <MX_GPIO_Init+0x134>)
 8001dfc:	f002 f9d5 	bl	80041aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Power_EStopLED_Pin|Power_Sensor_Pin|Power_Host_Pin;
 8001e00:	f242 2301 	movw	r3, #8705	@ 0x2201
 8001e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	4619      	mov	r1, r3
 8001e18:	4819      	ldr	r0, [pc, #100]	@ (8001e80 <MX_GPIO_Init+0x12c>)
 8001e1a:	f002 f81b 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Input_Sensor3_Pin|Input_Sensor1_Pin|Input_Sensor2_Pin|Input_EmergencyStopButton_Pin;
 8001e1e:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8001e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	4619      	mov	r1, r3
 8001e32:	4813      	ldr	r0, [pc, #76]	@ (8001e80 <MX_GPIO_Init+0x12c>)
 8001e34:	f002 f80e 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ADC_DetectionSwitch_Pin|Power_BLDCMotor_Pin|Power_WirelessModule_Pin|Power_Reader15693_Pin
 8001e38:	f649 1340 	movw	r3, #39232	@ 0x9940
 8001e3c:	613b      	str	r3, [r7, #16]
                          |Power_Lidar2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 0310 	add.w	r3, r7, #16
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480c      	ldr	r0, [pc, #48]	@ (8001e84 <MX_GPIO_Init+0x130>)
 8001e52:	f001 ffff 	bl	8003e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Power_Lidar1_Pin|Direction_Ctl_BLDCMotor_Pin;
 8001e56:	2318      	movs	r3, #24
 8001e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4806      	ldr	r0, [pc, #24]	@ (8001e88 <MX_GPIO_Init+0x134>)
 8001e6e:	f001 fff1 	bl	8003e54 <HAL_GPIO_Init>

}
 8001e72:	bf00      	nop
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40010800 	.word	0x40010800
 8001e88:	40010c00 	.word	0x40010c00

08001e8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <MX_I2C1_Init+0x50>)
 8001e92:	4a13      	ldr	r2, [pc, #76]	@ (8001ee0 <MX_I2C1_Init+0x54>)
 8001e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <MX_I2C1_Init+0x50>)
 8001e98:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <MX_I2C1_Init+0x58>)
 8001e9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <MX_I2C1_Init+0x50>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <MX_I2C1_Init+0x50>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_I2C1_Init+0x50>)
 8001eaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <MX_I2C1_Init+0x50>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_I2C1_Init+0x50>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <MX_I2C1_Init+0x50>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_I2C1_Init+0x50>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ec8:	4804      	ldr	r0, [pc, #16]	@ (8001edc <MX_I2C1_Init+0x50>)
 8001eca:	f002 f987 	bl	80041dc <HAL_I2C_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ed4:	f000 f9c1 	bl	800225a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000210 	.word	0x20000210
 8001ee0:	40005400 	.word	0x40005400
 8001ee4:	000186a0 	.word	0x000186a0

08001ee8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	@ 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <HAL_I2C_MspInit+0x90>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d132      	bne.n	8001f6e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 8001f20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f26:	2312      	movs	r3, #18
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4812      	ldr	r0, [pc, #72]	@ (8001f80 <HAL_I2C_MspInit+0x98>)
 8001f36:	f001 ff8d 	bl	8003e54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_I2C_MspInit+0x9c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f50:	4a0c      	ldr	r2, [pc, #48]	@ (8001f84 <HAL_I2C_MspInit+0x9c>)
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	@ 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	40010000 	.word	0x40010000

08001f88 <main>:
static uint32_t pandian_time;

static uint8_t data_book;
static uint8_t flag;

int main(void) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f8c:	f000 ff4a 	bl	8002e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f90:	f000 f906 	bl	80021a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f94:	f7ff fede 	bl	8001d54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f98:	f7ff febe 	bl	8001d18 <MX_DMA_Init>
  MX_UART4_Init();
 8001f9c:	f000 fcb2 	bl	8002904 <MX_UART4_Init>
  MX_UART5_Init();
 8001fa0:	f000 fcda 	bl	8002958 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001fa4:	f000 fd02 	bl	80029ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001fa8:	f000 fd2a 	bl	8002a00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001fac:	f000 fd52 	bl	8002a54 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001fb0:	f7ff fe38 	bl	8001c24 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001fb4:	f7ff ff6a 	bl	8001e8c <MX_I2C1_Init>
  MX_TIM4_Init();
 8001fb8:	f000 fb66 	bl	8002688 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001fbc:	f000 faba 	bl	8002534 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001fc0:	f000 fb08 	bl	80025d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  wireless_reg_handle(&huart1, &hdma_usart1_rx);
 8001fc4:	496a      	ldr	r1, [pc, #424]	@ (8002170 <main+0x1e8>)
 8001fc6:	486b      	ldr	r0, [pc, #428]	@ (8002174 <main+0x1ec>)
 8001fc8:	f005 fbf6 	bl	80077b8 <wireless_reg_handle>
  wireless_init();
 8001fcc:	f005 fc18 	bl	8007800 <wireless_init>

  motor_uart_init();
 8001fd0:	f7fe f948 	bl	8000264 <motor_uart_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    event_datapack_process();
 8001fd4:	f005 fd62 	bl	8007a9c <event_datapack_process>
    Events_MainLogic();
 8001fd8:	f7fe f924 	bl	8000224 <Events_MainLogic>
    if (GetMoterFlag() >= 14) {
 8001fdc:	f7fe f96a 	bl	80002b4 <GetMoterFlag>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b0d      	cmp	r3, #13
 8001fe4:	ddf6      	ble.n	8001fd4 <main+0x4c>
      // LOGI("CMD %0x2", cmd);
      // start and stop check
      cmd = GetCmdType();
 8001fe6:	f005 fce5 	bl	80079b4 <GetCmdType>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b62      	ldr	r3, [pc, #392]	@ (8002178 <main+0x1f0>)
 8001ff0:	601a      	str	r2, [r3, #0]
      switch (cmd) {
 8001ff2:	4b61      	ldr	r3, [pc, #388]	@ (8002178 <main+0x1f0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2bff      	cmp	r3, #255	@ 0xff
 8001ff8:	d026      	beq.n	8002048 <main+0xc0>
 8001ffa:	2bff      	cmp	r3, #255	@ 0xff
 8001ffc:	d82b      	bhi.n	8002056 <main+0xce>
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d024      	beq.n	800204c <main+0xc4>
 8002002:	2b02      	cmp	r3, #2
 8002004:	d827      	bhi.n	8002056 <main+0xce>
 8002006:	2b00      	cmp	r3, #0
 8002008:	d013      	beq.n	8002032 <main+0xaa>
 800200a:	2b01      	cmp	r3, #1
 800200c:	d123      	bne.n	8002056 <main+0xce>
        case kWirelessIdle:
          break;
        case kWirelessStart:
          if (motor_move(30, KGoRight)) {
 800200e:	2102      	movs	r1, #2
 8002010:	201e      	movs	r0, #30
 8002012:	f005 fa1f 	bl	8007454 <motor_move>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d019      	beq.n	8002050 <main+0xc8>
            ClearCmd();
 800201c:	f005 fcbe 	bl	800799c <ClearCmd>
            pandian_flag = 1;
 8002020:	4b56      	ldr	r3, [pc, #344]	@ (800217c <main+0x1f4>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
            pandian_time = HAL_GetTick();
 8002026:	f000 ff55 	bl	8002ed4 <HAL_GetTick>
 800202a:	4603      	mov	r3, r0
 800202c:	4a54      	ldr	r2, [pc, #336]	@ (8002180 <main+0x1f8>)
 800202e:	6013      	str	r3, [r2, #0]
          }
          break;
 8002030:	e00e      	b.n	8002050 <main+0xc8>
        case kWirelessStop:
          if (motor_stop()) {
 8002032:	f005 fa61 	bl	80074f8 <motor_stop>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <main+0xcc>
            ClearCmd();
 800203c:	f005 fcae 	bl	800799c <ClearCmd>
            pandian_flag = 0xff;
 8002040:	4b4e      	ldr	r3, [pc, #312]	@ (800217c <main+0x1f4>)
 8002042:	22ff      	movs	r2, #255	@ 0xff
 8002044:	701a      	strb	r2, [r3, #0]
          }
          break;
 8002046:	e005      	b.n	8002054 <main+0xcc>
          break;
 8002048:	bf00      	nop
 800204a:	e004      	b.n	8002056 <main+0xce>
        case kBook:
          break;
 800204c:	bf00      	nop
 800204e:	e002      	b.n	8002056 <main+0xce>
          break;
 8002050:	bf00      	nop
 8002052:	e000      	b.n	8002056 <main+0xce>
          break;
 8002054:	bf00      	nop
      }
      // check process
      switch (pandian_flag) {
 8002056:	4b49      	ldr	r3, [pc, #292]	@ (800217c <main+0x1f4>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	3b01      	subs	r3, #1
 800205c:	2b04      	cmp	r3, #4
 800205e:	d87b      	bhi.n	8002158 <main+0x1d0>
 8002060:	a201      	add	r2, pc, #4	@ (adr r2, 8002068 <main+0xe0>)
 8002062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002066:	bf00      	nop
 8002068:	0800207d 	.word	0x0800207d
 800206c:	080020b1 	.word	0x080020b1
 8002070:	080020d5 	.word	0x080020d5
 8002074:	08002107 	.word	0x08002107
 8002078:	08002135 	.word	0x08002135
        case 1:
          if (has_pass_time(pandian_time) > 12000) {
 800207c:	4b40      	ldr	r3, [pc, #256]	@ (8002180 <main+0x1f8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f005 fd9f 	bl	8007bc4 <has_pass_time>
 8002086:	4603      	mov	r3, r0
 8002088:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800208c:	4293      	cmp	r3, r2
 800208e:	d965      	bls.n	800215c <main+0x1d4>
            // moter_speed_set(0);
            data_book    = 1;
 8002090:	4b3c      	ldr	r3, [pc, #240]	@ (8002184 <main+0x1fc>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
            pandian_flag = 2;
 8002096:	4b39      	ldr	r3, [pc, #228]	@ (800217c <main+0x1f4>)
 8002098:	2202      	movs	r2, #2
 800209a:	701a      	strb	r2, [r3, #0]
            LOGI("check finish %d", pandian_flag);
 800209c:	f000 ff1a 	bl	8002ed4 <HAL_GetTick>
 80020a0:	4601      	mov	r1, r0
 80020a2:	4b36      	ldr	r3, [pc, #216]	@ (800217c <main+0x1f4>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4a38      	ldr	r2, [pc, #224]	@ (8002188 <main+0x200>)
 80020a8:	4838      	ldr	r0, [pc, #224]	@ (800218c <main+0x204>)
 80020aa:	f005 fe65 	bl	8007d78 <iprintf>
          }

          break;
 80020ae:	e055      	b.n	800215c <main+0x1d4>
        case 2:
          if (motor_stop()) {
 80020b0:	f005 fa22 	bl	80074f8 <motor_stop>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d052      	beq.n	8002160 <main+0x1d8>
            pandian_flag = 3;
 80020ba:	4b30      	ldr	r3, [pc, #192]	@ (800217c <main+0x1f4>)
 80020bc:	2203      	movs	r2, #3
 80020be:	701a      	strb	r2, [r3, #0]
            // LOGI("Back");
            LOGI("Back %d ", pandian_flag);
 80020c0:	f000 ff08 	bl	8002ed4 <HAL_GetTick>
 80020c4:	4601      	mov	r1, r0
 80020c6:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <main+0x1f4>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002188 <main+0x200>)
 80020cc:	4830      	ldr	r0, [pc, #192]	@ (8002190 <main+0x208>)
 80020ce:	f005 fe53 	bl	8007d78 <iprintf>
          }

          break;
 80020d2:	e045      	b.n	8002160 <main+0x1d8>
        case 3:
          if (motor_move(30, KGoLeft)) {
 80020d4:	2101      	movs	r1, #1
 80020d6:	201e      	movs	r0, #30
 80020d8:	f005 f9bc 	bl	8007454 <motor_move>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d040      	beq.n	8002164 <main+0x1dc>
            pandian_time = HAL_GetTick();
 80020e2:	f000 fef7 	bl	8002ed4 <HAL_GetTick>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4a25      	ldr	r2, [pc, #148]	@ (8002180 <main+0x1f8>)
 80020ea:	6013      	str	r3, [r2, #0]
            pandian_flag = 4;
 80020ec:	4b23      	ldr	r3, [pc, #140]	@ (800217c <main+0x1f4>)
 80020ee:	2204      	movs	r2, #4
 80020f0:	701a      	strb	r2, [r3, #0]

            LOGI("Back move %d", pandian_flag);
 80020f2:	f000 feef 	bl	8002ed4 <HAL_GetTick>
 80020f6:	4601      	mov	r1, r0
 80020f8:	4b20      	ldr	r3, [pc, #128]	@ (800217c <main+0x1f4>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4a22      	ldr	r2, [pc, #136]	@ (8002188 <main+0x200>)
 80020fe:	4825      	ldr	r0, [pc, #148]	@ (8002194 <main+0x20c>)
 8002100:	f005 fe3a 	bl	8007d78 <iprintf>
          }

          break;
 8002104:	e02e      	b.n	8002164 <main+0x1dc>
        case 4:
          if (has_pass_time(pandian_time) > 12000) {
 8002106:	4b1e      	ldr	r3, [pc, #120]	@ (8002180 <main+0x1f8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f005 fd5a 	bl	8007bc4 <has_pass_time>
 8002110:	4603      	mov	r3, r0
 8002112:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8002116:	4293      	cmp	r3, r2
 8002118:	d926      	bls.n	8002168 <main+0x1e0>
            pandian_flag = 5;
 800211a:	4b18      	ldr	r3, [pc, #96]	@ (800217c <main+0x1f4>)
 800211c:	2205      	movs	r2, #5
 800211e:	701a      	strb	r2, [r3, #0]
            LOGI("back finish %d", pandian_flag);
 8002120:	f000 fed8 	bl	8002ed4 <HAL_GetTick>
 8002124:	4601      	mov	r1, r0
 8002126:	4b15      	ldr	r3, [pc, #84]	@ (800217c <main+0x1f4>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4a17      	ldr	r2, [pc, #92]	@ (8002188 <main+0x200>)
 800212c:	481a      	ldr	r0, [pc, #104]	@ (8002198 <main+0x210>)
 800212e:	f005 fe23 	bl	8007d78 <iprintf>
          }

          break;
 8002132:	e019      	b.n	8002168 <main+0x1e0>
        case 5:
          if (motor_stop()) {
 8002134:	f005 f9e0 	bl	80074f8 <motor_stop>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d016      	beq.n	800216c <main+0x1e4>
            pandian_flag = 6;
 800213e:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <main+0x1f4>)
 8002140:	2206      	movs	r2, #6
 8002142:	701a      	strb	r2, [r3, #0]
            LOGI("OK %d ", pandian_flag);
 8002144:	f000 fec6 	bl	8002ed4 <HAL_GetTick>
 8002148:	4601      	mov	r1, r0
 800214a:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <main+0x1f4>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4a0e      	ldr	r2, [pc, #56]	@ (8002188 <main+0x200>)
 8002150:	4812      	ldr	r0, [pc, #72]	@ (800219c <main+0x214>)
 8002152:	f005 fe11 	bl	8007d78 <iprintf>
          }

          break;
 8002156:	e009      	b.n	800216c <main+0x1e4>
        default:
          // if (flag == 1) LOGI(" %d ", pandian_flag);
          break;
 8002158:	bf00      	nop
 800215a:	e73b      	b.n	8001fd4 <main+0x4c>
          break;
 800215c:	bf00      	nop
 800215e:	e739      	b.n	8001fd4 <main+0x4c>
          break;
 8002160:	bf00      	nop
 8002162:	e737      	b.n	8001fd4 <main+0x4c>
          break;
 8002164:	bf00      	nop
 8002166:	e735      	b.n	8001fd4 <main+0x4c>
          break;
 8002168:	bf00      	nop
 800216a:	e733      	b.n	8001fd4 <main+0x4c>
          break;
 800216c:	bf00      	nop
    event_datapack_process();
 800216e:	e731      	b.n	8001fd4 <main+0x4c>
 8002170:	200004b8 	.word	0x200004b8
 8002174:	200003e0 	.word	0x200003e0
 8002178:	20000264 	.word	0x20000264
 800217c:	20000268 	.word	0x20000268
 8002180:	2000026c 	.word	0x2000026c
 8002184:	20000270 	.word	0x20000270
 8002188:	08008f5c 	.word	0x08008f5c
 800218c:	08008b28 	.word	0x08008b28
 8002190:	08008b54 	.word	0x08008b54
 8002194:	08008b78 	.word	0x08008b78
 8002198:	08008ba0 	.word	0x08008ba0
 800219c:	08008bcc 	.word	0x08008bcc

080021a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b096      	sub	sp, #88	@ 0x58
 80021a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef       RCC_OscInitStruct = {0};
 80021a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021aa:	2228      	movs	r2, #40	@ 0x28
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f005 fe37 	bl	8007e22 <memset>
  RCC_ClkInitTypeDef       RCC_ClkInitStruct = {0};
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit     = {0};
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]
 80021d2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021d4:	2301      	movs	r3, #1
 80021d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 80021d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021de:	2300      	movs	r3, #0
 80021e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 80021e2:	2301      	movs	r3, #1
 80021e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 80021e6:	2302      	movs	r3, #2
 80021e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80021ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL6;
 80021f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 f932 	bl	8004464 <HAL_RCC_OscConfig>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <SystemClock_Config+0x6a>
    Error_Handler();
 8002206:	f000 f828 	bl	800225a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800220a:	230f      	movs	r3, #15
 800220c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800220e:	2302      	movs	r3, #2
 8002210:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800221a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	2102      	movs	r1, #2
 8002226:	4618      	mov	r0, r3
 8002228:	f002 fb9e 	bl	8004968 <HAL_RCC_ClockConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <SystemClock_Config+0x96>
    Error_Handler();
 8002232:	f000 f812 	bl	800225a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002236:	2302      	movs	r3, #2
 8002238:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection    = RCC_ADCPCLK2_DIV6;
 800223a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800223e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	4618      	mov	r0, r3
 8002244:	f002 fd20 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <SystemClock_Config+0xb2>
    Error_Handler();
 800224e:	f000 f804 	bl	800225a <Error_Handler>
  }
}
 8002252:	bf00      	nop
 8002254:	3758      	adds	r7, #88	@ 0x58
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800225e:	b672      	cpsid	i
}
 8002260:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002262:	bf00      	nop
 8002264:	e7fd      	b.n	8002262 <Error_Handler+0x8>
	...

08002268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800226e:	4b15      	ldr	r3, [pc, #84]	@ (80022c4 <HAL_MspInit+0x5c>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	4a14      	ldr	r2, [pc, #80]	@ (80022c4 <HAL_MspInit+0x5c>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6193      	str	r3, [r2, #24]
 800227a:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <HAL_MspInit+0x5c>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <HAL_MspInit+0x5c>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4a0e      	ldr	r2, [pc, #56]	@ (80022c4 <HAL_MspInit+0x5c>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002290:	61d3      	str	r3, [r2, #28]
 8002292:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <HAL_MspInit+0x5c>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_MspInit+0x60>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <HAL_MspInit+0x60>)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010000 	.word	0x40010000

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <NMI_Handler+0x4>

080022d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <HardFault_Handler+0x4>

080022dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <MemManage_Handler+0x4>

080022e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <BusFault_Handler+0x4>

080022ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <UsageFault_Handler+0x4>

080022f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231c:	f000 fdc8 	bl	8002eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}

08002324 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002328:	4802      	ldr	r0, [pc, #8]	@ (8002334 <DMA1_Channel5_IRQHandler+0x10>)
 800232a:	f001 fb29 	bl	8003980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200004b8 	.word	0x200004b8

08002338 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800233e:	f002 ffe7 	bl	8005310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000278 	.word	0x20000278

0800234c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <TIM3_IRQHandler+0x10>)
 8002352:	f002 ffdd 	bl	8005310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200002c0 	.word	0x200002c0

08002360 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <TIM4_IRQHandler+0x10>)
 8002366:	f002 ffd3 	bl	8005310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000308 	.word	0x20000308

08002374 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <USART1_IRQHandler+0x10>)
 800237a:	f004 f91d 	bl	80065b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200003e0 	.word	0x200003e0

08002388 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <USART2_IRQHandler+0x10>)
 800238e:	f004 f913 	bl	80065b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000428 	.word	0x20000428

0800239c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <USART3_IRQHandler+0x10>)
 80023a2:	f004 f909 	bl	80065b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000470 	.word	0x20000470

080023b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80023b4:	4802      	ldr	r0, [pc, #8]	@ (80023c0 <UART4_IRQHandler+0x10>)
 80023b6:	f004 f8ff 	bl	80065b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000350 	.word	0x20000350

080023c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80023c8:	4802      	ldr	r0, [pc, #8]	@ (80023d4 <UART5_IRQHandler+0x10>)
 80023ca:	f004 f8f5 	bl	80065b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000398 	.word	0x20000398

080023d8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
	}
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e00a      	b.n	8002412 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023fc:	f3af 8000 	nop.w
 8002400:	4601      	mov	r1, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	60ba      	str	r2, [r7, #8]
 8002408:	b2ca      	uxtb	r2, r1
 800240a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	dbf0      	blt.n	80023fc <_read+0x12>
  }

  return len;
 800241a:	687b      	ldr	r3, [r7, #4]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e009      	b.n	800244a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	60ba      	str	r2, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f004 fff6 	bl	8007430 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3301      	adds	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	429a      	cmp	r2, r3
 8002450:	dbf1      	blt.n	8002436 <_write+0x12>
  }
  return len;
 8002452:	687b      	ldr	r3, [r7, #4]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_close>:

int _close(int file)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002482:	605a      	str	r2, [r3, #4]
  return 0;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <_isatty>:

int _isatty(int file)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002498:	2301      	movs	r3, #1
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c4:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <_sbrk+0x5c>)
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <_sbrk+0x60>)
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <_sbrk+0x64>)
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <_sbrk+0x68>)
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d207      	bcs.n	80024fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ec:	f005 fce8 	bl	8007ec0 <__errno>
 80024f0:	4603      	mov	r3, r0
 80024f2:	220c      	movs	r2, #12
 80024f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	e009      	b.n	8002510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002502:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <_sbrk+0x64>)
 800250c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20018000 	.word	0x20018000
 800251c:	00000400 	.word	0x00000400
 8002520:	20000274 	.word	0x20000274
 8002524:	200007c8 	.word	0x200007c8

08002528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253a:	f107 0308 	add.w	r3, r7, #8
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002548:	463b      	mov	r3, r7
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002550:	4b1e      	ldr	r3, [pc, #120]	@ (80025cc <MX_TIM1_Init+0x98>)
 8002552:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <MX_TIM1_Init+0x9c>)
 8002554:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002556:	4b1d      	ldr	r3, [pc, #116]	@ (80025cc <MX_TIM1_Init+0x98>)
 8002558:	2247      	movs	r2, #71	@ 0x47
 800255a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255c:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <MX_TIM1_Init+0x98>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002562:	4b1a      	ldr	r3, [pc, #104]	@ (80025cc <MX_TIM1_Init+0x98>)
 8002564:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002568:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <MX_TIM1_Init+0x98>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002570:	4b16      	ldr	r3, [pc, #88]	@ (80025cc <MX_TIM1_Init+0x98>)
 8002572:	2200      	movs	r2, #0
 8002574:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <MX_TIM1_Init+0x98>)
 8002578:	2280      	movs	r2, #128	@ 0x80
 800257a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800257c:	4813      	ldr	r0, [pc, #76]	@ (80025cc <MX_TIM1_Init+0x98>)
 800257e:	f002 fc39 	bl	8004df4 <HAL_TIM_Base_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002588:	f7ff fe67 	bl	800225a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002590:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	4619      	mov	r1, r3
 8002598:	480c      	ldr	r0, [pc, #48]	@ (80025cc <MX_TIM1_Init+0x98>)
 800259a:	f003 f91f 	bl	80057dc <HAL_TIM_ConfigClockSource>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80025a4:	f7ff fe59 	bl	800225a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a8:	2300      	movs	r3, #0
 80025aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025b0:	463b      	mov	r3, r7
 80025b2:	4619      	mov	r1, r3
 80025b4:	4805      	ldr	r0, [pc, #20]	@ (80025cc <MX_TIM1_Init+0x98>)
 80025b6:	f003 fe1d 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80025c0:	f7ff fe4b 	bl	800225a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000278 	.word	0x20000278
 80025d0:	40012c00 	.word	0x40012c00

080025d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	@ 0x28
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025da:	f107 0320 	add.w	r3, r7, #32
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]
 80025f2:	615a      	str	r2, [r3, #20]
 80025f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025f6:	4b22      	ldr	r3, [pc, #136]	@ (8002680 <MX_TIM3_Init+0xac>)
 80025f8:	4a22      	ldr	r2, [pc, #136]	@ (8002684 <MX_TIM3_Init+0xb0>)
 80025fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80025fc:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <MX_TIM3_Init+0xac>)
 80025fe:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002602:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002604:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <MX_TIM3_Init+0xac>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <MX_TIM3_Init+0xac>)
 800260c:	2209      	movs	r2, #9
 800260e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002610:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <MX_TIM3_Init+0xac>)
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002616:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <MX_TIM3_Init+0xac>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800261c:	4818      	ldr	r0, [pc, #96]	@ (8002680 <MX_TIM3_Init+0xac>)
 800261e:	f002 fca7 	bl	8004f70 <HAL_TIM_PWM_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002628:	f7ff fe17 	bl	800225a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262c:	2300      	movs	r3, #0
 800262e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002634:	f107 0320 	add.w	r3, r7, #32
 8002638:	4619      	mov	r1, r3
 800263a:	4811      	ldr	r0, [pc, #68]	@ (8002680 <MX_TIM3_Init+0xac>)
 800263c:	f003 fdda 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002646:	f7ff fe08 	bl	800225a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800264a:	2360      	movs	r3, #96	@ 0x60
 800264c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	2204      	movs	r2, #4
 800265e:	4619      	mov	r1, r3
 8002660:	4807      	ldr	r0, [pc, #28]	@ (8002680 <MX_TIM3_Init+0xac>)
 8002662:	f002 fff9 	bl	8005658 <HAL_TIM_PWM_ConfigChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800266c:	f7ff fdf5 	bl	800225a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002670:	4803      	ldr	r0, [pc, #12]	@ (8002680 <MX_TIM3_Init+0xac>)
 8002672:	f000 f901 	bl	8002878 <HAL_TIM_MspPostInit>

}
 8002676:	bf00      	nop
 8002678:	3728      	adds	r7, #40	@ 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200002c0 	.word	0x200002c0
 8002684:	40000400 	.word	0x40000400

08002688 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	@ 0x28
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268e:	f107 0318 	add.w	r3, r7, #24
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026a6:	463b      	mov	r3, r7
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002760 <MX_TIM4_Init+0xd8>)
 80026b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002764 <MX_TIM4_Init+0xdc>)
 80026b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80026b8:	4b29      	ldr	r3, [pc, #164]	@ (8002760 <MX_TIM4_Init+0xd8>)
 80026ba:	2247      	movs	r2, #71	@ 0x47
 80026bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b28      	ldr	r3, [pc, #160]	@ (8002760 <MX_TIM4_Init+0xd8>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80026c4:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <MX_TIM4_Init+0xd8>)
 80026c6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80026ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b24      	ldr	r3, [pc, #144]	@ (8002760 <MX_TIM4_Init+0xd8>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026d2:	4b23      	ldr	r3, [pc, #140]	@ (8002760 <MX_TIM4_Init+0xd8>)
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026d8:	4821      	ldr	r0, [pc, #132]	@ (8002760 <MX_TIM4_Init+0xd8>)
 80026da:	f002 fb8b 	bl	8004df4 <HAL_TIM_Base_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80026e4:	f7ff fdb9 	bl	800225a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026ee:	f107 0318 	add.w	r3, r7, #24
 80026f2:	4619      	mov	r1, r3
 80026f4:	481a      	ldr	r0, [pc, #104]	@ (8002760 <MX_TIM4_Init+0xd8>)
 80026f6:	f003 f871 	bl	80057dc <HAL_TIM_ConfigClockSource>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002700:	f7ff fdab 	bl	800225a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002704:	4816      	ldr	r0, [pc, #88]	@ (8002760 <MX_TIM4_Init+0xd8>)
 8002706:	f002 fc82 	bl	800500e <HAL_TIM_IC_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002710:	f7ff fda3 	bl	800225a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4619      	mov	r1, r3
 8002722:	480f      	ldr	r0, [pc, #60]	@ (8002760 <MX_TIM4_Init+0xd8>)
 8002724:	f003 fd66 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800272e:	f7ff fd94 	bl	800225a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002732:	2300      	movs	r3, #0
 8002734:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002736:	2301      	movs	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002742:	463b      	mov	r3, r7
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	4805      	ldr	r0, [pc, #20]	@ (8002760 <MX_TIM4_Init+0xd8>)
 800274a:	f002 fee9 	bl	8005520 <HAL_TIM_IC_ConfigChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002754:	f7ff fd81 	bl	800225a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002758:	bf00      	nop
 800275a:	3728      	adds	r7, #40	@ 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000308 	.word	0x20000308
 8002764:	40000800 	.word	0x40000800

08002768 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0318 	add.w	r3, r7, #24
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a26      	ldr	r2, [pc, #152]	@ (800281c <HAL_TIM_Base_MspInit+0xb4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d114      	bne.n	80027b2 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002788:	4b25      	ldr	r3, [pc, #148]	@ (8002820 <HAL_TIM_Base_MspInit+0xb8>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a24      	ldr	r2, [pc, #144]	@ (8002820 <HAL_TIM_Base_MspInit+0xb8>)
 800278e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <HAL_TIM_Base_MspInit+0xb8>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2101      	movs	r1, #1
 80027a4:	2019      	movs	r0, #25
 80027a6:	f000 fe9a 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027aa:	2019      	movs	r0, #25
 80027ac:	f000 feb3 	bl	8003516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027b0:	e030      	b.n	8002814 <HAL_TIM_Base_MspInit+0xac>
  else if(tim_baseHandle->Instance==TIM4)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002824 <HAL_TIM_Base_MspInit+0xbc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d12b      	bne.n	8002814 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027bc:	4b18      	ldr	r3, [pc, #96]	@ (8002820 <HAL_TIM_Base_MspInit+0xb8>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <HAL_TIM_Base_MspInit+0xb8>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	61d3      	str	r3, [r2, #28]
 80027c8:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <HAL_TIM_Base_MspInit+0xb8>)
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d4:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <HAL_TIM_Base_MspInit+0xb8>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a11      	ldr	r2, [pc, #68]	@ (8002820 <HAL_TIM_Base_MspInit+0xb8>)
 80027da:	f043 0308 	orr.w	r3, r3, #8
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <HAL_TIM_Base_MspInit+0xb8>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HallCount_BLDCMotor_Pin;
 80027ec:	2340      	movs	r3, #64	@ 0x40
 80027ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HallCount_BLDCMotor_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 0318 	add.w	r3, r7, #24
 80027fc:	4619      	mov	r1, r3
 80027fe:	480a      	ldr	r0, [pc, #40]	@ (8002828 <HAL_TIM_Base_MspInit+0xc0>)
 8002800:	f001 fb28 	bl	8003e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	201e      	movs	r0, #30
 800280a:	f000 fe68 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800280e:	201e      	movs	r0, #30
 8002810:	f000 fe81 	bl	8003516 <HAL_NVIC_EnableIRQ>
}
 8002814:	bf00      	nop
 8002816:	3728      	adds	r7, #40	@ 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40000800 	.word	0x40000800
 8002828:	40010c00 	.word	0x40010c00

0800282c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0d      	ldr	r2, [pc, #52]	@ (8002870 <HAL_TIM_PWM_MspInit+0x44>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d113      	bne.n	8002866 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800283e:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <HAL_TIM_PWM_MspInit+0x48>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a0c      	ldr	r2, [pc, #48]	@ (8002874 <HAL_TIM_PWM_MspInit+0x48>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <HAL_TIM_PWM_MspInit+0x48>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	201d      	movs	r0, #29
 800285c:	f000 fe3f 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002860:	201d      	movs	r0, #29
 8002862:	f000 fe58 	bl	8003516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40000400 	.word	0x40000400
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a18      	ldr	r2, [pc, #96]	@ (80028f4 <HAL_TIM_MspPostInit+0x7c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d129      	bne.n	80028ec <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002898:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <HAL_TIM_MspPostInit+0x80>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4a16      	ldr	r2, [pc, #88]	@ (80028f8 <HAL_TIM_MspPostInit+0x80>)
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	6193      	str	r3, [r2, #24]
 80028a4:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <HAL_TIM_MspPostInit+0x80>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Speed_PWMCtl_BLDCMotor_Pin;
 80028b0:	2320      	movs	r3, #32
 80028b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2302      	movs	r3, #2
 80028ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Speed_PWMCtl_BLDCMotor_GPIO_Port, &GPIO_InitStruct);
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	4619      	mov	r1, r3
 80028c2:	480e      	ldr	r0, [pc, #56]	@ (80028fc <HAL_TIM_MspPostInit+0x84>)
 80028c4:	f001 fac6 	bl	8003e54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80028c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002900 <HAL_TIM_MspPostInit+0x88>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	4a06      	ldr	r2, [pc, #24]	@ (8002900 <HAL_TIM_MspPostInit+0x88>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010c00 	.word	0x40010c00
 8002900:	40010000 	.word	0x40010000

08002904 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;
DMA_HandleTypeDef  hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void) {
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance          = UART4;
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <MX_UART4_Init+0x4c>)
 800290a:	4a12      	ldr	r2, [pc, #72]	@ (8002954 <MX_UART4_Init+0x50>)
 800290c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate     = 230400;
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <MX_UART4_Init+0x4c>)
 8002910:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002914:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength   = UART_WORDLENGTH_8B;
 8002916:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <MX_UART4_Init+0x4c>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits     = UART_STOPBITS_1;
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <MX_UART4_Init+0x4c>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity       = UART_PARITY_NONE;
 8002922:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <MX_UART4_Init+0x4c>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode         = UART_MODE_TX_RX;
 8002928:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <MX_UART4_Init+0x4c>)
 800292a:	220c      	movs	r2, #12
 800292c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800292e:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <MX_UART4_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <MX_UART4_Init+0x4c>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK) {
 800293a:	4805      	ldr	r0, [pc, #20]	@ (8002950 <MX_UART4_Init+0x4c>)
 800293c:	f003 fce6 	bl	800630c <HAL_UART_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_UART4_Init+0x46>
    Error_Handler();
 8002946:	f7ff fc88 	bl	800225a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000350 	.word	0x20000350
 8002954:	40004c00 	.word	0x40004c00

08002958 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void) {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance          = UART5;
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <MX_UART5_Init+0x4c>)
 800295e:	4a12      	ldr	r2, [pc, #72]	@ (80029a8 <MX_UART5_Init+0x50>)
 8002960:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate     = 230400;
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <MX_UART5_Init+0x4c>)
 8002964:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002968:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength   = UART_WORDLENGTH_8B;
 800296a:	4b0e      	ldr	r3, [pc, #56]	@ (80029a4 <MX_UART5_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits     = UART_STOPBITS_1;
 8002970:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <MX_UART5_Init+0x4c>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity       = UART_PARITY_NONE;
 8002976:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <MX_UART5_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode         = UART_MODE_TX_RX;
 800297c:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <MX_UART5_Init+0x4c>)
 800297e:	220c      	movs	r2, #12
 8002980:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002982:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <MX_UART5_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002988:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <MX_UART5_Init+0x4c>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK) {
 800298e:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <MX_UART5_Init+0x4c>)
 8002990:	f003 fcbc 	bl	800630c <HAL_UART_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_UART5_Init+0x46>
    Error_Handler();
 800299a:	f7ff fc5e 	bl	800225a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000398 	.word	0x20000398
 80029a8:	40005000 	.word	0x40005000

080029ac <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance          = USART1;
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <MX_USART1_UART_Init+0x4c>)
 80029b2:	4a12      	ldr	r2, [pc, #72]	@ (80029fc <MX_USART1_UART_Init+0x50>)
 80029b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 9600;
 80029b6:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <MX_USART1_UART_Init+0x4c>)
 80029b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80029bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 80029be:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <MX_USART1_UART_Init+0x4c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <MX_USART1_UART_Init+0x4c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 80029ca:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <MX_USART1_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 80029d0:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <MX_USART1_UART_Init+0x4c>)
 80029d2:	220c      	movs	r2, #12
 80029d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80029d6:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <MX_USART1_UART_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <MX_USART1_UART_Init+0x4c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 80029e2:	4805      	ldr	r0, [pc, #20]	@ (80029f8 <MX_USART1_UART_Init+0x4c>)
 80029e4:	f003 fc92 	bl	800630c <HAL_UART_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_USART1_UART_Init+0x46>
    Error_Handler();
 80029ee:	f7ff fc34 	bl	800225a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200003e0 	.word	0x200003e0
 80029fc:	40013800 	.word	0x40013800

08002a00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <MX_USART2_UART_Init+0x4c>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	@ (8002a50 <MX_USART2_UART_Init+0x50>)
 8002a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 38400;
 8002a0a:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <MX_USART2_UART_Init+0x4c>)
 8002a0c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8002a12:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <MX_USART2_UART_Init+0x4c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <MX_USART2_UART_Init+0x4c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <MX_USART2_UART_Init+0x4c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8002a24:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <MX_USART2_UART_Init+0x4c>)
 8002a26:	220c      	movs	r2, #12
 8002a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002a2a:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <MX_USART2_UART_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a30:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <MX_USART2_UART_Init+0x4c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002a36:	4805      	ldr	r0, [pc, #20]	@ (8002a4c <MX_USART2_UART_Init+0x4c>)
 8002a38:	f003 fc68 	bl	800630c <HAL_UART_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8002a42:	f7ff fc0a 	bl	800225a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000428 	.word	0x20000428
 8002a50:	40004400 	.word	0x40004400

08002a54 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance          = USART3;
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <MX_USART3_UART_Init+0x4c>)
 8002a5a:	4a12      	ldr	r2, [pc, #72]	@ (8002aa4 <MX_USART3_UART_Init+0x50>)
 8002a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate     = 115200;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <MX_USART3_UART_Init+0x4c>)
 8002a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <MX_USART3_UART_Init+0x4c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits     = UART_STOPBITS_1;
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <MX_USART3_UART_Init+0x4c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity       = UART_PARITY_NONE;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <MX_USART3_UART_Init+0x4c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode         = UART_MODE_TX_RX;
 8002a78:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <MX_USART3_UART_Init+0x4c>)
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <MX_USART3_UART_Init+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <MX_USART3_UART_Init+0x4c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002a8a:	4805      	ldr	r0, [pc, #20]	@ (8002aa0 <MX_USART3_UART_Init+0x4c>)
 8002a8c:	f003 fc3e 	bl	800630c <HAL_UART_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8002a96:	f7ff fbe0 	bl	800225a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000470 	.word	0x20000470
 8002aa4:	40004800 	.word	0x40004800

08002aa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b092      	sub	sp, #72	@ 0x48
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
  if (uartHandle->Instance == UART4) {
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a96      	ldr	r2, [pc, #600]	@ (8002d1c <HAL_UART_MspInit+0x274>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d13a      	bne.n	8002b3e <HAL_UART_MspInit+0x96>
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ac8:	4b95      	ldr	r3, [pc, #596]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	4a94      	ldr	r2, [pc, #592]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002ace:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ad2:	61d3      	str	r3, [r2, #28]
 8002ad4:	4b92      	ldr	r3, [pc, #584]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae0:	4b8f      	ldr	r3, [pc, #572]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002ae6:	f043 0310 	orr.w	r3, r3, #16
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b8c      	ldr	r3, [pc, #560]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin   = GPIO_PIN_10;
 8002af8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002afc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4885      	ldr	r0, [pc, #532]	@ (8002d24 <HAL_UART_MspInit+0x27c>)
 8002b0e:	f001 f9a1 	bl	8003e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 8002b12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b16:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b24:	4619      	mov	r1, r3
 8002b26:	487f      	ldr	r0, [pc, #508]	@ (8002d24 <HAL_UART_MspInit+0x27c>)
 8002b28:	f001 f994 	bl	8003e54 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2100      	movs	r1, #0
 8002b30:	2034      	movs	r0, #52	@ 0x34
 8002b32:	f000 fcd4 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002b36:	2034      	movs	r0, #52	@ 0x34
 8002b38:	f000 fced 	bl	8003516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b3c:	e141      	b.n	8002dc2 <HAL_UART_MspInit+0x31a>
  } else if (uartHandle->Instance == UART5) {
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a79      	ldr	r2, [pc, #484]	@ (8002d28 <HAL_UART_MspInit+0x280>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d145      	bne.n	8002bd4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b48:	4b75      	ldr	r3, [pc, #468]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	4a74      	ldr	r2, [pc, #464]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b52:	61d3      	str	r3, [r2, #28]
 8002b54:	4b72      	ldr	r3, [pc, #456]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b60:	4b6f      	ldr	r3, [pc, #444]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4a6e      	ldr	r2, [pc, #440]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002b66:	f043 0310 	orr.w	r3, r3, #16
 8002b6a:	6193      	str	r3, [r2, #24]
 8002b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b78:	4b69      	ldr	r3, [pc, #420]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a68      	ldr	r2, [pc, #416]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002b7e:	f043 0320 	orr.w	r3, r3, #32
 8002b82:	6193      	str	r3, [r2, #24]
 8002b84:	4b66      	ldr	r3, [pc, #408]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin   = GPIO_PIN_12;
 8002b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b94:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	485f      	ldr	r0, [pc, #380]	@ (8002d24 <HAL_UART_MspInit+0x27c>)
 8002ba6:	f001 f955 	bl	8003e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = GPIO_PIN_2;
 8002baa:	2304      	movs	r3, #4
 8002bac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bb6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bba:	4619      	mov	r1, r3
 8002bbc:	485b      	ldr	r0, [pc, #364]	@ (8002d2c <HAL_UART_MspInit+0x284>)
 8002bbe:	f001 f949 	bl	8003e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2035      	movs	r0, #53	@ 0x35
 8002bc8:	f000 fc89 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002bcc:	2035      	movs	r0, #53	@ 0x35
 8002bce:	f000 fca2 	bl	8003516 <HAL_NVIC_EnableIRQ>
}
 8002bd2:	e0f6      	b.n	8002dc2 <HAL_UART_MspInit+0x31a>
  } else if (uartHandle->Instance == USART1) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a55      	ldr	r2, [pc, #340]	@ (8002d30 <HAL_UART_MspInit+0x288>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d160      	bne.n	8002ca0 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bde:	4b50      	ldr	r3, [pc, #320]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	4a4f      	ldr	r2, [pc, #316]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be8:	6193      	str	r3, [r2, #24]
 8002bea:	4b4d      	ldr	r3, [pc, #308]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	4a49      	ldr	r2, [pc, #292]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6193      	str	r3, [r2, #24]
 8002c02:	4b47      	ldr	r3, [pc, #284]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	61fb      	str	r3, [r7, #28]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin   = AndroidSerial_TX_Pin;
 8002c0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c12:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(AndroidSerial_TX_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c20:	4619      	mov	r1, r3
 8002c22:	4844      	ldr	r0, [pc, #272]	@ (8002d34 <HAL_UART_MspInit+0x28c>)
 8002c24:	f001 f916 	bl	8003e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = AndroidSerial_RX_Pin;
 8002c28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(AndroidSerial_RX_GPIO_Port, &GPIO_InitStruct);
 8002c36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	483d      	ldr	r0, [pc, #244]	@ (8002d34 <HAL_UART_MspInit+0x28c>)
 8002c3e:	f001 f909 	bl	8003e54 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8002c42:	4b3d      	ldr	r3, [pc, #244]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c44:	4a3d      	ldr	r2, [pc, #244]	@ (8002d3c <HAL_UART_MspInit+0x294>)
 8002c46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002c48:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002c54:	4b38      	ldr	r3, [pc, #224]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c56:	2280      	movs	r2, #128	@ 0x80
 8002c58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c5a:	4b37      	ldr	r3, [pc, #220]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002c60:	4b35      	ldr	r3, [pc, #212]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode                = DMA_NORMAL;
 8002c66:	4b34      	ldr	r3, [pc, #208]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8002c6c:	4b32      	ldr	r3, [pc, #200]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK) {
 8002c72:	4831      	ldr	r0, [pc, #196]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c74:	f000 fc6a 	bl	800354c <HAL_DMA_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8002c7e:	f7ff faec 	bl	800225a <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2c      	ldr	r2, [pc, #176]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c88:	4a2b      	ldr	r2, [pc, #172]	@ (8002d38 <HAL_UART_MspInit+0x290>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	2025      	movs	r0, #37	@ 0x25
 8002c94:	f000 fc23 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c98:	2025      	movs	r0, #37	@ 0x25
 8002c9a:	f000 fc3c 	bl	8003516 <HAL_NVIC_EnableIRQ>
}
 8002c9e:	e090      	b.n	8002dc2 <HAL_UART_MspInit+0x31a>
  } else if (uartHandle->Instance == USART2) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a26      	ldr	r2, [pc, #152]	@ (8002d40 <HAL_UART_MspInit+0x298>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d14c      	bne.n	8002d44 <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002caa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4a1c      	ldr	r2, [pc, #112]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb4:	61d3      	str	r3, [r2, #28]
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	4b17      	ldr	r3, [pc, #92]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4a16      	ldr	r2, [pc, #88]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6193      	str	r3, [r2, #24]
 8002cce:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <HAL_UART_MspInit+0x278>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin   = DebugSerial_TX_Pin;
 8002cda:	2304      	movs	r3, #4
 8002cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(DebugSerial_TX_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cea:	4619      	mov	r1, r3
 8002cec:	4811      	ldr	r0, [pc, #68]	@ (8002d34 <HAL_UART_MspInit+0x28c>)
 8002cee:	f001 f8b1 	bl	8003e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = DebugSerial_RX_Pin;
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(DebugSerial_RX_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d02:	4619      	mov	r1, r3
 8002d04:	480b      	ldr	r0, [pc, #44]	@ (8002d34 <HAL_UART_MspInit+0x28c>)
 8002d06:	f001 f8a5 	bl	8003e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	2026      	movs	r0, #38	@ 0x26
 8002d10:	f000 fbe5 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d14:	2026      	movs	r0, #38	@ 0x26
 8002d16:	f000 fbfe 	bl	8003516 <HAL_NVIC_EnableIRQ>
}
 8002d1a:	e052      	b.n	8002dc2 <HAL_UART_MspInit+0x31a>
 8002d1c:	40004c00 	.word	0x40004c00
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40011000 	.word	0x40011000
 8002d28:	40005000 	.word	0x40005000
 8002d2c:	40011400 	.word	0x40011400
 8002d30:	40013800 	.word	0x40013800
 8002d34:	40010800 	.word	0x40010800
 8002d38:	200004b8 	.word	0x200004b8
 8002d3c:	40020058 	.word	0x40020058
 8002d40:	40004400 	.word	0x40004400
  } else if (uartHandle->Instance == USART3) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a20      	ldr	r2, [pc, #128]	@ (8002dcc <HAL_UART_MspInit+0x324>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d139      	bne.n	8002dc2 <HAL_UART_MspInit+0x31a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d4e:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <HAL_UART_MspInit+0x328>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd0 <HAL_UART_MspInit+0x328>)
 8002d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <HAL_UART_MspInit+0x328>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <HAL_UART_MspInit+0x328>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	4a19      	ldr	r2, [pc, #100]	@ (8002dd0 <HAL_UART_MspInit+0x328>)
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	6193      	str	r3, [r2, #24]
 8002d72:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <HAL_UART_MspInit+0x328>)
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin   = GPIO_PIN_10;
 8002d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d82:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d90:	4619      	mov	r1, r3
 8002d92:	4810      	ldr	r0, [pc, #64]	@ (8002dd4 <HAL_UART_MspInit+0x32c>)
 8002d94:	f001 f85e 	bl	8003e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 8002d98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002daa:	4619      	mov	r1, r3
 8002dac:	4809      	ldr	r0, [pc, #36]	@ (8002dd4 <HAL_UART_MspInit+0x32c>)
 8002dae:	f001 f851 	bl	8003e54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2100      	movs	r1, #0
 8002db6:	2027      	movs	r0, #39	@ 0x27
 8002db8:	f000 fb91 	bl	80034de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002dbc:	2027      	movs	r0, #39	@ 0x27
 8002dbe:	f000 fbaa 	bl	8003516 <HAL_NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3748      	adds	r7, #72	@ 0x48
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40004800 	.word	0x40004800
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40010c00 	.word	0x40010c00

08002dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dd8:	f7ff fba6 	bl	8002528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ddc:	480b      	ldr	r0, [pc, #44]	@ (8002e0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002dde:	490c      	ldr	r1, [pc, #48]	@ (8002e10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002de0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de4:	e002      	b.n	8002dec <LoopCopyDataInit>

08002de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dea:	3304      	adds	r3, #4

08002dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df0:	d3f9      	bcc.n	8002de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df2:	4a09      	ldr	r2, [pc, #36]	@ (8002e18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002df4:	4c09      	ldr	r4, [pc, #36]	@ (8002e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df8:	e001      	b.n	8002dfe <LoopFillZerobss>

08002dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dfc:	3204      	adds	r2, #4

08002dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e00:	d3fb      	bcc.n	8002dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e02:	f005 f863 	bl	8007ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e06:	f7ff f8bf 	bl	8001f88 <main>
  bx lr
 8002e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8002e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e10:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002e14:	08009078 	.word	0x08009078
  ldr r2, =_sbss
 8002e18:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002e1c:	200007c8 	.word	0x200007c8

08002e20 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e20:	e7fe      	b.n	8002e20 <ADC1_2_IRQHandler>
	...

08002e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <HAL_Init+0x28>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a07      	ldr	r2, [pc, #28]	@ (8002e4c <HAL_Init+0x28>)
 8002e2e:	f043 0310 	orr.w	r3, r3, #16
 8002e32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e34:	2003      	movs	r0, #3
 8002e36:	f000 fb47 	bl	80034c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e3a:	200f      	movs	r0, #15
 8002e3c:	f000 f808 	bl	8002e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e40:	f7ff fa12 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40022000 	.word	0x40022000

08002e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e58:	4b12      	ldr	r3, [pc, #72]	@ (8002ea4 <HAL_InitTick+0x54>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ea8 <HAL_InitTick+0x58>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4619      	mov	r1, r3
 8002e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fb5f 	bl	8003532 <HAL_SYSTICK_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00e      	b.n	8002e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b0f      	cmp	r3, #15
 8002e82:	d80a      	bhi.n	8002e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e84:	2200      	movs	r2, #0
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	f000 fb27 	bl	80034de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e90:	4a06      	ldr	r2, [pc, #24]	@ (8002eac <HAL_InitTick+0x5c>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e000      	b.n	8002e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <HAL_IncTick+0x1c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <HAL_IncTick+0x20>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4a03      	ldr	r2, [pc, #12]	@ (8002ed0 <HAL_IncTick+0x20>)
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	20000008 	.word	0x20000008
 8002ed0:	200004fc 	.word	0x200004fc

08002ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed8:	4b02      	ldr	r3, [pc, #8]	@ (8002ee4 <HAL_GetTick+0x10>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	200004fc 	.word	0x200004fc

08002ee8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0ce      	b.n	80030a8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe feba 	bl	8001ca0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f9bd 	bl	80032ac <ADC_ConversionStop_Disable>
 8002f32:	4603      	mov	r3, r0
 8002f34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 80a9 	bne.w	8003096 <HAL_ADC_Init+0x1ae>
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f040 80a5 	bne.w	8003096 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f54:	f023 0302 	bic.w	r3, r3, #2
 8002f58:	f043 0202 	orr.w	r2, r3, #2
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4951      	ldr	r1, [pc, #324]	@ (80030b0 <HAL_ADC_Init+0x1c8>)
 8002f6a:	428b      	cmp	r3, r1
 8002f6c:	d10a      	bne.n	8002f84 <HAL_ADC_Init+0x9c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f76:	d002      	beq.n	8002f7e <HAL_ADC_Init+0x96>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	e004      	b.n	8002f88 <HAL_ADC_Init+0xa0>
 8002f7e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002f82:	e001      	b.n	8002f88 <HAL_ADC_Init+0xa0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7b1b      	ldrb	r3, [r3, #12]
 8002f8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa0:	d003      	beq.n	8002faa <HAL_ADC_Init+0xc2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_ADC_Init+0xc8>
 8002faa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fae:	e000      	b.n	8002fb2 <HAL_ADC_Init+0xca>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7d1b      	ldrb	r3, [r3, #20]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d119      	bne.n	8002ff4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7b1b      	ldrb	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	035a      	lsls	r2, r3, #13
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e00b      	b.n	8002ff4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	4b29      	ldr	r3, [pc, #164]	@ (80030b4 <HAL_ADC_Init+0x1cc>)
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003024:	d003      	beq.n	800302e <HAL_ADC_Init+0x146>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d104      	bne.n	8003038 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	3b01      	subs	r3, #1
 8003034:	051b      	lsls	r3, r3, #20
 8003036:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	430a      	orrs	r2, r1
 800304a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <HAL_ADC_Init+0x1d0>)
 8003054:	4013      	ands	r3, r2
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	429a      	cmp	r2, r3
 800305a:	d10b      	bne.n	8003074 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003072:	e018      	b.n	80030a6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	f023 0312 	bic.w	r3, r3, #18
 800307c:	f043 0210 	orr.w	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003094:	e007      	b.n	80030a6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	f043 0210 	orr.w	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40013c00 	.word	0x40013c00
 80030b4:	ffe1f7fd 	.word	0xffe1f7fd
 80030b8:	ff1f0efe 	.word	0xff1f0efe

080030bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x20>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0dc      	b.n	8003296 <HAL_ADC_ConfigChannel+0x1da>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b06      	cmp	r3, #6
 80030ea:	d81c      	bhi.n	8003126 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	3b05      	subs	r3, #5
 80030fe:	221f      	movs	r2, #31
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	4019      	ands	r1, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	3b05      	subs	r3, #5
 8003118:	fa00 f203 	lsl.w	r2, r0, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	635a      	str	r2, [r3, #52]	@ 0x34
 8003124:	e03c      	b.n	80031a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d81c      	bhi.n	8003168 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	3b23      	subs	r3, #35	@ 0x23
 8003140:	221f      	movs	r2, #31
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	4019      	ands	r1, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	3b23      	subs	r3, #35	@ 0x23
 800315a:	fa00 f203 	lsl.w	r2, r0, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	631a      	str	r2, [r3, #48]	@ 0x30
 8003166:	e01b      	b.n	80031a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	3b41      	subs	r3, #65	@ 0x41
 800317a:	221f      	movs	r2, #31
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	4019      	ands	r1, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	3b41      	subs	r3, #65	@ 0x41
 8003194:	fa00 f203 	lsl.w	r2, r0, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b09      	cmp	r3, #9
 80031a6:	d91c      	bls.n	80031e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68d9      	ldr	r1, [r3, #12]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	3b1e      	subs	r3, #30
 80031ba:	2207      	movs	r2, #7
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	4019      	ands	r1, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6898      	ldr	r0, [r3, #8]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	3b1e      	subs	r3, #30
 80031d4:	fa00 f203 	lsl.w	r2, r0, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	e019      	b.n	8003216 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6919      	ldr	r1, [r3, #16]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	2207      	movs	r2, #7
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	4019      	ands	r1, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	6898      	ldr	r0, [r3, #8]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	fa00 f203 	lsl.w	r2, r0, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b10      	cmp	r3, #16
 800321c:	d003      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003222:	2b11      	cmp	r3, #17
 8003224:	d132      	bne.n	800328c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1d      	ldr	r2, [pc, #116]	@ (80032a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d125      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d126      	bne.n	800328c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800324c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b10      	cmp	r3, #16
 8003254:	d11a      	bne.n	800328c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003256:	4b13      	ldr	r3, [pc, #76]	@ (80032a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a13      	ldr	r2, [pc, #76]	@ (80032a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	0c9a      	lsrs	r2, r3, #18
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800326c:	e002      	b.n	8003274 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3b01      	subs	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f9      	bne.n	800326e <HAL_ADC_ConfigChannel+0x1b2>
 800327a:	e007      	b.n	800328c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	40012400 	.word	0x40012400
 80032a4:	20000000 	.word	0x20000000
 80032a8:	431bde83 	.word	0x431bde83

080032ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d12e      	bne.n	8003324 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032d6:	f7ff fdfd 	bl	8002ed4 <HAL_GetTick>
 80032da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032dc:	e01b      	b.n	8003316 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032de:	f7ff fdf9 	bl	8002ed4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d914      	bls.n	8003316 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10d      	bne.n	8003316 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e007      	b.n	8003326 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d0dc      	beq.n	80032de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800334c:	4013      	ands	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800335c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003362:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	60d3      	str	r3, [r2, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800337c:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <__NVIC_GetPriorityGrouping+0x18>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 0307 	and.w	r3, r3, #7
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	db0b      	blt.n	80033be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	f003 021f 	and.w	r2, r3, #31
 80033ac:	4906      	ldr	r1, [pc, #24]	@ (80033c8 <__NVIC_EnableIRQ+0x34>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2001      	movs	r0, #1
 80033b6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	e000e100 	.word	0xe000e100

080033cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	db0a      	blt.n	80033f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	490c      	ldr	r1, [pc, #48]	@ (8003418 <__NVIC_SetPriority+0x4c>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	0112      	lsls	r2, r2, #4
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	440b      	add	r3, r1
 80033f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f4:	e00a      	b.n	800340c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4908      	ldr	r1, [pc, #32]	@ (800341c <__NVIC_SetPriority+0x50>)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	3b04      	subs	r3, #4
 8003404:	0112      	lsls	r2, r2, #4
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	440b      	add	r3, r1
 800340a:	761a      	strb	r2, [r3, #24]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000e100 	.word	0xe000e100
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	@ 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f1c3 0307 	rsb	r3, r3, #7
 800343a:	2b04      	cmp	r3, #4
 800343c:	bf28      	it	cs
 800343e:	2304      	movcs	r3, #4
 8003440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3304      	adds	r3, #4
 8003446:	2b06      	cmp	r3, #6
 8003448:	d902      	bls.n	8003450 <NVIC_EncodePriority+0x30>
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3b03      	subs	r3, #3
 800344e:	e000      	b.n	8003452 <NVIC_EncodePriority+0x32>
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	f04f 32ff 	mov.w	r2, #4294967295
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	401a      	ands	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003468:	f04f 31ff 	mov.w	r1, #4294967295
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	43d9      	mvns	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003478:	4313      	orrs	r3, r2
         );
}
 800347a:	4618      	mov	r0, r3
 800347c:	3724      	adds	r7, #36	@ 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003494:	d301      	bcc.n	800349a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003496:	2301      	movs	r3, #1
 8003498:	e00f      	b.n	80034ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800349a:	4a0a      	ldr	r2, [pc, #40]	@ (80034c4 <SysTick_Config+0x40>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034a2:	210f      	movs	r1, #15
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	f7ff ff90 	bl	80033cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <SysTick_Config+0x40>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b2:	4b04      	ldr	r3, [pc, #16]	@ (80034c4 <SysTick_Config+0x40>)
 80034b4:	2207      	movs	r2, #7
 80034b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	e000e010 	.word	0xe000e010

080034c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff2d 	bl	8003330 <__NVIC_SetPriorityGrouping>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f0:	f7ff ff42 	bl	8003378 <__NVIC_GetPriorityGrouping>
 80034f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	6978      	ldr	r0, [r7, #20]
 80034fc:	f7ff ff90 	bl	8003420 <NVIC_EncodePriority>
 8003500:	4602      	mov	r2, r0
 8003502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff5f 	bl	80033cc <__NVIC_SetPriority>
}
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff35 	bl	8003394 <__NVIC_EnableIRQ>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ffa2 	bl	8003484 <SysTick_Config>
 8003540:	4603      	mov	r3, r0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e059      	b.n	8003616 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	4b2d      	ldr	r3, [pc, #180]	@ (8003620 <HAL_DMA_Init+0xd4>)
 800356a:	429a      	cmp	r2, r3
 800356c:	d80f      	bhi.n	800358e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4b2b      	ldr	r3, [pc, #172]	@ (8003624 <HAL_DMA_Init+0xd8>)
 8003576:	4413      	add	r3, r2
 8003578:	4a2b      	ldr	r2, [pc, #172]	@ (8003628 <HAL_DMA_Init+0xdc>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a28      	ldr	r2, [pc, #160]	@ (800362c <HAL_DMA_Init+0xe0>)
 800358a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800358c:	e00e      	b.n	80035ac <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	4b26      	ldr	r3, [pc, #152]	@ (8003630 <HAL_DMA_Init+0xe4>)
 8003596:	4413      	add	r3, r2
 8003598:	4a23      	ldr	r2, [pc, #140]	@ (8003628 <HAL_DMA_Init+0xdc>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a22      	ldr	r2, [pc, #136]	@ (8003634 <HAL_DMA_Init+0xe8>)
 80035aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80035c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80035c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40020407 	.word	0x40020407
 8003624:	bffdfff8 	.word	0xbffdfff8
 8003628:	cccccccd 	.word	0xcccccccd
 800362c:	40020000 	.word	0x40020000
 8003630:	bffdfbf8 	.word	0xbffdfbf8
 8003634:	40020400 	.word	0x40020400

08003638 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_DMA_Start_IT+0x20>
 8003654:	2302      	movs	r3, #2
 8003656:	e04b      	b.n	80036f0 <HAL_DMA_Start_IT+0xb8>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d13a      	bne.n	80036e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fbb1 	bl	8003df8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 020e 	orr.w	r2, r2, #14
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e00f      	b.n	80036d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0204 	bic.w	r2, r2, #4
 80036be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 020a 	orr.w	r2, r2, #10
 80036ce:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e005      	b.n	80036ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
 80036ec:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d008      	beq.n	8003722 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2204      	movs	r2, #4
 8003714:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e020      	b.n	8003764 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 020e 	bic.w	r2, r2, #14
 8003730:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f202 	lsl.w	r2, r1, r2
 8003750:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
	...

08003770 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d005      	beq.n	8003794 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2204      	movs	r2, #4
 800378c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
 8003792:	e0d6      	b.n	8003942 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 020e 	bic.w	r2, r2, #14
 80037a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b64      	ldr	r3, [pc, #400]	@ (800394c <HAL_DMA_Abort_IT+0x1dc>)
 80037bc:	429a      	cmp	r2, r3
 80037be:	d958      	bls.n	8003872 <HAL_DMA_Abort_IT+0x102>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a62      	ldr	r2, [pc, #392]	@ (8003950 <HAL_DMA_Abort_IT+0x1e0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d04f      	beq.n	800386a <HAL_DMA_Abort_IT+0xfa>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a61      	ldr	r2, [pc, #388]	@ (8003954 <HAL_DMA_Abort_IT+0x1e4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d048      	beq.n	8003866 <HAL_DMA_Abort_IT+0xf6>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003958 <HAL_DMA_Abort_IT+0x1e8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d040      	beq.n	8003860 <HAL_DMA_Abort_IT+0xf0>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a5e      	ldr	r2, [pc, #376]	@ (800395c <HAL_DMA_Abort_IT+0x1ec>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d038      	beq.n	800385a <HAL_DMA_Abort_IT+0xea>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003960 <HAL_DMA_Abort_IT+0x1f0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d030      	beq.n	8003854 <HAL_DMA_Abort_IT+0xe4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003964 <HAL_DMA_Abort_IT+0x1f4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d028      	beq.n	800384e <HAL_DMA_Abort_IT+0xde>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a52      	ldr	r2, [pc, #328]	@ (800394c <HAL_DMA_Abort_IT+0x1dc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d020      	beq.n	8003848 <HAL_DMA_Abort_IT+0xd8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a57      	ldr	r2, [pc, #348]	@ (8003968 <HAL_DMA_Abort_IT+0x1f8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d019      	beq.n	8003844 <HAL_DMA_Abort_IT+0xd4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a55      	ldr	r2, [pc, #340]	@ (800396c <HAL_DMA_Abort_IT+0x1fc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d012      	beq.n	8003840 <HAL_DMA_Abort_IT+0xd0>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a54      	ldr	r2, [pc, #336]	@ (8003970 <HAL_DMA_Abort_IT+0x200>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00a      	beq.n	800383a <HAL_DMA_Abort_IT+0xca>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a52      	ldr	r2, [pc, #328]	@ (8003974 <HAL_DMA_Abort_IT+0x204>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d102      	bne.n	8003834 <HAL_DMA_Abort_IT+0xc4>
 800382e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003832:	e01b      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 8003834:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003838:	e018      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 800383a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800383e:	e015      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 8003840:	2310      	movs	r3, #16
 8003842:	e013      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 8003844:	2301      	movs	r3, #1
 8003846:	e011      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 8003848:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800384c:	e00e      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 800384e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003852:	e00b      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 8003854:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003858:	e008      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 800385a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800385e:	e005      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 8003860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003864:	e002      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 8003866:	2310      	movs	r3, #16
 8003868:	e000      	b.n	800386c <HAL_DMA_Abort_IT+0xfc>
 800386a:	2301      	movs	r3, #1
 800386c:	4a42      	ldr	r2, [pc, #264]	@ (8003978 <HAL_DMA_Abort_IT+0x208>)
 800386e:	6053      	str	r3, [r2, #4]
 8003870:	e057      	b.n	8003922 <HAL_DMA_Abort_IT+0x1b2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a36      	ldr	r2, [pc, #216]	@ (8003950 <HAL_DMA_Abort_IT+0x1e0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d04f      	beq.n	800391c <HAL_DMA_Abort_IT+0x1ac>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a34      	ldr	r2, [pc, #208]	@ (8003954 <HAL_DMA_Abort_IT+0x1e4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d048      	beq.n	8003918 <HAL_DMA_Abort_IT+0x1a8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a33      	ldr	r2, [pc, #204]	@ (8003958 <HAL_DMA_Abort_IT+0x1e8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d040      	beq.n	8003912 <HAL_DMA_Abort_IT+0x1a2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a31      	ldr	r2, [pc, #196]	@ (800395c <HAL_DMA_Abort_IT+0x1ec>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d038      	beq.n	800390c <HAL_DMA_Abort_IT+0x19c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a30      	ldr	r2, [pc, #192]	@ (8003960 <HAL_DMA_Abort_IT+0x1f0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d030      	beq.n	8003906 <HAL_DMA_Abort_IT+0x196>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003964 <HAL_DMA_Abort_IT+0x1f4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d028      	beq.n	8003900 <HAL_DMA_Abort_IT+0x190>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a26      	ldr	r2, [pc, #152]	@ (800394c <HAL_DMA_Abort_IT+0x1dc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d020      	beq.n	80038fa <HAL_DMA_Abort_IT+0x18a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003968 <HAL_DMA_Abort_IT+0x1f8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d019      	beq.n	80038f6 <HAL_DMA_Abort_IT+0x186>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a29      	ldr	r2, [pc, #164]	@ (800396c <HAL_DMA_Abort_IT+0x1fc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d012      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x182>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a27      	ldr	r2, [pc, #156]	@ (8003970 <HAL_DMA_Abort_IT+0x200>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00a      	beq.n	80038ec <HAL_DMA_Abort_IT+0x17c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a26      	ldr	r2, [pc, #152]	@ (8003974 <HAL_DMA_Abort_IT+0x204>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d102      	bne.n	80038e6 <HAL_DMA_Abort_IT+0x176>
 80038e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038e4:	e01b      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 80038e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038ea:	e018      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 80038ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038f0:	e015      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 80038f2:	2310      	movs	r3, #16
 80038f4:	e013      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e011      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 80038fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038fe:	e00e      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 8003900:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003904:	e00b      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 8003906:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800390a:	e008      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 800390c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003910:	e005      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 8003912:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003916:	e002      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 8003918:	2310      	movs	r3, #16
 800391a:	e000      	b.n	800391e <HAL_DMA_Abort_IT+0x1ae>
 800391c:	2301      	movs	r3, #1
 800391e:	4a17      	ldr	r2, [pc, #92]	@ (800397c <HAL_DMA_Abort_IT+0x20c>)
 8003920:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
    } 
  }
  return status;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40020080 	.word	0x40020080
 8003950:	40020008 	.word	0x40020008
 8003954:	4002001c 	.word	0x4002001c
 8003958:	40020030 	.word	0x40020030
 800395c:	40020044 	.word	0x40020044
 8003960:	40020058 	.word	0x40020058
 8003964:	4002006c 	.word	0x4002006c
 8003968:	40020408 	.word	0x40020408
 800396c:	4002041c 	.word	0x4002041c
 8003970:	40020430 	.word	0x40020430
 8003974:	40020444 	.word	0x40020444
 8003978:	40020400 	.word	0x40020400
 800397c:	40020000 	.word	0x40020000

08003980 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	2204      	movs	r2, #4
 800399e:	409a      	lsls	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80f1 	beq.w	8003b8c <HAL_DMA_IRQHandler+0x20c>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80eb 	beq.w	8003b8c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d107      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0204 	bic.w	r2, r2, #4
 80039d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	4b5f      	ldr	r3, [pc, #380]	@ (8003b58 <HAL_DMA_IRQHandler+0x1d8>)
 80039dc:	429a      	cmp	r2, r3
 80039de:	d958      	bls.n	8003a92 <HAL_DMA_IRQHandler+0x112>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a5d      	ldr	r2, [pc, #372]	@ (8003b5c <HAL_DMA_IRQHandler+0x1dc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d04f      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x10a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003b60 <HAL_DMA_IRQHandler+0x1e0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d048      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x106>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a5a      	ldr	r2, [pc, #360]	@ (8003b64 <HAL_DMA_IRQHandler+0x1e4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d040      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x100>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a59      	ldr	r2, [pc, #356]	@ (8003b68 <HAL_DMA_IRQHandler+0x1e8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d038      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xfa>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a57      	ldr	r2, [pc, #348]	@ (8003b6c <HAL_DMA_IRQHandler+0x1ec>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d030      	beq.n	8003a74 <HAL_DMA_IRQHandler+0xf4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a56      	ldr	r2, [pc, #344]	@ (8003b70 <HAL_DMA_IRQHandler+0x1f0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d028      	beq.n	8003a6e <HAL_DMA_IRQHandler+0xee>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a4d      	ldr	r2, [pc, #308]	@ (8003b58 <HAL_DMA_IRQHandler+0x1d8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d020      	beq.n	8003a68 <HAL_DMA_IRQHandler+0xe8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a52      	ldr	r2, [pc, #328]	@ (8003b74 <HAL_DMA_IRQHandler+0x1f4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d019      	beq.n	8003a64 <HAL_DMA_IRQHandler+0xe4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a50      	ldr	r2, [pc, #320]	@ (8003b78 <HAL_DMA_IRQHandler+0x1f8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d012      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xe0>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a4f      	ldr	r2, [pc, #316]	@ (8003b7c <HAL_DMA_IRQHandler+0x1fc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00a      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xda>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a4d      	ldr	r2, [pc, #308]	@ (8003b80 <HAL_DMA_IRQHandler+0x200>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d102      	bne.n	8003a54 <HAL_DMA_IRQHandler+0xd4>
 8003a4e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a52:	e01b      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a54:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a58:	e018      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a5e:	e015      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a60:	2340      	movs	r3, #64	@ 0x40
 8003a62:	e013      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a64:	2304      	movs	r3, #4
 8003a66:	e011      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a68:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a6c:	e00e      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a72:	e00b      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a74:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a78:	e008      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a7e:	e005      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a84:	e002      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a86:	2340      	movs	r3, #64	@ 0x40
 8003a88:	e000      	b.n	8003a8c <HAL_DMA_IRQHandler+0x10c>
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b84 <HAL_DMA_IRQHandler+0x204>)
 8003a8e:	6053      	str	r3, [r2, #4]
 8003a90:	e057      	b.n	8003b42 <HAL_DMA_IRQHandler+0x1c2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a31      	ldr	r2, [pc, #196]	@ (8003b5c <HAL_DMA_IRQHandler+0x1dc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d04f      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x1bc>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2f      	ldr	r2, [pc, #188]	@ (8003b60 <HAL_DMA_IRQHandler+0x1e0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d048      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x1b8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2e      	ldr	r2, [pc, #184]	@ (8003b64 <HAL_DMA_IRQHandler+0x1e4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d040      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x1b2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b68 <HAL_DMA_IRQHandler+0x1e8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d038      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x1ac>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2b      	ldr	r2, [pc, #172]	@ (8003b6c <HAL_DMA_IRQHandler+0x1ec>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d030      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x1a6>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a29      	ldr	r2, [pc, #164]	@ (8003b70 <HAL_DMA_IRQHandler+0x1f0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d028      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x1a0>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a21      	ldr	r2, [pc, #132]	@ (8003b58 <HAL_DMA_IRQHandler+0x1d8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d020      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x19a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a25      	ldr	r2, [pc, #148]	@ (8003b74 <HAL_DMA_IRQHandler+0x1f4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d019      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x196>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a24      	ldr	r2, [pc, #144]	@ (8003b78 <HAL_DMA_IRQHandler+0x1f8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d012      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x192>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a22      	ldr	r2, [pc, #136]	@ (8003b7c <HAL_DMA_IRQHandler+0x1fc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00a      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x18c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a21      	ldr	r2, [pc, #132]	@ (8003b80 <HAL_DMA_IRQHandler+0x200>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d102      	bne.n	8003b06 <HAL_DMA_IRQHandler+0x186>
 8003b00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b04:	e01b      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b06:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003b0a:	e018      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b10:	e015      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b12:	2340      	movs	r3, #64	@ 0x40
 8003b14:	e013      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b16:	2304      	movs	r3, #4
 8003b18:	e011      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b1a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003b1e:	e00e      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b20:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b24:	e00b      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b26:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003b2a:	e008      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b30:	e005      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b36:	e002      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b38:	2340      	movs	r3, #64	@ 0x40
 8003b3a:	e000      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1be>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	4a12      	ldr	r2, [pc, #72]	@ (8003b88 <HAL_DMA_IRQHandler+0x208>)
 8003b40:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8136 	beq.w	8003db8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b54:	e130      	b.n	8003db8 <HAL_DMA_IRQHandler+0x438>
 8003b56:	bf00      	nop
 8003b58:	40020080 	.word	0x40020080
 8003b5c:	40020008 	.word	0x40020008
 8003b60:	4002001c 	.word	0x4002001c
 8003b64:	40020030 	.word	0x40020030
 8003b68:	40020044 	.word	0x40020044
 8003b6c:	40020058 	.word	0x40020058
 8003b70:	4002006c 	.word	0x4002006c
 8003b74:	40020408 	.word	0x40020408
 8003b78:	4002041c 	.word	0x4002041c
 8003b7c:	40020430 	.word	0x40020430
 8003b80:	40020444 	.word	0x40020444
 8003b84:	40020400 	.word	0x40020400
 8003b88:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	2202      	movs	r2, #2
 8003b92:	409a      	lsls	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80dd 	beq.w	8003d58 <HAL_DMA_IRQHandler+0x3d8>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80d7 	beq.w	8003d58 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 020a 	bic.w	r2, r2, #10
 8003bc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8003dc4 <HAL_DMA_IRQHandler+0x444>)
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d958      	bls.n	8003c8e <HAL_DMA_IRQHandler+0x30e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a79      	ldr	r2, [pc, #484]	@ (8003dc8 <HAL_DMA_IRQHandler+0x448>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d04f      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x306>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a78      	ldr	r2, [pc, #480]	@ (8003dcc <HAL_DMA_IRQHandler+0x44c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d048      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x302>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a76      	ldr	r2, [pc, #472]	@ (8003dd0 <HAL_DMA_IRQHandler+0x450>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d040      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x2fc>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a75      	ldr	r2, [pc, #468]	@ (8003dd4 <HAL_DMA_IRQHandler+0x454>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d038      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x2f6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a73      	ldr	r2, [pc, #460]	@ (8003dd8 <HAL_DMA_IRQHandler+0x458>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d030      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x2f0>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a72      	ldr	r2, [pc, #456]	@ (8003ddc <HAL_DMA_IRQHandler+0x45c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d028      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2ea>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a69      	ldr	r2, [pc, #420]	@ (8003dc4 <HAL_DMA_IRQHandler+0x444>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d020      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x2e4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6e      	ldr	r2, [pc, #440]	@ (8003de0 <HAL_DMA_IRQHandler+0x460>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d019      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x2e0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6c      	ldr	r2, [pc, #432]	@ (8003de4 <HAL_DMA_IRQHandler+0x464>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d012      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x2dc>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6b      	ldr	r2, [pc, #428]	@ (8003de8 <HAL_DMA_IRQHandler+0x468>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00a      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x2d6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a69      	ldr	r2, [pc, #420]	@ (8003dec <HAL_DMA_IRQHandler+0x46c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d102      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x2d0>
 8003c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c4e:	e01b      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c54:	e018      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c5a:	e015      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e013      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e011      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c68:	e00e      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c6a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003c6e:	e00b      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c74:	e008      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c7a:	e005      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c80:	e002      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c82:	2320      	movs	r3, #32
 8003c84:	e000      	b.n	8003c88 <HAL_DMA_IRQHandler+0x308>
 8003c86:	2302      	movs	r3, #2
 8003c88:	4a59      	ldr	r2, [pc, #356]	@ (8003df0 <HAL_DMA_IRQHandler+0x470>)
 8003c8a:	6053      	str	r3, [r2, #4]
 8003c8c:	e057      	b.n	8003d3e <HAL_DMA_IRQHandler+0x3be>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a4d      	ldr	r2, [pc, #308]	@ (8003dc8 <HAL_DMA_IRQHandler+0x448>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d04f      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x3b8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8003dcc <HAL_DMA_IRQHandler+0x44c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d048      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x3b4>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8003dd0 <HAL_DMA_IRQHandler+0x450>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d040      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x3ae>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a48      	ldr	r2, [pc, #288]	@ (8003dd4 <HAL_DMA_IRQHandler+0x454>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d038      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x3a8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a47      	ldr	r2, [pc, #284]	@ (8003dd8 <HAL_DMA_IRQHandler+0x458>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d030      	beq.n	8003d22 <HAL_DMA_IRQHandler+0x3a2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a45      	ldr	r2, [pc, #276]	@ (8003ddc <HAL_DMA_IRQHandler+0x45c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d028      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x39c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3d      	ldr	r2, [pc, #244]	@ (8003dc4 <HAL_DMA_IRQHandler+0x444>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d020      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x396>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a41      	ldr	r2, [pc, #260]	@ (8003de0 <HAL_DMA_IRQHandler+0x460>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d019      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x392>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a40      	ldr	r2, [pc, #256]	@ (8003de4 <HAL_DMA_IRQHandler+0x464>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d012      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x38e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a3e      	ldr	r2, [pc, #248]	@ (8003de8 <HAL_DMA_IRQHandler+0x468>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00a      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x388>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a3d      	ldr	r2, [pc, #244]	@ (8003dec <HAL_DMA_IRQHandler+0x46c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d102      	bne.n	8003d02 <HAL_DMA_IRQHandler+0x382>
 8003cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d00:	e01b      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d06:	e018      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d0c:	e015      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d0e:	2320      	movs	r3, #32
 8003d10:	e013      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e011      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d1a:	e00e      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003d20:	e00b      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d26:	e008      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d2c:	e005      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d32:	e002      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d34:	2320      	movs	r3, #32
 8003d36:	e000      	b.n	8003d3a <HAL_DMA_IRQHandler+0x3ba>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8003df4 <HAL_DMA_IRQHandler+0x474>)
 8003d3c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d034      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d56:	e02f      	b.n	8003db8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d028      	beq.n	8003dba <HAL_DMA_IRQHandler+0x43a>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d023      	beq.n	8003dba <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 020e 	bic.w	r2, r2, #14
 8003d80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
    }
  }
  return;
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
}
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40020080 	.word	0x40020080
 8003dc8:	40020008 	.word	0x40020008
 8003dcc:	4002001c 	.word	0x4002001c
 8003dd0:	40020030 	.word	0x40020030
 8003dd4:	40020044 	.word	0x40020044
 8003dd8:	40020058 	.word	0x40020058
 8003ddc:	4002006c 	.word	0x4002006c
 8003de0:	40020408 	.word	0x40020408
 8003de4:	4002041c 	.word	0x4002041c
 8003de8:	40020430 	.word	0x40020430
 8003dec:	40020444 	.word	0x40020444
 8003df0:	40020400 	.word	0x40020400
 8003df4:	40020000 	.word	0x40020000

08003df8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0e:	2101      	movs	r1, #1
 8003e10:	fa01 f202 	lsl.w	r2, r1, r2
 8003e14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d108      	bne.n	8003e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e36:	e007      	b.n	8003e48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b08b      	sub	sp, #44	@ 0x2c
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e66:	e179      	b.n	800415c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e68:	2201      	movs	r2, #1
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	f040 8168 	bne.w	8004156 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4a96      	ldr	r2, [pc, #600]	@ (80040e4 <HAL_GPIO_Init+0x290>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d05e      	beq.n	8003f4e <HAL_GPIO_Init+0xfa>
 8003e90:	4a94      	ldr	r2, [pc, #592]	@ (80040e4 <HAL_GPIO_Init+0x290>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d875      	bhi.n	8003f82 <HAL_GPIO_Init+0x12e>
 8003e96:	4a94      	ldr	r2, [pc, #592]	@ (80040e8 <HAL_GPIO_Init+0x294>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d058      	beq.n	8003f4e <HAL_GPIO_Init+0xfa>
 8003e9c:	4a92      	ldr	r2, [pc, #584]	@ (80040e8 <HAL_GPIO_Init+0x294>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d86f      	bhi.n	8003f82 <HAL_GPIO_Init+0x12e>
 8003ea2:	4a92      	ldr	r2, [pc, #584]	@ (80040ec <HAL_GPIO_Init+0x298>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d052      	beq.n	8003f4e <HAL_GPIO_Init+0xfa>
 8003ea8:	4a90      	ldr	r2, [pc, #576]	@ (80040ec <HAL_GPIO_Init+0x298>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d869      	bhi.n	8003f82 <HAL_GPIO_Init+0x12e>
 8003eae:	4a90      	ldr	r2, [pc, #576]	@ (80040f0 <HAL_GPIO_Init+0x29c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d04c      	beq.n	8003f4e <HAL_GPIO_Init+0xfa>
 8003eb4:	4a8e      	ldr	r2, [pc, #568]	@ (80040f0 <HAL_GPIO_Init+0x29c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d863      	bhi.n	8003f82 <HAL_GPIO_Init+0x12e>
 8003eba:	4a8e      	ldr	r2, [pc, #568]	@ (80040f4 <HAL_GPIO_Init+0x2a0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d046      	beq.n	8003f4e <HAL_GPIO_Init+0xfa>
 8003ec0:	4a8c      	ldr	r2, [pc, #560]	@ (80040f4 <HAL_GPIO_Init+0x2a0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d85d      	bhi.n	8003f82 <HAL_GPIO_Init+0x12e>
 8003ec6:	2b12      	cmp	r3, #18
 8003ec8:	d82a      	bhi.n	8003f20 <HAL_GPIO_Init+0xcc>
 8003eca:	2b12      	cmp	r3, #18
 8003ecc:	d859      	bhi.n	8003f82 <HAL_GPIO_Init+0x12e>
 8003ece:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed4 <HAL_GPIO_Init+0x80>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003f4f 	.word	0x08003f4f
 8003ed8:	08003f29 	.word	0x08003f29
 8003edc:	08003f3b 	.word	0x08003f3b
 8003ee0:	08003f7d 	.word	0x08003f7d
 8003ee4:	08003f83 	.word	0x08003f83
 8003ee8:	08003f83 	.word	0x08003f83
 8003eec:	08003f83 	.word	0x08003f83
 8003ef0:	08003f83 	.word	0x08003f83
 8003ef4:	08003f83 	.word	0x08003f83
 8003ef8:	08003f83 	.word	0x08003f83
 8003efc:	08003f83 	.word	0x08003f83
 8003f00:	08003f83 	.word	0x08003f83
 8003f04:	08003f83 	.word	0x08003f83
 8003f08:	08003f83 	.word	0x08003f83
 8003f0c:	08003f83 	.word	0x08003f83
 8003f10:	08003f83 	.word	0x08003f83
 8003f14:	08003f83 	.word	0x08003f83
 8003f18:	08003f31 	.word	0x08003f31
 8003f1c:	08003f45 	.word	0x08003f45
 8003f20:	4a75      	ldr	r2, [pc, #468]	@ (80040f8 <HAL_GPIO_Init+0x2a4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f26:	e02c      	b.n	8003f82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	623b      	str	r3, [r7, #32]
          break;
 8003f2e:	e029      	b.n	8003f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	3304      	adds	r3, #4
 8003f36:	623b      	str	r3, [r7, #32]
          break;
 8003f38:	e024      	b.n	8003f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	623b      	str	r3, [r7, #32]
          break;
 8003f42:	e01f      	b.n	8003f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	623b      	str	r3, [r7, #32]
          break;
 8003f4c:	e01a      	b.n	8003f84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d102      	bne.n	8003f5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f56:	2304      	movs	r3, #4
 8003f58:	623b      	str	r3, [r7, #32]
          break;
 8003f5a:	e013      	b.n	8003f84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f64:	2308      	movs	r3, #8
 8003f66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	611a      	str	r2, [r3, #16]
          break;
 8003f6e:	e009      	b.n	8003f84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f70:	2308      	movs	r3, #8
 8003f72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	615a      	str	r2, [r3, #20]
          break;
 8003f7a:	e003      	b.n	8003f84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	623b      	str	r3, [r7, #32]
          break;
 8003f80:	e000      	b.n	8003f84 <HAL_GPIO_Init+0x130>
          break;
 8003f82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2bff      	cmp	r3, #255	@ 0xff
 8003f88:	d801      	bhi.n	8003f8e <HAL_GPIO_Init+0x13a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	e001      	b.n	8003f92 <HAL_GPIO_Init+0x13e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2bff      	cmp	r3, #255	@ 0xff
 8003f98:	d802      	bhi.n	8003fa0 <HAL_GPIO_Init+0x14c>
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	e002      	b.n	8003fa6 <HAL_GPIO_Init+0x152>
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	3b08      	subs	r3, #8
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	210f      	movs	r1, #15
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	6a39      	ldr	r1, [r7, #32]
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80c1 	beq.w	8004156 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fd4:	4b49      	ldr	r3, [pc, #292]	@ (80040fc <HAL_GPIO_Init+0x2a8>)
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	4a48      	ldr	r2, [pc, #288]	@ (80040fc <HAL_GPIO_Init+0x2a8>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6193      	str	r3, [r2, #24]
 8003fe0:	4b46      	ldr	r3, [pc, #280]	@ (80040fc <HAL_GPIO_Init+0x2a8>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fec:	4a44      	ldr	r2, [pc, #272]	@ (8004100 <HAL_GPIO_Init+0x2ac>)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	220f      	movs	r2, #15
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3c      	ldr	r2, [pc, #240]	@ (8004104 <HAL_GPIO_Init+0x2b0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d01f      	beq.n	8004058 <HAL_GPIO_Init+0x204>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3b      	ldr	r2, [pc, #236]	@ (8004108 <HAL_GPIO_Init+0x2b4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d019      	beq.n	8004054 <HAL_GPIO_Init+0x200>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3a      	ldr	r2, [pc, #232]	@ (800410c <HAL_GPIO_Init+0x2b8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d013      	beq.n	8004050 <HAL_GPIO_Init+0x1fc>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a39      	ldr	r2, [pc, #228]	@ (8004110 <HAL_GPIO_Init+0x2bc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00d      	beq.n	800404c <HAL_GPIO_Init+0x1f8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a38      	ldr	r2, [pc, #224]	@ (8004114 <HAL_GPIO_Init+0x2c0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d007      	beq.n	8004048 <HAL_GPIO_Init+0x1f4>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a37      	ldr	r2, [pc, #220]	@ (8004118 <HAL_GPIO_Init+0x2c4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_GPIO_Init+0x1f0>
 8004040:	2305      	movs	r3, #5
 8004042:	e00a      	b.n	800405a <HAL_GPIO_Init+0x206>
 8004044:	2306      	movs	r3, #6
 8004046:	e008      	b.n	800405a <HAL_GPIO_Init+0x206>
 8004048:	2304      	movs	r3, #4
 800404a:	e006      	b.n	800405a <HAL_GPIO_Init+0x206>
 800404c:	2303      	movs	r3, #3
 800404e:	e004      	b.n	800405a <HAL_GPIO_Init+0x206>
 8004050:	2302      	movs	r3, #2
 8004052:	e002      	b.n	800405a <HAL_GPIO_Init+0x206>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <HAL_GPIO_Init+0x206>
 8004058:	2300      	movs	r3, #0
 800405a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405c:	f002 0203 	and.w	r2, r2, #3
 8004060:	0092      	lsls	r2, r2, #2
 8004062:	4093      	lsls	r3, r2
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800406a:	4925      	ldr	r1, [pc, #148]	@ (8004100 <HAL_GPIO_Init+0x2ac>)
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	3302      	adds	r3, #2
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d006      	beq.n	8004092 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004084:	4b25      	ldr	r3, [pc, #148]	@ (800411c <HAL_GPIO_Init+0x2c8>)
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	4924      	ldr	r1, [pc, #144]	@ (800411c <HAL_GPIO_Init+0x2c8>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	4313      	orrs	r3, r2
 800408e:	608b      	str	r3, [r1, #8]
 8004090:	e006      	b.n	80040a0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004092:	4b22      	ldr	r3, [pc, #136]	@ (800411c <HAL_GPIO_Init+0x2c8>)
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	43db      	mvns	r3, r3
 800409a:	4920      	ldr	r1, [pc, #128]	@ (800411c <HAL_GPIO_Init+0x2c8>)
 800409c:	4013      	ands	r3, r2
 800409e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040ac:	4b1b      	ldr	r3, [pc, #108]	@ (800411c <HAL_GPIO_Init+0x2c8>)
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	491a      	ldr	r1, [pc, #104]	@ (800411c <HAL_GPIO_Init+0x2c8>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60cb      	str	r3, [r1, #12]
 80040b8:	e006      	b.n	80040c8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040ba:	4b18      	ldr	r3, [pc, #96]	@ (800411c <HAL_GPIO_Init+0x2c8>)
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	4916      	ldr	r1, [pc, #88]	@ (800411c <HAL_GPIO_Init+0x2c8>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d025      	beq.n	8004120 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040d4:	4b11      	ldr	r3, [pc, #68]	@ (800411c <HAL_GPIO_Init+0x2c8>)
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4910      	ldr	r1, [pc, #64]	@ (800411c <HAL_GPIO_Init+0x2c8>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
 80040e0:	e025      	b.n	800412e <HAL_GPIO_Init+0x2da>
 80040e2:	bf00      	nop
 80040e4:	10320000 	.word	0x10320000
 80040e8:	10310000 	.word	0x10310000
 80040ec:	10220000 	.word	0x10220000
 80040f0:	10210000 	.word	0x10210000
 80040f4:	10120000 	.word	0x10120000
 80040f8:	10110000 	.word	0x10110000
 80040fc:	40021000 	.word	0x40021000
 8004100:	40010000 	.word	0x40010000
 8004104:	40010800 	.word	0x40010800
 8004108:	40010c00 	.word	0x40010c00
 800410c:	40011000 	.word	0x40011000
 8004110:	40011400 	.word	0x40011400
 8004114:	40011800 	.word	0x40011800
 8004118:	40011c00 	.word	0x40011c00
 800411c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004120:	4b15      	ldr	r3, [pc, #84]	@ (8004178 <HAL_GPIO_Init+0x324>)
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	43db      	mvns	r3, r3
 8004128:	4913      	ldr	r1, [pc, #76]	@ (8004178 <HAL_GPIO_Init+0x324>)
 800412a:	4013      	ands	r3, r2
 800412c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800413a:	4b0f      	ldr	r3, [pc, #60]	@ (8004178 <HAL_GPIO_Init+0x324>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	490e      	ldr	r1, [pc, #56]	@ (8004178 <HAL_GPIO_Init+0x324>)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]
 8004146:	e006      	b.n	8004156 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004148:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <HAL_GPIO_Init+0x324>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	43db      	mvns	r3, r3
 8004150:	4909      	ldr	r1, [pc, #36]	@ (8004178 <HAL_GPIO_Init+0x324>)
 8004152:	4013      	ands	r3, r2
 8004154:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	3301      	adds	r3, #1
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	fa22 f303 	lsr.w	r3, r2, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	f47f ae7e 	bne.w	8003e68 <HAL_GPIO_Init+0x14>
  }
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	372c      	adds	r7, #44	@ 0x2c
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	40010400 	.word	0x40010400

0800417c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	887b      	ldrh	r3, [r7, #2]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	e001      	b.n	800419e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	807b      	strh	r3, [r7, #2]
 80041b6:	4613      	mov	r3, r2
 80041b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041ba:	787b      	ldrb	r3, [r7, #1]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041c6:	e003      	b.n	80041d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	041a      	lsls	r2, r3, #16
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	611a      	str	r2, [r3, #16]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
	...

080041dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e12b      	b.n	8004446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd fe70 	bl	8001ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	@ 0x24
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800422e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800423e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004240:	f000 fcdc 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 8004244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4a81      	ldr	r2, [pc, #516]	@ (8004450 <HAL_I2C_Init+0x274>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d807      	bhi.n	8004260 <HAL_I2C_Init+0x84>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a80      	ldr	r2, [pc, #512]	@ (8004454 <HAL_I2C_Init+0x278>)
 8004254:	4293      	cmp	r3, r2
 8004256:	bf94      	ite	ls
 8004258:	2301      	movls	r3, #1
 800425a:	2300      	movhi	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e006      	b.n	800426e <HAL_I2C_Init+0x92>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a7d      	ldr	r2, [pc, #500]	@ (8004458 <HAL_I2C_Init+0x27c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	bf94      	ite	ls
 8004268:	2301      	movls	r3, #1
 800426a:	2300      	movhi	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0e7      	b.n	8004446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a78      	ldr	r2, [pc, #480]	@ (800445c <HAL_I2C_Init+0x280>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	0c9b      	lsrs	r3, r3, #18
 8004280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004450 <HAL_I2C_Init+0x274>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d802      	bhi.n	80042b0 <HAL_I2C_Init+0xd4>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3301      	adds	r3, #1
 80042ae:	e009      	b.n	80042c4 <HAL_I2C_Init+0xe8>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	4a69      	ldr	r2, [pc, #420]	@ (8004460 <HAL_I2C_Init+0x284>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	099b      	lsrs	r3, r3, #6
 80042c2:	3301      	adds	r3, #1
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	495c      	ldr	r1, [pc, #368]	@ (8004450 <HAL_I2C_Init+0x274>)
 80042e0:	428b      	cmp	r3, r1
 80042e2:	d819      	bhi.n	8004318 <HAL_I2C_Init+0x13c>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1e59      	subs	r1, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80042f2:	1c59      	adds	r1, r3, #1
 80042f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042f8:	400b      	ands	r3, r1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_I2C_Init+0x138>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1e59      	subs	r1, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	fbb1 f3f3 	udiv	r3, r1, r3
 800430c:	3301      	adds	r3, #1
 800430e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004312:	e051      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004314:	2304      	movs	r3, #4
 8004316:	e04f      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d111      	bne.n	8004344 <HAL_I2C_Init+0x168>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1e58      	subs	r0, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6859      	ldr	r1, [r3, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	440b      	add	r3, r1
 800432e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004332:	3301      	adds	r3, #1
 8004334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e012      	b.n	800436a <HAL_I2C_Init+0x18e>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e58      	subs	r0, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	0099      	lsls	r1, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	fbb0 f3f3 	udiv	r3, r0, r3
 800435a:	3301      	adds	r3, #1
 800435c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_Init+0x196>
 800436e:	2301      	movs	r3, #1
 8004370:	e022      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10e      	bne.n	8004398 <HAL_I2C_Init+0x1bc>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1e58      	subs	r0, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6859      	ldr	r1, [r3, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	440b      	add	r3, r1
 8004388:	fbb0 f3f3 	udiv	r3, r0, r3
 800438c:	3301      	adds	r3, #1
 800438e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004396:	e00f      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1e58      	subs	r0, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	0099      	lsls	r1, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	6809      	ldr	r1, [r1, #0]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6911      	ldr	r1, [r2, #16]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	000186a0 	.word	0x000186a0
 8004454:	001e847f 	.word	0x001e847f
 8004458:	003d08ff 	.word	0x003d08ff
 800445c:	431bde83 	.word	0x431bde83
 8004460:	10624dd3 	.word	0x10624dd3

08004464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e272      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8087 	beq.w	8004592 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004484:	4b92      	ldr	r3, [pc, #584]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b04      	cmp	r3, #4
 800448e:	d00c      	beq.n	80044aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004490:	4b8f      	ldr	r3, [pc, #572]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b08      	cmp	r3, #8
 800449a:	d112      	bne.n	80044c2 <HAL_RCC_OscConfig+0x5e>
 800449c:	4b8c      	ldr	r3, [pc, #560]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a8:	d10b      	bne.n	80044c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044aa:	4b89      	ldr	r3, [pc, #548]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d06c      	beq.n	8004590 <HAL_RCC_OscConfig+0x12c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d168      	bne.n	8004590 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e24c      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x76>
 80044cc:	4b80      	ldr	r3, [pc, #512]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a7f      	ldr	r2, [pc, #508]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e02e      	b.n	8004538 <HAL_RCC_OscConfig+0xd4>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x98>
 80044e2:	4b7b      	ldr	r3, [pc, #492]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7a      	ldr	r2, [pc, #488]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b78      	ldr	r3, [pc, #480]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a77      	ldr	r2, [pc, #476]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e01d      	b.n	8004538 <HAL_RCC_OscConfig+0xd4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0xbc>
 8004506:	4b72      	ldr	r3, [pc, #456]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a71      	ldr	r2, [pc, #452]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 800450c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b6f      	ldr	r3, [pc, #444]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a6e      	ldr	r2, [pc, #440]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e00b      	b.n	8004538 <HAL_RCC_OscConfig+0xd4>
 8004520:	4b6b      	ldr	r3, [pc, #428]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6a      	ldr	r2, [pc, #424]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b68      	ldr	r3, [pc, #416]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a67      	ldr	r2, [pc, #412]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004536:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004540:	f7fe fcc8 	bl	8002ed4 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fe fcc4 	bl	8002ed4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	@ 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e200      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b5d      	ldr	r3, [pc, #372]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0xe4>
 8004566:	e014      	b.n	8004592 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fe fcb4 	bl	8002ed4 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fe fcb0 	bl	8002ed4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e1ec      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	4b53      	ldr	r3, [pc, #332]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x10c>
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d063      	beq.n	8004666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800459e:	4b4c      	ldr	r3, [pc, #304]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045aa:	4b49      	ldr	r3, [pc, #292]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d11c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x18c>
 80045b6:	4b46      	ldr	r3, [pc, #280]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d116      	bne.n	80045f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	4b43      	ldr	r3, [pc, #268]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_RCC_OscConfig+0x176>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e1c0      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045da:	4b3d      	ldr	r3, [pc, #244]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4939      	ldr	r1, [pc, #228]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ee:	e03a      	b.n	8004666 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d020      	beq.n	800463a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f8:	4b36      	ldr	r3, [pc, #216]	@ (80046d4 <HAL_RCC_OscConfig+0x270>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fe fc69 	bl	8002ed4 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004606:	f7fe fc65 	bl	8002ed4 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e1a1      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004618:	4b2d      	ldr	r3, [pc, #180]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004624:	4b2a      	ldr	r3, [pc, #168]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4927      	ldr	r1, [pc, #156]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 8004634:	4313      	orrs	r3, r2
 8004636:	600b      	str	r3, [r1, #0]
 8004638:	e015      	b.n	8004666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463a:	4b26      	ldr	r3, [pc, #152]	@ (80046d4 <HAL_RCC_OscConfig+0x270>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fe fc48 	bl	8002ed4 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004648:	f7fe fc44 	bl	8002ed4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e180      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465a:	4b1d      	ldr	r3, [pc, #116]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d03a      	beq.n	80046e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d019      	beq.n	80046ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467a:	4b17      	ldr	r3, [pc, #92]	@ (80046d8 <HAL_RCC_OscConfig+0x274>)
 800467c:	2201      	movs	r2, #1
 800467e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004680:	f7fe fc28 	bl	8002ed4 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004688:	f7fe fc24 	bl	8002ed4 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e160      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <HAL_RCC_OscConfig+0x26c>)
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f0      	beq.n	8004688 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046a6:	2001      	movs	r0, #1
 80046a8:	f000 fad0 	bl	8004c4c <RCC_Delay>
 80046ac:	e01c      	b.n	80046e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ae:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <HAL_RCC_OscConfig+0x274>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b4:	f7fe fc0e 	bl	8002ed4 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ba:	e00f      	b.n	80046dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046bc:	f7fe fc0a 	bl	8002ed4 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d908      	bls.n	80046dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e146      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
 80046ce:	bf00      	nop
 80046d0:	40021000 	.word	0x40021000
 80046d4:	42420000 	.word	0x42420000
 80046d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046dc:	4b92      	ldr	r3, [pc, #584]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e9      	bne.n	80046bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80a6 	beq.w	8004842 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f6:	2300      	movs	r3, #0
 80046f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10d      	bne.n	8004722 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004706:	4b88      	ldr	r3, [pc, #544]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	4a87      	ldr	r2, [pc, #540]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004710:	61d3      	str	r3, [r2, #28]
 8004712:	4b85      	ldr	r3, [pc, #532]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004722:	4b82      	ldr	r3, [pc, #520]	@ (800492c <HAL_RCC_OscConfig+0x4c8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d118      	bne.n	8004760 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472e:	4b7f      	ldr	r3, [pc, #508]	@ (800492c <HAL_RCC_OscConfig+0x4c8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7e      	ldr	r2, [pc, #504]	@ (800492c <HAL_RCC_OscConfig+0x4c8>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473a:	f7fe fbcb 	bl	8002ed4 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004742:	f7fe fbc7 	bl	8002ed4 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b64      	cmp	r3, #100	@ 0x64
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e103      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004754:	4b75      	ldr	r3, [pc, #468]	@ (800492c <HAL_RCC_OscConfig+0x4c8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d106      	bne.n	8004776 <HAL_RCC_OscConfig+0x312>
 8004768:	4b6f      	ldr	r3, [pc, #444]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	4a6e      	ldr	r2, [pc, #440]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	6213      	str	r3, [r2, #32]
 8004774:	e02d      	b.n	80047d2 <HAL_RCC_OscConfig+0x36e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0x334>
 800477e:	4b6a      	ldr	r3, [pc, #424]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	4a69      	ldr	r2, [pc, #420]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	6213      	str	r3, [r2, #32]
 800478a:	4b67      	ldr	r3, [pc, #412]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	4a66      	ldr	r2, [pc, #408]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 8004790:	f023 0304 	bic.w	r3, r3, #4
 8004794:	6213      	str	r3, [r2, #32]
 8004796:	e01c      	b.n	80047d2 <HAL_RCC_OscConfig+0x36e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b05      	cmp	r3, #5
 800479e:	d10c      	bne.n	80047ba <HAL_RCC_OscConfig+0x356>
 80047a0:	4b61      	ldr	r3, [pc, #388]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4a60      	ldr	r2, [pc, #384]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	6213      	str	r3, [r2, #32]
 80047ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	6213      	str	r3, [r2, #32]
 80047b8:	e00b      	b.n	80047d2 <HAL_RCC_OscConfig+0x36e>
 80047ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	4a5a      	ldr	r2, [pc, #360]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	6213      	str	r3, [r2, #32]
 80047c6:	4b58      	ldr	r3, [pc, #352]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4a57      	ldr	r2, [pc, #348]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	f023 0304 	bic.w	r3, r3, #4
 80047d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d015      	beq.n	8004806 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047da:	f7fe fb7b 	bl	8002ed4 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fe fb77 	bl	8002ed4 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0b1      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ee      	beq.n	80047e2 <HAL_RCC_OscConfig+0x37e>
 8004804:	e014      	b.n	8004830 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004806:	f7fe fb65 	bl	8002ed4 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480c:	e00a      	b.n	8004824 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fe fb61 	bl	8002ed4 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e09b      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004824:	4b40      	ldr	r3, [pc, #256]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1ee      	bne.n	800480e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d105      	bne.n	8004842 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004836:	4b3c      	ldr	r3, [pc, #240]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4a3b      	ldr	r2, [pc, #236]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004840:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8087 	beq.w	800495a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484c:	4b36      	ldr	r3, [pc, #216]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 030c 	and.w	r3, r3, #12
 8004854:	2b08      	cmp	r3, #8
 8004856:	d061      	beq.n	800491c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d146      	bne.n	80048ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004860:	4b33      	ldr	r3, [pc, #204]	@ (8004930 <HAL_RCC_OscConfig+0x4cc>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004866:	f7fe fb35 	bl	8002ed4 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486e:	f7fe fb31 	bl	8002ed4 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e06d      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004880:	4b29      	ldr	r3, [pc, #164]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f0      	bne.n	800486e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004894:	d108      	bne.n	80048a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004896:	4b24      	ldr	r3, [pc, #144]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	4921      	ldr	r1, [pc, #132]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a19      	ldr	r1, [r3, #32]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	430b      	orrs	r3, r1
 80048ba:	491b      	ldr	r1, [pc, #108]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004930 <HAL_RCC_OscConfig+0x4cc>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c6:	f7fe fb05 	bl	8002ed4 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ce:	f7fe fb01 	bl	8002ed4 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e03d      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e0:	4b11      	ldr	r3, [pc, #68]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x46a>
 80048ec:	e035      	b.n	800495a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ee:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <HAL_RCC_OscConfig+0x4cc>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7fe faee 	bl	8002ed4 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fc:	f7fe faea 	bl	8002ed4 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e026      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <HAL_RCC_OscConfig+0x4c4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_OscConfig+0x498>
 800491a:	e01e      	b.n	800495a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d107      	bne.n	8004934 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e019      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
 8004928:	40021000 	.word	0x40021000
 800492c:	40007000 	.word	0x40007000
 8004930:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004934:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <HAL_RCC_OscConfig+0x500>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	429a      	cmp	r2, r3
 8004946:	d106      	bne.n	8004956 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d001      	beq.n	800495a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000

08004968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0d0      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800497c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d910      	bls.n	80049ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498a:	4b67      	ldr	r3, [pc, #412]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 0207 	bic.w	r2, r3, #7
 8004992:	4965      	ldr	r1, [pc, #404]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	4313      	orrs	r3, r2
 8004998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b63      	ldr	r3, [pc, #396]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0b8      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d020      	beq.n	80049fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c4:	4b59      	ldr	r3, [pc, #356]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	4a58      	ldr	r2, [pc, #352]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049dc:	4b53      	ldr	r3, [pc, #332]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a52      	ldr	r2, [pc, #328]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e8:	4b50      	ldr	r3, [pc, #320]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	494d      	ldr	r1, [pc, #308]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d040      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b47      	ldr	r3, [pc, #284]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d115      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e07f      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a26:	4b41      	ldr	r3, [pc, #260]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e073      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a36:	4b3d      	ldr	r3, [pc, #244]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e06b      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a46:	4b39      	ldr	r3, [pc, #228]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f023 0203 	bic.w	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4936      	ldr	r1, [pc, #216]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a58:	f7fe fa3c 	bl	8002ed4 <HAL_GetTick>
 8004a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a60:	f7fe fa38 	bl	8002ed4 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e053      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a76:	4b2d      	ldr	r3, [pc, #180]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 020c 	and.w	r2, r3, #12
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d1eb      	bne.n	8004a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a88:	4b27      	ldr	r3, [pc, #156]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d210      	bcs.n	8004ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 0207 	bic.w	r2, r3, #7
 8004a9e:	4922      	ldr	r1, [pc, #136]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b20      	ldr	r3, [pc, #128]	@ (8004b28 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e032      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac4:	4b19      	ldr	r3, [pc, #100]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4916      	ldr	r1, [pc, #88]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ae2:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	490e      	ldr	r1, [pc, #56]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004af6:	f000 f821 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8004afa:	4602      	mov	r2, r0
 8004afc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c4>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	490a      	ldr	r1, [pc, #40]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c8>)
 8004b08:	5ccb      	ldrb	r3, [r1, r3]
 8004b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0e:	4a09      	ldr	r2, [pc, #36]	@ (8004b34 <HAL_RCC_ClockConfig+0x1cc>)
 8004b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b12:	4b09      	ldr	r3, [pc, #36]	@ (8004b38 <HAL_RCC_ClockConfig+0x1d0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe f99a 	bl	8002e50 <HAL_InitTick>

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40022000 	.word	0x40022000
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	08008f64 	.word	0x08008f64
 8004b34:	20000000 	.word	0x20000000
 8004b38:	20000004 	.word	0x20000004

08004b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	2300      	movs	r3, #0
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b56:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d002      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0x30>
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d003      	beq.n	8004b72 <HAL_RCC_GetSysClockFreq+0x36>
 8004b6a:	e027      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b6c:	4b19      	ldr	r3, [pc, #100]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b6e:	613b      	str	r3, [r7, #16]
      break;
 8004b70:	e027      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	0c9b      	lsrs	r3, r3, #18
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	4a17      	ldr	r2, [pc, #92]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b7c:	5cd3      	ldrb	r3, [r2, r3]
 8004b7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d010      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b8a:	4b11      	ldr	r3, [pc, #68]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	0c5b      	lsrs	r3, r3, #17
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	4a11      	ldr	r2, [pc, #68]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b96:	5cd3      	ldrb	r3, [r2, r3]
 8004b98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b9e:	fb03 f202 	mul.w	r2, r3, r2
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	e004      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a0c      	ldr	r2, [pc, #48]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	613b      	str	r3, [r7, #16]
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bbc:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004bbe:	613b      	str	r3, [r7, #16]
      break;
 8004bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc2:	693b      	ldr	r3, [r7, #16]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	00b71b00 	.word	0x00b71b00
 8004bd8:	08008f7c 	.word	0x08008f7c
 8004bdc:	08008f8c 	.word	0x08008f8c
 8004be0:	003d0900 	.word	0x003d0900
 8004be4:	007a1200 	.word	0x007a1200

08004be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bec:	4b02      	ldr	r3, [pc, #8]	@ (8004bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr
 8004bf8:	20000000 	.word	0x20000000

08004bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c00:	f7ff fff2 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	4903      	ldr	r1, [pc, #12]	@ (8004c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	08008f74 	.word	0x08008f74

08004c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c28:	f7ff ffde 	bl	8004be8 <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	0adb      	lsrs	r3, r3, #11
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4903      	ldr	r1, [pc, #12]	@ (8004c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	08008f74 	.word	0x08008f74

08004c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c54:	4b0a      	ldr	r3, [pc, #40]	@ (8004c80 <RCC_Delay+0x34>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a0a      	ldr	r2, [pc, #40]	@ (8004c84 <RCC_Delay+0x38>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	0a5b      	lsrs	r3, r3, #9
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c68:	bf00      	nop
  }
  while (Delay --);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1e5a      	subs	r2, r3, #1
 8004c6e:	60fa      	str	r2, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f9      	bne.n	8004c68 <RCC_Delay+0x1c>
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	20000000 	.word	0x20000000
 8004c84:	10624dd3 	.word	0x10624dd3

08004c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d07d      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10d      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cbe:	61d3      	str	r3, [r2, #28]
 8004cc0:	4b49      	ldr	r3, [pc, #292]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd0:	4b46      	ldr	r3, [pc, #280]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d118      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cdc:	4b43      	ldr	r3, [pc, #268]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a42      	ldr	r2, [pc, #264]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce8:	f7fe f8f4 	bl	8002ed4 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cee:	e008      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf0:	f7fe f8f0 	bl	8002ed4 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	@ 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e06d      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d02:	4b3a      	ldr	r3, [pc, #232]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d0e:	4b36      	ldr	r3, [pc, #216]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d02e      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d027      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d36:	4b2e      	ldr	r3, [pc, #184]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d42:	4a29      	ldr	r2, [pc, #164]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d014      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d52:	f7fe f8bf 	bl	8002ed4 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d58:	e00a      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5a:	f7fe f8bb 	bl	8002ed4 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e036      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d70:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ee      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4917      	ldr	r1, [pc, #92]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d105      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d94:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	4a13      	ldr	r2, [pc, #76]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dac:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	490b      	ldr	r1, [pc, #44]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dca:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	4904      	ldr	r1, [pc, #16]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40007000 	.word	0x40007000
 8004df0:	42420440 	.word	0x42420440

08004df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e041      	b.n	8004e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fd fca4 	bl	8002768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f000 fdb4 	bl	80059a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d001      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e04e      	b.n	8004f4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a22      	ldr	r2, [pc, #136]	@ (8004f54 <HAL_TIM_Base_Start_IT+0xc0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d022      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a21      	ldr	r2, [pc, #132]	@ (8004f58 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d01d      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee0:	d018      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f5c <HAL_TIM_Base_Start_IT+0xc8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d013      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f60 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1a      	ldr	r2, [pc, #104]	@ (8004f64 <HAL_TIM_Base_Start_IT+0xd0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d009      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a18      	ldr	r2, [pc, #96]	@ (8004f68 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a17      	ldr	r2, [pc, #92]	@ (8004f6c <HAL_TIM_Base_Start_IT+0xd8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d111      	bne.n	8004f38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b06      	cmp	r3, #6
 8004f24:	d010      	beq.n	8004f48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	e007      	b.n	8004f48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	40014c00 	.word	0x40014c00
 8004f6c:	40001800 	.word	0x40001800

08004f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e041      	b.n	8005006 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fd fc48 	bl	800282c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f000 fcf6 	bl	80059a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e041      	b.n	80050a4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f839 	bl	80050ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f000 fca7 	bl	80059a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr
	...

080050c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d104      	bne.n	80050de <HAL_TIM_IC_Start_IT+0x1e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	e013      	b.n	8005106 <HAL_TIM_IC_Start_IT+0x46>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_IC_Start_IT+0x2e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	e00b      	b.n	8005106 <HAL_TIM_IC_Start_IT+0x46>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_IC_Start_IT+0x3e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	e003      	b.n	8005106 <HAL_TIM_IC_Start_IT+0x46>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005104:	b2db      	uxtb	r3, r3
 8005106:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d104      	bne.n	8005118 <HAL_TIM_IC_Start_IT+0x58>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e013      	b.n	8005140 <HAL_TIM_IC_Start_IT+0x80>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b04      	cmp	r3, #4
 800511c:	d104      	bne.n	8005128 <HAL_TIM_IC_Start_IT+0x68>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e00b      	b.n	8005140 <HAL_TIM_IC_Start_IT+0x80>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b08      	cmp	r3, #8
 800512c:	d104      	bne.n	8005138 <HAL_TIM_IC_Start_IT+0x78>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005134:	b2db      	uxtb	r3, r3
 8005136:	e003      	b.n	8005140 <HAL_TIM_IC_Start_IT+0x80>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800513e:	b2db      	uxtb	r3, r3
 8005140:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005142:	7bbb      	ldrb	r3, [r7, #14]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d102      	bne.n	800514e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005148:	7b7b      	ldrb	r3, [r7, #13]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0cc      	b.n	80052ec <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <HAL_TIM_IC_Start_IT+0xa2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005160:	e013      	b.n	800518a <HAL_TIM_IC_Start_IT+0xca>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b04      	cmp	r3, #4
 8005166:	d104      	bne.n	8005172 <HAL_TIM_IC_Start_IT+0xb2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005170:	e00b      	b.n	800518a <HAL_TIM_IC_Start_IT+0xca>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d104      	bne.n	8005182 <HAL_TIM_IC_Start_IT+0xc2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005180:	e003      	b.n	800518a <HAL_TIM_IC_Start_IT+0xca>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <HAL_TIM_IC_Start_IT+0xda>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005198:	e013      	b.n	80051c2 <HAL_TIM_IC_Start_IT+0x102>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b04      	cmp	r3, #4
 800519e:	d104      	bne.n	80051aa <HAL_TIM_IC_Start_IT+0xea>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051a8:	e00b      	b.n	80051c2 <HAL_TIM_IC_Start_IT+0x102>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_IC_Start_IT+0xfa>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051b8:	e003      	b.n	80051c2 <HAL_TIM_IC_Start_IT+0x102>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b0c      	cmp	r3, #12
 80051c6:	d841      	bhi.n	800524c <HAL_TIM_IC_Start_IT+0x18c>
 80051c8:	a201      	add	r2, pc, #4	@ (adr r2, 80051d0 <HAL_TIM_IC_Start_IT+0x110>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	08005205 	.word	0x08005205
 80051d4:	0800524d 	.word	0x0800524d
 80051d8:	0800524d 	.word	0x0800524d
 80051dc:	0800524d 	.word	0x0800524d
 80051e0:	08005217 	.word	0x08005217
 80051e4:	0800524d 	.word	0x0800524d
 80051e8:	0800524d 	.word	0x0800524d
 80051ec:	0800524d 	.word	0x0800524d
 80051f0:	08005229 	.word	0x08005229
 80051f4:	0800524d 	.word	0x0800524d
 80051f8:	0800524d 	.word	0x0800524d
 80051fc:	0800524d 	.word	0x0800524d
 8005200:	0800523b 	.word	0x0800523b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0202 	orr.w	r2, r2, #2
 8005212:	60da      	str	r2, [r3, #12]
      break;
 8005214:	e01d      	b.n	8005252 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0204 	orr.w	r2, r2, #4
 8005224:	60da      	str	r2, [r3, #12]
      break;
 8005226:	e014      	b.n	8005252 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0208 	orr.w	r2, r2, #8
 8005236:	60da      	str	r2, [r3, #12]
      break;
 8005238:	e00b      	b.n	8005252 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0210 	orr.w	r2, r2, #16
 8005248:	60da      	str	r2, [r3, #12]
      break;
 800524a:	e002      	b.n	8005252 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
      break;
 8005250:	bf00      	nop
  }

  if (status == HAL_OK)
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d148      	bne.n	80052ea <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2201      	movs	r2, #1
 800525e:	6839      	ldr	r1, [r7, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f000 ffa2 	bl	80061aa <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a22      	ldr	r2, [pc, #136]	@ (80052f4 <HAL_TIM_IC_Start_IT+0x234>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a20      	ldr	r2, [pc, #128]	@ (80052f8 <HAL_TIM_IC_Start_IT+0x238>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01d      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005282:	d018      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1c      	ldr	r2, [pc, #112]	@ (80052fc <HAL_TIM_IC_Start_IT+0x23c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x1f6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1b      	ldr	r2, [pc, #108]	@ (8005300 <HAL_TIM_IC_Start_IT+0x240>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a19      	ldr	r2, [pc, #100]	@ (8005304 <HAL_TIM_IC_Start_IT+0x244>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x1f6>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a18      	ldr	r2, [pc, #96]	@ (8005308 <HAL_TIM_IC_Start_IT+0x248>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x1f6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a16      	ldr	r2, [pc, #88]	@ (800530c <HAL_TIM_IC_Start_IT+0x24c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d111      	bne.n	80052da <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d010      	beq.n	80052ea <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d8:	e007      	b.n	80052ea <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40014c00 	.word	0x40014c00
 800530c:	40001800 	.word	0x40001800

08005310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b02      	cmp	r3, #2
 8005324:	d122      	bne.n	800536c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b02      	cmp	r3, #2
 8005332:	d11b      	bne.n	800536c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0202 	mvn.w	r2, #2
 800533c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fd f840 	bl	80023d8 <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fb05 	bl	800596a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fb0b 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b04      	cmp	r3, #4
 8005378:	d122      	bne.n	80053c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b04      	cmp	r3, #4
 8005386:	d11b      	bne.n	80053c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0204 	mvn.w	r2, #4
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fd f816 	bl	80023d8 <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fadb 	bl	800596a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fae1 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d122      	bne.n	8005414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d11b      	bne.n	8005414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0208 	mvn.w	r2, #8
 80053e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2204      	movs	r2, #4
 80053ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc ffec 	bl	80023d8 <HAL_TIM_IC_CaptureCallback>
 8005400:	e005      	b.n	800540e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fab1 	bl	800596a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fab7 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b10      	cmp	r3, #16
 8005420:	d122      	bne.n	8005468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b10      	cmp	r3, #16
 800542e:	d11b      	bne.n	8005468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0210 	mvn.w	r2, #16
 8005438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2208      	movs	r2, #8
 800543e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc ffc2 	bl	80023d8 <HAL_TIM_IC_CaptureCallback>
 8005454:	e005      	b.n	8005462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fa87 	bl	800596a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fa8d 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b01      	cmp	r3, #1
 8005474:	d10e      	bne.n	8005494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b01      	cmp	r3, #1
 8005482:	d107      	bne.n	8005494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0201 	mvn.w	r2, #1
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fc fba2 	bl	8001bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549e:	2b80      	cmp	r3, #128	@ 0x80
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ac:	2b80      	cmp	r3, #128	@ 0x80
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 ff1d 	bl	80062fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ca:	2b40      	cmp	r3, #64	@ 0x40
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d8:	2b40      	cmp	r3, #64	@ 0x40
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa51 	bl	800598e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d10e      	bne.n	8005518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b20      	cmp	r3, #32
 8005506:	d107      	bne.n	8005518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0220 	mvn.w	r2, #32
 8005510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fee8 	bl	80062e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_TIM_IC_ConfigChannel+0x1e>
 800553a:	2302      	movs	r3, #2
 800553c:	e088      	b.n	8005650 <HAL_TIM_IC_ConfigChannel+0x130>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800555c:	f000 fc6a 	bl	8005e34 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 020c 	bic.w	r2, r2, #12
 800556e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6999      	ldr	r1, [r3, #24]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	619a      	str	r2, [r3, #24]
 8005582:	e060      	b.n	8005646 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b04      	cmp	r3, #4
 8005588:	d11c      	bne.n	80055c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800559a:	f000 fceb 	bl	8005f74 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80055ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6999      	ldr	r1, [r3, #24]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	619a      	str	r2, [r3, #24]
 80055c2:	e040      	b.n	8005646 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d11b      	bne.n	8005602 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80055da:	f000 fd36 	bl	800604a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 020c 	bic.w	r2, r2, #12
 80055ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69d9      	ldr	r1, [r3, #28]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	61da      	str	r2, [r3, #28]
 8005600:	e021      	b.n	8005646 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b0c      	cmp	r3, #12
 8005606:	d11c      	bne.n	8005642 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005618:	f000 fd52 	bl	80060c0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800562a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69d9      	ldr	r1, [r3, #28]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	021a      	lsls	r2, r3, #8
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	61da      	str	r2, [r3, #28]
 8005640:	e001      	b.n	8005646 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800564e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005672:	2302      	movs	r3, #2
 8005674:	e0ae      	b.n	80057d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b0c      	cmp	r3, #12
 8005682:	f200 809f 	bhi.w	80057c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005686:	a201      	add	r2, pc, #4	@ (adr r2, 800568c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056c1 	.word	0x080056c1
 8005690:	080057c5 	.word	0x080057c5
 8005694:	080057c5 	.word	0x080057c5
 8005698:	080057c5 	.word	0x080057c5
 800569c:	08005701 	.word	0x08005701
 80056a0:	080057c5 	.word	0x080057c5
 80056a4:	080057c5 	.word	0x080057c5
 80056a8:	080057c5 	.word	0x080057c5
 80056ac:	08005743 	.word	0x08005743
 80056b0:	080057c5 	.word	0x080057c5
 80056b4:	080057c5 	.word	0x080057c5
 80056b8:	080057c5 	.word	0x080057c5
 80056bc:	08005783 	.word	0x08005783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fa08 	bl	8005adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0208 	orr.w	r2, r2, #8
 80056da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0204 	bic.w	r2, r2, #4
 80056ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6999      	ldr	r1, [r3, #24]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	619a      	str	r2, [r3, #24]
      break;
 80056fe:	e064      	b.n	80057ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fa58 	bl	8005bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800571a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800572a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6999      	ldr	r1, [r3, #24]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	021a      	lsls	r2, r3, #8
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	619a      	str	r2, [r3, #24]
      break;
 8005740:	e043      	b.n	80057ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 faab 	bl	8005ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0208 	orr.w	r2, r2, #8
 800575c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0204 	bic.w	r2, r2, #4
 800576c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69d9      	ldr	r1, [r3, #28]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	61da      	str	r2, [r3, #28]
      break;
 8005780:	e023      	b.n	80057ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	4618      	mov	r0, r3
 800578a:	f000 faff 	bl	8005d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800579c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69d9      	ldr	r1, [r3, #28]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	021a      	lsls	r2, r3, #8
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	61da      	str	r2, [r3, #28]
      break;
 80057c2:	e002      	b.n	80057ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	75fb      	strb	r3, [r7, #23]
      break;
 80057c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_TIM_ConfigClockSource+0x1c>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e0b4      	b.n	8005962 <HAL_TIM_ConfigClockSource+0x186>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800581e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005830:	d03e      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005836:	f200 8087 	bhi.w	8005948 <HAL_TIM_ConfigClockSource+0x16c>
 800583a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800583e:	f000 8086 	beq.w	800594e <HAL_TIM_ConfigClockSource+0x172>
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005846:	d87f      	bhi.n	8005948 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	2b70      	cmp	r3, #112	@ 0x70
 800584a:	d01a      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0xa6>
 800584c:	2b70      	cmp	r3, #112	@ 0x70
 800584e:	d87b      	bhi.n	8005948 <HAL_TIM_ConfigClockSource+0x16c>
 8005850:	2b60      	cmp	r3, #96	@ 0x60
 8005852:	d050      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005854:	2b60      	cmp	r3, #96	@ 0x60
 8005856:	d877      	bhi.n	8005948 <HAL_TIM_ConfigClockSource+0x16c>
 8005858:	2b50      	cmp	r3, #80	@ 0x50
 800585a:	d03c      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0xfa>
 800585c:	2b50      	cmp	r3, #80	@ 0x50
 800585e:	d873      	bhi.n	8005948 <HAL_TIM_ConfigClockSource+0x16c>
 8005860:	2b40      	cmp	r3, #64	@ 0x40
 8005862:	d058      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x13a>
 8005864:	2b40      	cmp	r3, #64	@ 0x40
 8005866:	d86f      	bhi.n	8005948 <HAL_TIM_ConfigClockSource+0x16c>
 8005868:	2b30      	cmp	r3, #48	@ 0x30
 800586a:	d064      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x15a>
 800586c:	2b30      	cmp	r3, #48	@ 0x30
 800586e:	d86b      	bhi.n	8005948 <HAL_TIM_ConfigClockSource+0x16c>
 8005870:	2b20      	cmp	r3, #32
 8005872:	d060      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x15a>
 8005874:	2b20      	cmp	r3, #32
 8005876:	d867      	bhi.n	8005948 <HAL_TIM_ConfigClockSource+0x16c>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d05c      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x15a>
 800587c:	2b10      	cmp	r3, #16
 800587e:	d05a      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x15a>
 8005880:	e062      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005892:	f000 fc6b 	bl	800616c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	609a      	str	r2, [r3, #8]
      break;
 80058ae:	e04f      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058c0:	f000 fc54 	bl	800616c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058d2:	609a      	str	r2, [r3, #8]
      break;
 80058d4:	e03c      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e2:	461a      	mov	r2, r3
 80058e4:	f000 fb18 	bl	8005f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2150      	movs	r1, #80	@ 0x50
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fc22 	bl	8006138 <TIM_ITRx_SetConfig>
      break;
 80058f4:	e02c      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005902:	461a      	mov	r2, r3
 8005904:	f000 fb72 	bl	8005fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2160      	movs	r1, #96	@ 0x60
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fc12 	bl	8006138 <TIM_ITRx_SetConfig>
      break;
 8005914:	e01c      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005922:	461a      	mov	r2, r3
 8005924:	f000 faf8 	bl	8005f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2140      	movs	r1, #64	@ 0x40
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fc02 	bl	8006138 <TIM_ITRx_SetConfig>
      break;
 8005934:	e00c      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4619      	mov	r1, r3
 8005940:	4610      	mov	r0, r2
 8005942:	f000 fbf9 	bl	8006138 <TIM_ITRx_SetConfig>
      break;
 8005946:	e003      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
      break;
 800594c:	e000      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800594e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005960:	7bfb      	ldrb	r3, [r7, #15]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr

0800598e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ab0 <TIM_Base_SetConfig+0x110>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d013      	beq.n	80059e0 <TIM_Base_SetConfig+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a3e      	ldr	r2, [pc, #248]	@ (8005ab4 <TIM_Base_SetConfig+0x114>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00f      	beq.n	80059e0 <TIM_Base_SetConfig+0x40>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c6:	d00b      	beq.n	80059e0 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a3b      	ldr	r2, [pc, #236]	@ (8005ab8 <TIM_Base_SetConfig+0x118>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d007      	beq.n	80059e0 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a3a      	ldr	r2, [pc, #232]	@ (8005abc <TIM_Base_SetConfig+0x11c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a39      	ldr	r2, [pc, #228]	@ (8005ac0 <TIM_Base_SetConfig+0x120>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d108      	bne.n	80059f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2e      	ldr	r2, [pc, #184]	@ (8005ab0 <TIM_Base_SetConfig+0x110>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d02b      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab4 <TIM_Base_SetConfig+0x114>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d027      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a08:	d023      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab8 <TIM_Base_SetConfig+0x118>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d01f      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a29      	ldr	r2, [pc, #164]	@ (8005abc <TIM_Base_SetConfig+0x11c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d01b      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a28      	ldr	r2, [pc, #160]	@ (8005ac0 <TIM_Base_SetConfig+0x120>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d017      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a27      	ldr	r2, [pc, #156]	@ (8005ac4 <TIM_Base_SetConfig+0x124>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a26      	ldr	r2, [pc, #152]	@ (8005ac8 <TIM_Base_SetConfig+0x128>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00f      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a25      	ldr	r2, [pc, #148]	@ (8005acc <TIM_Base_SetConfig+0x12c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a24      	ldr	r2, [pc, #144]	@ (8005ad0 <TIM_Base_SetConfig+0x130>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a23      	ldr	r2, [pc, #140]	@ (8005ad4 <TIM_Base_SetConfig+0x134>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a22      	ldr	r2, [pc, #136]	@ (8005ad8 <TIM_Base_SetConfig+0x138>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d108      	bne.n	8005a64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a09      	ldr	r2, [pc, #36]	@ (8005ab0 <TIM_Base_SetConfig+0x110>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d003      	beq.n	8005a98 <TIM_Base_SetConfig+0xf8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a08      	ldr	r2, [pc, #32]	@ (8005ab4 <TIM_Base_SetConfig+0x114>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d103      	bne.n	8005aa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	615a      	str	r2, [r3, #20]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40013400 	.word	0x40013400
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40000800 	.word	0x40000800
 8005ac0:	40000c00 	.word	0x40000c00
 8005ac4:	40014c00 	.word	0x40014c00
 8005ac8:	40015000 	.word	0x40015000
 8005acc:	40015400 	.word	0x40015400
 8005ad0:	40001800 	.word	0x40001800
 8005ad4:	40001c00 	.word	0x40001c00
 8005ad8:	40002000 	.word	0x40002000

08005adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f023 0201 	bic.w	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f023 0302 	bic.w	r3, r3, #2
 8005b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a20      	ldr	r2, [pc, #128]	@ (8005bb4 <TIM_OC1_SetConfig+0xd8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_OC1_SetConfig+0x64>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb8 <TIM_OC1_SetConfig+0xdc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d10c      	bne.n	8005b5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0308 	bic.w	r3, r3, #8
 8005b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 0304 	bic.w	r3, r3, #4
 8005b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a15      	ldr	r2, [pc, #84]	@ (8005bb4 <TIM_OC1_SetConfig+0xd8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_OC1_SetConfig+0x8e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a14      	ldr	r2, [pc, #80]	@ (8005bb8 <TIM_OC1_SetConfig+0xdc>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d111      	bne.n	8005b8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	bf00      	nop
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40013400 	.word	0x40013400

08005bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f023 0210 	bic.w	r2, r3, #16
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f023 0320 	bic.w	r3, r3, #32
 8005c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a21      	ldr	r2, [pc, #132]	@ (8005c9c <TIM_OC2_SetConfig+0xe0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC2_SetConfig+0x68>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a20      	ldr	r2, [pc, #128]	@ (8005ca0 <TIM_OC2_SetConfig+0xe4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d10d      	bne.n	8005c40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a16      	ldr	r2, [pc, #88]	@ (8005c9c <TIM_OC2_SetConfig+0xe0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_OC2_SetConfig+0x94>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a15      	ldr	r2, [pc, #84]	@ (8005ca0 <TIM_OC2_SetConfig+0xe4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d113      	bne.n	8005c78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40013400 	.word	0x40013400

08005ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a21      	ldr	r2, [pc, #132]	@ (8005d84 <TIM_OC3_SetConfig+0xe0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_OC3_SetConfig+0x66>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a20      	ldr	r2, [pc, #128]	@ (8005d88 <TIM_OC3_SetConfig+0xe4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d10d      	bne.n	8005d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a16      	ldr	r2, [pc, #88]	@ (8005d84 <TIM_OC3_SetConfig+0xe0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_OC3_SetConfig+0x92>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a15      	ldr	r2, [pc, #84]	@ (8005d88 <TIM_OC3_SetConfig+0xe4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d113      	bne.n	8005d5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	621a      	str	r2, [r3, #32]
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40013400 	.word	0x40013400

08005d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	031b      	lsls	r3, r3, #12
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a11      	ldr	r2, [pc, #68]	@ (8005e2c <TIM_OC4_SetConfig+0xa0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_OC4_SetConfig+0x68>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a10      	ldr	r2, [pc, #64]	@ (8005e30 <TIM_OC4_SetConfig+0xa4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d109      	bne.n	8005e08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40013400 	.word	0x40013400

08005e34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f023 0201 	bic.w	r2, r3, #1
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a27      	ldr	r2, [pc, #156]	@ (8005efc <TIM_TI1_SetConfig+0xc8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01b      	beq.n	8005e9a <TIM_TI1_SetConfig+0x66>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a26      	ldr	r2, [pc, #152]	@ (8005f00 <TIM_TI1_SetConfig+0xcc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d017      	beq.n	8005e9a <TIM_TI1_SetConfig+0x66>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e70:	d013      	beq.n	8005e9a <TIM_TI1_SetConfig+0x66>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a23      	ldr	r2, [pc, #140]	@ (8005f04 <TIM_TI1_SetConfig+0xd0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_TI1_SetConfig+0x66>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a22      	ldr	r2, [pc, #136]	@ (8005f08 <TIM_TI1_SetConfig+0xd4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_TI1_SetConfig+0x66>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a21      	ldr	r2, [pc, #132]	@ (8005f0c <TIM_TI1_SetConfig+0xd8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_TI1_SetConfig+0x66>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a20      	ldr	r2, [pc, #128]	@ (8005f10 <TIM_TI1_SetConfig+0xdc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_TI1_SetConfig+0x66>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a1f      	ldr	r2, [pc, #124]	@ (8005f14 <TIM_TI1_SetConfig+0xe0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <TIM_TI1_SetConfig+0x6a>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <TIM_TI1_SetConfig+0x6c>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0303 	bic.w	r3, r3, #3
 8005eaa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	e003      	b.n	8005ebe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f023 030a 	bic.w	r3, r3, #10
 8005ed8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f003 030a 	and.w	r3, r3, #10
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr
 8005efc:	40012c00 	.word	0x40012c00
 8005f00:	40013400 	.word	0x40013400
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40014c00 	.word	0x40014c00
 8005f14:	40001800 	.word	0x40001800

08005f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f023 0201 	bic.w	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f023 030a 	bic.w	r3, r3, #10
 8005f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	621a      	str	r2, [r3, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr

08005f74 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f023 0210 	bic.w	r2, r3, #16
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	031b      	lsls	r3, r3, #12
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fc6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f023 0210 	bic.w	r2, r3, #16
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	031b      	lsls	r3, r3, #12
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006028:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	621a      	str	r2, [r3, #32]
}
 8006040:	bf00      	nop
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr

0800604a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006086:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	b2db      	uxtb	r3, r3
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800609a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr

080060c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	031b      	lsls	r3, r3, #12
 8006104:	b29b      	uxth	r3, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006112:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	031b      	lsls	r3, r3, #12
 8006118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr

08006138 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	f043 0307 	orr.w	r3, r3, #7
 800615a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	609a      	str	r2, [r3, #8]
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr

0800616c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	021a      	lsls	r2, r3, #8
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	431a      	orrs	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4313      	orrs	r3, r2
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr

080061aa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b087      	sub	sp, #28
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2201      	movs	r2, #1
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	43db      	mvns	r3, r3
 80061cc:	401a      	ands	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1a      	ldr	r2, [r3, #32]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr
	...

080061f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006208:	2302      	movs	r3, #2
 800620a:	e05a      	b.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a20      	ldr	r2, [pc, #128]	@ (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d022      	beq.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1e      	ldr	r2, [pc, #120]	@ (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006262:	d018      	beq.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1a      	ldr	r2, [pc, #104]	@ (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a19      	ldr	r2, [pc, #100]	@ (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a17      	ldr	r2, [pc, #92]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a16      	ldr	r2, [pc, #88]	@ (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a14      	ldr	r2, [pc, #80]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d10c      	bne.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800629c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40013400 	.word	0x40013400
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	40000c00 	.word	0x40000c00
 80062e0:	40014c00 	.word	0x40014c00
 80062e4:	40001800 	.word	0x40001800

080062e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr

0800630c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e042      	b.n	80063a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fc fbb8 	bl	8002aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2224      	movs	r2, #36	@ 0x24
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800634e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 ffdf 	bl	8007314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695a      	ldr	r2, [r3, #20]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08a      	sub	sp, #40	@ 0x28
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d16d      	bne.n	80064a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_UART_Transmit+0x2c>
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e066      	b.n	80064aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2221      	movs	r2, #33	@ 0x21
 80063e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ea:	f7fc fd73 	bl	8002ed4 <HAL_GetTick>
 80063ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	88fa      	ldrh	r2, [r7, #6]
 80063f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	88fa      	ldrh	r2, [r7, #6]
 80063fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006404:	d108      	bne.n	8006418 <HAL_UART_Transmit+0x6c>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d104      	bne.n	8006418 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	e003      	b.n	8006420 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800641c:	2300      	movs	r3, #0
 800641e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006420:	e02a      	b.n	8006478 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	@ 0x80
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fc6e 	bl	8006d0e <UART_WaitOnFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e036      	b.n	80064aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006450:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	3302      	adds	r3, #2
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	e007      	b.n	800646a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	781a      	ldrb	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	3301      	adds	r3, #1
 8006468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1cf      	bne.n	8006422 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2200      	movs	r2, #0
 800648a:	2140      	movs	r1, #64	@ 0x40
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fc3e 	bl	8006d0e <UART_WaitOnFlagUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e006      	b.n	80064aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	e000      	b.n	80064aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80064a8:	2302      	movs	r3, #2
  }
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3720      	adds	r7, #32
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	4613      	mov	r3, r2
 80064be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d112      	bne.n	80064f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_UART_Receive_IT+0x26>
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e00b      	b.n	80064f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	461a      	mov	r2, r3
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fc7e 	bl	8006dea <UART_Start_Receive_IT>
 80064ee:	4603      	mov	r3, r0
 80064f0:	e000      	b.n	80064f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80064f2:	2302      	movs	r3, #2
  }
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08c      	sub	sp, #48	@ 0x30
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b20      	cmp	r3, #32
 8006514:	d14a      	bne.n	80065ac <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e043      	b.n	80065ae <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	461a      	mov	r2, r3
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fc8f 	bl	8006e5c <UART_Start_Receive_DMA>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006544:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006548:	2b00      	cmp	r3, #0
 800654a:	d12c      	bne.n	80065a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006550:	2b01      	cmp	r3, #1
 8006552:	d125      	bne.n	80065a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006554:	2300      	movs	r3, #0
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	330c      	adds	r3, #12
 8006570:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	617b      	str	r3, [r7, #20]
   return(result);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f043 0310 	orr.w	r3, r3, #16
 8006580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	330c      	adds	r3, #12
 8006588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800658a:	627a      	str	r2, [r7, #36]	@ 0x24
 800658c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6a39      	ldr	r1, [r7, #32]
 8006590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	61fb      	str	r3, [r7, #28]
   return(result);
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e5      	bne.n	800656a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800659e:	e002      	b.n	80065a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80065a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065aa:	e000      	b.n	80065ae <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80065ac:	2302      	movs	r3, #2
  }
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3730      	adds	r7, #48	@ 0x30
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b0ba      	sub	sp, #232	@ 0xe8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80065de:	2300      	movs	r3, #0
 80065e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80065f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10f      	bne.n	800661e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_UART_IRQHandler+0x66>
 800660a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fdbe 	bl	8007198 <UART_Receive_IT>
      return;
 800661c:	e25b      	b.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800661e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 80de 	beq.w	80067e4 <HAL_UART_IRQHandler+0x22c>
 8006628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006638:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80d1 	beq.w	80067e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <HAL_UART_IRQHandler+0xae>
 800664e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665e:	f043 0201 	orr.w	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <HAL_UART_IRQHandler+0xd2>
 8006672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006682:	f043 0202 	orr.w	r2, r3, #2
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <HAL_UART_IRQHandler+0xf6>
 8006696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a6:	f043 0204 	orr.w	r2, r3, #4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d011      	beq.n	80066de <HAL_UART_IRQHandler+0x126>
 80066ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d6:	f043 0208 	orr.w	r2, r3, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 81f2 	beq.w	8006acc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d008      	beq.n	8006706 <HAL_UART_IRQHandler+0x14e>
 80066f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fd49 	bl	8007198 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	bf14      	ite	ne
 8006714:	2301      	movne	r3, #1
 8006716:	2300      	moveq	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <HAL_UART_IRQHandler+0x17a>
 800672a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800672e:	2b00      	cmp	r3, #0
 8006730:	d04f      	beq.n	80067d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fc53 	bl	8006fde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d041      	beq.n	80067ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3314      	adds	r3, #20
 800674c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800675c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3314      	adds	r3, #20
 800676e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006772:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800677e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800678a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1d9      	bne.n	8006746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d013      	beq.n	80067c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800679e:	4a7e      	ldr	r2, [pc, #504]	@ (8006998 <HAL_UART_IRQHandler+0x3e0>)
 80067a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fc ffe2 	bl	8003770 <HAL_DMA_Abort_IT>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d016      	beq.n	80067e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80067bc:	4610      	mov	r0, r2
 80067be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c0:	e00e      	b.n	80067e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f99c 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c8:	e00a      	b.n	80067e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f998 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d0:	e006      	b.n	80067e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f994 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80067de:	e175      	b.n	8006acc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e0:	bf00      	nop
    return;
 80067e2:	e173      	b.n	8006acc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	f040 814f 	bne.w	8006a8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 8148 	beq.w	8006a8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8141 	beq.w	8006a8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 80b6 	beq.w	800699c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800683c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8145 	beq.w	8006ad0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800684a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800684e:	429a      	cmp	r2, r3
 8006850:	f080 813e 	bcs.w	8006ad0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800685a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	2b20      	cmp	r3, #32
 8006864:	f000 8088 	beq.w	8006978 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006876:	e853 3f00 	ldrex	r3, [r3]
 800687a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800687e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006882:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006886:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006894:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006898:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1d9      	bne.n	8006868 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3314      	adds	r3, #20
 80068ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3314      	adds	r3, #20
 80068d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e1      	bne.n	80068b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3314      	adds	r3, #20
 80068f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3314      	adds	r3, #20
 8006910:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006914:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006916:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800691a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e3      	bne.n	80068f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	330c      	adds	r3, #12
 800693c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006948:	f023 0310 	bic.w	r3, r3, #16
 800694c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	330c      	adds	r3, #12
 8006956:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800695a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800695c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006960:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e3      	bne.n	8006936 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006972:	4618      	mov	r0, r3
 8006974:	f7fc fec0 	bl	80036f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006986:	b29b      	uxth	r3, r3
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	b29b      	uxth	r3, r3
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fb f910 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006994:	e09c      	b.n	8006ad0 <HAL_UART_IRQHandler+0x518>
 8006996:	bf00      	nop
 8006998:	080070a3 	.word	0x080070a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 808e 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80069b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8089 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	330c      	adds	r3, #12
 80069e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80069e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80069e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e3      	bne.n	80069c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3314      	adds	r3, #20
 8006a00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	623b      	str	r3, [r7, #32]
   return(result);
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3314      	adds	r3, #20
 8006a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e3      	bne.n	80069fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	330c      	adds	r3, #12
 8006a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0310 	bic.w	r3, r3, #16
 8006a56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006a64:	61fa      	str	r2, [r7, #28]
 8006a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	69b9      	ldr	r1, [r7, #24]
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	617b      	str	r3, [r7, #20]
   return(result);
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e3      	bne.n	8006a40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fb f895 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a8a:	e023      	b.n	8006ad4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d009      	beq.n	8006aac <HAL_UART_IRQHandler+0x4f4>
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fb10 	bl	80070ca <UART_Transmit_IT>
    return;
 8006aaa:	e014      	b.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
 8006ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fb4f 	bl	8007168 <UART_EndTransmit_IT>
    return;
 8006aca:	e004      	b.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
    return;
 8006acc:	bf00      	nop
 8006ace:	e002      	b.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ad0:	bf00      	nop
 8006ad2:	e000      	b.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ad4:	bf00      	nop
  }
}
 8006ad6:	37e8      	adds	r7, #232	@ 0xe8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr

08006aee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bc80      	pop	{r7}
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr

08006b12 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b09c      	sub	sp, #112	@ 0x70
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d172      	bne.n	8006c14 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b30:	2200      	movs	r2, #0
 8006b32:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e5      	bne.n	8006b34 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7a:	f023 0301 	bic.w	r3, r3, #1
 8006b7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3314      	adds	r3, #20
 8006b86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b88:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b8a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e5      	bne.n	8006b68 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	623b      	str	r3, [r7, #32]
   return(result);
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3314      	adds	r3, #20
 8006bba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006bbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e5      	bne.n	8006b9c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d119      	bne.n	8006c14 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0310 	bic.w	r3, r3, #16
 8006bf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006c00:	61fa      	str	r2, [r7, #28]
 8006c02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	69b9      	ldr	r1, [r7, #24]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e5      	bne.n	8006be0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c16:	2200      	movs	r2, #0
 8006c18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d106      	bne.n	8006c30 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c26:	4619      	mov	r1, r3
 8006c28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c2a:	f7fa ffc3 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c2e:	e002      	b.n	8006c36 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006c30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c32:	f7fa ffad 	bl	8001b90 <HAL_UART_RxCpltCallback>
}
 8006c36:	bf00      	nop
 8006c38:	3770      	adds	r7, #112	@ 0x70
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d108      	bne.n	8006c6c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c5e:	085b      	lsrs	r3, r3, #1
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	4619      	mov	r1, r3
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7fa ffa5 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c6a:	e002      	b.n	8006c72 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7ff ff3e 	bl	8006aee <HAL_UART_RxHalfCpltCallback>
}
 8006c72:	bf00      	nop
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	bf14      	ite	ne
 8006c9a:	2301      	movne	r3, #1
 8006c9c:	2300      	moveq	r3, #0
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b21      	cmp	r3, #33	@ 0x21
 8006cac:	d108      	bne.n	8006cc0 <UART_DMAError+0x46>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006cba:	68b8      	ldr	r0, [r7, #8]
 8006cbc:	f000 f968 	bl	8006f90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bf14      	ite	ne
 8006cce:	2301      	movne	r3, #1
 8006cd0:	2300      	moveq	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b22      	cmp	r3, #34	@ 0x22
 8006ce0:	d108      	bne.n	8006cf4 <UART_DMAError+0x7a>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006cee:	68b8      	ldr	r0, [r7, #8]
 8006cf0:	f000 f975 	bl	8006fde <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf8:	f043 0210 	orr.w	r2, r3, #16
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d00:	68b8      	ldr	r0, [r7, #8]
 8006d02:	f7ff fefd 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d06:	bf00      	nop
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b090      	sub	sp, #64	@ 0x40
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	603b      	str	r3, [r7, #0]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1e:	e050      	b.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d26:	d04c      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d007      	beq.n	8006d3e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d2e:	f7fc f8d1 	bl	8002ed4 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d241      	bcs.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	330c      	adds	r3, #12
 8006d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d60:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e5      	bne.n	8006d3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3314      	adds	r3, #20
 8006d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	613b      	str	r3, [r7, #16]
   return(result);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f023 0301 	bic.w	r3, r3, #1
 8006d88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3314      	adds	r3, #20
 8006d90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d92:	623a      	str	r2, [r7, #32]
 8006d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	69f9      	ldr	r1, [r7, #28]
 8006d98:	6a3a      	ldr	r2, [r7, #32]
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e5      	bne.n	8006d72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e00f      	b.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	bf0c      	ite	eq
 8006dd2:	2301      	moveq	r3, #1
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	461a      	mov	r2, r3
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d09f      	beq.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3740      	adds	r7, #64	@ 0x40
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b085      	sub	sp, #20
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	4613      	mov	r3, r2
 8006df6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	88fa      	ldrh	r2, [r7, #6]
 8006e02:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	88fa      	ldrh	r2, [r7, #6]
 8006e08:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2222      	movs	r2, #34	@ 0x22
 8006e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e2e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0220 	orr.w	r2, r2, #32
 8006e4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b098      	sub	sp, #96	@ 0x60
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	4613      	mov	r3, r2
 8006e68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	88fa      	ldrh	r2, [r7, #6]
 8006e74:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2222      	movs	r2, #34	@ 0x22
 8006e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e88:	4a3e      	ldr	r2, [pc, #248]	@ (8006f84 <UART_Start_Receive_DMA+0x128>)
 8006e8a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e90:	4a3d      	ldr	r2, [pc, #244]	@ (8006f88 <UART_Start_Receive_DMA+0x12c>)
 8006e92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e98:	4a3c      	ldr	r2, [pc, #240]	@ (8006f8c <UART_Start_Receive_DMA+0x130>)
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ea4:	f107 0308 	add.w	r3, r7, #8
 8006ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	f7fc fbbc 	bl	8003638 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d019      	beq.n	8006f12 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ef4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006efe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006f04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e5      	bne.n	8006ede <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3314      	adds	r3, #20
 8006f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f24:	f043 0301 	orr.w	r3, r3, #1
 8006f28:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3314      	adds	r3, #20
 8006f30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f32:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e5      	bne.n	8006f12 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3314      	adds	r3, #20
 8006f4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	617b      	str	r3, [r7, #20]
   return(result);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3314      	adds	r3, #20
 8006f64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f66:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6a39      	ldr	r1, [r7, #32]
 8006f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e5      	bne.n	8006f46 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3760      	adds	r7, #96	@ 0x60
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	08006b13 	.word	0x08006b13
 8006f88:	08006c3f 	.word	0x08006c3f
 8006f8c:	08006c7b 	.word	0x08006c7b

08006f90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b089      	sub	sp, #36	@ 0x24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	330c      	adds	r3, #12
 8006f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	61ba      	str	r2, [r7, #24]
 8006fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6979      	ldr	r1, [r7, #20]
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e5      	bne.n	8006f98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006fd4:	bf00      	nop
 8006fd6:	3724      	adds	r7, #36	@ 0x24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr

08006fde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b095      	sub	sp, #84	@ 0x54
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	330c      	adds	r3, #12
 8006fec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	330c      	adds	r3, #12
 8007004:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007006:	643a      	str	r2, [r7, #64]	@ 0x40
 8007008:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800700c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3314      	adds	r3, #20
 8007020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	61fb      	str	r3, [r7, #28]
   return(result);
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	f023 0301 	bic.w	r3, r3, #1
 8007030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3314      	adds	r3, #20
 8007038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800703a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800703c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e5      	bne.n	800701a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007052:	2b01      	cmp	r3, #1
 8007054:	d119      	bne.n	800708a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	330c      	adds	r3, #12
 800705c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	60bb      	str	r3, [r7, #8]
   return(result);
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f023 0310 	bic.w	r3, r3, #16
 800706c:	647b      	str	r3, [r7, #68]	@ 0x44
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	330c      	adds	r3, #12
 8007074:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007076:	61ba      	str	r2, [r7, #24]
 8007078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6979      	ldr	r1, [r7, #20]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	613b      	str	r3, [r7, #16]
   return(result);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e5      	bne.n	8007056 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007098:	bf00      	nop
 800709a:	3754      	adds	r7, #84	@ 0x54
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr

080070a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f7ff fd1f 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070c2:	bf00      	nop
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b21      	cmp	r3, #33	@ 0x21
 80070dc:	d13e      	bne.n	800715c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e6:	d114      	bne.n	8007112 <UART_Transmit_IT+0x48>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d110      	bne.n	8007112 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007104:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	1c9a      	adds	r2, r3, #2
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	621a      	str	r2, [r3, #32]
 8007110:	e008      	b.n	8007124 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	1c59      	adds	r1, r3, #1
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6211      	str	r1, [r2, #32]
 800711c:	781a      	ldrb	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4619      	mov	r1, r3
 8007132:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10f      	bne.n	8007158 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007146:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007156:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	e000      	b.n	800715e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800715c:	2302      	movs	r3, #2
  }
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800717e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff fca7 	bl	8006adc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08c      	sub	sp, #48	@ 0x30
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b22      	cmp	r3, #34	@ 0x22
 80071aa:	f040 80ae 	bne.w	800730a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b6:	d117      	bne.n	80071e8 <UART_Receive_IT+0x50>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d113      	bne.n	80071e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	1c9a      	adds	r2, r3, #2
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80071e6:	e026      	b.n	8007236 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071fa:	d007      	beq.n	800720c <UART_Receive_IT+0x74>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <UART_Receive_IT+0x82>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d106      	bne.n	800721a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	b2da      	uxtb	r2, r3
 8007214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	e008      	b.n	800722c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007226:	b2da      	uxtb	r2, r3
 8007228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29b      	uxth	r3, r3
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	4619      	mov	r1, r3
 8007244:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007246:	2b00      	cmp	r3, #0
 8007248:	d15d      	bne.n	8007306 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0220 	bic.w	r2, r2, #32
 8007258:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007268:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	695a      	ldr	r2, [r3, #20]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0201 	bic.w	r2, r2, #1
 8007278:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	2b01      	cmp	r3, #1
 800728e:	d135      	bne.n	80072fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	330c      	adds	r3, #12
 800729c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	613b      	str	r3, [r7, #16]
   return(result);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f023 0310 	bic.w	r3, r3, #16
 80072ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	330c      	adds	r3, #12
 80072b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b6:	623a      	str	r2, [r7, #32]
 80072b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	69f9      	ldr	r1, [r7, #28]
 80072bc:	6a3a      	ldr	r2, [r7, #32]
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e5      	bne.n	8007296 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d10a      	bne.n	80072ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7fa fc5d 	bl	8001bb4 <HAL_UARTEx_RxEventCallback>
 80072fa:	e002      	b.n	8007302 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7fa fc47 	bl	8001b90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e002      	b.n	800730c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	e000      	b.n	800730c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800730a:	2302      	movs	r3, #2
  }
}
 800730c:	4618      	mov	r0, r3
 800730e:	3730      	adds	r7, #48	@ 0x30
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800734e:	f023 030c 	bic.w	r3, r3, #12
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6812      	ldr	r2, [r2, #0]
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	430b      	orrs	r3, r1
 800735a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a2c      	ldr	r2, [pc, #176]	@ (8007428 <UART_SetConfig+0x114>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d103      	bne.n	8007384 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800737c:	f7fd fc52 	bl	8004c24 <HAL_RCC_GetPCLK2Freq>
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	e002      	b.n	800738a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007384:	f7fd fc3a 	bl	8004bfc <HAL_RCC_GetPCLK1Freq>
 8007388:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009a      	lsls	r2, r3, #2
 8007394:	441a      	add	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a0:	4a22      	ldr	r2, [pc, #136]	@ (800742c <UART_SetConfig+0x118>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	0119      	lsls	r1, r3, #4
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009a      	lsls	r2, r3, #2
 80073b4:	441a      	add	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80073c0:	4b1a      	ldr	r3, [pc, #104]	@ (800742c <UART_SetConfig+0x118>)
 80073c2:	fba3 0302 	umull	r0, r3, r3, r2
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	2064      	movs	r0, #100	@ 0x64
 80073ca:	fb00 f303 	mul.w	r3, r0, r3
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	3332      	adds	r3, #50	@ 0x32
 80073d4:	4a15      	ldr	r2, [pc, #84]	@ (800742c <UART_SetConfig+0x118>)
 80073d6:	fba2 2303 	umull	r2, r3, r2, r3
 80073da:	095b      	lsrs	r3, r3, #5
 80073dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073e0:	4419      	add	r1, r3
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009a      	lsls	r2, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80073f8:	4b0c      	ldr	r3, [pc, #48]	@ (800742c <UART_SetConfig+0x118>)
 80073fa:	fba3 0302 	umull	r0, r3, r3, r2
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	2064      	movs	r0, #100	@ 0x64
 8007402:	fb00 f303 	mul.w	r3, r0, r3
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	011b      	lsls	r3, r3, #4
 800740a:	3332      	adds	r3, #50	@ 0x32
 800740c:	4a07      	ldr	r2, [pc, #28]	@ (800742c <UART_SetConfig+0x118>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	f003 020f 	and.w	r2, r3, #15
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	440a      	add	r2, r1
 800741e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007420:	bf00      	nop
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40013800 	.word	0x40013800
 800742c:	51eb851f 	.word	0x51eb851f

08007430 <__io_putchar>:
//   return ch;
// }

// �ض��� printf
int __io_putchar(int ch)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, 0xffff);
 8007438:	1d39      	adds	r1, r7, #4
 800743a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800743e:	2201      	movs	r2, #1
 8007440:	4803      	ldr	r0, [pc, #12]	@ (8007450 <__io_putchar+0x20>)
 8007442:	f7fe ffb3 	bl	80063ac <HAL_UART_Transmit>
  return ch;
 8007446:	687b      	ldr	r3, [r7, #4]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20000398 	.word	0x20000398

08007454 <motor_move>:
// #define SET_MOVE_RESET() \
//   do {                   \
//     s_State = START;     \
//   } while (0)

FSM_STATE_t motor_move(uint16_t speed, ENUM_MOTOR_MOTION go_direction) {
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	460a      	mov	r2, r1
 800745e:	80fb      	strh	r3, [r7, #6]
 8007460:	4613      	mov	r3, r2
 8007462:	717b      	strb	r3, [r7, #5]
    START = 0,
    SET_SPEED,
    SET_MOVE,
  } s_State = {START};

  switch (s_State) {
 8007464:	4b20      	ldr	r3, [pc, #128]	@ (80074e8 <motor_move+0x94>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d01f      	beq.n	80074ac <motor_move+0x58>
 800746c:	2b02      	cmp	r3, #2
 800746e:	dc35      	bgt.n	80074dc <motor_move+0x88>
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <motor_move+0x26>
 8007474:	2b01      	cmp	r3, #1
 8007476:	d003      	beq.n	8007480 <motor_move+0x2c>
 8007478:	e030      	b.n	80074dc <motor_move+0x88>
    case START:
      s_State = SET_SPEED;
 800747a:	4b1b      	ldr	r3, [pc, #108]	@ (80074e8 <motor_move+0x94>)
 800747c:	2201      	movs	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
    case SET_SPEED:
      if (!moter_speed_set(speed)) {
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f840 	bl	8007508 <moter_speed_set>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <motor_move+0x52>
        // SET_SPEED_RESET();
        LOGE("wait speed set");
 800748e:	f7fb fd21 	bl	8002ed4 <HAL_GetTick>
 8007492:	4603      	mov	r3, r0
 8007494:	4a15      	ldr	r2, [pc, #84]	@ (80074ec <motor_move+0x98>)
 8007496:	4619      	mov	r1, r3
 8007498:	4815      	ldr	r0, [pc, #84]	@ (80074f0 <motor_move+0x9c>)
 800749a:	f000 fc6d 	bl	8007d78 <iprintf>
        s_State = SET_SPEED;
 800749e:	4b12      	ldr	r3, [pc, #72]	@ (80074e8 <motor_move+0x94>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	701a      	strb	r2, [r3, #0]
        break;
 80074a4:	e01a      	b.n	80074dc <motor_move+0x88>
      }
      s_State = SET_MOVE;
 80074a6:	4b10      	ldr	r3, [pc, #64]	@ (80074e8 <motor_move+0x94>)
 80074a8:	2202      	movs	r2, #2
 80074aa:	701a      	strb	r2, [r3, #0]
    case SET_MOVE:
      if (!moter_set_move(go_direction)) {
 80074ac:	797b      	ldrb	r3, [r7, #5]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 f8b0 	bl	8007614 <moter_set_move>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10b      	bne.n	80074d2 <motor_move+0x7e>
        LOGE("wait move set");
 80074ba:	f7fb fd0b 	bl	8002ed4 <HAL_GetTick>
 80074be:	4603      	mov	r3, r0
 80074c0:	4a0a      	ldr	r2, [pc, #40]	@ (80074ec <motor_move+0x98>)
 80074c2:	4619      	mov	r1, r3
 80074c4:	480b      	ldr	r0, [pc, #44]	@ (80074f4 <motor_move+0xa0>)
 80074c6:	f000 fc57 	bl	8007d78 <iprintf>
        s_State = SET_MOVE;
 80074ca:	4b07      	ldr	r3, [pc, #28]	@ (80074e8 <motor_move+0x94>)
 80074cc:	2202      	movs	r2, #2
 80074ce:	701a      	strb	r2, [r3, #0]
        break;
 80074d0:	e004      	b.n	80074dc <motor_move+0x88>
      }
      s_State = START;
 80074d2:	4b05      	ldr	r3, [pc, #20]	@ (80074e8 <motor_move+0x94>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 80074d8:	2301      	movs	r3, #1
 80074da:	e000      	b.n	80074de <motor_move+0x8a>
  }

  return fsm_onging;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000500 	.word	0x20000500
 80074ec:	08008f90 	.word	0x08008f90
 80074f0:	08008bf0 	.word	0x08008bf0
 80074f4:	08008c1c 	.word	0x08008c1c

080074f8 <motor_stop>:

FSM_STATE_t motor_stop(void) { return moter_speed_set(0); }
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	2000      	movs	r0, #0
 80074fe:	f000 f803 	bl	8007508 <moter_speed_set>
 8007502:	4603      	mov	r3, r0
 8007504:	4618      	mov	r0, r3
 8007506:	bd80      	pop	{r7, pc}

08007508 <moter_speed_set>:

FSM_STATE_t moter_speed_set(uint16_t speed) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	80fb      	strh	r3, [r7, #6]
    SEND_WAITE,
    IS_SUCESS,
  } s_State = {START};

  static uint8_t* ack;
  switch (s_State) {
 8007512:	4b39      	ldr	r3, [pc, #228]	@ (80075f8 <moter_speed_set+0xf0>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b03      	cmp	r3, #3
 8007518:	d860      	bhi.n	80075dc <moter_speed_set+0xd4>
 800751a:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <moter_speed_set+0x18>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	08007531 	.word	0x08007531
 8007524:	08007537 	.word	0x08007537
 8007528:	08007547 	.word	0x08007547
 800752c:	0800754f 	.word	0x0800754f
    case START:
      s_State = SEND_SPEED_CMD;
 8007530:	4b31      	ldr	r3, [pc, #196]	@ (80075f8 <moter_speed_set+0xf0>)
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]
    case SEND_SPEED_CMD:
      Uart_Send_MovementRegister_ServoMotor(3, speed);  // 设置速度
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	4619      	mov	r1, r3
 800753a:	2003      	movs	r0, #3
 800753c:	f7f9 fdc0 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
      s_State = SEND_WAITE;
 8007540:	4b2d      	ldr	r3, [pc, #180]	@ (80075f8 <moter_speed_set+0xf0>)
 8007542:	2202      	movs	r2, #2
 8007544:	701a      	strb	r2, [r3, #0]
    case SEND_WAITE:
      s_State = IS_SUCESS;
 8007546:	4b2c      	ldr	r3, [pc, #176]	@ (80075f8 <moter_speed_set+0xf0>)
 8007548:	2203      	movs	r2, #3
 800754a:	701a      	strb	r2, [r3, #0]
      break;
 800754c:	e046      	b.n	80075dc <moter_speed_set+0xd4>
    case IS_SUCESS:
      ack = GetMoterAck();
 800754e:	f7f8 fe9b 	bl	8000288 <GetMoterAck>
 8007552:	4603      	mov	r3, r0
 8007554:	4a29      	ldr	r2, [pc, #164]	@ (80075fc <moter_speed_set+0xf4>)
 8007556:	6013      	str	r3, [r2, #0]
      LOGI("ack is %02x", ack[0]);
 8007558:	f7fb fcbc 	bl	8002ed4 <HAL_GetTick>
 800755c:	4601      	mov	r1, r0
 800755e:	4b27      	ldr	r3, [pc, #156]	@ (80075fc <moter_speed_set+0xf4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	4a26      	ldr	r2, [pc, #152]	@ (8007600 <moter_speed_set+0xf8>)
 8007566:	4827      	ldr	r0, [pc, #156]	@ (8007604 <moter_speed_set+0xfc>)
 8007568:	f000 fc06 	bl	8007d78 <iprintf>
      LOGI("ack is %02x", ack[1]);
 800756c:	f7fb fcb2 	bl	8002ed4 <HAL_GetTick>
 8007570:	4601      	mov	r1, r0
 8007572:	4b22      	ldr	r3, [pc, #136]	@ (80075fc <moter_speed_set+0xf4>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3301      	adds	r3, #1
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	4a21      	ldr	r2, [pc, #132]	@ (8007600 <moter_speed_set+0xf8>)
 800757c:	4821      	ldr	r0, [pc, #132]	@ (8007604 <moter_speed_set+0xfc>)
 800757e:	f000 fbfb 	bl	8007d78 <iprintf>
      if (NULL == ack) {
 8007582:	4b1e      	ldr	r3, [pc, #120]	@ (80075fc <moter_speed_set+0xf4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10d      	bne.n	80075a6 <moter_speed_set+0x9e>
        LOGE("ack is null");
 800758a:	f7fb fca3 	bl	8002ed4 <HAL_GetTick>
 800758e:	4603      	mov	r3, r0
 8007590:	4a1b      	ldr	r2, [pc, #108]	@ (8007600 <moter_speed_set+0xf8>)
 8007592:	4619      	mov	r1, r3
 8007594:	481c      	ldr	r0, [pc, #112]	@ (8007608 <moter_speed_set+0x100>)
 8007596:	f000 fbef 	bl	8007d78 <iprintf>
        IS_SUCESS_RESET();
 800759a:	4b17      	ldr	r3, [pc, #92]	@ (80075f8 <moter_speed_set+0xf0>)
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]
        return fsm_error;
 80075a0:	f04f 33ff 	mov.w	r3, #4294967295
 80075a4:	e023      	b.n	80075ee <moter_speed_set+0xe6>
      }

      if ((0x00 == ack[0] && speed == ack[1])) {
 80075a6:	4b15      	ldr	r3, [pc, #84]	@ (80075fc <moter_speed_set+0xf4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d111      	bne.n	80075d4 <moter_speed_set+0xcc>
 80075b0:	4b12      	ldr	r3, [pc, #72]	@ (80075fc <moter_speed_set+0xf4>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3301      	adds	r3, #1
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	4293      	cmp	r3, r2
 80075be:	d109      	bne.n	80075d4 <moter_speed_set+0xcc>
        LOGI("speed sucess");
 80075c0:	f7fb fc88 	bl	8002ed4 <HAL_GetTick>
 80075c4:	4603      	mov	r3, r0
 80075c6:	4a0e      	ldr	r2, [pc, #56]	@ (8007600 <moter_speed_set+0xf8>)
 80075c8:	4619      	mov	r1, r3
 80075ca:	4810      	ldr	r0, [pc, #64]	@ (800760c <moter_speed_set+0x104>)
 80075cc:	f000 fbd4 	bl	8007d78 <iprintf>
        return fsm_cpl;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e00c      	b.n	80075ee <moter_speed_set+0xe6>
      }

      s_State = SEND_SPEED_CMD;
 80075d4:	4b08      	ldr	r3, [pc, #32]	@ (80075f8 <moter_speed_set+0xf0>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	701a      	strb	r2, [r3, #0]
      break;
 80075da:	bf00      	nop
  }
  LOGI("onging");
 80075dc:	f7fb fc7a 	bl	8002ed4 <HAL_GetTick>
 80075e0:	4603      	mov	r3, r0
 80075e2:	4a07      	ldr	r2, [pc, #28]	@ (8007600 <moter_speed_set+0xf8>)
 80075e4:	4619      	mov	r1, r3
 80075e6:	480a      	ldr	r0, [pc, #40]	@ (8007610 <moter_speed_set+0x108>)
 80075e8:	f000 fbc6 	bl	8007d78 <iprintf>
  return fsm_onging;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000501 	.word	0x20000501
 80075fc:	20000504 	.word	0x20000504
 8007600:	08008f9c 	.word	0x08008f9c
 8007604:	08008c48 	.word	0x08008c48
 8007608:	08008c70 	.word	0x08008c70
 800760c:	08008c98 	.word	0x08008c98
 8007610:	08008cc0 	.word	0x08008cc0

08007614 <moter_set_move>:

FSM_STATE_t moter_set_move(ENUM_MOTOR_MOTION direction) {
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	71fb      	strb	r3, [r7, #7]
    IS_SUCESS,
  } s_State = {START};

  static uint8_t* ack;
  uint16_t        data;
  switch (s_State) {
 800761e:	4b5d      	ldr	r3, [pc, #372]	@ (8007794 <moter_set_move+0x180>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b03      	cmp	r3, #3
 8007624:	f200 80a9 	bhi.w	800777a <moter_set_move+0x166>
 8007628:	a201      	add	r2, pc, #4	@ (adr r2, 8007630 <moter_set_move+0x1c>)
 800762a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762e:	bf00      	nop
 8007630:	08007641 	.word	0x08007641
 8007634:	0800765b 	.word	0x0800765b
 8007638:	080076bd 	.word	0x080076bd
 800763c:	080076c5 	.word	0x080076c5
    case START:
      s_State = SEND_MOVE_CMD;
 8007640:	4b54      	ldr	r3, [pc, #336]	@ (8007794 <moter_set_move+0x180>)
 8007642:	2201      	movs	r2, #1
 8007644:	701a      	strb	r2, [r3, #0]
      data    = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	81fb      	strh	r3, [r7, #14]
      LOGI("Send start")
 800764a:	f7fb fc43 	bl	8002ed4 <HAL_GetTick>
 800764e:	4603      	mov	r3, r0
 8007650:	4a51      	ldr	r2, [pc, #324]	@ (8007798 <moter_set_move+0x184>)
 8007652:	4619      	mov	r1, r3
 8007654:	4851      	ldr	r0, [pc, #324]	@ (800779c <moter_set_move+0x188>)
 8007656:	f000 fb8f 	bl	8007d78 <iprintf>
    case SEND_MOVE_CMD:

      if (ON_LEFT == GetMoterOnPos()) {
 800765a:	f7f8 fe1f 	bl	800029c <GetMoterOnPos>
 800765e:	4603      	mov	r3, r0
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d111      	bne.n	800768a <moter_set_move+0x76>
        if (KGoLeft == direction)
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d105      	bne.n	8007678 <moter_set_move+0x64>
          Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);
 800766c:	f241 3186 	movw	r1, #4998	@ 0x1386
 8007670:	2003      	movs	r0, #3
 8007672:	f7f9 fd25 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
 8007676:	e01e      	b.n	80076b6 <moter_set_move+0xa2>
        else if (KGoRight == direction)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d11b      	bne.n	80076b6 <moter_set_move+0xa2>
          Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);
 800767e:	f241 3187 	movw	r1, #4999	@ 0x1387
 8007682:	2003      	movs	r0, #3
 8007684:	f7f9 fd1c 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
 8007688:	e015      	b.n	80076b6 <moter_set_move+0xa2>

      } else if (ON_RIGHT == GetMoterOnPos()) {
 800768a:	f7f8 fe07 	bl	800029c <GetMoterOnPos>
 800768e:	4603      	mov	r3, r0
 8007690:	2b01      	cmp	r3, #1
 8007692:	d110      	bne.n	80076b6 <moter_set_move+0xa2>
        if (KGoLeft == direction)
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d105      	bne.n	80076a6 <moter_set_move+0x92>
          Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);
 800769a:	f241 3187 	movw	r1, #4999	@ 0x1387
 800769e:	2003      	movs	r0, #3
 80076a0:	f7f9 fd0e 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
 80076a4:	e007      	b.n	80076b6 <moter_set_move+0xa2>
        else if (KGoRight == direction)
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d104      	bne.n	80076b6 <moter_set_move+0xa2>
          Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);
 80076ac:	f241 3186 	movw	r1, #4998	@ 0x1386
 80076b0:	2003      	movs	r0, #3
 80076b2:	f7f9 fd05 	bl	80010c0 <Uart_Send_MovementRegister_ServoMotor>
      }

      s_State = SEND_WAITE;
 80076b6:	4b37      	ldr	r3, [pc, #220]	@ (8007794 <moter_set_move+0x180>)
 80076b8:	2202      	movs	r2, #2
 80076ba:	701a      	strb	r2, [r3, #0]
    case SEND_WAITE:
      s_State = IS_SUCESS;
 80076bc:	4b35      	ldr	r3, [pc, #212]	@ (8007794 <moter_set_move+0x180>)
 80076be:	2203      	movs	r2, #3
 80076c0:	701a      	strb	r2, [r3, #0]
      // LOGI("send waite");
      break;
 80076c2:	e05a      	b.n	800777a <moter_set_move+0x166>
    case IS_SUCESS:
      ack = GetMoterAck();
 80076c4:	f7f8 fde0 	bl	8000288 <GetMoterAck>
 80076c8:	4603      	mov	r3, r0
 80076ca:	4a35      	ldr	r2, [pc, #212]	@ (80077a0 <moter_set_move+0x18c>)
 80076cc:	6013      	str	r3, [r2, #0]
      LOGI("ack is %02x", ack[0]);
 80076ce:	f7fb fc01 	bl	8002ed4 <HAL_GetTick>
 80076d2:	4601      	mov	r1, r0
 80076d4:	4b32      	ldr	r3, [pc, #200]	@ (80077a0 <moter_set_move+0x18c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	4a2f      	ldr	r2, [pc, #188]	@ (8007798 <moter_set_move+0x184>)
 80076dc:	4831      	ldr	r0, [pc, #196]	@ (80077a4 <moter_set_move+0x190>)
 80076de:	f000 fb4b 	bl	8007d78 <iprintf>
      LOGI("ack is %02x", ack[1]);
 80076e2:	f7fb fbf7 	bl	8002ed4 <HAL_GetTick>
 80076e6:	4601      	mov	r1, r0
 80076e8:	4b2d      	ldr	r3, [pc, #180]	@ (80077a0 <moter_set_move+0x18c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3301      	adds	r3, #1
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	4a29      	ldr	r2, [pc, #164]	@ (8007798 <moter_set_move+0x184>)
 80076f2:	482c      	ldr	r0, [pc, #176]	@ (80077a4 <moter_set_move+0x190>)
 80076f4:	f000 fb40 	bl	8007d78 <iprintf>
      if (NULL == ack) {
 80076f8:	4b29      	ldr	r3, [pc, #164]	@ (80077a0 <moter_set_move+0x18c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10d      	bne.n	800771c <moter_set_move+0x108>
        LOGE("ack is null");
 8007700:	f7fb fbe8 	bl	8002ed4 <HAL_GetTick>
 8007704:	4603      	mov	r3, r0
 8007706:	4a24      	ldr	r2, [pc, #144]	@ (8007798 <moter_set_move+0x184>)
 8007708:	4619      	mov	r1, r3
 800770a:	4827      	ldr	r0, [pc, #156]	@ (80077a8 <moter_set_move+0x194>)
 800770c:	f000 fb34 	bl	8007d78 <iprintf>
        IS_SUCESS_RESET();
 8007710:	4b20      	ldr	r3, [pc, #128]	@ (8007794 <moter_set_move+0x180>)
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
        return fsm_error;
 8007716:	f04f 33ff 	mov.w	r3, #4294967295
 800771a:	e037      	b.n	800778c <moter_set_move+0x178>
      }
      data = ack[0];
 800771c:	4b20      	ldr	r3, [pc, #128]	@ (80077a0 <moter_set_move+0x18c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	81fb      	strh	r3, [r7, #14]
      data <<= 8;
 8007724:	89fb      	ldrh	r3, [r7, #14]
 8007726:	021b      	lsls	r3, r3, #8
 8007728:	81fb      	strh	r3, [r7, #14]
      data |= ack[1];
 800772a:	4b1d      	ldr	r3, [pc, #116]	@ (80077a0 <moter_set_move+0x18c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3301      	adds	r3, #1
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	89fb      	ldrh	r3, [r7, #14]
 8007736:	4313      	orrs	r3, r2
 8007738:	81fb      	strh	r3, [r7, #14]
      LOGI("data is %04x", data);
 800773a:	f7fb fbcb 	bl	8002ed4 <HAL_GetTick>
 800773e:	4601      	mov	r1, r0
 8007740:	89fb      	ldrh	r3, [r7, #14]
 8007742:	4a15      	ldr	r2, [pc, #84]	@ (8007798 <moter_set_move+0x184>)
 8007744:	4819      	ldr	r0, [pc, #100]	@ (80077ac <moter_set_move+0x198>)
 8007746:	f000 fb17 	bl	8007d78 <iprintf>
      //(((uint16_t)ack[4] << 8) | ack[5])
      if (JOGmode_Data_CCW == data ||  //
 800774a:	89fb      	ldrh	r3, [r7, #14]
 800774c:	f241 3286 	movw	r2, #4998	@ 0x1386
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <moter_set_move+0x14a>
 8007754:	89fb      	ldrh	r3, [r7, #14]
 8007756:	f241 3287 	movw	r2, #4999	@ 0x1387
 800775a:	4293      	cmp	r3, r2
 800775c:	d109      	bne.n	8007772 <moter_set_move+0x15e>
          JOGmode_Data_CW == data) {
        LOGI("Is success");
 800775e:	f7fb fbb9 	bl	8002ed4 <HAL_GetTick>
 8007762:	4603      	mov	r3, r0
 8007764:	4a0c      	ldr	r2, [pc, #48]	@ (8007798 <moter_set_move+0x184>)
 8007766:	4619      	mov	r1, r3
 8007768:	4811      	ldr	r0, [pc, #68]	@ (80077b0 <moter_set_move+0x19c>)
 800776a:	f000 fb05 	bl	8007d78 <iprintf>
        return fsm_cpl;
 800776e:	2301      	movs	r3, #1
 8007770:	e00c      	b.n	800778c <moter_set_move+0x178>
      }

      s_State = START;
 8007772:	4b08      	ldr	r3, [pc, #32]	@ (8007794 <moter_set_move+0x180>)
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]
      break;
 8007778:	bf00      	nop
  }
  LOGI(" mov onging");
 800777a:	f7fb fbab 	bl	8002ed4 <HAL_GetTick>
 800777e:	4603      	mov	r3, r0
 8007780:	4a05      	ldr	r2, [pc, #20]	@ (8007798 <moter_set_move+0x184>)
 8007782:	4619      	mov	r1, r3
 8007784:	480b      	ldr	r0, [pc, #44]	@ (80077b4 <moter_set_move+0x1a0>)
 8007786:	f000 faf7 	bl	8007d78 <iprintf>
  return fsm_onging;
 800778a:	2300      	movs	r3, #0
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000508 	.word	0x20000508
 8007798:	08008fac 	.word	0x08008fac
 800779c:	08008ce4 	.word	0x08008ce4
 80077a0:	2000050c 	.word	0x2000050c
 80077a4:	08008c48 	.word	0x08008c48
 80077a8:	08008c70 	.word	0x08008c70
 80077ac:	08008d0c 	.word	0x08008d0c
 80077b0:	08008d34 	.word	0x08008d34
 80077b4:	08008d5c 	.word	0x08008d5c

080077b8 <wireless_reg_handle>:

static uint8_t book_database[][14];

static void wireless_packet_analys(void);

void wireless_reg_handle(UART_HandleTypeDef *h_uart, DMA_HandleTypeDef *h_dma) {
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  m_uart = h_uart;
 80077c2:	4a05      	ldr	r2, [pc, #20]	@ (80077d8 <wireless_reg_handle+0x20>)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6013      	str	r3, [r2, #0]
  m_dma  = h_dma;
 80077c8:	4a04      	ldr	r2, [pc, #16]	@ (80077dc <wireless_reg_handle+0x24>)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6013      	str	r3, [r2, #0]
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr
 80077d8:	20000510 	.word	0x20000510
 80077dc:	20000514 	.word	0x20000514

080077e0 <wireless_event_init>:
void wireless_event_init(void) {
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  wireless_event.type = kPackIdle;
 80077e4:	4b04      	ldr	r3, [pc, #16]	@ (80077f8 <wireless_event_init+0x18>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
  wireless_event.func = wireless_packet_analys;
 80077ea:	4b03      	ldr	r3, [pc, #12]	@ (80077f8 <wireless_event_init+0x18>)
 80077ec:	4a03      	ldr	r2, [pc, #12]	@ (80077fc <wireless_event_init+0x1c>)
 80077ee:	605a      	str	r2, [r3, #4]
}
 80077f0:	bf00      	nop
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bc80      	pop	{r7}
 80077f6:	4770      	bx	lr
 80077f8:	2000061c 	.word	0x2000061c
 80077fc:	08007909 	.word	0x08007909

08007800 <wireless_init>:

void wireless_init(void) {
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
  wireless_event_init();  // 无线事件初始化
 8007804:	f7ff ffec 	bl	80077e0 <wireless_event_init>
  reg_event(&wireless_event);
 8007808:	480b      	ldr	r0, [pc, #44]	@ (8007838 <wireless_init+0x38>)
 800780a:	f000 f91d 	bl	8007a48 <reg_event>

  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口中断+dma
 800780e:	4b0b      	ldr	r3, [pc, #44]	@ (800783c <wireless_init+0x3c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007816:	490a      	ldr	r1, [pc, #40]	@ (8007840 <wireless_init+0x40>)
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe fe6f 	bl	80064fc <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满中断函数
 800781e:	4b09      	ldr	r3, [pc, #36]	@ (8007844 <wireless_init+0x44>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4b07      	ldr	r3, [pc, #28]	@ (8007844 <wireless_init+0x44>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0204 	bic.w	r2, r2, #4
 8007830:	601a      	str	r2, [r3, #0]
}
 8007832:	bf00      	nop
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	2000061c 	.word	0x2000061c
 800783c:	20000510 	.word	0x20000510
 8007840:	20000518 	.word	0x20000518
 8007844:	20000514 	.word	0x20000514

08007848 <GetWireLessHandle>:

UART_HandleTypeDef *GetWireLessHandle(void) {
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  if (m_uart == NULL) LOGW("not get m_uart");
 800784c:	4b07      	ldr	r3, [pc, #28]	@ (800786c <GetWireLessHandle+0x24>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d107      	bne.n	8007864 <GetWireLessHandle+0x1c>
 8007854:	f7fb fb3e 	bl	8002ed4 <HAL_GetTick>
 8007858:	4603      	mov	r3, r0
 800785a:	4a05      	ldr	r2, [pc, #20]	@ (8007870 <GetWireLessHandle+0x28>)
 800785c:	4619      	mov	r1, r3
 800785e:	4805      	ldr	r0, [pc, #20]	@ (8007874 <GetWireLessHandle+0x2c>)
 8007860:	f000 fa8a 	bl	8007d78 <iprintf>
  return m_uart;
 8007864:	4b01      	ldr	r3, [pc, #4]	@ (800786c <GetWireLessHandle+0x24>)
 8007866:	681b      	ldr	r3, [r3, #0]
}
 8007868:	4618      	mov	r0, r3
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20000510 	.word	0x20000510
 8007870:	08008fbc 	.word	0x08008fbc
 8007874:	08008d84 	.word	0x08008d84

08007878 <CRC16_Calculate>:

void wireless_send(uint8_t *data, uint8_t len) { HAL_UART_Transmit(m_uart, data, len, 100); }

static uint16_t CRC16_Calculate(uint8_t *data, uint8_t len) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 8007884:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007888:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	e022      	b.n	80078da <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	4413      	add	r3, r2
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	8afb      	ldrh	r3, [r7, #22]
 80078a0:	4053      	eors	r3, r2
 80078a2:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e011      	b.n	80078ce <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 80078aa:	8afb      	ldrh	r3, [r7, #22]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d006      	beq.n	80078c2 <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0x8408;
 80078b4:	8afb      	ldrh	r3, [r7, #22]
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	4b10      	ldr	r3, [pc, #64]	@ (80078fc <CRC16_Calculate+0x84>)
 80078bc:	4053      	eors	r3, r2
 80078be:	82fb      	strh	r3, [r7, #22]
 80078c0:	e002      	b.n	80078c8 <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 80078c2:	8afb      	ldrh	r3, [r7, #22]
 80078c4:	085b      	lsrs	r3, r3, #1
 80078c6:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b07      	cmp	r3, #7
 80078d2:	ddea      	ble.n	80078aa <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	3301      	adds	r3, #1
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	429a      	cmp	r2, r3
 80078e0:	dbd8      	blt.n	8007894 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 80078e2:	f7fb faf7 	bl	8002ed4 <HAL_GetTick>
 80078e6:	4601      	mov	r1, r0
 80078e8:	8afb      	ldrh	r3, [r7, #22]
 80078ea:	4a05      	ldr	r2, [pc, #20]	@ (8007900 <CRC16_Calculate+0x88>)
 80078ec:	4805      	ldr	r0, [pc, #20]	@ (8007904 <CRC16_Calculate+0x8c>)
 80078ee:	f000 fa43 	bl	8007d78 <iprintf>
  return crc16;
 80078f2:	8afb      	ldrh	r3, [r7, #22]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	ffff8408 	.word	0xffff8408
 8007900:	08008fd0 	.word	0x08008fd0
 8007904:	08008db0 	.word	0x08008db0

08007908 <wireless_packet_analys>:

void wireless_packet_analys(void) {
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
  uint16_t pack_len = rx_buf[0];
 800790e:	4b1c      	ldr	r3, [pc, #112]	@ (8007980 <wireless_packet_analys+0x78>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	80fb      	strh	r3, [r7, #6]

  pack_len <<= 8;
 8007914:	88fb      	ldrh	r3, [r7, #6]
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	80fb      	strh	r3, [r7, #6]
  pack_len = rx_buf[1];
 800791a:	4b19      	ldr	r3, [pc, #100]	@ (8007980 <wireless_packet_analys+0x78>)
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	80fb      	strh	r3, [r7, #6]
  LOGI("%04x", pack_len);
 8007920:	f7fb fad8 	bl	8002ed4 <HAL_GetTick>
 8007924:	4601      	mov	r1, r0
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	4a16      	ldr	r2, [pc, #88]	@ (8007984 <wireless_packet_analys+0x7c>)
 800792a:	4817      	ldr	r0, [pc, #92]	@ (8007988 <wireless_packet_analys+0x80>)
 800792c:	f000 fa24 	bl	8007d78 <iprintf>
  if (rx_len == 9) {
 8007930:	4b16      	ldr	r3, [pc, #88]	@ (800798c <wireless_packet_analys+0x84>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b09      	cmp	r3, #9
 8007936:	d107      	bne.n	8007948 <wireless_packet_analys+0x40>
    cmd    = rx_buf[5];
 8007938:	4b11      	ldr	r3, [pc, #68]	@ (8007980 <wireless_packet_analys+0x78>)
 800793a:	795a      	ldrb	r2, [r3, #5]
 800793c:	4b14      	ldr	r3, [pc, #80]	@ (8007990 <wireless_packet_analys+0x88>)
 800793e:	701a      	strb	r2, [r3, #0]
    rx_len = 0;
 8007940:	4b12      	ldr	r3, [pc, #72]	@ (800798c <wireless_packet_analys+0x84>)
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	e018      	b.n	800797a <wireless_packet_analys+0x72>
  } else if (pack_len > 5) {
 8007948:	88fb      	ldrh	r3, [r7, #6]
 800794a:	2b05      	cmp	r3, #5
 800794c:	d915      	bls.n	800797a <wireless_packet_analys+0x72>
    if (CRC16_Calculate(&rx_buf, pack_len)) {
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	4619      	mov	r1, r3
 8007954:	480a      	ldr	r0, [pc, #40]	@ (8007980 <wireless_packet_analys+0x78>)
 8007956:	f7ff ff8f 	bl	8007878 <CRC16_Calculate>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d008      	beq.n	8007972 <wireless_packet_analys+0x6a>
      LOGE("CRC error");
 8007960:	f7fb fab8 	bl	8002ed4 <HAL_GetTick>
 8007964:	4603      	mov	r3, r0
 8007966:	4a07      	ldr	r2, [pc, #28]	@ (8007984 <wireless_packet_analys+0x7c>)
 8007968:	4619      	mov	r1, r3
 800796a:	480a      	ldr	r0, [pc, #40]	@ (8007994 <wireless_packet_analys+0x8c>)
 800796c:	f000 fa04 	bl	8007d78 <iprintf>
      return;
 8007970:	e003      	b.n	800797a <wireless_packet_analys+0x72>
    }
    //  for (int i = 0; i < pack_len - 4; i++) {
    //    LOGI("%02x", book_buf[i]);
    //  }

    event_data_book(&(rx_buf[2]), 14);
 8007972:	210e      	movs	r1, #14
 8007974:	4808      	ldr	r0, [pc, #32]	@ (8007998 <wireless_packet_analys+0x90>)
 8007976:	f000 f8cf 	bl	8007b18 <event_data_book>
  }
}
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20000518 	.word	0x20000518
 8007984:	08008fe0 	.word	0x08008fe0
 8007988:	08008dd8 	.word	0x08008dd8
 800798c:	20000618 	.word	0x20000618
 8007990:	20000009 	.word	0x20000009
 8007994:	08008df8 	.word	0x08008df8
 8007998:	2000051a 	.word	0x2000051a

0800799c <ClearCmd>:
    for (int i = 0; i < rx_len; i++) LOGI("%02x", rx_buf[i]);
    // LOGI("%02x", wireless_packet_analys())
    flag = false;
  }
}
void ClearCmd(void) { cmd = 10; }
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
 80079a0:	4b03      	ldr	r3, [pc, #12]	@ (80079b0 <ClearCmd+0x14>)
 80079a2:	220a      	movs	r2, #10
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	bf00      	nop
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	20000009 	.word	0x20000009

080079b4 <GetCmdType>:

uint8_t GetCmdType(void) {
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  // if (flag) {
  // LOGI("Cmd is : %02x", cmd);
  // flag = false;
  return cmd;
 80079b8:	4b02      	ldr	r3, [pc, #8]	@ (80079c4 <GetCmdType+0x10>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
  //}
  // return 10;
}
 80079bc:	4618      	mov	r0, r3
 80079be:	46bd      	mov	sp, r7
 80079c0:	bc80      	pop	{r7}
 80079c2:	4770      	bx	lr
 80079c4:	20000009 	.word	0x20000009

080079c8 <receive_rx_data>:

void receive_rx_data(void) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  flag                = true;
 80079cc:	4b15      	ldr	r3, [pc, #84]	@ (8007a24 <receive_rx_data+0x5c>)
 80079ce:	2201      	movs	r2, #1
 80079d0:	701a      	strb	r2, [r3, #0]
  wireless_event.type = kWireLess;
 80079d2:	4b15      	ldr	r3, [pc, #84]	@ (8007a28 <receive_rx_data+0x60>)
 80079d4:	2201      	movs	r2, #1
 80079d6:	701a      	strb	r2, [r3, #0]
  rx_len              = WIRELESS_MAX_BUF_LEN - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 80079d8:	4b14      	ldr	r3, [pc, #80]	@ (8007a2c <receive_rx_data+0x64>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	425b      	negs	r3, r3
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	4b12      	ldr	r3, [pc, #72]	@ (8007a30 <receive_rx_data+0x68>)
 80079e6:	701a      	strb	r2, [r3, #0]
  LOGI("%d", rx_len);
 80079e8:	f7fb fa74 	bl	8002ed4 <HAL_GetTick>
 80079ec:	4601      	mov	r1, r0
 80079ee:	4b10      	ldr	r3, [pc, #64]	@ (8007a30 <receive_rx_data+0x68>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	4a10      	ldr	r2, [pc, #64]	@ (8007a34 <receive_rx_data+0x6c>)
 80079f4:	4810      	ldr	r0, [pc, #64]	@ (8007a38 <receive_rx_data+0x70>)
 80079f6:	f000 f9bf 	bl	8007d78 <iprintf>
  // wireless_packet_analys();
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口中断+dma
 80079fa:	4b10      	ldr	r3, [pc, #64]	@ (8007a3c <receive_rx_data+0x74>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a02:	490f      	ldr	r1, [pc, #60]	@ (8007a40 <receive_rx_data+0x78>)
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe fd79 	bl	80064fc <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满中断函数
 8007a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a44 <receive_rx_data+0x7c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4b0c      	ldr	r3, [pc, #48]	@ (8007a44 <receive_rx_data+0x7c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0204 	bic.w	r2, r2, #4
 8007a1c:	601a      	str	r2, [r3, #0]
}
 8007a1e:	bf00      	nop
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000619 	.word	0x20000619
 8007a28:	2000061c 	.word	0x2000061c
 8007a2c:	200004b8 	.word	0x200004b8
 8007a30:	20000618 	.word	0x20000618
 8007a34:	08008ff8 	.word	0x08008ff8
 8007a38:	08008e40 	.word	0x08008e40
 8007a3c:	20000510 	.word	0x20000510
 8007a40:	20000518 	.word	0x20000518
 8007a44:	20000514 	.word	0x20000514

08007a48 <reg_event>:
static uint8_t book_database[][20];

static Event_t *event[EVENT_NUM];
static uint8_t  index_event;

void reg_event(Event_t *h_event) {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  // event
  if (index_event >= EVENT_NUM) {
 8007a50:	4b0e      	ldr	r3, [pc, #56]	@ (8007a8c <reg_event+0x44>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b0f      	cmp	r3, #15
 8007a56:	d908      	bls.n	8007a6a <reg_event+0x22>
    LOGI("event num overflow");
 8007a58:	f7fb fa3c 	bl	8002ed4 <HAL_GetTick>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007a90 <reg_event+0x48>)
 8007a60:	4619      	mov	r1, r3
 8007a62:	480c      	ldr	r0, [pc, #48]	@ (8007a94 <reg_event+0x4c>)
 8007a64:	f000 f988 	bl	8007d78 <iprintf>
    return;
 8007a68:	e00c      	b.n	8007a84 <reg_event+0x3c>
  }

  event[index_event] = h_event;
 8007a6a:	4b08      	ldr	r3, [pc, #32]	@ (8007a8c <reg_event+0x44>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4a09      	ldr	r2, [pc, #36]	@ (8007a98 <reg_event+0x50>)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  index_event++;
 8007a78:	4b04      	ldr	r3, [pc, #16]	@ (8007a8c <reg_event+0x44>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	4b02      	ldr	r3, [pc, #8]	@ (8007a8c <reg_event+0x44>)
 8007a82:	701a      	strb	r2, [r3, #0]
}
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20000678 	.word	0x20000678
 8007a90:	08009008 	.word	0x08009008
 8007a94:	08008e60 	.word	0x08008e60
 8007a98:	20000638 	.word	0x20000638

08007a9c <event_datapack_process>:

void event_datapack_process(void) {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
  for (int i = 0; i < index_event; i++) {
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	e025      	b.n	8007af4 <event_datapack_process+0x58>
    if (kPackIdle != event[i]->type) {
 8007aa8:	4a17      	ldr	r2, [pc, #92]	@ (8007b08 <event_datapack_process+0x6c>)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01b      	beq.n	8007aee <event_datapack_process+0x52>
      if (NULL == event[i]->func) {
 8007ab6:	4a14      	ldr	r2, [pc, #80]	@ (8007b08 <event_datapack_process+0x6c>)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d108      	bne.n	8007ad6 <event_datapack_process+0x3a>
        LOGE("event func is empty: %d", i);
 8007ac4:	f7fb fa06 	bl	8002ed4 <HAL_GetTick>
 8007ac8:	4601      	mov	r1, r0
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a0f      	ldr	r2, [pc, #60]	@ (8007b0c <event_datapack_process+0x70>)
 8007ace:	4810      	ldr	r0, [pc, #64]	@ (8007b10 <event_datapack_process+0x74>)
 8007ad0:	f000 f952 	bl	8007d78 <iprintf>
        return;
 8007ad4:	e014      	b.n	8007b00 <event_datapack_process+0x64>
      }
      // 相对应的函数

      event[i]->func();
 8007ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8007b08 <event_datapack_process+0x6c>)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	4798      	blx	r3
      event[i]->type = kPackIdle;
 8007ae2:	4a09      	ldr	r2, [pc, #36]	@ (8007b08 <event_datapack_process+0x6c>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aea:	2200      	movs	r2, #0
 8007aec:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < index_event; i++) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3301      	adds	r3, #1
 8007af2:	607b      	str	r3, [r7, #4]
 8007af4:	4b07      	ldr	r3, [pc, #28]	@ (8007b14 <event_datapack_process+0x78>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	461a      	mov	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4293      	cmp	r3, r2
 8007afe:	dbd3      	blt.n	8007aa8 <event_datapack_process+0xc>
    }
  }
}
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000638 	.word	0x20000638
 8007b0c:	08009014 	.word	0x08009014
 8007b10:	08008e90 	.word	0x08008e90
 8007b14:	20000678 	.word	0x20000678

08007b18 <event_data_book>:

void event_cmd_process(void) {}

void event_data_book(const uint8_t *data, uint8_t len) {
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  uint8_t book_num = len / 14;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	085b      	lsrs	r3, r3, #1
 8007b28:	4a21      	ldr	r2, [pc, #132]	@ (8007bb0 <event_data_book+0x98>)
 8007b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2e:	089b      	lsrs	r3, r3, #2
 8007b30:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < book_num; i++) {
 8007b32:	2300      	movs	r3, #0
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	e015      	b.n	8007b64 <event_data_book+0x4c>
    memcpy(book_database[i], &(data[i * 14]), 14);
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb4 <event_data_book+0x9c>)
 8007b44:	1898      	adds	r0, r3, r2
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	461a      	mov	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4413      	add	r3, r2
 8007b56:	220e      	movs	r2, #14
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f000 f9de 	bl	8007f1a <memcpy>
  for (int i = 0; i < book_num; i++) {
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	3301      	adds	r3, #1
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	dbe5      	blt.n	8007b38 <event_data_book+0x20>
  }
  LOGI("SUCESS");
 8007b6c:	f7fb f9b2 	bl	8002ed4 <HAL_GetTick>
 8007b70:	4603      	mov	r3, r0
 8007b72:	4a11      	ldr	r2, [pc, #68]	@ (8007bb8 <event_data_book+0xa0>)
 8007b74:	4619      	mov	r1, r3
 8007b76:	4811      	ldr	r0, [pc, #68]	@ (8007bbc <event_data_book+0xa4>)
 8007b78:	f000 f8fe 	bl	8007d78 <iprintf>

  for (int j = 0; j < 14; j++) {
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]
 8007b80:	e00d      	b.n	8007b9e <event_data_book+0x86>
    LOGI("%02x", book_database[0][j]);
 8007b82:	f7fb f9a7 	bl	8002ed4 <HAL_GetTick>
 8007b86:	4601      	mov	r1, r0
 8007b88:	4a0a      	ldr	r2, [pc, #40]	@ (8007bb4 <event_data_book+0x9c>)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	4a09      	ldr	r2, [pc, #36]	@ (8007bb8 <event_data_book+0xa0>)
 8007b92:	480b      	ldr	r0, [pc, #44]	@ (8007bc0 <event_data_book+0xa8>)
 8007b94:	f000 f8f0 	bl	8007d78 <iprintf>
  for (int j = 0; j < 14; j++) {
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	613b      	str	r3, [r7, #16]
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	2b0d      	cmp	r3, #13
 8007ba2:	ddee      	ble.n	8007b82 <event_data_book+0x6a>
  }
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	92492493 	.word	0x92492493
 8007bb4:	20000624 	.word	0x20000624
 8007bb8:	0800902c 	.word	0x0800902c
 8007bbc:	08008ec4 	.word	0x08008ec4
 8007bc0:	08008ee8 	.word	0x08008ee8

08007bc4 <has_pass_time>:
#include "tick.h"

#include "stm32f1xx_hal.h"

uint32_t has_pass_time(uint32_t last_time)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
    int32_t pass_time;
    pass_time = HAL_GetTick() - last_time;
 8007bcc:	f7fb f982 	bl	8002ed4 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	60fb      	str	r3, [r7, #12]
    if (pass_time >= 0)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	db01      	blt.n	8007be2 <has_pass_time+0x1e>
        return pass_time;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	e003      	b.n	8007bea <has_pass_time+0x26>
    else
        return UINT32_MAX - last_time - pass_time;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	43da      	mvns	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <std>:
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	b510      	push	{r4, lr}
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8007bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c02:	6083      	str	r3, [r0, #8]
 8007c04:	8181      	strh	r1, [r0, #12]
 8007c06:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c08:	81c2      	strh	r2, [r0, #14]
 8007c0a:	6183      	str	r3, [r0, #24]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	2208      	movs	r2, #8
 8007c10:	305c      	adds	r0, #92	@ 0x5c
 8007c12:	f000 f906 	bl	8007e22 <memset>
 8007c16:	4b0d      	ldr	r3, [pc, #52]	@ (8007c4c <std+0x58>)
 8007c18:	6224      	str	r4, [r4, #32]
 8007c1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c50 <std+0x5c>)
 8007c1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c20:	4b0c      	ldr	r3, [pc, #48]	@ (8007c54 <std+0x60>)
 8007c22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c24:	4b0c      	ldr	r3, [pc, #48]	@ (8007c58 <std+0x64>)
 8007c26:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c28:	4b0c      	ldr	r3, [pc, #48]	@ (8007c5c <std+0x68>)
 8007c2a:	429c      	cmp	r4, r3
 8007c2c:	d006      	beq.n	8007c3c <std+0x48>
 8007c2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c32:	4294      	cmp	r4, r2
 8007c34:	d002      	beq.n	8007c3c <std+0x48>
 8007c36:	33d0      	adds	r3, #208	@ 0xd0
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	d105      	bne.n	8007c48 <std+0x54>
 8007c3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c44:	f000 b966 	b.w	8007f14 <__retarget_lock_init_recursive>
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	bf00      	nop
 8007c4c:	08007d9d 	.word	0x08007d9d
 8007c50:	08007dbf 	.word	0x08007dbf
 8007c54:	08007df7 	.word	0x08007df7
 8007c58:	08007e1b 	.word	0x08007e1b
 8007c5c:	2000067c 	.word	0x2000067c

08007c60 <stdio_exit_handler>:
 8007c60:	4a02      	ldr	r2, [pc, #8]	@ (8007c6c <stdio_exit_handler+0xc>)
 8007c62:	4903      	ldr	r1, [pc, #12]	@ (8007c70 <stdio_exit_handler+0x10>)
 8007c64:	4803      	ldr	r0, [pc, #12]	@ (8007c74 <stdio_exit_handler+0x14>)
 8007c66:	f000 b869 	b.w	8007d3c <_fwalk_sglue>
 8007c6a:	bf00      	nop
 8007c6c:	2000000c 	.word	0x2000000c
 8007c70:	080087c9 	.word	0x080087c9
 8007c74:	2000001c 	.word	0x2000001c

08007c78 <cleanup_stdio>:
 8007c78:	6841      	ldr	r1, [r0, #4]
 8007c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007cac <cleanup_stdio+0x34>)
 8007c7c:	b510      	push	{r4, lr}
 8007c7e:	4299      	cmp	r1, r3
 8007c80:	4604      	mov	r4, r0
 8007c82:	d001      	beq.n	8007c88 <cleanup_stdio+0x10>
 8007c84:	f000 fda0 	bl	80087c8 <_fflush_r>
 8007c88:	68a1      	ldr	r1, [r4, #8]
 8007c8a:	4b09      	ldr	r3, [pc, #36]	@ (8007cb0 <cleanup_stdio+0x38>)
 8007c8c:	4299      	cmp	r1, r3
 8007c8e:	d002      	beq.n	8007c96 <cleanup_stdio+0x1e>
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 fd99 	bl	80087c8 <_fflush_r>
 8007c96:	68e1      	ldr	r1, [r4, #12]
 8007c98:	4b06      	ldr	r3, [pc, #24]	@ (8007cb4 <cleanup_stdio+0x3c>)
 8007c9a:	4299      	cmp	r1, r3
 8007c9c:	d004      	beq.n	8007ca8 <cleanup_stdio+0x30>
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca4:	f000 bd90 	b.w	80087c8 <_fflush_r>
 8007ca8:	bd10      	pop	{r4, pc}
 8007caa:	bf00      	nop
 8007cac:	2000067c 	.word	0x2000067c
 8007cb0:	200006e4 	.word	0x200006e4
 8007cb4:	2000074c 	.word	0x2000074c

08007cb8 <global_stdio_init.part.0>:
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce8 <global_stdio_init.part.0+0x30>)
 8007cbc:	4c0b      	ldr	r4, [pc, #44]	@ (8007cec <global_stdio_init.part.0+0x34>)
 8007cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8007cf0 <global_stdio_init.part.0+0x38>)
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	2104      	movs	r1, #4
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f7ff ff94 	bl	8007bf4 <std>
 8007ccc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	2109      	movs	r1, #9
 8007cd4:	f7ff ff8e 	bl	8007bf4 <std>
 8007cd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007cdc:	2202      	movs	r2, #2
 8007cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce2:	2112      	movs	r1, #18
 8007ce4:	f7ff bf86 	b.w	8007bf4 <std>
 8007ce8:	200007b4 	.word	0x200007b4
 8007cec:	2000067c 	.word	0x2000067c
 8007cf0:	08007c61 	.word	0x08007c61

08007cf4 <__sfp_lock_acquire>:
 8007cf4:	4801      	ldr	r0, [pc, #4]	@ (8007cfc <__sfp_lock_acquire+0x8>)
 8007cf6:	f000 b90e 	b.w	8007f16 <__retarget_lock_acquire_recursive>
 8007cfa:	bf00      	nop
 8007cfc:	200007bd 	.word	0x200007bd

08007d00 <__sfp_lock_release>:
 8007d00:	4801      	ldr	r0, [pc, #4]	@ (8007d08 <__sfp_lock_release+0x8>)
 8007d02:	f000 b909 	b.w	8007f18 <__retarget_lock_release_recursive>
 8007d06:	bf00      	nop
 8007d08:	200007bd 	.word	0x200007bd

08007d0c <__sinit>:
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	4604      	mov	r4, r0
 8007d10:	f7ff fff0 	bl	8007cf4 <__sfp_lock_acquire>
 8007d14:	6a23      	ldr	r3, [r4, #32]
 8007d16:	b11b      	cbz	r3, 8007d20 <__sinit+0x14>
 8007d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d1c:	f7ff bff0 	b.w	8007d00 <__sfp_lock_release>
 8007d20:	4b04      	ldr	r3, [pc, #16]	@ (8007d34 <__sinit+0x28>)
 8007d22:	6223      	str	r3, [r4, #32]
 8007d24:	4b04      	ldr	r3, [pc, #16]	@ (8007d38 <__sinit+0x2c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f5      	bne.n	8007d18 <__sinit+0xc>
 8007d2c:	f7ff ffc4 	bl	8007cb8 <global_stdio_init.part.0>
 8007d30:	e7f2      	b.n	8007d18 <__sinit+0xc>
 8007d32:	bf00      	nop
 8007d34:	08007c79 	.word	0x08007c79
 8007d38:	200007b4 	.word	0x200007b4

08007d3c <_fwalk_sglue>:
 8007d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d40:	4607      	mov	r7, r0
 8007d42:	4688      	mov	r8, r1
 8007d44:	4614      	mov	r4, r2
 8007d46:	2600      	movs	r6, #0
 8007d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8007d50:	d505      	bpl.n	8007d5e <_fwalk_sglue+0x22>
 8007d52:	6824      	ldr	r4, [r4, #0]
 8007d54:	2c00      	cmp	r4, #0
 8007d56:	d1f7      	bne.n	8007d48 <_fwalk_sglue+0xc>
 8007d58:	4630      	mov	r0, r6
 8007d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d907      	bls.n	8007d74 <_fwalk_sglue+0x38>
 8007d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	d003      	beq.n	8007d74 <_fwalk_sglue+0x38>
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	4638      	mov	r0, r7
 8007d70:	47c0      	blx	r8
 8007d72:	4306      	orrs	r6, r0
 8007d74:	3568      	adds	r5, #104	@ 0x68
 8007d76:	e7e9      	b.n	8007d4c <_fwalk_sglue+0x10>

08007d78 <iprintf>:
 8007d78:	b40f      	push	{r0, r1, r2, r3}
 8007d7a:	b507      	push	{r0, r1, r2, lr}
 8007d7c:	4906      	ldr	r1, [pc, #24]	@ (8007d98 <iprintf+0x20>)
 8007d7e:	ab04      	add	r3, sp, #16
 8007d80:	6808      	ldr	r0, [r1, #0]
 8007d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d86:	6881      	ldr	r1, [r0, #8]
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	f000 f9f3 	bl	8008174 <_vfiprintf_r>
 8007d8e:	b003      	add	sp, #12
 8007d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d94:	b004      	add	sp, #16
 8007d96:	4770      	bx	lr
 8007d98:	20000018 	.word	0x20000018

08007d9c <__sread>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	460c      	mov	r4, r1
 8007da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da4:	f000 f868 	bl	8007e78 <_read_r>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	bfab      	itete	ge
 8007dac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007dae:	89a3      	ldrhlt	r3, [r4, #12]
 8007db0:	181b      	addge	r3, r3, r0
 8007db2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007db6:	bfac      	ite	ge
 8007db8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007dba:	81a3      	strhlt	r3, [r4, #12]
 8007dbc:	bd10      	pop	{r4, pc}

08007dbe <__swrite>:
 8007dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	461f      	mov	r7, r3
 8007dc4:	898b      	ldrh	r3, [r1, #12]
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	05db      	lsls	r3, r3, #23
 8007dca:	460c      	mov	r4, r1
 8007dcc:	4616      	mov	r6, r2
 8007dce:	d505      	bpl.n	8007ddc <__swrite+0x1e>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd8:	f000 f83c 	bl	8007e54 <_lseek_r>
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	4632      	mov	r2, r6
 8007de0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	4628      	mov	r0, r5
 8007de8:	463b      	mov	r3, r7
 8007dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007df2:	f000 b853 	b.w	8007e9c <_write_r>

08007df6 <__sseek>:
 8007df6:	b510      	push	{r4, lr}
 8007df8:	460c      	mov	r4, r1
 8007dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfe:	f000 f829 	bl	8007e54 <_lseek_r>
 8007e02:	1c43      	adds	r3, r0, #1
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	bf15      	itete	ne
 8007e08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e12:	81a3      	strheq	r3, [r4, #12]
 8007e14:	bf18      	it	ne
 8007e16:	81a3      	strhne	r3, [r4, #12]
 8007e18:	bd10      	pop	{r4, pc}

08007e1a <__sclose>:
 8007e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1e:	f000 b809 	b.w	8007e34 <_close_r>

08007e22 <memset>:
 8007e22:	4603      	mov	r3, r0
 8007e24:	4402      	add	r2, r0
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d100      	bne.n	8007e2c <memset+0xa>
 8007e2a:	4770      	bx	lr
 8007e2c:	f803 1b01 	strb.w	r1, [r3], #1
 8007e30:	e7f9      	b.n	8007e26 <memset+0x4>
	...

08007e34 <_close_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	2300      	movs	r3, #0
 8007e38:	4d05      	ldr	r5, [pc, #20]	@ (8007e50 <_close_r+0x1c>)
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	602b      	str	r3, [r5, #0]
 8007e40:	f7fa fb0c 	bl	800245c <_close>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d102      	bne.n	8007e4e <_close_r+0x1a>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	b103      	cbz	r3, 8007e4e <_close_r+0x1a>
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	200007b8 	.word	0x200007b8

08007e54 <_lseek_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4d05      	ldr	r5, [pc, #20]	@ (8007e74 <_lseek_r+0x20>)
 8007e60:	602a      	str	r2, [r5, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f7fa fb1e 	bl	80024a4 <_lseek>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_lseek_r+0x1e>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_lseek_r+0x1e>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	200007b8 	.word	0x200007b8

08007e78 <_read_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	4611      	mov	r1, r2
 8007e80:	2200      	movs	r2, #0
 8007e82:	4d05      	ldr	r5, [pc, #20]	@ (8007e98 <_read_r+0x20>)
 8007e84:	602a      	str	r2, [r5, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f7fa faaf 	bl	80023ea <_read>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_read_r+0x1e>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_read_r+0x1e>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	200007b8 	.word	0x200007b8

08007e9c <_write_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	4608      	mov	r0, r1
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4d05      	ldr	r5, [pc, #20]	@ (8007ebc <_write_r+0x20>)
 8007ea8:	602a      	str	r2, [r5, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f7fa faba 	bl	8002424 <_write>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_write_r+0x1e>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_write_r+0x1e>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	200007b8 	.word	0x200007b8

08007ec0 <__errno>:
 8007ec0:	4b01      	ldr	r3, [pc, #4]	@ (8007ec8 <__errno+0x8>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	20000018 	.word	0x20000018

08007ecc <__libc_init_array>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	2600      	movs	r6, #0
 8007ed0:	4d0c      	ldr	r5, [pc, #48]	@ (8007f04 <__libc_init_array+0x38>)
 8007ed2:	4c0d      	ldr	r4, [pc, #52]	@ (8007f08 <__libc_init_array+0x3c>)
 8007ed4:	1b64      	subs	r4, r4, r5
 8007ed6:	10a4      	asrs	r4, r4, #2
 8007ed8:	42a6      	cmp	r6, r4
 8007eda:	d109      	bne.n	8007ef0 <__libc_init_array+0x24>
 8007edc:	f000 fdd2 	bl	8008a84 <_init>
 8007ee0:	2600      	movs	r6, #0
 8007ee2:	4d0a      	ldr	r5, [pc, #40]	@ (8007f0c <__libc_init_array+0x40>)
 8007ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8007f10 <__libc_init_array+0x44>)
 8007ee6:	1b64      	subs	r4, r4, r5
 8007ee8:	10a4      	asrs	r4, r4, #2
 8007eea:	42a6      	cmp	r6, r4
 8007eec:	d105      	bne.n	8007efa <__libc_init_array+0x2e>
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef4:	4798      	blx	r3
 8007ef6:	3601      	adds	r6, #1
 8007ef8:	e7ee      	b.n	8007ed8 <__libc_init_array+0xc>
 8007efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efe:	4798      	blx	r3
 8007f00:	3601      	adds	r6, #1
 8007f02:	e7f2      	b.n	8007eea <__libc_init_array+0x1e>
 8007f04:	08009070 	.word	0x08009070
 8007f08:	08009070 	.word	0x08009070
 8007f0c:	08009070 	.word	0x08009070
 8007f10:	08009074 	.word	0x08009074

08007f14 <__retarget_lock_init_recursive>:
 8007f14:	4770      	bx	lr

08007f16 <__retarget_lock_acquire_recursive>:
 8007f16:	4770      	bx	lr

08007f18 <__retarget_lock_release_recursive>:
 8007f18:	4770      	bx	lr

08007f1a <memcpy>:
 8007f1a:	440a      	add	r2, r1
 8007f1c:	4291      	cmp	r1, r2
 8007f1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f22:	d100      	bne.n	8007f26 <memcpy+0xc>
 8007f24:	4770      	bx	lr
 8007f26:	b510      	push	{r4, lr}
 8007f28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f2c:	4291      	cmp	r1, r2
 8007f2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f32:	d1f9      	bne.n	8007f28 <memcpy+0xe>
 8007f34:	bd10      	pop	{r4, pc}
	...

08007f38 <_free_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	d040      	beq.n	8007fc2 <_free_r+0x8a>
 8007f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f44:	1f0c      	subs	r4, r1, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfb8      	it	lt
 8007f4a:	18e4      	addlt	r4, r4, r3
 8007f4c:	f000 f8de 	bl	800810c <__malloc_lock>
 8007f50:	4a1c      	ldr	r2, [pc, #112]	@ (8007fc4 <_free_r+0x8c>)
 8007f52:	6813      	ldr	r3, [r2, #0]
 8007f54:	b933      	cbnz	r3, 8007f64 <_free_r+0x2c>
 8007f56:	6063      	str	r3, [r4, #4]
 8007f58:	6014      	str	r4, [r2, #0]
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f60:	f000 b8da 	b.w	8008118 <__malloc_unlock>
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	d908      	bls.n	8007f7a <_free_r+0x42>
 8007f68:	6820      	ldr	r0, [r4, #0]
 8007f6a:	1821      	adds	r1, r4, r0
 8007f6c:	428b      	cmp	r3, r1
 8007f6e:	bf01      	itttt	eq
 8007f70:	6819      	ldreq	r1, [r3, #0]
 8007f72:	685b      	ldreq	r3, [r3, #4]
 8007f74:	1809      	addeq	r1, r1, r0
 8007f76:	6021      	streq	r1, [r4, #0]
 8007f78:	e7ed      	b.n	8007f56 <_free_r+0x1e>
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	b10b      	cbz	r3, 8007f84 <_free_r+0x4c>
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d9fa      	bls.n	8007f7a <_free_r+0x42>
 8007f84:	6811      	ldr	r1, [r2, #0]
 8007f86:	1850      	adds	r0, r2, r1
 8007f88:	42a0      	cmp	r0, r4
 8007f8a:	d10b      	bne.n	8007fa4 <_free_r+0x6c>
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	4401      	add	r1, r0
 8007f90:	1850      	adds	r0, r2, r1
 8007f92:	4283      	cmp	r3, r0
 8007f94:	6011      	str	r1, [r2, #0]
 8007f96:	d1e0      	bne.n	8007f5a <_free_r+0x22>
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	4408      	add	r0, r1
 8007f9e:	6010      	str	r0, [r2, #0]
 8007fa0:	6053      	str	r3, [r2, #4]
 8007fa2:	e7da      	b.n	8007f5a <_free_r+0x22>
 8007fa4:	d902      	bls.n	8007fac <_free_r+0x74>
 8007fa6:	230c      	movs	r3, #12
 8007fa8:	602b      	str	r3, [r5, #0]
 8007faa:	e7d6      	b.n	8007f5a <_free_r+0x22>
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	1821      	adds	r1, r4, r0
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	bf01      	itttt	eq
 8007fb4:	6819      	ldreq	r1, [r3, #0]
 8007fb6:	685b      	ldreq	r3, [r3, #4]
 8007fb8:	1809      	addeq	r1, r1, r0
 8007fba:	6021      	streq	r1, [r4, #0]
 8007fbc:	6063      	str	r3, [r4, #4]
 8007fbe:	6054      	str	r4, [r2, #4]
 8007fc0:	e7cb      	b.n	8007f5a <_free_r+0x22>
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	200007c4 	.word	0x200007c4

08007fc8 <sbrk_aligned>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	4e0f      	ldr	r6, [pc, #60]	@ (8008008 <sbrk_aligned+0x40>)
 8007fcc:	460c      	mov	r4, r1
 8007fce:	6831      	ldr	r1, [r6, #0]
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	b911      	cbnz	r1, 8007fda <sbrk_aligned+0x12>
 8007fd4:	f000 fcb4 	bl	8008940 <_sbrk_r>
 8007fd8:	6030      	str	r0, [r6, #0]
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f000 fcaf 	bl	8008940 <_sbrk_r>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d103      	bne.n	8007fee <sbrk_aligned+0x26>
 8007fe6:	f04f 34ff 	mov.w	r4, #4294967295
 8007fea:	4620      	mov	r0, r4
 8007fec:	bd70      	pop	{r4, r5, r6, pc}
 8007fee:	1cc4      	adds	r4, r0, #3
 8007ff0:	f024 0403 	bic.w	r4, r4, #3
 8007ff4:	42a0      	cmp	r0, r4
 8007ff6:	d0f8      	beq.n	8007fea <sbrk_aligned+0x22>
 8007ff8:	1a21      	subs	r1, r4, r0
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f000 fca0 	bl	8008940 <_sbrk_r>
 8008000:	3001      	adds	r0, #1
 8008002:	d1f2      	bne.n	8007fea <sbrk_aligned+0x22>
 8008004:	e7ef      	b.n	8007fe6 <sbrk_aligned+0x1e>
 8008006:	bf00      	nop
 8008008:	200007c0 	.word	0x200007c0

0800800c <_malloc_r>:
 800800c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008010:	1ccd      	adds	r5, r1, #3
 8008012:	f025 0503 	bic.w	r5, r5, #3
 8008016:	3508      	adds	r5, #8
 8008018:	2d0c      	cmp	r5, #12
 800801a:	bf38      	it	cc
 800801c:	250c      	movcc	r5, #12
 800801e:	2d00      	cmp	r5, #0
 8008020:	4606      	mov	r6, r0
 8008022:	db01      	blt.n	8008028 <_malloc_r+0x1c>
 8008024:	42a9      	cmp	r1, r5
 8008026:	d904      	bls.n	8008032 <_malloc_r+0x26>
 8008028:	230c      	movs	r3, #12
 800802a:	6033      	str	r3, [r6, #0]
 800802c:	2000      	movs	r0, #0
 800802e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008032:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008108 <_malloc_r+0xfc>
 8008036:	f000 f869 	bl	800810c <__malloc_lock>
 800803a:	f8d8 3000 	ldr.w	r3, [r8]
 800803e:	461c      	mov	r4, r3
 8008040:	bb44      	cbnz	r4, 8008094 <_malloc_r+0x88>
 8008042:	4629      	mov	r1, r5
 8008044:	4630      	mov	r0, r6
 8008046:	f7ff ffbf 	bl	8007fc8 <sbrk_aligned>
 800804a:	1c43      	adds	r3, r0, #1
 800804c:	4604      	mov	r4, r0
 800804e:	d158      	bne.n	8008102 <_malloc_r+0xf6>
 8008050:	f8d8 4000 	ldr.w	r4, [r8]
 8008054:	4627      	mov	r7, r4
 8008056:	2f00      	cmp	r7, #0
 8008058:	d143      	bne.n	80080e2 <_malloc_r+0xd6>
 800805a:	2c00      	cmp	r4, #0
 800805c:	d04b      	beq.n	80080f6 <_malloc_r+0xea>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	4639      	mov	r1, r7
 8008062:	4630      	mov	r0, r6
 8008064:	eb04 0903 	add.w	r9, r4, r3
 8008068:	f000 fc6a 	bl	8008940 <_sbrk_r>
 800806c:	4581      	cmp	r9, r0
 800806e:	d142      	bne.n	80080f6 <_malloc_r+0xea>
 8008070:	6821      	ldr	r1, [r4, #0]
 8008072:	4630      	mov	r0, r6
 8008074:	1a6d      	subs	r5, r5, r1
 8008076:	4629      	mov	r1, r5
 8008078:	f7ff ffa6 	bl	8007fc8 <sbrk_aligned>
 800807c:	3001      	adds	r0, #1
 800807e:	d03a      	beq.n	80080f6 <_malloc_r+0xea>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	442b      	add	r3, r5
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	f8d8 3000 	ldr.w	r3, [r8]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	bb62      	cbnz	r2, 80080e8 <_malloc_r+0xdc>
 800808e:	f8c8 7000 	str.w	r7, [r8]
 8008092:	e00f      	b.n	80080b4 <_malloc_r+0xa8>
 8008094:	6822      	ldr	r2, [r4, #0]
 8008096:	1b52      	subs	r2, r2, r5
 8008098:	d420      	bmi.n	80080dc <_malloc_r+0xd0>
 800809a:	2a0b      	cmp	r2, #11
 800809c:	d917      	bls.n	80080ce <_malloc_r+0xc2>
 800809e:	1961      	adds	r1, r4, r5
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	6025      	str	r5, [r4, #0]
 80080a4:	bf18      	it	ne
 80080a6:	6059      	strne	r1, [r3, #4]
 80080a8:	6863      	ldr	r3, [r4, #4]
 80080aa:	bf08      	it	eq
 80080ac:	f8c8 1000 	streq.w	r1, [r8]
 80080b0:	5162      	str	r2, [r4, r5]
 80080b2:	604b      	str	r3, [r1, #4]
 80080b4:	4630      	mov	r0, r6
 80080b6:	f000 f82f 	bl	8008118 <__malloc_unlock>
 80080ba:	f104 000b 	add.w	r0, r4, #11
 80080be:	1d23      	adds	r3, r4, #4
 80080c0:	f020 0007 	bic.w	r0, r0, #7
 80080c4:	1ac2      	subs	r2, r0, r3
 80080c6:	bf1c      	itt	ne
 80080c8:	1a1b      	subne	r3, r3, r0
 80080ca:	50a3      	strne	r3, [r4, r2]
 80080cc:	e7af      	b.n	800802e <_malloc_r+0x22>
 80080ce:	6862      	ldr	r2, [r4, #4]
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	bf0c      	ite	eq
 80080d4:	f8c8 2000 	streq.w	r2, [r8]
 80080d8:	605a      	strne	r2, [r3, #4]
 80080da:	e7eb      	b.n	80080b4 <_malloc_r+0xa8>
 80080dc:	4623      	mov	r3, r4
 80080de:	6864      	ldr	r4, [r4, #4]
 80080e0:	e7ae      	b.n	8008040 <_malloc_r+0x34>
 80080e2:	463c      	mov	r4, r7
 80080e4:	687f      	ldr	r7, [r7, #4]
 80080e6:	e7b6      	b.n	8008056 <_malloc_r+0x4a>
 80080e8:	461a      	mov	r2, r3
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	d1fb      	bne.n	80080e8 <_malloc_r+0xdc>
 80080f0:	2300      	movs	r3, #0
 80080f2:	6053      	str	r3, [r2, #4]
 80080f4:	e7de      	b.n	80080b4 <_malloc_r+0xa8>
 80080f6:	230c      	movs	r3, #12
 80080f8:	4630      	mov	r0, r6
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	f000 f80c 	bl	8008118 <__malloc_unlock>
 8008100:	e794      	b.n	800802c <_malloc_r+0x20>
 8008102:	6005      	str	r5, [r0, #0]
 8008104:	e7d6      	b.n	80080b4 <_malloc_r+0xa8>
 8008106:	bf00      	nop
 8008108:	200007c4 	.word	0x200007c4

0800810c <__malloc_lock>:
 800810c:	4801      	ldr	r0, [pc, #4]	@ (8008114 <__malloc_lock+0x8>)
 800810e:	f7ff bf02 	b.w	8007f16 <__retarget_lock_acquire_recursive>
 8008112:	bf00      	nop
 8008114:	200007bc 	.word	0x200007bc

08008118 <__malloc_unlock>:
 8008118:	4801      	ldr	r0, [pc, #4]	@ (8008120 <__malloc_unlock+0x8>)
 800811a:	f7ff befd 	b.w	8007f18 <__retarget_lock_release_recursive>
 800811e:	bf00      	nop
 8008120:	200007bc 	.word	0x200007bc

08008124 <__sfputc_r>:
 8008124:	6893      	ldr	r3, [r2, #8]
 8008126:	b410      	push	{r4}
 8008128:	3b01      	subs	r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	6093      	str	r3, [r2, #8]
 800812e:	da07      	bge.n	8008140 <__sfputc_r+0x1c>
 8008130:	6994      	ldr	r4, [r2, #24]
 8008132:	42a3      	cmp	r3, r4
 8008134:	db01      	blt.n	800813a <__sfputc_r+0x16>
 8008136:	290a      	cmp	r1, #10
 8008138:	d102      	bne.n	8008140 <__sfputc_r+0x1c>
 800813a:	bc10      	pop	{r4}
 800813c:	f000 bb6c 	b.w	8008818 <__swbuf_r>
 8008140:	6813      	ldr	r3, [r2, #0]
 8008142:	1c58      	adds	r0, r3, #1
 8008144:	6010      	str	r0, [r2, #0]
 8008146:	7019      	strb	r1, [r3, #0]
 8008148:	4608      	mov	r0, r1
 800814a:	bc10      	pop	{r4}
 800814c:	4770      	bx	lr

0800814e <__sfputs_r>:
 800814e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008150:	4606      	mov	r6, r0
 8008152:	460f      	mov	r7, r1
 8008154:	4614      	mov	r4, r2
 8008156:	18d5      	adds	r5, r2, r3
 8008158:	42ac      	cmp	r4, r5
 800815a:	d101      	bne.n	8008160 <__sfputs_r+0x12>
 800815c:	2000      	movs	r0, #0
 800815e:	e007      	b.n	8008170 <__sfputs_r+0x22>
 8008160:	463a      	mov	r2, r7
 8008162:	4630      	mov	r0, r6
 8008164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008168:	f7ff ffdc 	bl	8008124 <__sfputc_r>
 800816c:	1c43      	adds	r3, r0, #1
 800816e:	d1f3      	bne.n	8008158 <__sfputs_r+0xa>
 8008170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008174 <_vfiprintf_r>:
 8008174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	460d      	mov	r5, r1
 800817a:	4614      	mov	r4, r2
 800817c:	4698      	mov	r8, r3
 800817e:	4606      	mov	r6, r0
 8008180:	b09d      	sub	sp, #116	@ 0x74
 8008182:	b118      	cbz	r0, 800818c <_vfiprintf_r+0x18>
 8008184:	6a03      	ldr	r3, [r0, #32]
 8008186:	b90b      	cbnz	r3, 800818c <_vfiprintf_r+0x18>
 8008188:	f7ff fdc0 	bl	8007d0c <__sinit>
 800818c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800818e:	07d9      	lsls	r1, r3, #31
 8008190:	d405      	bmi.n	800819e <_vfiprintf_r+0x2a>
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	059a      	lsls	r2, r3, #22
 8008196:	d402      	bmi.n	800819e <_vfiprintf_r+0x2a>
 8008198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800819a:	f7ff febc 	bl	8007f16 <__retarget_lock_acquire_recursive>
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	071b      	lsls	r3, r3, #28
 80081a2:	d501      	bpl.n	80081a8 <_vfiprintf_r+0x34>
 80081a4:	692b      	ldr	r3, [r5, #16]
 80081a6:	b99b      	cbnz	r3, 80081d0 <_vfiprintf_r+0x5c>
 80081a8:	4629      	mov	r1, r5
 80081aa:	4630      	mov	r0, r6
 80081ac:	f000 fb72 	bl	8008894 <__swsetup_r>
 80081b0:	b170      	cbz	r0, 80081d0 <_vfiprintf_r+0x5c>
 80081b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081b4:	07dc      	lsls	r4, r3, #31
 80081b6:	d504      	bpl.n	80081c2 <_vfiprintf_r+0x4e>
 80081b8:	f04f 30ff 	mov.w	r0, #4294967295
 80081bc:	b01d      	add	sp, #116	@ 0x74
 80081be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	0598      	lsls	r0, r3, #22
 80081c6:	d4f7      	bmi.n	80081b8 <_vfiprintf_r+0x44>
 80081c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ca:	f7ff fea5 	bl	8007f18 <__retarget_lock_release_recursive>
 80081ce:	e7f3      	b.n	80081b8 <_vfiprintf_r+0x44>
 80081d0:	2300      	movs	r3, #0
 80081d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80081d4:	2320      	movs	r3, #32
 80081d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081da:	2330      	movs	r3, #48	@ 0x30
 80081dc:	f04f 0901 	mov.w	r9, #1
 80081e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80081e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008390 <_vfiprintf_r+0x21c>
 80081e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081ec:	4623      	mov	r3, r4
 80081ee:	469a      	mov	sl, r3
 80081f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081f4:	b10a      	cbz	r2, 80081fa <_vfiprintf_r+0x86>
 80081f6:	2a25      	cmp	r2, #37	@ 0x25
 80081f8:	d1f9      	bne.n	80081ee <_vfiprintf_r+0x7a>
 80081fa:	ebba 0b04 	subs.w	fp, sl, r4
 80081fe:	d00b      	beq.n	8008218 <_vfiprintf_r+0xa4>
 8008200:	465b      	mov	r3, fp
 8008202:	4622      	mov	r2, r4
 8008204:	4629      	mov	r1, r5
 8008206:	4630      	mov	r0, r6
 8008208:	f7ff ffa1 	bl	800814e <__sfputs_r>
 800820c:	3001      	adds	r0, #1
 800820e:	f000 80a7 	beq.w	8008360 <_vfiprintf_r+0x1ec>
 8008212:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008214:	445a      	add	r2, fp
 8008216:	9209      	str	r2, [sp, #36]	@ 0x24
 8008218:	f89a 3000 	ldrb.w	r3, [sl]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 809f 	beq.w	8008360 <_vfiprintf_r+0x1ec>
 8008222:	2300      	movs	r3, #0
 8008224:	f04f 32ff 	mov.w	r2, #4294967295
 8008228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800822c:	f10a 0a01 	add.w	sl, sl, #1
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	9307      	str	r3, [sp, #28]
 8008234:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008238:	931a      	str	r3, [sp, #104]	@ 0x68
 800823a:	4654      	mov	r4, sl
 800823c:	2205      	movs	r2, #5
 800823e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008242:	4853      	ldr	r0, [pc, #332]	@ (8008390 <_vfiprintf_r+0x21c>)
 8008244:	f000 fb8c 	bl	8008960 <memchr>
 8008248:	9a04      	ldr	r2, [sp, #16]
 800824a:	b9d8      	cbnz	r0, 8008284 <_vfiprintf_r+0x110>
 800824c:	06d1      	lsls	r1, r2, #27
 800824e:	bf44      	itt	mi
 8008250:	2320      	movmi	r3, #32
 8008252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008256:	0713      	lsls	r3, r2, #28
 8008258:	bf44      	itt	mi
 800825a:	232b      	movmi	r3, #43	@ 0x2b
 800825c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008260:	f89a 3000 	ldrb.w	r3, [sl]
 8008264:	2b2a      	cmp	r3, #42	@ 0x2a
 8008266:	d015      	beq.n	8008294 <_vfiprintf_r+0x120>
 8008268:	4654      	mov	r4, sl
 800826a:	2000      	movs	r0, #0
 800826c:	f04f 0c0a 	mov.w	ip, #10
 8008270:	9a07      	ldr	r2, [sp, #28]
 8008272:	4621      	mov	r1, r4
 8008274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008278:	3b30      	subs	r3, #48	@ 0x30
 800827a:	2b09      	cmp	r3, #9
 800827c:	d94b      	bls.n	8008316 <_vfiprintf_r+0x1a2>
 800827e:	b1b0      	cbz	r0, 80082ae <_vfiprintf_r+0x13a>
 8008280:	9207      	str	r2, [sp, #28]
 8008282:	e014      	b.n	80082ae <_vfiprintf_r+0x13a>
 8008284:	eba0 0308 	sub.w	r3, r0, r8
 8008288:	fa09 f303 	lsl.w	r3, r9, r3
 800828c:	4313      	orrs	r3, r2
 800828e:	46a2      	mov	sl, r4
 8008290:	9304      	str	r3, [sp, #16]
 8008292:	e7d2      	b.n	800823a <_vfiprintf_r+0xc6>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	1d19      	adds	r1, r3, #4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	9103      	str	r1, [sp, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	bfbb      	ittet	lt
 80082a0:	425b      	neglt	r3, r3
 80082a2:	f042 0202 	orrlt.w	r2, r2, #2
 80082a6:	9307      	strge	r3, [sp, #28]
 80082a8:	9307      	strlt	r3, [sp, #28]
 80082aa:	bfb8      	it	lt
 80082ac:	9204      	strlt	r2, [sp, #16]
 80082ae:	7823      	ldrb	r3, [r4, #0]
 80082b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80082b2:	d10a      	bne.n	80082ca <_vfiprintf_r+0x156>
 80082b4:	7863      	ldrb	r3, [r4, #1]
 80082b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082b8:	d132      	bne.n	8008320 <_vfiprintf_r+0x1ac>
 80082ba:	9b03      	ldr	r3, [sp, #12]
 80082bc:	3402      	adds	r4, #2
 80082be:	1d1a      	adds	r2, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	9203      	str	r2, [sp, #12]
 80082c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082c8:	9305      	str	r3, [sp, #20]
 80082ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008394 <_vfiprintf_r+0x220>
 80082ce:	2203      	movs	r2, #3
 80082d0:	4650      	mov	r0, sl
 80082d2:	7821      	ldrb	r1, [r4, #0]
 80082d4:	f000 fb44 	bl	8008960 <memchr>
 80082d8:	b138      	cbz	r0, 80082ea <_vfiprintf_r+0x176>
 80082da:	2240      	movs	r2, #64	@ 0x40
 80082dc:	9b04      	ldr	r3, [sp, #16]
 80082de:	eba0 000a 	sub.w	r0, r0, sl
 80082e2:	4082      	lsls	r2, r0
 80082e4:	4313      	orrs	r3, r2
 80082e6:	3401      	adds	r4, #1
 80082e8:	9304      	str	r3, [sp, #16]
 80082ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ee:	2206      	movs	r2, #6
 80082f0:	4829      	ldr	r0, [pc, #164]	@ (8008398 <_vfiprintf_r+0x224>)
 80082f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082f6:	f000 fb33 	bl	8008960 <memchr>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d03f      	beq.n	800837e <_vfiprintf_r+0x20a>
 80082fe:	4b27      	ldr	r3, [pc, #156]	@ (800839c <_vfiprintf_r+0x228>)
 8008300:	bb1b      	cbnz	r3, 800834a <_vfiprintf_r+0x1d6>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	3307      	adds	r3, #7
 8008306:	f023 0307 	bic.w	r3, r3, #7
 800830a:	3308      	adds	r3, #8
 800830c:	9303      	str	r3, [sp, #12]
 800830e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008310:	443b      	add	r3, r7
 8008312:	9309      	str	r3, [sp, #36]	@ 0x24
 8008314:	e76a      	b.n	80081ec <_vfiprintf_r+0x78>
 8008316:	460c      	mov	r4, r1
 8008318:	2001      	movs	r0, #1
 800831a:	fb0c 3202 	mla	r2, ip, r2, r3
 800831e:	e7a8      	b.n	8008272 <_vfiprintf_r+0xfe>
 8008320:	2300      	movs	r3, #0
 8008322:	f04f 0c0a 	mov.w	ip, #10
 8008326:	4619      	mov	r1, r3
 8008328:	3401      	adds	r4, #1
 800832a:	9305      	str	r3, [sp, #20]
 800832c:	4620      	mov	r0, r4
 800832e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008332:	3a30      	subs	r2, #48	@ 0x30
 8008334:	2a09      	cmp	r2, #9
 8008336:	d903      	bls.n	8008340 <_vfiprintf_r+0x1cc>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0c6      	beq.n	80082ca <_vfiprintf_r+0x156>
 800833c:	9105      	str	r1, [sp, #20]
 800833e:	e7c4      	b.n	80082ca <_vfiprintf_r+0x156>
 8008340:	4604      	mov	r4, r0
 8008342:	2301      	movs	r3, #1
 8008344:	fb0c 2101 	mla	r1, ip, r1, r2
 8008348:	e7f0      	b.n	800832c <_vfiprintf_r+0x1b8>
 800834a:	ab03      	add	r3, sp, #12
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	462a      	mov	r2, r5
 8008350:	4630      	mov	r0, r6
 8008352:	4b13      	ldr	r3, [pc, #76]	@ (80083a0 <_vfiprintf_r+0x22c>)
 8008354:	a904      	add	r1, sp, #16
 8008356:	f3af 8000 	nop.w
 800835a:	4607      	mov	r7, r0
 800835c:	1c78      	adds	r0, r7, #1
 800835e:	d1d6      	bne.n	800830e <_vfiprintf_r+0x19a>
 8008360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008362:	07d9      	lsls	r1, r3, #31
 8008364:	d405      	bmi.n	8008372 <_vfiprintf_r+0x1fe>
 8008366:	89ab      	ldrh	r3, [r5, #12]
 8008368:	059a      	lsls	r2, r3, #22
 800836a:	d402      	bmi.n	8008372 <_vfiprintf_r+0x1fe>
 800836c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800836e:	f7ff fdd3 	bl	8007f18 <__retarget_lock_release_recursive>
 8008372:	89ab      	ldrh	r3, [r5, #12]
 8008374:	065b      	lsls	r3, r3, #25
 8008376:	f53f af1f 	bmi.w	80081b8 <_vfiprintf_r+0x44>
 800837a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800837c:	e71e      	b.n	80081bc <_vfiprintf_r+0x48>
 800837e:	ab03      	add	r3, sp, #12
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	462a      	mov	r2, r5
 8008384:	4630      	mov	r0, r6
 8008386:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <_vfiprintf_r+0x22c>)
 8008388:	a904      	add	r1, sp, #16
 800838a:	f000 f87d 	bl	8008488 <_printf_i>
 800838e:	e7e4      	b.n	800835a <_vfiprintf_r+0x1e6>
 8008390:	0800903c 	.word	0x0800903c
 8008394:	08009042 	.word	0x08009042
 8008398:	08009046 	.word	0x08009046
 800839c:	00000000 	.word	0x00000000
 80083a0:	0800814f 	.word	0x0800814f

080083a4 <_printf_common>:
 80083a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	4616      	mov	r6, r2
 80083aa:	4698      	mov	r8, r3
 80083ac:	688a      	ldr	r2, [r1, #8]
 80083ae:	690b      	ldr	r3, [r1, #16]
 80083b0:	4607      	mov	r7, r0
 80083b2:	4293      	cmp	r3, r2
 80083b4:	bfb8      	it	lt
 80083b6:	4613      	movlt	r3, r2
 80083b8:	6033      	str	r3, [r6, #0]
 80083ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083be:	460c      	mov	r4, r1
 80083c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083c4:	b10a      	cbz	r2, 80083ca <_printf_common+0x26>
 80083c6:	3301      	adds	r3, #1
 80083c8:	6033      	str	r3, [r6, #0]
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	0699      	lsls	r1, r3, #26
 80083ce:	bf42      	ittt	mi
 80083d0:	6833      	ldrmi	r3, [r6, #0]
 80083d2:	3302      	addmi	r3, #2
 80083d4:	6033      	strmi	r3, [r6, #0]
 80083d6:	6825      	ldr	r5, [r4, #0]
 80083d8:	f015 0506 	ands.w	r5, r5, #6
 80083dc:	d106      	bne.n	80083ec <_printf_common+0x48>
 80083de:	f104 0a19 	add.w	sl, r4, #25
 80083e2:	68e3      	ldr	r3, [r4, #12]
 80083e4:	6832      	ldr	r2, [r6, #0]
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	42ab      	cmp	r3, r5
 80083ea:	dc2b      	bgt.n	8008444 <_printf_common+0xa0>
 80083ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083f0:	6822      	ldr	r2, [r4, #0]
 80083f2:	3b00      	subs	r3, #0
 80083f4:	bf18      	it	ne
 80083f6:	2301      	movne	r3, #1
 80083f8:	0692      	lsls	r2, r2, #26
 80083fa:	d430      	bmi.n	800845e <_printf_common+0xba>
 80083fc:	4641      	mov	r1, r8
 80083fe:	4638      	mov	r0, r7
 8008400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008404:	47c8      	blx	r9
 8008406:	3001      	adds	r0, #1
 8008408:	d023      	beq.n	8008452 <_printf_common+0xae>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	6922      	ldr	r2, [r4, #16]
 800840e:	f003 0306 	and.w	r3, r3, #6
 8008412:	2b04      	cmp	r3, #4
 8008414:	bf14      	ite	ne
 8008416:	2500      	movne	r5, #0
 8008418:	6833      	ldreq	r3, [r6, #0]
 800841a:	f04f 0600 	mov.w	r6, #0
 800841e:	bf08      	it	eq
 8008420:	68e5      	ldreq	r5, [r4, #12]
 8008422:	f104 041a 	add.w	r4, r4, #26
 8008426:	bf08      	it	eq
 8008428:	1aed      	subeq	r5, r5, r3
 800842a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800842e:	bf08      	it	eq
 8008430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008434:	4293      	cmp	r3, r2
 8008436:	bfc4      	itt	gt
 8008438:	1a9b      	subgt	r3, r3, r2
 800843a:	18ed      	addgt	r5, r5, r3
 800843c:	42b5      	cmp	r5, r6
 800843e:	d11a      	bne.n	8008476 <_printf_common+0xd2>
 8008440:	2000      	movs	r0, #0
 8008442:	e008      	b.n	8008456 <_printf_common+0xb2>
 8008444:	2301      	movs	r3, #1
 8008446:	4652      	mov	r2, sl
 8008448:	4641      	mov	r1, r8
 800844a:	4638      	mov	r0, r7
 800844c:	47c8      	blx	r9
 800844e:	3001      	adds	r0, #1
 8008450:	d103      	bne.n	800845a <_printf_common+0xb6>
 8008452:	f04f 30ff 	mov.w	r0, #4294967295
 8008456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800845a:	3501      	adds	r5, #1
 800845c:	e7c1      	b.n	80083e2 <_printf_common+0x3e>
 800845e:	2030      	movs	r0, #48	@ 0x30
 8008460:	18e1      	adds	r1, r4, r3
 8008462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800846c:	4422      	add	r2, r4
 800846e:	3302      	adds	r3, #2
 8008470:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008474:	e7c2      	b.n	80083fc <_printf_common+0x58>
 8008476:	2301      	movs	r3, #1
 8008478:	4622      	mov	r2, r4
 800847a:	4641      	mov	r1, r8
 800847c:	4638      	mov	r0, r7
 800847e:	47c8      	blx	r9
 8008480:	3001      	adds	r0, #1
 8008482:	d0e6      	beq.n	8008452 <_printf_common+0xae>
 8008484:	3601      	adds	r6, #1
 8008486:	e7d9      	b.n	800843c <_printf_common+0x98>

08008488 <_printf_i>:
 8008488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800848c:	7e0f      	ldrb	r7, [r1, #24]
 800848e:	4691      	mov	r9, r2
 8008490:	2f78      	cmp	r7, #120	@ 0x78
 8008492:	4680      	mov	r8, r0
 8008494:	460c      	mov	r4, r1
 8008496:	469a      	mov	sl, r3
 8008498:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800849a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800849e:	d807      	bhi.n	80084b0 <_printf_i+0x28>
 80084a0:	2f62      	cmp	r7, #98	@ 0x62
 80084a2:	d80a      	bhi.n	80084ba <_printf_i+0x32>
 80084a4:	2f00      	cmp	r7, #0
 80084a6:	f000 80d3 	beq.w	8008650 <_printf_i+0x1c8>
 80084aa:	2f58      	cmp	r7, #88	@ 0x58
 80084ac:	f000 80ba 	beq.w	8008624 <_printf_i+0x19c>
 80084b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084b8:	e03a      	b.n	8008530 <_printf_i+0xa8>
 80084ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084be:	2b15      	cmp	r3, #21
 80084c0:	d8f6      	bhi.n	80084b0 <_printf_i+0x28>
 80084c2:	a101      	add	r1, pc, #4	@ (adr r1, 80084c8 <_printf_i+0x40>)
 80084c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084c8:	08008521 	.word	0x08008521
 80084cc:	08008535 	.word	0x08008535
 80084d0:	080084b1 	.word	0x080084b1
 80084d4:	080084b1 	.word	0x080084b1
 80084d8:	080084b1 	.word	0x080084b1
 80084dc:	080084b1 	.word	0x080084b1
 80084e0:	08008535 	.word	0x08008535
 80084e4:	080084b1 	.word	0x080084b1
 80084e8:	080084b1 	.word	0x080084b1
 80084ec:	080084b1 	.word	0x080084b1
 80084f0:	080084b1 	.word	0x080084b1
 80084f4:	08008637 	.word	0x08008637
 80084f8:	0800855f 	.word	0x0800855f
 80084fc:	080085f1 	.word	0x080085f1
 8008500:	080084b1 	.word	0x080084b1
 8008504:	080084b1 	.word	0x080084b1
 8008508:	08008659 	.word	0x08008659
 800850c:	080084b1 	.word	0x080084b1
 8008510:	0800855f 	.word	0x0800855f
 8008514:	080084b1 	.word	0x080084b1
 8008518:	080084b1 	.word	0x080084b1
 800851c:	080085f9 	.word	0x080085f9
 8008520:	6833      	ldr	r3, [r6, #0]
 8008522:	1d1a      	adds	r2, r3, #4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6032      	str	r2, [r6, #0]
 8008528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800852c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008530:	2301      	movs	r3, #1
 8008532:	e09e      	b.n	8008672 <_printf_i+0x1ea>
 8008534:	6833      	ldr	r3, [r6, #0]
 8008536:	6820      	ldr	r0, [r4, #0]
 8008538:	1d19      	adds	r1, r3, #4
 800853a:	6031      	str	r1, [r6, #0]
 800853c:	0606      	lsls	r6, r0, #24
 800853e:	d501      	bpl.n	8008544 <_printf_i+0xbc>
 8008540:	681d      	ldr	r5, [r3, #0]
 8008542:	e003      	b.n	800854c <_printf_i+0xc4>
 8008544:	0645      	lsls	r5, r0, #25
 8008546:	d5fb      	bpl.n	8008540 <_printf_i+0xb8>
 8008548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800854c:	2d00      	cmp	r5, #0
 800854e:	da03      	bge.n	8008558 <_printf_i+0xd0>
 8008550:	232d      	movs	r3, #45	@ 0x2d
 8008552:	426d      	negs	r5, r5
 8008554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008558:	230a      	movs	r3, #10
 800855a:	4859      	ldr	r0, [pc, #356]	@ (80086c0 <_printf_i+0x238>)
 800855c:	e011      	b.n	8008582 <_printf_i+0xfa>
 800855e:	6821      	ldr	r1, [r4, #0]
 8008560:	6833      	ldr	r3, [r6, #0]
 8008562:	0608      	lsls	r0, r1, #24
 8008564:	f853 5b04 	ldr.w	r5, [r3], #4
 8008568:	d402      	bmi.n	8008570 <_printf_i+0xe8>
 800856a:	0649      	lsls	r1, r1, #25
 800856c:	bf48      	it	mi
 800856e:	b2ad      	uxthmi	r5, r5
 8008570:	2f6f      	cmp	r7, #111	@ 0x6f
 8008572:	6033      	str	r3, [r6, #0]
 8008574:	bf14      	ite	ne
 8008576:	230a      	movne	r3, #10
 8008578:	2308      	moveq	r3, #8
 800857a:	4851      	ldr	r0, [pc, #324]	@ (80086c0 <_printf_i+0x238>)
 800857c:	2100      	movs	r1, #0
 800857e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008582:	6866      	ldr	r6, [r4, #4]
 8008584:	2e00      	cmp	r6, #0
 8008586:	bfa8      	it	ge
 8008588:	6821      	ldrge	r1, [r4, #0]
 800858a:	60a6      	str	r6, [r4, #8]
 800858c:	bfa4      	itt	ge
 800858e:	f021 0104 	bicge.w	r1, r1, #4
 8008592:	6021      	strge	r1, [r4, #0]
 8008594:	b90d      	cbnz	r5, 800859a <_printf_i+0x112>
 8008596:	2e00      	cmp	r6, #0
 8008598:	d04b      	beq.n	8008632 <_printf_i+0x1aa>
 800859a:	4616      	mov	r6, r2
 800859c:	fbb5 f1f3 	udiv	r1, r5, r3
 80085a0:	fb03 5711 	mls	r7, r3, r1, r5
 80085a4:	5dc7      	ldrb	r7, [r0, r7]
 80085a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085aa:	462f      	mov	r7, r5
 80085ac:	42bb      	cmp	r3, r7
 80085ae:	460d      	mov	r5, r1
 80085b0:	d9f4      	bls.n	800859c <_printf_i+0x114>
 80085b2:	2b08      	cmp	r3, #8
 80085b4:	d10b      	bne.n	80085ce <_printf_i+0x146>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	07df      	lsls	r7, r3, #31
 80085ba:	d508      	bpl.n	80085ce <_printf_i+0x146>
 80085bc:	6923      	ldr	r3, [r4, #16]
 80085be:	6861      	ldr	r1, [r4, #4]
 80085c0:	4299      	cmp	r1, r3
 80085c2:	bfde      	ittt	le
 80085c4:	2330      	movle	r3, #48	@ 0x30
 80085c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085ce:	1b92      	subs	r2, r2, r6
 80085d0:	6122      	str	r2, [r4, #16]
 80085d2:	464b      	mov	r3, r9
 80085d4:	4621      	mov	r1, r4
 80085d6:	4640      	mov	r0, r8
 80085d8:	f8cd a000 	str.w	sl, [sp]
 80085dc:	aa03      	add	r2, sp, #12
 80085de:	f7ff fee1 	bl	80083a4 <_printf_common>
 80085e2:	3001      	adds	r0, #1
 80085e4:	d14a      	bne.n	800867c <_printf_i+0x1f4>
 80085e6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ea:	b004      	add	sp, #16
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	f043 0320 	orr.w	r3, r3, #32
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	2778      	movs	r7, #120	@ 0x78
 80085fa:	4832      	ldr	r0, [pc, #200]	@ (80086c4 <_printf_i+0x23c>)
 80085fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	6831      	ldr	r1, [r6, #0]
 8008604:	061f      	lsls	r7, r3, #24
 8008606:	f851 5b04 	ldr.w	r5, [r1], #4
 800860a:	d402      	bmi.n	8008612 <_printf_i+0x18a>
 800860c:	065f      	lsls	r7, r3, #25
 800860e:	bf48      	it	mi
 8008610:	b2ad      	uxthmi	r5, r5
 8008612:	6031      	str	r1, [r6, #0]
 8008614:	07d9      	lsls	r1, r3, #31
 8008616:	bf44      	itt	mi
 8008618:	f043 0320 	orrmi.w	r3, r3, #32
 800861c:	6023      	strmi	r3, [r4, #0]
 800861e:	b11d      	cbz	r5, 8008628 <_printf_i+0x1a0>
 8008620:	2310      	movs	r3, #16
 8008622:	e7ab      	b.n	800857c <_printf_i+0xf4>
 8008624:	4826      	ldr	r0, [pc, #152]	@ (80086c0 <_printf_i+0x238>)
 8008626:	e7e9      	b.n	80085fc <_printf_i+0x174>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	f023 0320 	bic.w	r3, r3, #32
 800862e:	6023      	str	r3, [r4, #0]
 8008630:	e7f6      	b.n	8008620 <_printf_i+0x198>
 8008632:	4616      	mov	r6, r2
 8008634:	e7bd      	b.n	80085b2 <_printf_i+0x12a>
 8008636:	6833      	ldr	r3, [r6, #0]
 8008638:	6825      	ldr	r5, [r4, #0]
 800863a:	1d18      	adds	r0, r3, #4
 800863c:	6961      	ldr	r1, [r4, #20]
 800863e:	6030      	str	r0, [r6, #0]
 8008640:	062e      	lsls	r6, r5, #24
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	d501      	bpl.n	800864a <_printf_i+0x1c2>
 8008646:	6019      	str	r1, [r3, #0]
 8008648:	e002      	b.n	8008650 <_printf_i+0x1c8>
 800864a:	0668      	lsls	r0, r5, #25
 800864c:	d5fb      	bpl.n	8008646 <_printf_i+0x1be>
 800864e:	8019      	strh	r1, [r3, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	4616      	mov	r6, r2
 8008654:	6123      	str	r3, [r4, #16]
 8008656:	e7bc      	b.n	80085d2 <_printf_i+0x14a>
 8008658:	6833      	ldr	r3, [r6, #0]
 800865a:	2100      	movs	r1, #0
 800865c:	1d1a      	adds	r2, r3, #4
 800865e:	6032      	str	r2, [r6, #0]
 8008660:	681e      	ldr	r6, [r3, #0]
 8008662:	6862      	ldr	r2, [r4, #4]
 8008664:	4630      	mov	r0, r6
 8008666:	f000 f97b 	bl	8008960 <memchr>
 800866a:	b108      	cbz	r0, 8008670 <_printf_i+0x1e8>
 800866c:	1b80      	subs	r0, r0, r6
 800866e:	6060      	str	r0, [r4, #4]
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	6123      	str	r3, [r4, #16]
 8008674:	2300      	movs	r3, #0
 8008676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800867a:	e7aa      	b.n	80085d2 <_printf_i+0x14a>
 800867c:	4632      	mov	r2, r6
 800867e:	4649      	mov	r1, r9
 8008680:	4640      	mov	r0, r8
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	47d0      	blx	sl
 8008686:	3001      	adds	r0, #1
 8008688:	d0ad      	beq.n	80085e6 <_printf_i+0x15e>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	079b      	lsls	r3, r3, #30
 800868e:	d413      	bmi.n	80086b8 <_printf_i+0x230>
 8008690:	68e0      	ldr	r0, [r4, #12]
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	4298      	cmp	r0, r3
 8008696:	bfb8      	it	lt
 8008698:	4618      	movlt	r0, r3
 800869a:	e7a6      	b.n	80085ea <_printf_i+0x162>
 800869c:	2301      	movs	r3, #1
 800869e:	4632      	mov	r2, r6
 80086a0:	4649      	mov	r1, r9
 80086a2:	4640      	mov	r0, r8
 80086a4:	47d0      	blx	sl
 80086a6:	3001      	adds	r0, #1
 80086a8:	d09d      	beq.n	80085e6 <_printf_i+0x15e>
 80086aa:	3501      	adds	r5, #1
 80086ac:	68e3      	ldr	r3, [r4, #12]
 80086ae:	9903      	ldr	r1, [sp, #12]
 80086b0:	1a5b      	subs	r3, r3, r1
 80086b2:	42ab      	cmp	r3, r5
 80086b4:	dcf2      	bgt.n	800869c <_printf_i+0x214>
 80086b6:	e7eb      	b.n	8008690 <_printf_i+0x208>
 80086b8:	2500      	movs	r5, #0
 80086ba:	f104 0619 	add.w	r6, r4, #25
 80086be:	e7f5      	b.n	80086ac <_printf_i+0x224>
 80086c0:	0800904d 	.word	0x0800904d
 80086c4:	0800905e 	.word	0x0800905e

080086c8 <__sflush_r>:
 80086c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	0716      	lsls	r6, r2, #28
 80086d0:	4605      	mov	r5, r0
 80086d2:	460c      	mov	r4, r1
 80086d4:	d454      	bmi.n	8008780 <__sflush_r+0xb8>
 80086d6:	684b      	ldr	r3, [r1, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	dc02      	bgt.n	80086e2 <__sflush_r+0x1a>
 80086dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086de:	2b00      	cmp	r3, #0
 80086e0:	dd48      	ble.n	8008774 <__sflush_r+0xac>
 80086e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086e4:	2e00      	cmp	r6, #0
 80086e6:	d045      	beq.n	8008774 <__sflush_r+0xac>
 80086e8:	2300      	movs	r3, #0
 80086ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086ee:	682f      	ldr	r7, [r5, #0]
 80086f0:	6a21      	ldr	r1, [r4, #32]
 80086f2:	602b      	str	r3, [r5, #0]
 80086f4:	d030      	beq.n	8008758 <__sflush_r+0x90>
 80086f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	0759      	lsls	r1, r3, #29
 80086fc:	d505      	bpl.n	800870a <__sflush_r+0x42>
 80086fe:	6863      	ldr	r3, [r4, #4]
 8008700:	1ad2      	subs	r2, r2, r3
 8008702:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008704:	b10b      	cbz	r3, 800870a <__sflush_r+0x42>
 8008706:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008708:	1ad2      	subs	r2, r2, r3
 800870a:	2300      	movs	r3, #0
 800870c:	4628      	mov	r0, r5
 800870e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008710:	6a21      	ldr	r1, [r4, #32]
 8008712:	47b0      	blx	r6
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	d106      	bne.n	8008728 <__sflush_r+0x60>
 800871a:	6829      	ldr	r1, [r5, #0]
 800871c:	291d      	cmp	r1, #29
 800871e:	d82b      	bhi.n	8008778 <__sflush_r+0xb0>
 8008720:	4a28      	ldr	r2, [pc, #160]	@ (80087c4 <__sflush_r+0xfc>)
 8008722:	410a      	asrs	r2, r1
 8008724:	07d6      	lsls	r6, r2, #31
 8008726:	d427      	bmi.n	8008778 <__sflush_r+0xb0>
 8008728:	2200      	movs	r2, #0
 800872a:	6062      	str	r2, [r4, #4]
 800872c:	6922      	ldr	r2, [r4, #16]
 800872e:	04d9      	lsls	r1, r3, #19
 8008730:	6022      	str	r2, [r4, #0]
 8008732:	d504      	bpl.n	800873e <__sflush_r+0x76>
 8008734:	1c42      	adds	r2, r0, #1
 8008736:	d101      	bne.n	800873c <__sflush_r+0x74>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b903      	cbnz	r3, 800873e <__sflush_r+0x76>
 800873c:	6560      	str	r0, [r4, #84]	@ 0x54
 800873e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008740:	602f      	str	r7, [r5, #0]
 8008742:	b1b9      	cbz	r1, 8008774 <__sflush_r+0xac>
 8008744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008748:	4299      	cmp	r1, r3
 800874a:	d002      	beq.n	8008752 <__sflush_r+0x8a>
 800874c:	4628      	mov	r0, r5
 800874e:	f7ff fbf3 	bl	8007f38 <_free_r>
 8008752:	2300      	movs	r3, #0
 8008754:	6363      	str	r3, [r4, #52]	@ 0x34
 8008756:	e00d      	b.n	8008774 <__sflush_r+0xac>
 8008758:	2301      	movs	r3, #1
 800875a:	4628      	mov	r0, r5
 800875c:	47b0      	blx	r6
 800875e:	4602      	mov	r2, r0
 8008760:	1c50      	adds	r0, r2, #1
 8008762:	d1c9      	bne.n	80086f8 <__sflush_r+0x30>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0c6      	beq.n	80086f8 <__sflush_r+0x30>
 800876a:	2b1d      	cmp	r3, #29
 800876c:	d001      	beq.n	8008772 <__sflush_r+0xaa>
 800876e:	2b16      	cmp	r3, #22
 8008770:	d11d      	bne.n	80087ae <__sflush_r+0xe6>
 8008772:	602f      	str	r7, [r5, #0]
 8008774:	2000      	movs	r0, #0
 8008776:	e021      	b.n	80087bc <__sflush_r+0xf4>
 8008778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800877c:	b21b      	sxth	r3, r3
 800877e:	e01a      	b.n	80087b6 <__sflush_r+0xee>
 8008780:	690f      	ldr	r7, [r1, #16]
 8008782:	2f00      	cmp	r7, #0
 8008784:	d0f6      	beq.n	8008774 <__sflush_r+0xac>
 8008786:	0793      	lsls	r3, r2, #30
 8008788:	bf18      	it	ne
 800878a:	2300      	movne	r3, #0
 800878c:	680e      	ldr	r6, [r1, #0]
 800878e:	bf08      	it	eq
 8008790:	694b      	ldreq	r3, [r1, #20]
 8008792:	1bf6      	subs	r6, r6, r7
 8008794:	600f      	str	r7, [r1, #0]
 8008796:	608b      	str	r3, [r1, #8]
 8008798:	2e00      	cmp	r6, #0
 800879a:	ddeb      	ble.n	8008774 <__sflush_r+0xac>
 800879c:	4633      	mov	r3, r6
 800879e:	463a      	mov	r2, r7
 80087a0:	4628      	mov	r0, r5
 80087a2:	6a21      	ldr	r1, [r4, #32]
 80087a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80087a8:	47e0      	blx	ip
 80087aa:	2800      	cmp	r0, #0
 80087ac:	dc07      	bgt.n	80087be <__sflush_r+0xf6>
 80087ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087b6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ba:	81a3      	strh	r3, [r4, #12]
 80087bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087be:	4407      	add	r7, r0
 80087c0:	1a36      	subs	r6, r6, r0
 80087c2:	e7e9      	b.n	8008798 <__sflush_r+0xd0>
 80087c4:	dfbffffe 	.word	0xdfbffffe

080087c8 <_fflush_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	690b      	ldr	r3, [r1, #16]
 80087cc:	4605      	mov	r5, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	b913      	cbnz	r3, 80087d8 <_fflush_r+0x10>
 80087d2:	2500      	movs	r5, #0
 80087d4:	4628      	mov	r0, r5
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	b118      	cbz	r0, 80087e2 <_fflush_r+0x1a>
 80087da:	6a03      	ldr	r3, [r0, #32]
 80087dc:	b90b      	cbnz	r3, 80087e2 <_fflush_r+0x1a>
 80087de:	f7ff fa95 	bl	8007d0c <__sinit>
 80087e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0f3      	beq.n	80087d2 <_fflush_r+0xa>
 80087ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087ec:	07d0      	lsls	r0, r2, #31
 80087ee:	d404      	bmi.n	80087fa <_fflush_r+0x32>
 80087f0:	0599      	lsls	r1, r3, #22
 80087f2:	d402      	bmi.n	80087fa <_fflush_r+0x32>
 80087f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087f6:	f7ff fb8e 	bl	8007f16 <__retarget_lock_acquire_recursive>
 80087fa:	4628      	mov	r0, r5
 80087fc:	4621      	mov	r1, r4
 80087fe:	f7ff ff63 	bl	80086c8 <__sflush_r>
 8008802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008804:	4605      	mov	r5, r0
 8008806:	07da      	lsls	r2, r3, #31
 8008808:	d4e4      	bmi.n	80087d4 <_fflush_r+0xc>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	059b      	lsls	r3, r3, #22
 800880e:	d4e1      	bmi.n	80087d4 <_fflush_r+0xc>
 8008810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008812:	f7ff fb81 	bl	8007f18 <__retarget_lock_release_recursive>
 8008816:	e7dd      	b.n	80087d4 <_fflush_r+0xc>

08008818 <__swbuf_r>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	460e      	mov	r6, r1
 800881c:	4614      	mov	r4, r2
 800881e:	4605      	mov	r5, r0
 8008820:	b118      	cbz	r0, 800882a <__swbuf_r+0x12>
 8008822:	6a03      	ldr	r3, [r0, #32]
 8008824:	b90b      	cbnz	r3, 800882a <__swbuf_r+0x12>
 8008826:	f7ff fa71 	bl	8007d0c <__sinit>
 800882a:	69a3      	ldr	r3, [r4, #24]
 800882c:	60a3      	str	r3, [r4, #8]
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	071a      	lsls	r2, r3, #28
 8008832:	d501      	bpl.n	8008838 <__swbuf_r+0x20>
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	b943      	cbnz	r3, 800884a <__swbuf_r+0x32>
 8008838:	4621      	mov	r1, r4
 800883a:	4628      	mov	r0, r5
 800883c:	f000 f82a 	bl	8008894 <__swsetup_r>
 8008840:	b118      	cbz	r0, 800884a <__swbuf_r+0x32>
 8008842:	f04f 37ff 	mov.w	r7, #4294967295
 8008846:	4638      	mov	r0, r7
 8008848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	6922      	ldr	r2, [r4, #16]
 800884e:	b2f6      	uxtb	r6, r6
 8008850:	1a98      	subs	r0, r3, r2
 8008852:	6963      	ldr	r3, [r4, #20]
 8008854:	4637      	mov	r7, r6
 8008856:	4283      	cmp	r3, r0
 8008858:	dc05      	bgt.n	8008866 <__swbuf_r+0x4e>
 800885a:	4621      	mov	r1, r4
 800885c:	4628      	mov	r0, r5
 800885e:	f7ff ffb3 	bl	80087c8 <_fflush_r>
 8008862:	2800      	cmp	r0, #0
 8008864:	d1ed      	bne.n	8008842 <__swbuf_r+0x2a>
 8008866:	68a3      	ldr	r3, [r4, #8]
 8008868:	3b01      	subs	r3, #1
 800886a:	60a3      	str	r3, [r4, #8]
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	6022      	str	r2, [r4, #0]
 8008872:	701e      	strb	r6, [r3, #0]
 8008874:	6962      	ldr	r2, [r4, #20]
 8008876:	1c43      	adds	r3, r0, #1
 8008878:	429a      	cmp	r2, r3
 800887a:	d004      	beq.n	8008886 <__swbuf_r+0x6e>
 800887c:	89a3      	ldrh	r3, [r4, #12]
 800887e:	07db      	lsls	r3, r3, #31
 8008880:	d5e1      	bpl.n	8008846 <__swbuf_r+0x2e>
 8008882:	2e0a      	cmp	r6, #10
 8008884:	d1df      	bne.n	8008846 <__swbuf_r+0x2e>
 8008886:	4621      	mov	r1, r4
 8008888:	4628      	mov	r0, r5
 800888a:	f7ff ff9d 	bl	80087c8 <_fflush_r>
 800888e:	2800      	cmp	r0, #0
 8008890:	d0d9      	beq.n	8008846 <__swbuf_r+0x2e>
 8008892:	e7d6      	b.n	8008842 <__swbuf_r+0x2a>

08008894 <__swsetup_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4b29      	ldr	r3, [pc, #164]	@ (800893c <__swsetup_r+0xa8>)
 8008898:	4605      	mov	r5, r0
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	460c      	mov	r4, r1
 800889e:	b118      	cbz	r0, 80088a8 <__swsetup_r+0x14>
 80088a0:	6a03      	ldr	r3, [r0, #32]
 80088a2:	b90b      	cbnz	r3, 80088a8 <__swsetup_r+0x14>
 80088a4:	f7ff fa32 	bl	8007d0c <__sinit>
 80088a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ac:	0719      	lsls	r1, r3, #28
 80088ae:	d422      	bmi.n	80088f6 <__swsetup_r+0x62>
 80088b0:	06da      	lsls	r2, r3, #27
 80088b2:	d407      	bmi.n	80088c4 <__swsetup_r+0x30>
 80088b4:	2209      	movs	r2, #9
 80088b6:	602a      	str	r2, [r5, #0]
 80088b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295
 80088c0:	81a3      	strh	r3, [r4, #12]
 80088c2:	e033      	b.n	800892c <__swsetup_r+0x98>
 80088c4:	0758      	lsls	r0, r3, #29
 80088c6:	d512      	bpl.n	80088ee <__swsetup_r+0x5a>
 80088c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088ca:	b141      	cbz	r1, 80088de <__swsetup_r+0x4a>
 80088cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088d0:	4299      	cmp	r1, r3
 80088d2:	d002      	beq.n	80088da <__swsetup_r+0x46>
 80088d4:	4628      	mov	r0, r5
 80088d6:	f7ff fb2f 	bl	8007f38 <_free_r>
 80088da:	2300      	movs	r3, #0
 80088dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088e4:	81a3      	strh	r3, [r4, #12]
 80088e6:	2300      	movs	r3, #0
 80088e8:	6063      	str	r3, [r4, #4]
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f043 0308 	orr.w	r3, r3, #8
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	6923      	ldr	r3, [r4, #16]
 80088f8:	b94b      	cbnz	r3, 800890e <__swsetup_r+0x7a>
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008904:	d003      	beq.n	800890e <__swsetup_r+0x7a>
 8008906:	4621      	mov	r1, r4
 8008908:	4628      	mov	r0, r5
 800890a:	f000 f85c 	bl	80089c6 <__smakebuf_r>
 800890e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008912:	f013 0201 	ands.w	r2, r3, #1
 8008916:	d00a      	beq.n	800892e <__swsetup_r+0x9a>
 8008918:	2200      	movs	r2, #0
 800891a:	60a2      	str	r2, [r4, #8]
 800891c:	6962      	ldr	r2, [r4, #20]
 800891e:	4252      	negs	r2, r2
 8008920:	61a2      	str	r2, [r4, #24]
 8008922:	6922      	ldr	r2, [r4, #16]
 8008924:	b942      	cbnz	r2, 8008938 <__swsetup_r+0xa4>
 8008926:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800892a:	d1c5      	bne.n	80088b8 <__swsetup_r+0x24>
 800892c:	bd38      	pop	{r3, r4, r5, pc}
 800892e:	0799      	lsls	r1, r3, #30
 8008930:	bf58      	it	pl
 8008932:	6962      	ldrpl	r2, [r4, #20]
 8008934:	60a2      	str	r2, [r4, #8]
 8008936:	e7f4      	b.n	8008922 <__swsetup_r+0x8e>
 8008938:	2000      	movs	r0, #0
 800893a:	e7f7      	b.n	800892c <__swsetup_r+0x98>
 800893c:	20000018 	.word	0x20000018

08008940 <_sbrk_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	2300      	movs	r3, #0
 8008944:	4d05      	ldr	r5, [pc, #20]	@ (800895c <_sbrk_r+0x1c>)
 8008946:	4604      	mov	r4, r0
 8008948:	4608      	mov	r0, r1
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	f7f9 fdb6 	bl	80024bc <_sbrk>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_sbrk_r+0x1a>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_sbrk_r+0x1a>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	200007b8 	.word	0x200007b8

08008960 <memchr>:
 8008960:	4603      	mov	r3, r0
 8008962:	b510      	push	{r4, lr}
 8008964:	b2c9      	uxtb	r1, r1
 8008966:	4402      	add	r2, r0
 8008968:	4293      	cmp	r3, r2
 800896a:	4618      	mov	r0, r3
 800896c:	d101      	bne.n	8008972 <memchr+0x12>
 800896e:	2000      	movs	r0, #0
 8008970:	e003      	b.n	800897a <memchr+0x1a>
 8008972:	7804      	ldrb	r4, [r0, #0]
 8008974:	3301      	adds	r3, #1
 8008976:	428c      	cmp	r4, r1
 8008978:	d1f6      	bne.n	8008968 <memchr+0x8>
 800897a:	bd10      	pop	{r4, pc}

0800897c <__swhatbuf_r>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	460c      	mov	r4, r1
 8008980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008984:	4615      	mov	r5, r2
 8008986:	2900      	cmp	r1, #0
 8008988:	461e      	mov	r6, r3
 800898a:	b096      	sub	sp, #88	@ 0x58
 800898c:	da0c      	bge.n	80089a8 <__swhatbuf_r+0x2c>
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	2100      	movs	r1, #0
 8008992:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008996:	bf14      	ite	ne
 8008998:	2340      	movne	r3, #64	@ 0x40
 800899a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800899e:	2000      	movs	r0, #0
 80089a0:	6031      	str	r1, [r6, #0]
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	b016      	add	sp, #88	@ 0x58
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	466a      	mov	r2, sp
 80089aa:	f000 f849 	bl	8008a40 <_fstat_r>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	dbed      	blt.n	800898e <__swhatbuf_r+0x12>
 80089b2:	9901      	ldr	r1, [sp, #4]
 80089b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089bc:	4259      	negs	r1, r3
 80089be:	4159      	adcs	r1, r3
 80089c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089c4:	e7eb      	b.n	800899e <__swhatbuf_r+0x22>

080089c6 <__smakebuf_r>:
 80089c6:	898b      	ldrh	r3, [r1, #12]
 80089c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ca:	079d      	lsls	r5, r3, #30
 80089cc:	4606      	mov	r6, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	d507      	bpl.n	80089e2 <__smakebuf_r+0x1c>
 80089d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089d6:	6023      	str	r3, [r4, #0]
 80089d8:	6123      	str	r3, [r4, #16]
 80089da:	2301      	movs	r3, #1
 80089dc:	6163      	str	r3, [r4, #20]
 80089de:	b003      	add	sp, #12
 80089e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e2:	466a      	mov	r2, sp
 80089e4:	ab01      	add	r3, sp, #4
 80089e6:	f7ff ffc9 	bl	800897c <__swhatbuf_r>
 80089ea:	9f00      	ldr	r7, [sp, #0]
 80089ec:	4605      	mov	r5, r0
 80089ee:	4639      	mov	r1, r7
 80089f0:	4630      	mov	r0, r6
 80089f2:	f7ff fb0b 	bl	800800c <_malloc_r>
 80089f6:	b948      	cbnz	r0, 8008a0c <__smakebuf_r+0x46>
 80089f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fc:	059a      	lsls	r2, r3, #22
 80089fe:	d4ee      	bmi.n	80089de <__smakebuf_r+0x18>
 8008a00:	f023 0303 	bic.w	r3, r3, #3
 8008a04:	f043 0302 	orr.w	r3, r3, #2
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	e7e2      	b.n	80089d2 <__smakebuf_r+0xc>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	9b01      	ldr	r3, [sp, #4]
 8008a1a:	6020      	str	r0, [r4, #0]
 8008a1c:	b15b      	cbz	r3, 8008a36 <__smakebuf_r+0x70>
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a24:	f000 f81e 	bl	8008a64 <_isatty_r>
 8008a28:	b128      	cbz	r0, 8008a36 <__smakebuf_r+0x70>
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	f023 0303 	bic.w	r3, r3, #3
 8008a30:	f043 0301 	orr.w	r3, r3, #1
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	431d      	orrs	r5, r3
 8008a3a:	81a5      	strh	r5, [r4, #12]
 8008a3c:	e7cf      	b.n	80089de <__smakebuf_r+0x18>
	...

08008a40 <_fstat_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	2300      	movs	r3, #0
 8008a44:	4d06      	ldr	r5, [pc, #24]	@ (8008a60 <_fstat_r+0x20>)
 8008a46:	4604      	mov	r4, r0
 8008a48:	4608      	mov	r0, r1
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	f7f9 fd10 	bl	8002472 <_fstat>
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	d102      	bne.n	8008a5c <_fstat_r+0x1c>
 8008a56:	682b      	ldr	r3, [r5, #0]
 8008a58:	b103      	cbz	r3, 8008a5c <_fstat_r+0x1c>
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	bd38      	pop	{r3, r4, r5, pc}
 8008a5e:	bf00      	nop
 8008a60:	200007b8 	.word	0x200007b8

08008a64 <_isatty_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	2300      	movs	r3, #0
 8008a68:	4d05      	ldr	r5, [pc, #20]	@ (8008a80 <_isatty_r+0x1c>)
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	602b      	str	r3, [r5, #0]
 8008a70:	f7f9 fd0e 	bl	8002490 <_isatty>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_isatty_r+0x1a>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_isatty_r+0x1a>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	200007b8 	.word	0x200007b8

08008a84 <_init>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr

08008a90 <_fini>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	bf00      	nop
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr
