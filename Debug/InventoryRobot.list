
InventoryRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2ac  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d04  0800a490  0800a490  0000b490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b194  0800b194  0000d07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b194  0800b194  0000d07c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b194  0800b194  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b194  0800b194  0000c194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b198  0800b198  0000c198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800b19c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de0  20000080  0800b218  0000d080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e60  0800b218  0000de60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018748  00000000  00000000  0000d0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004713  00000000  00000000  000257ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00029f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115f  00000000  00000000  0002b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000068bf  00000000  00000000  0002c6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000221e7  00000000  00000000  00032f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9d81  00000000  00000000  00055155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000feed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006118  00000000  00000000  000fef1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00105034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000080 	.word	0x20000080
 8000200:	00000000 	.word	0x00000000
 8000204:	0800a478 	.word	0x0800a478

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000084 	.word	0x20000084
 8000220:	0800a478 	.word	0x0800a478

08000224 <Events_MainLogic>:
 */

#include "MainLogic.h"

uint8_t Flag_Events_MainLogic = 0;
void    Events_MainLogic(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  switch (Flag_Events_MainLogic) {
 8000228:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <Events_MainLogic+0x34>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <Events_MainLogic+0x12>
 8000230:	2b01      	cmp	r3, #1
 8000232:	d00b      	beq.n	800024c <Events_MainLogic+0x28>
      // Events_WirelessModule();//鏃犵嚎涓插彛浜嬩欢
      // Events_BLDCMotor();
      Events_ServoMotor();
    } break;
  }
}
 8000234:	e00d      	b.n	8000252 <Events_MainLogic+0x2e>
      HAL_TIM_Base_Start_IT(&htim1);
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <Events_MainLogic+0x38>)
 8000238:	f004 ff7a 	bl	8005130 <HAL_TIM_Base_Start_IT>
      HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	4808      	ldr	r0, [pc, #32]	@ (8000260 <Events_MainLogic+0x3c>)
 8000240:	f005 f88c 	bl	800535c <HAL_TIM_IC_Start_IT>
      Flag_Events_MainLogic = 1;
 8000244:	4b04      	ldr	r3, [pc, #16]	@ (8000258 <Events_MainLogic+0x34>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
    } break;
 800024a:	e002      	b.n	8000252 <Events_MainLogic+0x2e>
      Events_ServoMotor();
 800024c:	f000 f840 	bl	80002d0 <Events_ServoMotor>
    } break;
 8000250:	bf00      	nop
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	2000009c 	.word	0x2000009c
 800025c:	20000284 	.word	0x20000284
 8000260:	20000314 	.word	0x20000314

08000264 <motor_uart_init>:
static UART_HandleTypeDef *m_uart;
static DMA_HandleTypeDef  *m_dma;

static void moteruart_receive(void);

void motor_uart_init(void) {  //
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  registCallback(EVENT_MotorUart, moteruart_receive);
 8000268:	4902      	ldr	r1, [pc, #8]	@ (8000274 <motor_uart_init+0x10>)
 800026a:	2002      	movs	r0, #2
 800026c:	f009 f910 	bl	8009490 <registCallback>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	08001815 	.word	0x08001815

08000278 <GetMoterAck>:
  registCallback(EVENT_MotorUart, moteruart_receive);  // 注册事件表
  // HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
  // __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
}

uint8_t *GetMoterAck(void) { return motor_ack; }
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
 800027c:	4b02      	ldr	r3, [pc, #8]	@ (8000288 <GetMoterAck+0x10>)
 800027e:	4618      	mov	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	200001ec 	.word	0x200001ec

0800028c <GetMoterStateReg>:
uint8_t *GetMoterStateReg(void) { return motor_state_reg; }
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
 8000290:	4b02      	ldr	r3, [pc, #8]	@ (800029c <GetMoterStateReg+0x10>)
 8000292:	4618      	mov	r0, r3
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	200001f0 	.word	0x200001f0

080002a0 <GetMoterOnPos>:
int8_t   GetMoterOnPos(void) { return ServoMotor.MotorPosition; }
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <GetMoterOnPos+0x14>)
 80002a6:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	200000a0 	.word	0x200000a0

080002b8 <GetMoterFlag>:
uint8_t  GetMoterFlag(void) { return ServoMotor.Flag_Event[2]; }
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <GetMoterFlag+0x14>)
 80002be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80002c2:	4618      	mov	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	200000a0 	.word	0x200000a0

080002d0 <Events_ServoMotor>:
void test(uint8_t *buf) {
  for (uint8_t i = 0; i < 4; i++) {
    buf[i + 1] = ServoMotor.Flag_Event[i];
  }
}
void Events_ServoMotor(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  UartDriver_ServoMotor();
 80002d4:	f001 fc42 	bl	8001b5c <UartDriver_ServoMotor>
  switch (ServoMotor.Flag_Event[0]) {
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <Events_ServoMotor+0x28>)
 80002da:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d002      	beq.n	80002e8 <Events_ServoMotor+0x18>
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d003      	beq.n	80002ee <Events_ServoMotor+0x1e>
    } break;
    case 1: {
      Event_Movement_ServoMotor();
    } break;
  }
}
 80002e6:	e005      	b.n	80002f4 <Events_ServoMotor+0x24>
      Event_Init_ServoMotor();
 80002e8:	f000 f808 	bl	80002fc <Event_Init_ServoMotor>
    } break;
 80002ec:	e002      	b.n	80002f4 <Events_ServoMotor+0x24>
      Event_Movement_ServoMotor();
 80002ee:	f000 fd27 	bl	8000d40 <Event_Movement_ServoMotor>
    } break;
 80002f2:	bf00      	nop
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200000a0 	.word	0x200000a0

080002fc <Event_Init_ServoMotor>:

void Event_Init_ServoMotor(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  // LOGI("STATE : %d", ServoMotor.Flag_Event[1]);
  switch (ServoMotor.Flag_Event[1]) {
 8000300:	4b6e      	ldr	r3, [pc, #440]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000302:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000306:	2b1a      	cmp	r3, #26
 8000308:	f200 80d5 	bhi.w	80004b6 <Event_Init_ServoMotor+0x1ba>
 800030c:	a201      	add	r2, pc, #4	@ (adr r2, 8000314 <Event_Init_ServoMotor+0x18>)
 800030e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000312:	bf00      	nop
 8000314:	08000381 	.word	0x08000381
 8000318:	080004b7 	.word	0x080004b7
 800031c:	080003a5 	.word	0x080003a5
 8000320:	080004b7 	.word	0x080004b7
 8000324:	080003bb 	.word	0x080003bb
 8000328:	080004b7 	.word	0x080004b7
 800032c:	080003d1 	.word	0x080003d1
 8000330:	080004b7 	.word	0x080004b7
 8000334:	080003e7 	.word	0x080003e7
 8000338:	080004b7 	.word	0x080004b7
 800033c:	080003fd 	.word	0x080003fd
 8000340:	080004b7 	.word	0x080004b7
 8000344:	08000413 	.word	0x08000413
 8000348:	080004b7 	.word	0x080004b7
 800034c:	08000429 	.word	0x08000429
 8000350:	080004b7 	.word	0x080004b7
 8000354:	0800043f 	.word	0x0800043f
 8000358:	080004b7 	.word	0x080004b7
 800035c:	08000455 	.word	0x08000455
 8000360:	080004b7 	.word	0x080004b7
 8000364:	0800046b 	.word	0x0800046b
 8000368:	080004b7 	.word	0x080004b7
 800036c:	08000481 	.word	0x08000481
 8000370:	080004b7 	.word	0x080004b7
 8000374:	08000497 	.word	0x08000497
 8000378:	080004b7 	.word	0x080004b7
 800037c:	080004ad 	.word	0x080004ad
    case 0: {
      SetStatus_Power_ServoMotor(PowerON_ServoMotor);  // 打开伺服驱动器的电源
 8000380:	2000      	movs	r0, #0
 8000382:	f001 f9eb 	bl	800175c <SetStatus_Power_ServoMotor>
      UartReceiveIT_ServoMotor();                      // 打开伺服驱动器的串口接收
 8000386:	f001 fa01 	bl	800178c <UartReceiveIT_ServoMotor>
      ServoMotor.address       = 0x01;                 // 伺服电机地址设置
 800038a:	4b4c      	ldr	r3, [pc, #304]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 800038c:	2201      	movs	r2, #1
 800038e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      ServoMotor.MotorPosition = ON_LEFT;
 8000392:	4b4a      	ldr	r3, [pc, #296]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000394:	22ff      	movs	r2, #255	@ 0xff
 8000396:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      ServoMotor.Flag_Event[1] = 1;  // 定时器定时变2，因为伺服驱动器启动时间大约5s
 800039a:	4b48      	ldr	r3, [pc, #288]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 800039c:	2201      	movs	r2, #1
 800039e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003a2:	e088      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 2: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003a4:	4846      	ldr	r0, [pc, #280]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 80003a6:	f000 fe7b 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(0);  // 串口发送：检测状态监控寄存器1-5设置指令,发送是Read_Func，10words
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 fed4 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 3;            // 等待串口返回，返回正确赋值14，错误赋值4，串口连上则赋值IsConnected = 1，超时5s：定时器赋值2重新发送
 80003b0:	4b42      	ldr	r3, [pc, #264]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80003b2:	2203      	movs	r2, #3
 80003b4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003b8:	e07d      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 4: {  // 状态监控寄存器1-5配置错误，发送状态监控寄存器1配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003ba:	4841      	ldr	r0, [pc, #260]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 80003bc:	f000 fe70 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(1);  // 设置状态监控寄存器1，发送是Write_Once_Func
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 fec9 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 5;            // 等待串口返回，返回正确赋值6，错误或者超时2s，赋值4
 80003c6:	4b3d      	ldr	r3, [pc, #244]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80003c8:	2205      	movs	r2, #5
 80003ca:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003ce:	e072      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 6: {  // 状态监控寄存器2配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003d0:	483b      	ldr	r0, [pc, #236]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 80003d2:	f000 fe65 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(2);  // 设置状态监控寄存器2，发送是Write_Once_Func
 80003d6:	2002      	movs	r0, #2
 80003d8:	f000 febe 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 7;            // 等待串口返回，返回正确赋值8，错误或者超时2s，赋值6
 80003dc:	4b37      	ldr	r3, [pc, #220]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80003de:	2207      	movs	r2, #7
 80003e0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003e4:	e067      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 8: {  // 状态监控寄存器3配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003e6:	4836      	ldr	r0, [pc, #216]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 80003e8:	f000 fe5a 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(3);  // 设置状态监控寄存器3，发送是Write_Once_Func
 80003ec:	2003      	movs	r0, #3
 80003ee:	f000 feb3 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 9;            // 等待串口返回，返回正确赋值10，错误或者超时2s，赋值8
 80003f2:	4b32      	ldr	r3, [pc, #200]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80003f4:	2209      	movs	r2, #9
 80003f6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003fa:	e05c      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 10: {  // 状态监控寄存器4配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003fc:	4830      	ldr	r0, [pc, #192]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 80003fe:	f000 fe4f 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(4);  // 设置状态监控寄存器4，发送是Write_Once_Func
 8000402:	2004      	movs	r0, #4
 8000404:	f000 fea8 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 11;           // 等待串口返回，返回正确赋值12，错误或者超时2s，赋值10
 8000408:	4b2c      	ldr	r3, [pc, #176]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 800040a:	220b      	movs	r2, #11
 800040c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000410:	e051      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 12: {  // 状态监控寄存器5配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000412:	482b      	ldr	r0, [pc, #172]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 8000414:	f000 fe44 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(5);  // 设置状态监控寄存器5，发送是Write_Once_Func
 8000418:	2005      	movs	r0, #5
 800041a:	f000 fe9d 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 13;           // 等待串口返回，返回正确赋值2,重读寄存器的状态，错误或者超时2s，赋值12
 800041e:	4b27      	ldr	r3, [pc, #156]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000420:	220d      	movs	r2, #13
 8000422:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000426:	e046      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 14: {  // 状态监控寄存器都是正确的
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000428:	4825      	ldr	r0, [pc, #148]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 800042a:	f000 fe39 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(6);  // 查询电子齿轮比分子分母的设置,发送是Read_Func，4words
 800042e:	2006      	movs	r0, #6
 8000430:	f000 fe92 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 15;           // 等待串口返回，返回正确赋值18,重读寄存器的设置，错误赋值16，超时2s，赋值14
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000436:	220f      	movs	r2, #15
 8000438:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800043c:	e03b      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 16: {
      //
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800043e:	4820      	ldr	r0, [pc, #128]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 8000440:	f000 fe2e 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(7);  // 电子齿轮比分子分母的设置，发送是Write_Multi_Func，4words
 8000444:	2007      	movs	r0, #7
 8000446:	f000 fe87 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 17;           // 等待串口返回，返回正确赋值14,重读寄存器的设置，错误或者超时2s，赋值16
 800044a:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 800044c:	2211      	movs	r2, #17
 800044e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000452:	e030      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 18: {  // 读取脉冲清除模式，需要设置为0x11;
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000454:	481a      	ldr	r0, [pc, #104]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 8000456:	f000 fe23 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(8);  // 读取脉冲清除模式，需要设置为0x11，发送是Read_Func，1words
 800045a:	2008      	movs	r0, #8
 800045c:	f000 fe7c 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 19;           // 等待串口返回，返回正确赋值22,重读寄存器的设置，错误赋值20，超时2s，赋值18
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000462:	2213      	movs	r2, #19
 8000464:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000468:	e025      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 20: {  // 脉冲清除模式，需要设置为0x11;
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800046a:	4815      	ldr	r0, [pc, #84]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 800046c:	f000 fe18 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(9);  // 脉冲清除模式，需要设置为0x11，发送是Write_Once_Func，1words
 8000470:	2009      	movs	r0, #9
 8000472:	f000 fe71 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 21;           // 等待串口返回，返回正确赋值18,重读寄存器的设置，错误超时2s，赋值20
 8000476:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000478:	2215      	movs	r2, #21
 800047a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800047e:	e01a      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 22: {  //
      // 脉冲模式设置正确，读取EEPROM是否为不保存模式
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 8000482:	f000 fe0d 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(10);  // 读取EEPROM是否为不保存模式，发送是Read_Func，1words
 8000486:	200a      	movs	r0, #10
 8000488:	f000 fe66 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 23;            // 等待串口返回，返回正确赋值26,重读寄存器的设置，错误赋值24，超时2s，赋值22
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 800048e:	2217      	movs	r2, #23
 8000490:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000494:	e00f      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 24: {
      //
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000496:	480a      	ldr	r0, [pc, #40]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 8000498:	f000 fe02 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(11);  // 设置EEPROM为不保存模式，发送是Write_Once_Func，1words
 800049c:	200b      	movs	r0, #11
 800049e:	f000 fe5b 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 25;            // 等待串口返回，返回正确赋值22,重读寄存器的设置，错误超时2s，赋值24
 80004a2:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80004a4:	2219      	movs	r2, #25
 80004a6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80004aa:	e004      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 26: {  // 设置了EEPROM不保存模式
      ServoMotor.Flag_Event[0] = 1;
 80004ac:	4b03      	ldr	r3, [pc, #12]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    } break;
 80004b4:	bf00      	nop
  }
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000a0 	.word	0x200000a0
 80004c0:	200000d2 	.word	0x200000d2

080004c4 <UartAction_ServoMotor>:
void UartAction_ServoMotor(uint8_t *buf, uint8_t len) {
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b0c5      	sub	sp, #276	@ 0x114
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80004d2:	6018      	str	r0, [r3, #0]
 80004d4:	460a      	mov	r2, r1
 80004d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004da:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80004de:	701a      	strb	r2, [r3, #0]
  uint8_t uartbuf[255] = {0};
 80004e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80004e8:	4618      	mov	r0, r3
 80004ea:	23ff      	movs	r3, #255	@ 0xff
 80004ec:	461a      	mov	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f009 f993 	bl	800981a <memset>
  uint8_t lenbuf       = len / 2;
 80004f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004f8:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	085b      	lsrs	r3, r3, #1
 8000500:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
  for (uint8_t i = 0; i < lenbuf; i++) {
 8000504:	2300      	movs	r3, #0
 8000506:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800050a:	e02f      	b.n	800056c <UartAction_ServoMotor+0xa8>
    uartbuf[i] = Get_Regroup_ASCII(buf[2 * i], 0) | Get_Regroup_ASCII(buf[2 * i + 1], 1);
 800050c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	461a      	mov	r2, r3
 8000514:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000518:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4413      	add	r3, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f001 f947 	bl	80017b8 <Get_Regroup_ASCII>
 800052a:	4603      	mov	r3, r0
 800052c:	461c      	mov	r4, r3
 800052e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	3301      	adds	r3, #1
 8000536:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800053a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800053e:	6812      	ldr	r2, [r2, #0]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2101      	movs	r1, #1
 8000546:	4618      	mov	r0, r3
 8000548:	f001 f936 	bl	80017b8 <Get_Regroup_ASCII>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000554:	4322      	orrs	r2, r4
 8000556:	b2d1      	uxtb	r1, r2
 8000558:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800055c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000560:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < lenbuf; i++) {
 8000562:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000566:	3301      	adds	r3, #1
 8000568:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800056c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8000570:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8000574:	429a      	cmp	r2, r3
 8000576:	d3c9      	bcc.n	800050c <UartAction_ServoMotor+0x48>
  }

  if (uartbuf[0] != ServoMotor.address && uartbuf[1] != (uint8_t)(ServoMotor.UartCurrentCmd[0] & 0xFF)) {
 8000578:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800057c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	4bba      	ldr	r3, [pc, #744]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000584:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000588:	429a      	cmp	r2, r3
 800058a:	d00a      	beq.n	80005a2 <UartAction_ServoMotor+0xde>
 800058c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000594:	785a      	ldrb	r2, [r3, #1]
 8000596:	4bb5      	ldr	r3, [pc, #724]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000598:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800059a:	b2db      	uxtb	r3, r3
 800059c:	429a      	cmp	r2, r3
 800059e:	f040 83c2 	bne.w	8000d26 <UartAction_ServoMotor+0x862>
    return;
  }
  UartWrite_WirelessModule(uartbuf, lenbuf);
 80005a2:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fb3e 	bl	8001c30 <UartWrite_WirelessModule>
  switch (uartbuf[1]) {
 80005b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005bc:	785b      	ldrb	r3, [r3, #1]
 80005be:	2b10      	cmp	r3, #16
 80005c0:	f000 8397 	beq.w	8000cf2 <UartAction_ServoMotor+0x82e>
 80005c4:	2b10      	cmp	r3, #16
 80005c6:	f300 83b5 	bgt.w	8000d34 <UartAction_ServoMotor+0x870>
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d003      	beq.n	80005d6 <UartAction_ServoMotor+0x112>
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	f000 80e2 	beq.w	8000798 <UartAction_ServoMotor+0x2d4>
 80005d4:	e3ae      	b.n	8000d34 <UartAction_ServoMotor+0x870>
    case Cmd_Read_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 寄存器
 80005d6:	4ba5      	ldr	r3, [pc, #660]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 80005d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80005da:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80005de:	f000 80bd 	beq.w	800075c <UartAction_ServoMotor+0x298>
 80005e2:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80005e6:	f300 83a0 	bgt.w	8000d2a <UartAction_ServoMotor+0x866>
 80005ea:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80005ee:	f000 809f 	beq.w	8000730 <UartAction_ServoMotor+0x26c>
 80005f2:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80005f6:	f300 8398 	bgt.w	8000d2a <UartAction_ServoMotor+0x866>
 80005fa:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 80005fe:	d067      	beq.n	80006d0 <UartAction_ServoMotor+0x20c>
 8000600:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 8000604:	f300 8391 	bgt.w	8000d2a <UartAction_ServoMotor+0x866>
 8000608:	2b12      	cmp	r3, #18
 800060a:	f000 80bd 	beq.w	8000788 <UartAction_ServoMotor+0x2c4>
 800060e:	2b22      	cmp	r3, #34	@ 0x22
 8000610:	d000      	beq.n	8000614 <UartAction_ServoMotor+0x150>
              }
            } break;
          }
        } break;
      }
    } break;
 8000612:	e38a      	b.n	8000d2a <UartAction_ServoMotor+0x866>
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000614:	4b95      	ldr	r3, [pc, #596]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000616:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000618:	2b01      	cmp	r3, #1
 800061a:	d057      	beq.n	80006cc <UartAction_ServoMotor+0x208>
 800061c:	2b0a      	cmp	r3, #10
 800061e:	d000      	beq.n	8000622 <UartAction_ServoMotor+0x15e>
        } break;
 8000620:	e0b9      	b.n	8000796 <UartAction_ServoMotor+0x2d2>
              ServoMotor.IsConnected         = 1;
 8000622:	4b92      	ldr	r3, [pc, #584]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000624:	2201      	movs	r2, #1
 8000626:	705a      	strb	r2, [r3, #1]
              uint8_t MonitorRegisterSet_buf = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[4] != (PulseMonitor_0022H & 0xFF)) {
 800062e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <UartAction_ServoMotor+0x184>
                MonitorRegisterSet_buf |= 0x01;
 800063c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[8] != (TorqueMonitor_0024H & 0xFF)) {
 8000648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800064c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	2b0b      	cmp	r3, #11
 8000654:	d005      	beq.n	8000662 <UartAction_ServoMotor+0x19e>
                MonitorRegisterSet_buf |= 0x02;
 8000656:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800065a:	f043 0302 	orr.w	r3, r3, #2
 800065e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[12] != (SpeedMonitor_0026H & 0xFF)) {
 8000662:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800066a:	7b1b      	ldrb	r3, [r3, #12]
 800066c:	2b07      	cmp	r3, #7
 800066e:	d005      	beq.n	800067c <UartAction_ServoMotor+0x1b8>
                MonitorRegisterSet_buf |= 0x04;
 8000670:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[16] != (Monitor_0028H & 0xFF)) {
 800067c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000684:	7c1b      	ldrb	r3, [r3, #16]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d005      	beq.n	8000696 <UartAction_ServoMotor+0x1d2>
                MonitorRegisterSet_buf |= 0x08;
 800068a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[20] != (Monitor_002AH & 0xFF)) {
 8000696:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800069a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800069e:	7d1b      	ldrb	r3, [r3, #20]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d005      	beq.n	80006b0 <UartAction_ServoMotor+0x1ec>
                MonitorRegisterSet_buf |= 0x10;
 80006a4:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (MonitorRegisterSet_buf) {    // 有配置错误
 80006b0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <UartAction_ServoMotor+0x1fe>
                ServoMotor.Flag_Event[1] = 4;  // 重新设置状态监控寄存器1
 80006b8:	4b6c      	ldr	r3, [pc, #432]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 80006ba:	2204      	movs	r2, #4
 80006bc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 80006c0:	e005      	b.n	80006ce <UartAction_ServoMotor+0x20a>
                ServoMotor.Flag_Event[1] = 14;
 80006c2:	4b6a      	ldr	r3, [pc, #424]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 80006c4:	220e      	movs	r2, #14
 80006c6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 80006ca:	e000      	b.n	80006ce <UartAction_ServoMotor+0x20a>
            } break;
 80006cc:	bf00      	nop
        } break;
 80006ce:	e062      	b.n	8000796 <UartAction_ServoMotor+0x2d2>
          switch (ServoMotor.UartCurrentCmd[2]) {
 80006d0:	4b66      	ldr	r3, [pc, #408]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 80006d2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d159      	bne.n	800078c <UartAction_ServoMotor+0x2c8>
              uint8_t GearRatioRegisterSet_buf = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              if (uartbuf[4] != (GearRatio_Numerator_0158H & 0xFF)) {
 80006de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80006ea:	d005      	beq.n	80006f8 <UartAction_ServoMotor+0x234>
                GearRatioRegisterSet_buf |= 0x01;
 80006ec:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              if (uartbuf[8] != (GearRatio_Denominator_015AH & 0xFF)) {
 80006f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000700:	7a1b      	ldrb	r3, [r3, #8]
 8000702:	2b5e      	cmp	r3, #94	@ 0x5e
 8000704:	d005      	beq.n	8000712 <UartAction_ServoMotor+0x24e>
                GearRatioRegisterSet_buf |= 0x02;
 8000706:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              if (GearRatioRegisterSet_buf) {   // 有配置错误
 8000712:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <UartAction_ServoMotor+0x260>
                ServoMotor.Flag_Event[1] = 16;  // 重新设置电子齿轮比分子分母寄存器
 800071a:	4b54      	ldr	r3, [pc, #336]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800071c:	2210      	movs	r2, #16
 800071e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000722:	e003      	b.n	800072c <UartAction_ServoMotor+0x268>
                ServoMotor.Flag_Event[1] = 18;
 8000724:	4b51      	ldr	r3, [pc, #324]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000726:	2212      	movs	r2, #18
 8000728:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800072c:	bf00      	nop
        } break;
 800072e:	e02d      	b.n	800078c <UartAction_ServoMotor+0x2c8>
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000730:	4b4e      	ldr	r3, [pc, #312]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000732:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000734:	2b01      	cmp	r3, #1
 8000736:	d12b      	bne.n	8000790 <UartAction_ServoMotor+0x2cc>
              if (uartbuf[4] == (EEPROM_Disable_P2_30 & 0xFF)) {  // 已经设置了EEPROM不保存
 8000738:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800073c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	2b05      	cmp	r3, #5
 8000744:	d104      	bne.n	8000750 <UartAction_ServoMotor+0x28c>
                ServoMotor.Flag_Event[1] = 26;
 8000746:	4b49      	ldr	r3, [pc, #292]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000748:	221a      	movs	r2, #26
 800074a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800074e:	e003      	b.n	8000758 <UartAction_ServoMotor+0x294>
                ServoMotor.Flag_Event[1] = 24;
 8000750:	4b46      	ldr	r3, [pc, #280]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000752:	2218      	movs	r2, #24
 8000754:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000758:	bf00      	nop
        } break;
 800075a:	e019      	b.n	8000790 <UartAction_ServoMotor+0x2cc>
          switch (ServoMotor.UartCurrentCmd[2]) {
 800075c:	4b43      	ldr	r3, [pc, #268]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800075e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000760:	2b01      	cmp	r3, #1
 8000762:	d117      	bne.n	8000794 <UartAction_ServoMotor+0x2d0>
              if (uartbuf[4] == (PulseReset_Data_P2_50 & 0xFF)) {  // 已经设置脉冲清除模式，为0x11;
 8000764:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	2b11      	cmp	r3, #17
 8000770:	d104      	bne.n	800077c <UartAction_ServoMotor+0x2b8>
                ServoMotor.Flag_Event[1] = 22;
 8000772:	4b3e      	ldr	r3, [pc, #248]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000774:	2216      	movs	r2, #22
 8000776:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800077a:	e003      	b.n	8000784 <UartAction_ServoMotor+0x2c0>
                ServoMotor.Flag_Event[1] = 20;
 800077c:	4b3b      	ldr	r3, [pc, #236]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800077e:	2214      	movs	r2, #20
 8000780:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000784:	bf00      	nop
        } break;
 8000786:	e005      	b.n	8000794 <UartAction_ServoMotor+0x2d0>
        } break;
 8000788:	bf00      	nop
 800078a:	e2ce      	b.n	8000d2a <UartAction_ServoMotor+0x866>
        } break;
 800078c:	bf00      	nop
 800078e:	e2cc      	b.n	8000d2a <UartAction_ServoMotor+0x866>
        } break;
 8000790:	bf00      	nop
 8000792:	e2ca      	b.n	8000d2a <UartAction_ServoMotor+0x866>
        } break;
 8000794:	bf00      	nop
    } break;
 8000796:	e2c8      	b.n	8000d2a <UartAction_ServoMotor+0x866>
    case Cmd_Write_Once_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 读取寄存器
 8000798:	4b34      	ldr	r3, [pc, #208]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800079a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800079c:	f240 420a 	movw	r2, #1034	@ 0x40a
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f000 80f2 	beq.w	800098a <UartAction_ServoMotor+0x4c6>
 80007a6:	f240 420a 	movw	r2, #1034	@ 0x40a
 80007aa:	4293      	cmp	r3, r2
 80007ac:	f300 82bf 	bgt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007b0:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80007b4:	f000 80e4 	beq.w	8000980 <UartAction_ServoMotor+0x4bc>
 80007b8:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80007bc:	f300 82b7 	bgt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007c0:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80007c4:	f000 80d7 	beq.w	8000976 <UartAction_ServoMotor+0x4b2>
 80007c8:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80007cc:	f300 82af 	bgt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007d0:	f240 2216 	movw	r2, #534	@ 0x216
 80007d4:	4293      	cmp	r3, r2
 80007d6:	f000 809a 	beq.w	800090e <UartAction_ServoMotor+0x44a>
 80007da:	f240 2216 	movw	r2, #534	@ 0x216
 80007de:	4293      	cmp	r3, r2
 80007e0:	f300 82a5 	bgt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007e4:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 80007e8:	d05e      	beq.n	80008a8 <UartAction_ServoMotor+0x3e4>
 80007ea:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 80007ee:	f300 829e 	bgt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80007f4:	dc1c      	bgt.n	8000830 <UartAction_ServoMotor+0x36c>
 80007f6:	2b22      	cmp	r3, #34	@ 0x22
 80007f8:	f2c0 8299 	blt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007fc:	3b22      	subs	r3, #34	@ 0x22
 80007fe:	2b08      	cmp	r3, #8
 8000800:	f200 8295 	bhi.w	8000d2e <UartAction_ServoMotor+0x86a>
 8000804:	a201      	add	r2, pc, #4	@ (adr r2, 800080c <UartAction_ServoMotor+0x348>)
 8000806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080a:	bf00      	nop
 800080c:	08000839 	.word	0x08000839
 8000810:	08000d2f 	.word	0x08000d2f
 8000814:	08000843 	.word	0x08000843
 8000818:	08000d2f 	.word	0x08000d2f
 800081c:	0800084d 	.word	0x0800084d
 8000820:	08000d2f 	.word	0x08000d2f
 8000824:	08000857 	.word	0x08000857
 8000828:	08000d2f 	.word	0x08000d2f
 800082c:	08000861 	.word	0x08000861
 8000830:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000834:	d01c      	beq.n	8000870 <UartAction_ServoMotor+0x3ac>
              }
            } break;
          }
        } break;
      }
    } break;
 8000836:	e27a      	b.n	8000d2e <UartAction_ServoMotor+0x86a>
          ServoMotor.Flag_Event[1] = 6;        // 设置状态监控寄存器2
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800083a:	2206      	movs	r2, #6
 800083c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000840:	e256      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 8;  // 设置状态监控寄存器3
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000844:	2208      	movs	r2, #8
 8000846:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800084a:	e251      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 10;  // 设置状态监控寄存器4
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800084e:	220a      	movs	r2, #10
 8000850:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000854:	e24c      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 12;  // 设置状态监控寄存器5
 8000856:	4b05      	ldr	r3, [pc, #20]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000858:	220c      	movs	r2, #12
 800085a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800085e:	e247      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 2;  // 重新检查状态监控寄存器1-5
 8000860:	4b02      	ldr	r3, [pc, #8]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000862:	2202      	movs	r2, #2
 8000864:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000868:	e242      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
 800086a:	bf00      	nop
 800086c:	200000a0 	.word	0x200000a0
          switch (ServoMotor.Flag_Event[2]) {
 8000870:	4bc0      	ldr	r3, [pc, #768]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000876:	2b17      	cmp	r3, #23
 8000878:	f040 8237 	bne.w	8000cea <UartAction_ServoMotor+0x826>
              ServoMotor.Flag_Event[2] = Szmode_Data_P1_01 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 24 : 22;
 800087c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000880:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800088c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000890:	7952      	ldrb	r2, [r2, #5]
 8000892:	4313      	orrs	r3, r2
 8000894:	2b04      	cmp	r3, #4
 8000896:	d101      	bne.n	800089c <UartAction_ServoMotor+0x3d8>
 8000898:	2218      	movs	r2, #24
 800089a:	e000      	b.n	800089e <UartAction_ServoMotor+0x3da>
 800089c:	2216      	movs	r2, #22
 800089e:	4bb5      	ldr	r3, [pc, #724]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 80008a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 80008a4:	bf00      	nop
        } break;
 80008a6:	e220      	b.n	8000cea <UartAction_ServoMotor+0x826>
          switch (ServoMotor.Flag_Event[2]) {
 80008a8:	4bb2      	ldr	r3, [pc, #712]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 80008aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80008ae:	2b05      	cmp	r3, #5
 80008b0:	d002      	beq.n	80008b8 <UartAction_ServoMotor+0x3f4>
 80008b2:	2b19      	cmp	r3, #25
 80008b4:	d015      	beq.n	80008e2 <UartAction_ServoMotor+0x41e>
        } break;
 80008b6:	e21b      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
              ServoMotor.Flag_Event[2] = DI1_Data_ServoON == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 6 : 4;
 80008b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008c8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80008cc:	7952      	ldrb	r2, [r2, #5]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d101      	bne.n	80008d8 <UartAction_ServoMotor+0x414>
 80008d4:	2206      	movs	r2, #6
 80008d6:	e000      	b.n	80008da <UartAction_ServoMotor+0x416>
 80008d8:	2204      	movs	r2, #4
 80008da:	4ba6      	ldr	r3, [pc, #664]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 80008dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 80008e0:	e014      	b.n	800090c <UartAction_ServoMotor+0x448>
              ServoMotor.Flag_Event[2] = DI1_Data_ServoON == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 26 : 24;
 80008e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008ea:	791b      	ldrb	r3, [r3, #4]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008f2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80008f6:	7952      	ldrb	r2, [r2, #5]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d101      	bne.n	8000902 <UartAction_ServoMotor+0x43e>
 80008fe:	221a      	movs	r2, #26
 8000900:	e000      	b.n	8000904 <UartAction_ServoMotor+0x440>
 8000902:	2218      	movs	r2, #24
 8000904:	4b9b      	ldr	r3, [pc, #620]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 800090a:	bf00      	nop
        } break;
 800090c:	e1f0      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          switch (ServoMotor.Flag_Event[2]) {
 800090e:	4b99      	ldr	r3, [pc, #612]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000914:	2b13      	cmp	r3, #19
 8000916:	d002      	beq.n	800091e <UartAction_ServoMotor+0x45a>
 8000918:	2b15      	cmp	r3, #21
 800091a:	d015      	beq.n	8000948 <UartAction_ServoMotor+0x484>
        } break;
 800091c:	e1e8      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_Start_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 16;
 800091e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000922:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800092e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000932:	7952      	ldrb	r2, [r2, #5]
 8000934:	4313      	orrs	r3, r2
 8000936:	2b04      	cmp	r3, #4
 8000938:	d101      	bne.n	800093e <UartAction_ServoMotor+0x47a>
 800093a:	2214      	movs	r2, #20
 800093c:	e000      	b.n	8000940 <UartAction_ServoMotor+0x47c>
 800093e:	2210      	movs	r2, #16
 8000940:	4b8c      	ldr	r3, [pc, #560]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000946:	e015      	b.n	8000974 <UartAction_ServoMotor+0x4b0>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_End_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 22 : 20;
 8000948:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800094c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000958:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800095c:	7952      	ldrb	r2, [r2, #5]
 800095e:	4313      	orrs	r3, r2
 8000960:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000964:	d101      	bne.n	800096a <UartAction_ServoMotor+0x4a6>
 8000966:	2216      	movs	r2, #22
 8000968:	e000      	b.n	800096c <UartAction_ServoMotor+0x4a8>
 800096a:	2214      	movs	r2, #20
 800096c:	4b81      	ldr	r3, [pc, #516]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 800096e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000972:	bf00      	nop
        } break;
 8000974:	e1bc      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 22;  // 重新读取EEPROM设置是否为不保存模式
 8000976:	4b7f      	ldr	r3, [pc, #508]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000978:	2216      	movs	r2, #22
 800097a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800097e:	e1b7      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 18;  // 重新读取脉冲清除模式
 8000980:	4b7c      	ldr	r3, [pc, #496]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000982:	2212      	movs	r2, #18
 8000984:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000988:	e1b2      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          switch (ServoMotor.Flag_Event[2]) {
 800098a:	4b7a      	ldr	r3, [pc, #488]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 800098c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000990:	3b03      	subs	r3, #3
 8000992:	2b1a      	cmp	r3, #26
 8000994:	f200 81ab 	bhi.w	8000cee <UartAction_ServoMotor+0x82a>
 8000998:	a201      	add	r2, pc, #4	@ (adr r2, 80009a0 <UartAction_ServoMotor+0x4dc>)
 800099a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099e:	bf00      	nop
 80009a0:	08000a0d 	.word	0x08000a0d
 80009a4:	08000cef 	.word	0x08000cef
 80009a8:	08000cef 	.word	0x08000cef
 80009ac:	08000cef 	.word	0x08000cef
 80009b0:	08000a37 	.word	0x08000a37
 80009b4:	08000cef 	.word	0x08000cef
 80009b8:	08000a61 	.word	0x08000a61
 80009bc:	08000cef 	.word	0x08000cef
 80009c0:	08000ad5 	.word	0x08000ad5
 80009c4:	08000cef 	.word	0x08000cef
 80009c8:	08000aff 	.word	0x08000aff
 80009cc:	08000cef 	.word	0x08000cef
 80009d0:	08000b79 	.word	0x08000b79
 80009d4:	08000cef 	.word	0x08000cef
 80009d8:	08000ba3 	.word	0x08000ba3
 80009dc:	08000cef 	.word	0x08000cef
 80009e0:	08000bcd 	.word	0x08000bcd
 80009e4:	08000cef 	.word	0x08000cef
 80009e8:	08000cef 	.word	0x08000cef
 80009ec:	08000cef 	.word	0x08000cef
 80009f0:	08000cef 	.word	0x08000cef
 80009f4:	08000cef 	.word	0x08000cef
 80009f8:	08000cef 	.word	0x08000cef
 80009fc:	08000cef 	.word	0x08000cef
 8000a00:	08000c3f 	.word	0x08000c3f
 8000a04:	08000cef 	.word	0x08000cef
 8000a08:	08000c69 	.word	0x08000c69
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 4 : 2;
 8000a0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a14:	791b      	ldrb	r3, [r3, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d108      	bne.n	8000a2c <UartAction_ServoMotor+0x568>
 8000a1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a22:	795b      	ldrb	r3, [r3, #5]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d101      	bne.n	8000a2c <UartAction_ServoMotor+0x568>
 8000a28:	2204      	movs	r2, #4
 8000a2a:	e000      	b.n	8000a2e <UartAction_ServoMotor+0x56a>
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	4b51      	ldr	r3, [pc, #324]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a34:	e158      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x14) ? 8 : 6;
 8000a36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d108      	bne.n	8000a56 <UartAction_ServoMotor+0x592>
 8000a44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a4c:	795b      	ldrb	r3, [r3, #5]
 8000a4e:	2b14      	cmp	r3, #20
 8000a50:	d101      	bne.n	8000a56 <UartAction_ServoMotor+0x592>
 8000a52:	2208      	movs	r2, #8
 8000a54:	e000      	b.n	8000a58 <UartAction_ServoMotor+0x594>
 8000a56:	2206      	movs	r2, #6
 8000a58:	4b46      	ldr	r3, [pc, #280]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a5e:	e143      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CCW往左动JOGmode_Data_CCW
 8000a60:	4b44      	ldr	r3, [pc, #272]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a62:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d116      	bne.n	8000a98 <UartAction_ServoMotor+0x5d4>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 10 : 8;
 8000a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a7a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a7e:	7952      	ldrb	r2, [r2, #5]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <UartAction_ServoMotor+0x5ca>
 8000a8a:	220a      	movs	r2, #10
 8000a8c:	e000      	b.n	8000a90 <UartAction_ServoMotor+0x5cc>
 8000a8e:	2208      	movs	r2, #8
 8000a90:	4b38      	ldr	r3, [pc, #224]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a96:	e120      	b.n	8000cda <UartAction_ServoMotor+0x816>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CW往右动
 8000a98:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a9a:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa2:	f040 811a 	bne.w	8000cda <UartAction_ServoMotor+0x816>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 10 : 8;
 8000aa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000aae:	791b      	ldrb	r3, [r3, #4]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ab6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000aba:	7952      	ldrb	r2, [r2, #5]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <UartAction_ServoMotor+0x606>
 8000ac6:	220a      	movs	r2, #10
 8000ac8:	e000      	b.n	8000acc <UartAction_ServoMotor+0x608>
 8000aca:	2208      	movs	r2, #8
 8000acc:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000ad2:	e102      	b.n	8000cda <UartAction_ServoMotor+0x816>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 12 : 10;
 8000ad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d108      	bne.n	8000af4 <UartAction_ServoMotor+0x630>
 8000ae2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000aea:	795b      	ldrb	r3, [r3, #5]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <UartAction_ServoMotor+0x630>
 8000af0:	220c      	movs	r2, #12
 8000af2:	e000      	b.n	8000af6 <UartAction_ServoMotor+0x632>
 8000af4:	220a      	movs	r2, #10
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000afc:	e0f4      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CW往右动
 8000afe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b00:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d116      	bne.n	8000b36 <UartAction_ServoMotor+0x672>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 14 : 12;
 8000b08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b18:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000b1c:	7952      	ldrb	r2, [r2, #5]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d101      	bne.n	8000b2c <UartAction_ServoMotor+0x668>
 8000b28:	220e      	movs	r2, #14
 8000b2a:	e000      	b.n	8000b2e <UartAction_ServoMotor+0x66a>
 8000b2c:	220c      	movs	r2, #12
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b34:	e0d3      	b.n	8000cde <UartAction_ServoMotor+0x81a>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CCW往左动
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b38:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	f040 80cd 	bne.w	8000cde <UartAction_ServoMotor+0x81a>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 14 : 12;
 8000b44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b54:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000b58:	7952      	ldrb	r2, [r2, #5]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <UartAction_ServoMotor+0x6a4>
 8000b64:	220e      	movs	r2, #14
 8000b66:	e000      	b.n	8000b6a <UartAction_ServoMotor+0x6a6>
 8000b68:	220c      	movs	r2, #12
 8000b6a:	4b02      	ldr	r3, [pc, #8]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b70:	e0b5      	b.n	8000cde <UartAction_ServoMotor+0x81a>
 8000b72:	bf00      	nop
 8000b74:	200000a0 	.word	0x200000a0
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 16 : 14;
 8000b78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b80:	791b      	ldrb	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d108      	bne.n	8000b98 <UartAction_ServoMotor+0x6d4>
 8000b86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b8e:	795b      	ldrb	r3, [r3, #5]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <UartAction_ServoMotor+0x6d4>
 8000b94:	2210      	movs	r2, #16
 8000b96:	e000      	b.n	8000b9a <UartAction_ServoMotor+0x6d6>
 8000b98:	220e      	movs	r2, #14
 8000b9a:	4b68      	ldr	r3, [pc, #416]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000ba0:	e0a2      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_Start_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 18 : 16;
 8000ba2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bb2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bb6:	7952      	ldrb	r2, [r2, #5]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d101      	bne.n	8000bc2 <UartAction_ServoMotor+0x6fe>
 8000bbe:	2212      	movs	r2, #18
 8000bc0:	e000      	b.n	8000bc4 <UartAction_ServoMotor+0x700>
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000bca:	e08d      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CCW往左动JOGmode_Data_CCW
 8000bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000bce:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d116      	bne.n	8000c04 <UartAction_ServoMotor+0x740>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 18;
 8000bd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000be6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bea:	7952      	ldrb	r2, [r2, #5]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <UartAction_ServoMotor+0x736>
 8000bf6:	2214      	movs	r2, #20
 8000bf8:	e000      	b.n	8000bfc <UartAction_ServoMotor+0x738>
 8000bfa:	2212      	movs	r2, #18
 8000bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c02:	e06e      	b.n	8000ce2 <UartAction_ServoMotor+0x81e>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CW往右动
 8000c04:	4b4d      	ldr	r3, [pc, #308]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000c06:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0e:	d168      	bne.n	8000ce2 <UartAction_ServoMotor+0x81e>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 18;
 8000c10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c18:	791b      	ldrb	r3, [r3, #4]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c20:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c24:	7952      	ldrb	r2, [r2, #5]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <UartAction_ServoMotor+0x770>
 8000c30:	2214      	movs	r2, #20
 8000c32:	e000      	b.n	8000c36 <UartAction_ServoMotor+0x772>
 8000c34:	2212      	movs	r2, #18
 8000c36:	4b41      	ldr	r3, [pc, #260]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c3c:	e051      	b.n	8000ce2 <UartAction_ServoMotor+0x81e>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 28 : 26;
 8000c3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c46:	791b      	ldrb	r3, [r3, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d108      	bne.n	8000c5e <UartAction_ServoMotor+0x79a>
 8000c4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c54:	795b      	ldrb	r3, [r3, #5]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <UartAction_ServoMotor+0x79a>
 8000c5a:	221c      	movs	r2, #28
 8000c5c:	e000      	b.n	8000c60 <UartAction_ServoMotor+0x79c>
 8000c5e:	221a      	movs	r2, #26
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c66:	e03f      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CW往右动
 8000c68:	4b34      	ldr	r3, [pc, #208]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000c6a:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d116      	bne.n	8000ca0 <UartAction_ServoMotor+0x7dc>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 30 : 28;
 8000c72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c7a:	791b      	ldrb	r3, [r3, #4]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c82:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c86:	7952      	ldrb	r2, [r2, #5]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <UartAction_ServoMotor+0x7d2>
 8000c92:	221e      	movs	r2, #30
 8000c94:	e000      	b.n	8000c98 <UartAction_ServoMotor+0x7d4>
 8000c96:	221c      	movs	r2, #28
 8000c98:	4b28      	ldr	r3, [pc, #160]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c9e:	e022      	b.n	8000ce6 <UartAction_ServoMotor+0x822>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CCW往左动
 8000ca0:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000ca2:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000caa:	d11c      	bne.n	8000ce6 <UartAction_ServoMotor+0x822>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 30 : 28;
 8000cac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000cb4:	791b      	ldrb	r3, [r3, #4]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000cbc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000cc0:	7952      	ldrb	r2, [r2, #5]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d101      	bne.n	8000cd0 <UartAction_ServoMotor+0x80c>
 8000ccc:	221e      	movs	r2, #30
 8000cce:	e000      	b.n	8000cd2 <UartAction_ServoMotor+0x80e>
 8000cd0:	221c      	movs	r2, #28
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000cd8:	e005      	b.n	8000ce6 <UartAction_ServoMotor+0x822>
            } break;
 8000cda:	bf00      	nop
 8000cdc:	e007      	b.n	8000cee <UartAction_ServoMotor+0x82a>
            } break;
 8000cde:	bf00      	nop
 8000ce0:	e005      	b.n	8000cee <UartAction_ServoMotor+0x82a>
            } break;
 8000ce2:	bf00      	nop
 8000ce4:	e003      	b.n	8000cee <UartAction_ServoMotor+0x82a>
            } break;
 8000ce6:	bf00      	nop
        } break;
 8000ce8:	e001      	b.n	8000cee <UartAction_ServoMotor+0x82a>
        } break;
 8000cea:	bf00      	nop
 8000cec:	e01f      	b.n	8000d2e <UartAction_ServoMotor+0x86a>
        } break;
 8000cee:	bf00      	nop
    } break;
 8000cf0:	e01d      	b.n	8000d2e <UartAction_ServoMotor+0x86a>
    case Cmd_Write_Multi_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 读取寄存器
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000cf4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000cf6:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 8000cfa:	d11a      	bne.n	8000d32 <UartAction_ServoMotor+0x86e>
        case GearRatioRegister_Numerator: {    // 电子齿轮比分子分母寄存器，需要设置分子160，分母94
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000cfe:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d10e      	bne.n	8000d22 <UartAction_ServoMotor+0x85e>
            case 4: {
              if (uartbuf[5] == ServoMotor.UartCurrentCmd[2]) ServoMotor.Flag_Event[1] = 14;  // 重新电子齿轮比分子分母寄存器
 8000d04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000d0c:	795b      	ldrb	r3, [r3, #5]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000d12:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d103      	bne.n	8000d20 <UartAction_ServoMotor+0x85c>
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000d1a:	220e      	movs	r2, #14
 8000d1c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000d20:	bf00      	nop
          }
        } break;
 8000d22:	bf00      	nop
      }
    } break;
 8000d24:	e005      	b.n	8000d32 <UartAction_ServoMotor+0x86e>
    return;
 8000d26:	bf00      	nop
 8000d28:	e004      	b.n	8000d34 <UartAction_ServoMotor+0x870>
    } break;
 8000d2a:	bf00      	nop
 8000d2c:	e002      	b.n	8000d34 <UartAction_ServoMotor+0x870>
    } break;
 8000d2e:	bf00      	nop
 8000d30:	e000      	b.n	8000d34 <UartAction_ServoMotor+0x870>
    } break;
 8000d32:	bf00      	nop
  }
}
 8000d34:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	200000a0 	.word	0x200000a0

08000d40 <Event_Movement_ServoMotor>:
void Event_Movement_ServoMotor(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  // LOGI("STATE : %d", ServoMotor.Flag_Event[2]);
  switch (ServoMotor.Flag_Event[2]) {
 8000d44:	4b96      	ldr	r3, [pc, #600]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d4a:	2b1c      	cmp	r3, #28
 8000d4c:	f200 8125 	bhi.w	8000f9a <Event_Movement_ServoMotor+0x25a>
 8000d50:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <Event_Movement_ServoMotor+0x18>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000dcd 	.word	0x08000dcd
 8000d5c:	08000de1 	.word	0x08000de1
 8000d60:	08000e03 	.word	0x08000e03
 8000d64:	08000f9b 	.word	0x08000f9b
 8000d68:	08000e1b 	.word	0x08000e1b
 8000d6c:	08000f9b 	.word	0x08000f9b
 8000d70:	08000e33 	.word	0x08000e33
 8000d74:	08000f9b 	.word	0x08000f9b
 8000d78:	08000e4b 	.word	0x08000e4b
 8000d7c:	08000f9b 	.word	0x08000f9b
 8000d80:	08000e87 	.word	0x08000e87
 8000d84:	08000f9b 	.word	0x08000f9b
 8000d88:	08000ead 	.word	0x08000ead
 8000d8c:	08000f9b 	.word	0x08000f9b
 8000d90:	08000ee9 	.word	0x08000ee9
 8000d94:	08000f9b 	.word	0x08000f9b
 8000d98:	08000f0f 	.word	0x08000f0f
 8000d9c:	08000f9b 	.word	0x08000f9b
 8000da0:	08000f9b 	.word	0x08000f9b
 8000da4:	08000f9b 	.word	0x08000f9b
 8000da8:	08000f27 	.word	0x08000f27
 8000dac:	08000f9b 	.word	0x08000f9b
 8000db0:	08000f41 	.word	0x08000f41
 8000db4:	08000f51 	.word	0x08000f51
 8000db8:	08000f61 	.word	0x08000f61
 8000dbc:	08000f9b 	.word	0x08000f9b
 8000dc0:	08000f71 	.word	0x08000f71
 8000dc4:	08000f9b 	.word	0x08000f9b
 8000dc8:	08000f81 	.word	0x08000f81
    case 0: {                     // 判断是否校准
      if (!ServoMotor.IsReset) {  // 没有校准
 8000dcc:	4b74      	ldr	r3, [pc, #464]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f040 80dd 	bne.w	8000f90 <Event_Movement_ServoMotor+0x250>
        ServoMotor.Flag_Event[2] = 1;
 8000dd6:	4b72      	ldr	r3, [pc, #456]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    } break;
 8000dde:	e0d7      	b.n	8000f90 <Event_Movement_ServoMotor+0x250>
    case 1: {                                                                                                            // 没有校准的时候
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 一开始就有传感器触发的情况
 8000de0:	2102      	movs	r1, #2
 8000de2:	4870      	ldr	r0, [pc, #448]	@ (8000fa4 <Event_Movement_ServoMotor+0x264>)
 8000de4:	f003 fb18 	bl	8004418 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d104      	bne.n	8000df8 <Event_Movement_ServoMotor+0xb8>
        ServoMotor.Flag_Event[2] = 2;
 8000dee:	4b6c      	ldr	r3, [pc, #432]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      } else {
        ServoMotor.Flag_Event[2] = 2;
      }
    } break;
 8000df6:	e0d0      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
        ServoMotor.Flag_Event[2] = 2;
 8000df8:	4b69      	ldr	r3, [pc, #420]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e00:	e0cb      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 2: {  // 设备最低速度缓慢运动然后当刚离开传感器范围，随后又返回至刚触发瞬间
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e02:	4869      	ldr	r0, [pc, #420]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000e04:	f000 f94c 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，如果一开始不设置速度0的话，可能会冲出去
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 f954 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 3;                 // 等待串口返回，赋值4，超时赋值2
 8000e10:	4b63      	ldr	r3, [pc, #396]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e12:	2203      	movs	r2, #3
 8000e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e18:	e0bf      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 4: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e1a:	4863      	ldr	r0, [pc, #396]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000e1c:	f000 f940 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(1, DI1_Data_ServoON);  // 打开伺服控制Servo ON
 8000e20:	2101      	movs	r1, #1
 8000e22:	2001      	movs	r0, #1
 8000e24:	f000 f948 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 5;                                // 等待串口返回，赋值6，超时赋值4
 8000e28:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e30:	e0b3      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 6: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e32:	485d      	ldr	r0, [pc, #372]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000e34:	f000 f934 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(3, 20);  // 设置速度1
 8000e38:	2114      	movs	r1, #20
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f000 f93c 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>

      ServoMotor.Flag_Event[2] = 7;  // 等待串口返回，赋值8，超时赋值6
 8000e40:	4b57      	ldr	r3, [pc, #348]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e42:	2207      	movs	r2, #7
 8000e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e48:	e0a7      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 8: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e4a:	4857      	ldr	r0, [pc, #348]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000e4c:	f000 f928 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往左动，在左则往右动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000e50:	4b53      	ldr	r3, [pc, #332]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e52:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d105      	bne.n	8000e66 <Event_Movement_ServoMotor+0x126>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // CCW往左动JOGmode_Data_CCW
 8000e5a:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000e5e:	2003      	movs	r0, #3
 8000e60:	f000 f92a 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 8000e64:	e00a      	b.n	8000e7c <Event_Movement_ServoMotor+0x13c>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000e66:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e68:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d104      	bne.n	8000e7c <Event_Movement_ServoMotor+0x13c>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CW往右动
 8000e72:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000e76:	2003      	movs	r0, #3
 8000e78:	f000 f91e 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      }
      ServoMotor.Flag_Event[2] = 9;  // 等待串口返回，赋值10，超时赋值8
 8000e7c:	4b48      	ldr	r3, [pc, #288]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e7e:	2209      	movs	r2, #9
 8000e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e84:	e089      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 10: {
      if (LimitSensorOFF_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 刚好离开，马上停止
 8000e86:	2102      	movs	r1, #2
 8000e88:	4846      	ldr	r0, [pc, #280]	@ (8000fa4 <Event_Movement_ServoMotor+0x264>)
 8000e8a:	f003 fac5 	bl	8004418 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d17f      	bne.n	8000f94 <Event_Movement_ServoMotor+0x254>
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e94:	4844      	ldr	r0, [pc, #272]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000e96:	f000 f903 	bl	80010a0 <ResetTimerFlag_ServoMotor>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，停止
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f90b 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 11;                // 等待串口返回，赋值12，超时赋值10
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000ea4:	220b      	movs	r2, #11
 8000ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    } break;
 8000eaa:	e073      	b.n	8000f94 <Event_Movement_ServoMotor+0x254>
    case 12: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000eac:	483e      	ldr	r0, [pc, #248]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000eae:	f000 f8f7 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往右动，在左则往左动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000eb4:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d105      	bne.n	8000ec8 <Event_Movement_ServoMotor+0x188>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CW往右动
 8000ebc:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f8f9 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 8000ec6:	e00a      	b.n	8000ede <Event_Movement_ServoMotor+0x19e>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000ec8:	4b35      	ldr	r3, [pc, #212]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000eca:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed2:	d104      	bne.n	8000ede <Event_Movement_ServoMotor+0x19e>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // CCW往左动
 8000ed4:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f8ed 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      }
      ServoMotor.Flag_Event[2] = 13;  // 等待串口返回，赋值14，超时赋值12
 8000ede:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000ee0:	220d      	movs	r2, #13
 8000ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000ee6:	e058      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 14: {
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 刚好回去
 8000ee8:	2102      	movs	r1, #2
 8000eea:	482e      	ldr	r0, [pc, #184]	@ (8000fa4 <Event_Movement_ServoMotor+0x264>)
 8000eec:	f003 fa94 	bl	8004418 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d150      	bne.n	8000f98 <Event_Movement_ServoMotor+0x258>
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ef6:	482c      	ldr	r0, [pc, #176]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000ef8:	f000 f8d2 	bl	80010a0 <ResetTimerFlag_ServoMotor>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，停止
 8000efc:	2100      	movs	r1, #0
 8000efe:	2003      	movs	r0, #3
 8000f00:	f000 f8da 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 15;                // 等待串口返回，赋值16，超时赋值14
 8000f04:	4b26      	ldr	r3, [pc, #152]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f06:	220f      	movs	r2, #15
 8000f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      if (0) {  // 扭矩过大要停下来
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
        Uart_Send_MovementRegister_ServoMotor(3, 0);
        ServoMotor.Flag_Event[2] = 0;
      }
    } break;
 8000f0c:	e044      	b.n	8000f98 <Event_Movement_ServoMotor+0x258>
    // 缺一个开始信号
    case 16: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f0e:	4826      	ldr	r0, [pc, #152]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f10:	f000 f8c6 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_Start_Data_P2_11);
 8000f14:	2104      	movs	r1, #4
 8000f16:	2004      	movs	r0, #4
 8000f18:	f000 f8ce 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 19;  // 等待串口返回，赋值18，超时赋值16
 8000f1c:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f1e:	2213      	movs	r2, #19
 8000f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    } break;
 8000f24:	e039      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 20: {  // 设置了PT模式，发送清除脉冲的指令，设置DI2
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f26:	4820      	ldr	r0, [pc, #128]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f28:	f000 f8ba 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_End_Data_P2_11);
 8000f2c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000f30:	2004      	movs	r0, #4
 8000f32:	f000 f8c1 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 21;  // 等待串口返回，赋值20，超时赋值18
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f38:	2215      	movs	r2, #21
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f3e:	e02c      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 22: {  // 设置了PT模式，发送清除脉冲的指令，复位DI2
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f40:	4819      	ldr	r0, [pc, #100]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f42:	f000 f8ad 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      ServoMotor.Flag_Event[2] = 22;
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f48:	2216      	movs	r2, #22
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      // Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_End_Data_P2_11); // 已经归位，重置脉冲计数,写入PT模式
      // ServoMotor.Flag_Event[2] = 21; // 等待串口返回，赋值22，超时赋值20
    } break;
 8000f4e:	e024      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 23: {  // 脉冲已经重置了，设置成Sz模式
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f50:	4815      	ldr	r0, [pc, #84]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f52:	f000 f8a5 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(4, Szmode_Data_P1_01); // 已经归位，重置脉冲计数,写入PT模式
      ServoMotor.Flag_Event[2] = 22;  // 等待串口返回，赋值24，超时赋值22
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f58:	2216      	movs	r2, #22
 8000f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f5e:	e01c      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 24: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f60:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f62:	f000 f89d 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(1, DI1_Data_ServoON); // 打开伺服控制Servo ON
      ServoMotor.Flag_Event[2] = 25;  // 等待串口返回，赋值6，超时赋值4
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f68:	2219      	movs	r2, #25
 8000f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f6e:	e014      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 26: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f72:	f000 f895 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(3, 1); // 设置速度1
      ServoMotor.Flag_Event[2] = 27;  // 等待串口返回，赋值26，超时赋值24
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f78:	221b      	movs	r2, #27
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f7e:	e00c      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 28: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f80:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f82:	f000 f88d 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      ServoMotor.Flag_Event[2] = 29;  // 等待串口返回，赋值28，超时赋值26
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f88:	221d      	movs	r2, #29
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f8e:	e004      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    } break;
 8000f90:	bf00      	nop
 8000f92:	e002      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    } break;
 8000f94:	bf00      	nop
 8000f96:	e000      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    } break;
 8000f98:	bf00      	nop
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000a0 	.word	0x200000a0
 8000fa4:	40011000 	.word	0x40011000
 8000fa8:	200000d4 	.word	0x200000d4

08000fac <TimerTasks_ServoMotor>:
void TimerTasks_ServoMotor(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  UartRxdMonitor_ServoMotor(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 fd91 	bl	8001ad8 <UartRxdMonitor_ServoMotor>
  if (ServoMotor.Flag_Event[1] == 1) {  // 初始化上电延迟
 8000fb6:	4b39      	ldr	r3, [pc, #228]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fb8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d113      	bne.n	8000fe8 <TimerTasks_ServoMotor+0x3c>
    ServoMotor.TimerFlag[0]++;
 8000fc0:	4b36      	ldr	r3, [pc, #216]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b34      	ldr	r3, [pc, #208]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fca:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ServoMotor.TimerFlag[0] >= 5000) {
 8000fcc:	4b33      	ldr	r3, [pc, #204]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000fd0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d95e      	bls.n	8001096 <TimerTasks_ServoMotor+0xea>
      ServoMotor.TimerFlag[0]  = 0;
 8000fd8:	4b30      	ldr	r3, [pc, #192]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	865a      	strh	r2, [r3, #50]	@ 0x32
      ServoMotor.Flag_Event[1] = 2;  // 检查状态监控寄存器1-5状态
 8000fde:	4b2f      	ldr	r3, [pc, #188]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (ServoMotor.TimerFlag[0] >= 1000) {
      ServoMotor.TimerFlag[0]  = 0;
      ServoMotor.Flag_Event[1] = ServoMotor.Flag_Event[1] - 1;  // 超时没反应，返回上一次发送
    }
  }
}
 8000fe6:	e056      	b.n	8001096 <TimerTasks_ServoMotor+0xea>
  } else if (ServoMotor.Flag_Event[1] == 3 ||   //
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fea:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d03b      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 5 ||   //
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000ff4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
  } else if (ServoMotor.Flag_Event[1] == 3 ||   //
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d036      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 7 ||   //
 8000ffc:	4b27      	ldr	r3, [pc, #156]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000ffe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 5 ||   //
 8001002:	2b07      	cmp	r3, #7
 8001004:	d031      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 9 ||   //
 8001006:	4b25      	ldr	r3, [pc, #148]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001008:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 7 ||   //
 800100c:	2b09      	cmp	r3, #9
 800100e:	d02c      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 11 ||  //
 8001010:	4b22      	ldr	r3, [pc, #136]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001012:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 9 ||   //
 8001016:	2b0b      	cmp	r3, #11
 8001018:	d027      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 13 ||  //
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 800101c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 11 ||  //
 8001020:	2b0d      	cmp	r3, #13
 8001022:	d022      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 15 ||  //
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001026:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 13 ||  //
 800102a:	2b0f      	cmp	r3, #15
 800102c:	d01d      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 17 ||  //
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001030:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 15 ||  //
 8001034:	2b11      	cmp	r3, #17
 8001036:	d018      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 19 ||  //
 8001038:	4b18      	ldr	r3, [pc, #96]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 800103a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 17 ||  //
 800103e:	2b13      	cmp	r3, #19
 8001040:	d013      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 21 ||  //
 8001042:	4b16      	ldr	r3, [pc, #88]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001044:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 19 ||  //
 8001048:	2b15      	cmp	r3, #21
 800104a:	d00e      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 23 ||  //
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 800104e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 21 ||  //
 8001052:	2b17      	cmp	r3, #23
 8001054:	d009      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 25 ||  //
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001058:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 23 ||  //
 800105c:	2b19      	cmp	r3, #25
 800105e:	d004      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 27) {  // 初始化检查指令，必须设置正确
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001062:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 25 ||  //
 8001066:	2b1b      	cmp	r3, #27
 8001068:	d115      	bne.n	8001096 <TimerTasks_ServoMotor+0xea>
    ServoMotor.TimerFlag[0]++;
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 800106c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800106e:	3301      	adds	r3, #1
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001074:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ServoMotor.TimerFlag[0] >= 1000) {
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001078:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800107a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800107e:	d30a      	bcc.n	8001096 <TimerTasks_ServoMotor+0xea>
      ServoMotor.TimerFlag[0]  = 0;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001082:	2200      	movs	r2, #0
 8001084:	865a      	strh	r2, [r3, #50]	@ 0x32
      ServoMotor.Flag_Event[1] = ServoMotor.Flag_Event[1] - 1;  // 超时没反应，返回上一次发送
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001088:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800108c:	3b01      	subs	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b02      	ldr	r3, [pc, #8]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001092:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200000a0 	.word	0x200000a0

080010a0 <ResetTimerFlag_ServoMotor>:
void ResetTimerFlag_ServoMotor(uint16_t *TimerFlag) { *TimerFlag = 0; }
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	801a      	strh	r2, [r3, #0]
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <Uart_Send_MovementRegister_ServoMotor>:
void Uart_Send_MovementRegister_ServoMotor(uint8_t mode, uint16_t Data) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af02      	add	r7, sp, #8
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	80bb      	strh	r3, [r7, #4]
  // LOGI("Send mov massage");
  switch (mode) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d83d      	bhi.n	800114a <Uart_Send_MovementRegister_ServoMotor+0x92>
 80010ce:	a201      	add	r2, pc, #4	@ (adr r2, 80010d4 <Uart_Send_MovementRegister_ServoMotor+0x1c>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	080010e9 	.word	0x080010e9
 80010d8:	080010fb 	.word	0x080010fb
 80010dc:	0800110f 	.word	0x0800110f
 80010e0:	08001123 	.word	0x08001123
 80010e4:	08001137 	.word	0x08001137
    case 0: {  // 查询监视器1-5内容
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 10, MonitorRegister_1_Data, 0, Set_null_ServoMotor);
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	2212      	movs	r2, #18
 80010f0:	210a      	movs	r1, #10
 80010f2:	2003      	movs	r0, #3
 80010f4:	f000 fa2e 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80010f8:	e027      	b.n	800114a <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 1: {  // 开启 或 关闭伺服控制
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, DI1_Register_P2_10, Data, Set_null_ServoMotor);
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	4a15      	ldr	r2, [pc, #84]	@ (8001154 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8001104:	2100      	movs	r1, #0
 8001106:	2006      	movs	r0, #6
 8001108:	f000 fa24 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800110c:	e01d      	b.n	800114a <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 2: {  // 写入PT或Sz模式,写入4，设置速度模式，写入0，设置位置模式
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, PT_Szmode_Register_P1_01, Data, Set_null_ServoMotor);
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001118:	2100      	movs	r1, #0
 800111a:	2006      	movs	r0, #6
 800111c:	f000 fa1a 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001120:	e013      	b.n	800114a <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 3: {  // 速度控制
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, JOGmode_Register_P4_05, Data, Set_null_ServoMotor);
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	f240 420a 	movw	r2, #1034	@ 0x40a
 800112c:	2100      	movs	r1, #0
 800112e:	2006      	movs	r0, #6
 8001130:	f000 fa10 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001134:	e009      	b.n	800114a <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 4: {  // DI2设置0x0004-脉冲清除,0x0104	//脉冲恢复计数
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, DI2_PulseClear_Register_P2_11, Data, Set_null_ServoMotor);
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 800113a:	9200      	str	r2, [sp, #0]
 800113c:	f240 2216 	movw	r2, #534	@ 0x216
 8001140:	2100      	movs	r1, #0
 8001142:	2006      	movs	r0, #6
 8001144:	f000 fa06 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001148:	bf00      	nop
  }
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000e0 	.word	0x200000e0

08001158 <UartSend_MonitorRegister_ServoMotor>:
void UartSend_MonitorRegister_ServoMotor(uint8_t mode) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af02      	add	r7, sp, #8
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  switch (mode) {
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b0b      	cmp	r3, #11
 8001166:	f200 8095 	bhi.w	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
 800116a:	a201      	add	r2, pc, #4	@ (adr r2, 8001170 <UartSend_MonitorRegister_ServoMotor+0x18>)
 800116c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001170:	080011a1 	.word	0x080011a1
 8001174:	080011b3 	.word	0x080011b3
 8001178:	080011c5 	.word	0x080011c5
 800117c:	080011d7 	.word	0x080011d7
 8001180:	080011e9 	.word	0x080011e9
 8001184:	080011fb 	.word	0x080011fb
 8001188:	0800120d 	.word	0x0800120d
 800118c:	08001221 	.word	0x08001221
 8001190:	08001245 	.word	0x08001245
 8001194:	08001259 	.word	0x08001259
 8001198:	0800126d 	.word	0x0800126d
 800119c:	08001281 	.word	0x08001281
    case 0: {  // 问询监视器1-5寄存器配置是否正确
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 10, MonitorRegister_1_Set, 0, Set_null_ServoMotor);
 80011a0:	4b3e      	ldr	r3, [pc, #248]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2300      	movs	r3, #0
 80011a6:	2222      	movs	r2, #34	@ 0x22
 80011a8:	210a      	movs	r1, #10
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 f9d2 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011b0:	e070      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 1: {  // 写入正确的监视器1寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_1_Set, PulseMonitor_0022H, Set_null_ServoMotor);
 80011b2:	4b3a      	ldr	r3, [pc, #232]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2300      	movs	r3, #0
 80011b8:	2222      	movs	r2, #34	@ 0x22
 80011ba:	2100      	movs	r1, #0
 80011bc:	2006      	movs	r0, #6
 80011be:	f000 f9c9 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011c2:	e067      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 2: {  // 写入正确的监视器2寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_2_Set, TorqueMonitor_0024H, Set_null_ServoMotor);
 80011c4:	4b35      	ldr	r3, [pc, #212]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	230b      	movs	r3, #11
 80011ca:	2224      	movs	r2, #36	@ 0x24
 80011cc:	2100      	movs	r1, #0
 80011ce:	2006      	movs	r0, #6
 80011d0:	f000 f9c0 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011d4:	e05e      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 3: {  // 写入正确的监视器3寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_3_Set, SpeedMonitor_0026H, Set_null_ServoMotor);
 80011d6:	4b31      	ldr	r3, [pc, #196]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2307      	movs	r3, #7
 80011dc:	2226      	movs	r2, #38	@ 0x26
 80011de:	2100      	movs	r1, #0
 80011e0:	2006      	movs	r0, #6
 80011e2:	f000 f9b7 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011e6:	e055      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 4: {  // 写入正确的监视器4寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_4_Set, Monitor_0028H, Set_null_ServoMotor);
 80011e8:	4b2c      	ldr	r3, [pc, #176]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2303      	movs	r3, #3
 80011ee:	2228      	movs	r2, #40	@ 0x28
 80011f0:	2100      	movs	r1, #0
 80011f2:	2006      	movs	r0, #6
 80011f4:	f000 f9ae 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011f8:	e04c      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 5: {  // 写入正确的监视器5寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_5_Set, Monitor_002AH, Set_null_ServoMotor);
 80011fa:	4b28      	ldr	r3, [pc, #160]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2300      	movs	r3, #0
 8001200:	222a      	movs	r2, #42	@ 0x2a
 8001202:	2100      	movs	r1, #0
 8001204:	2006      	movs	r0, #6
 8001206:	f000 f9a5 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800120a:	e043      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 6: {  // 查询电子齿轮比分子分母的设置
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 4, GearRatioRegister_Numerator, 0, Set_null_ServoMotor);
 800120c:	4b23      	ldr	r3, [pc, #140]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8001216:	2104      	movs	r1, #4
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f99b 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800121e:	e039      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 7: {  // 写入正确的电子齿轮比分子分母的设置，分子160，分母94，对应的皮带94mm一圈，计算得出1000脉冲/mm
      uint8_t uartsendbuf[8] = {0x00, 0xA0, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00};
 8001220:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <UartSend_MonitorRegister_ServoMotor+0x148>)
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800122a:	e883 0003 	stmia.w	r3, {r0, r1}
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Multi_Func_ServoMotor, 4, GearRatioRegister_Numerator, 0, uartsendbuf);
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800123a:	2104      	movs	r1, #4
 800123c:	2010      	movs	r0, #16
 800123e:	f000 f989 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001242:	e027      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 8: {  // 读一次脉冲清除模式，需要设置为0x11;
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 1, PulseReset_Register_P2_50, 0, Set_null_ServoMotor);
 8001244:	4b15      	ldr	r3, [pc, #84]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	f44f 7219 	mov.w	r2, #612	@ 0x264
 800124e:	2101      	movs	r1, #1
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f97f 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001256:	e01d      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 9: {  // 设置脉冲清除模式，需要设置为0x11;
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, PulseReset_Register_P2_50, PulseReset_Data_P2_50, Set_null_ServoMotor);
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2311      	movs	r3, #17
 800125e:	f44f 7219 	mov.w	r2, #612	@ 0x264
 8001262:	2100      	movs	r1, #0
 8001264:	2006      	movs	r0, #6
 8001266:	f000 f975 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800126a:	e013      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 10: {  // 读一次EEPROM的设置，0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 1, AuxrFuncRegister_P2_30, 0, Set_null_ServoMotor);
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2300      	movs	r3, #0
 8001272:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 8001276:	2101      	movs	r1, #1
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f96b 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800127e:	e009      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 11: {  // 设置EEPROM的为不保存模式，0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, AuxrFuncRegister_P2_30, EEPROM_Disable_P2_30, Set_null_ServoMotor);
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2305      	movs	r3, #5
 8001286:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 800128a:	2100      	movs	r1, #0
 800128c:	2006      	movs	r0, #6
 800128e:	f000 f961 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001292:	bf00      	nop
  }
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000e0 	.word	0x200000e0
 80012a0:	0800a490 	.word	0x0800a490

080012a4 <Get_LRC_ServoMotor>:

uint16_t Get_LRC_ServoMotor(uint8_t *buf, uint8_t len) {
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
  uint16_t sumbuf = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	81fb      	strh	r3, [r7, #14]
  uint8_t  result = 0, result_h, result_l;
 80012b4:	2300      	movs	r3, #0
 80012b6:	72bb      	strb	r3, [r7, #10]
  uint16_t LRCbuf = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	81bb      	strh	r3, [r7, #12]
  for (uint8_t i = 0; i < len; i++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	72fb      	strb	r3, [r7, #11]
 80012c0:	e00a      	b.n	80012d8 <Get_LRC_ServoMotor+0x34>
    sumbuf += buf[i];
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	4413      	add	r3, r2
 80012d0:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++) {
 80012d2:	7afb      	ldrb	r3, [r7, #11]
 80012d4:	3301      	adds	r3, #1
 80012d6:	72fb      	strb	r3, [r7, #11]
 80012d8:	7afa      	ldrb	r2, [r7, #11]
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d3f0      	bcc.n	80012c2 <Get_LRC_ServoMotor+0x1e>
  }
  result   = ~(sumbuf & 0xFF) + 1;
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	425b      	negs	r3, r3
 80012e6:	72bb      	strb	r3, [r7, #10]
  result_h = result / 0x10;
 80012e8:	7abb      	ldrb	r3, [r7, #10]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	727b      	strb	r3, [r7, #9]
  result_l = result % 0x10;
 80012ee:	7abb      	ldrb	r3, [r7, #10]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	723b      	strb	r3, [r7, #8]
  if (0x00 <= result_h && result_h <= 0x09) {
 80012f6:	7a7b      	ldrb	r3, [r7, #9]
 80012f8:	2b09      	cmp	r3, #9
 80012fa:	d80c      	bhi.n	8001316 <Get_LRC_ServoMotor+0x72>
    LRCbuf |= (uint16_t)(result_h + '0') << 8;
 80012fc:	7a7b      	ldrb	r3, [r7, #9]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3330      	adds	r3, #48	@ 0x30
 8001302:	b29b      	uxth	r3, r3
 8001304:	b21b      	sxth	r3, r3
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	b21b      	sxth	r3, r3
 8001312:	81bb      	strh	r3, [r7, #12]
 8001314:	e011      	b.n	800133a <Get_LRC_ServoMotor+0x96>
  } else if (0x0A <= result_h && result_h <= 0x0F) {
 8001316:	7a7b      	ldrb	r3, [r7, #9]
 8001318:	2b09      	cmp	r3, #9
 800131a:	d90e      	bls.n	800133a <Get_LRC_ServoMotor+0x96>
 800131c:	7a7b      	ldrb	r3, [r7, #9]
 800131e:	2b0f      	cmp	r3, #15
 8001320:	d80b      	bhi.n	800133a <Get_LRC_ServoMotor+0x96>
    LRCbuf |= (uint16_t)(result_h - 0x0A + 'A') << 8;
 8001322:	7a7b      	ldrb	r3, [r7, #9]
 8001324:	b29b      	uxth	r3, r3
 8001326:	3337      	adds	r3, #55	@ 0x37
 8001328:	b29b      	uxth	r3, r3
 800132a:	b21b      	sxth	r3, r3
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	81bb      	strh	r3, [r7, #12]
  }
  if (0x00 <= result_l && result_l <= 0x09) {
 800133a:	7a3b      	ldrb	r3, [r7, #8]
 800133c:	2b09      	cmp	r3, #9
 800133e:	d80a      	bhi.n	8001356 <Get_LRC_ServoMotor+0xb2>
    LRCbuf |= result_l + '0';
 8001340:	7a3b      	ldrb	r3, [r7, #8]
 8001342:	b29b      	uxth	r3, r3
 8001344:	3330      	adds	r3, #48	@ 0x30
 8001346:	b29b      	uxth	r3, r3
 8001348:	b21a      	sxth	r2, r3
 800134a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	b21b      	sxth	r3, r3
 8001352:	81bb      	strh	r3, [r7, #12]
 8001354:	e00f      	b.n	8001376 <Get_LRC_ServoMotor+0xd2>
  } else if (0x0A <= result_l && result_l <= 0x0F) {
 8001356:	7a3b      	ldrb	r3, [r7, #8]
 8001358:	2b09      	cmp	r3, #9
 800135a:	d90c      	bls.n	8001376 <Get_LRC_ServoMotor+0xd2>
 800135c:	7a3b      	ldrb	r3, [r7, #8]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	d809      	bhi.n	8001376 <Get_LRC_ServoMotor+0xd2>
    LRCbuf |= result_l - 0x0A + 'A';
 8001362:	7a3b      	ldrb	r3, [r7, #8]
 8001364:	b29b      	uxth	r3, r3
 8001366:	3337      	adds	r3, #55	@ 0x37
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21a      	sxth	r2, r3
 800136c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	b21b      	sxth	r3, r3
 8001374:	81bb      	strh	r3, [r7, #12]
  }
  return LRCbuf;
 8001376:	89bb      	ldrh	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <UartWrite_HexToAscii_AddLRC_ServoMotor>:
void UartWrite_HexToAscii_AddLRC_ServoMotor(uint8_t *buf, uint8_t len) {
 8001382:	b580      	push	{r7, lr}
 8001384:	b0c4      	sub	sp, #272	@ 0x110
 8001386:	af00      	add	r7, sp, #0
 8001388:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800138c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001390:	6018      	str	r0, [r3, #0]
 8001392:	460a      	mov	r2, r1
 8001394:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001398:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800139c:	701a      	strb	r2, [r3, #0]
  uint8_t  Sendbuf[255] = {0};
 800139e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013a6:	4618      	mov	r0, r3
 80013a8:	23ff      	movs	r3, #255	@ 0xff
 80013aa:	461a      	mov	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	f008 fa34 	bl	800981a <memset>
  uint8_t  lenbuf       = 2 * len + 5;
 80013b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013b6:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	3305      	adds	r3, #5
 80013c2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  uint16_t LRCbuf       = Get_LRC_ServoMotor(buf, len);
 80013c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ca:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013d8:	4611      	mov	r1, r2
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	f7ff ff62 	bl	80012a4 <Get_LRC_ServoMotor>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
  uint8_t  buf_h, buf_l;
  Sendbuf[0]          = ':';
 80013e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013ee:	223a      	movs	r2, #58	@ 0x3a
 80013f0:	701a      	strb	r2, [r3, #0]
  Sendbuf[lenbuf - 4] = LRCbuf >> 8;
 80013f2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80013fe:	3b04      	subs	r3, #4
 8001400:	b2d1      	uxtb	r1, r2
 8001402:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001406:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800140a:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 3] = LRCbuf & 0xFF;
 800140c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001410:	3b03      	subs	r3, #3
 8001412:	f8b7 210c 	ldrh.w	r2, [r7, #268]	@ 0x10c
 8001416:	b2d1      	uxtb	r1, r2
 8001418:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800141c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001420:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 2] = 0x0D;
 8001422:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001426:	3b02      	subs	r3, #2
 8001428:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800142c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001430:	210d      	movs	r1, #13
 8001432:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 1] = 0x0A;
 8001434:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001438:	3b01      	subs	r3, #1
 800143a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800143e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001442:	210a      	movs	r1, #10
 8001444:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < len; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800144c:	e06b      	b.n	8001526 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x1a4>
    buf_h = buf[i] / 0x10;
 800144e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001452:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001456:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    buf_l = buf[i] % 0x10;
 8001466:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800146a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800146e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    if (0x00 <= buf_h && buf_h <= 0x09) {
 8001480:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001484:	2b09      	cmp	r3, #9
 8001486:	d80d      	bhi.n	80014a4 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x122>
      Sendbuf[2 * i + 1] = buf_h + '0';
 8001488:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	3301      	adds	r3, #1
 8001490:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 8001494:	3230      	adds	r2, #48	@ 0x30
 8001496:	b2d1      	uxtb	r1, r2
 8001498:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800149c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014a0:	54d1      	strb	r1, [r2, r3]
 80014a2:	e014      	b.n	80014ce <UartWrite_HexToAscii_AddLRC_ServoMotor+0x14c>
    } else if (0x0A <= buf_h && buf_h <= 0x0F) {
 80014a4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80014a8:	2b09      	cmp	r3, #9
 80014aa:	d910      	bls.n	80014ce <UartWrite_HexToAscii_AddLRC_ServoMotor+0x14c>
 80014ac:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d80c      	bhi.n	80014ce <UartWrite_HexToAscii_AddLRC_ServoMotor+0x14c>
      Sendbuf[2 * i + 1] = buf_h - 0x0A + 'A';
 80014b4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	3301      	adds	r3, #1
 80014bc:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 80014c0:	3237      	adds	r2, #55	@ 0x37
 80014c2:	b2d1      	uxtb	r1, r2
 80014c4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014c8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014cc:	54d1      	strb	r1, [r2, r3]
    }
    if (0x00 <= buf_l && buf_l <= 0x09) {
 80014ce:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 80014d2:	2b09      	cmp	r3, #9
 80014d4:	d80d      	bhi.n	80014f2 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x170>
      Sendbuf[2 * i + 2] = buf_l + '0';
 80014d6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014da:	3301      	adds	r3, #1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 80014e2:	3230      	adds	r2, #48	@ 0x30
 80014e4:	b2d1      	uxtb	r1, r2
 80014e6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014ea:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014ee:	54d1      	strb	r1, [r2, r3]
 80014f0:	e014      	b.n	800151c <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19a>
    } else if (0x0A <= buf_l && buf_l <= 0x0F) {
 80014f2:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 80014f6:	2b09      	cmp	r3, #9
 80014f8:	d910      	bls.n	800151c <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19a>
 80014fa:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	d80c      	bhi.n	800151c <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19a>
      Sendbuf[2 * i + 2] = buf_l - 0x0A + 'A';
 8001502:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001506:	3301      	adds	r3, #1
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 800150e:	3237      	adds	r2, #55	@ 0x37
 8001510:	b2d1      	uxtb	r1, r2
 8001512:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001516:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800151a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < len; i++) {
 800151c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001520:	3301      	adds	r3, #1
 8001522:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800152a:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800152e:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d38a      	bcc.n	800144e <UartWrite_HexToAscii_AddLRC_ServoMotor+0xcc>
    }
  }
  // UartWrite_WirelessModule(Sendbuf, lenbuf);

  UartWrite_ServoMotor(Sendbuf, lenbuf);
 8001538:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800153c:	b29a      	uxth	r2, r3
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fa81 	bl	8001a4c <UartWrite_ServoMotor>
}
 800154a:	bf00      	nop
 800154c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <Uart_ReadWriteRegister_ServoMotor>:

void Uart_ReadWriteRegister_ServoMotor(uint8_t Read_WriteFunc, uint8_t WordsNum, uint16_t Register, uint16_t Write_Once_ByteData, uint8_t *Write_Multi_Bytes) {
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	b0c4      	sub	sp, #272	@ 0x110
 8001558:	af00      	add	r7, sp, #0
 800155a:	4605      	mov	r5, r0
 800155c:	460c      	mov	r4, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001566:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800156a:	462a      	mov	r2, r5
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001572:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001576:	4622      	mov	r2, r4
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800157e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001582:	4602      	mov	r2, r0
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800158a:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800158e:	460a      	mov	r2, r1
 8001590:	801a      	strh	r2, [r3, #0]
  uint8_t UartSendbuf[255] = {0};
 8001592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001596:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800159a:	4618      	mov	r0, r3
 800159c:	23ff      	movs	r3, #255	@ 0xff
 800159e:	461a      	mov	r2, r3
 80015a0:	2100      	movs	r1, #0
 80015a2:	f008 f93a 	bl	800981a <memset>
  uint8_t lenbuf           = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  UartSendbuf[0]           = ServoMotor.address;
 80015ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001758 <Uart_ReadWriteRegister_ServoMotor+0x204>)
 80015ae:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80015b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015ba:	701a      	strb	r2, [r3, #0]
  UartSendbuf[1]           = Read_WriteFunc;
 80015bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015c4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015c8:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	705a      	strb	r2, [r3, #1]
  UartSendbuf[2]           = Register >> 8;
 80015d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015e8:	709a      	strb	r2, [r3, #2]
  UartSendbuf[3]           = Register & 0xFF;
 80015ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015fe:	70da      	strb	r2, [r3, #3]
  switch (Read_WriteFunc) {
 8001600:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001604:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b10      	cmp	r3, #16
 800160c:	d037      	beq.n	800167e <Uart_ReadWriteRegister_ServoMotor+0x12a>
 800160e:	2b10      	cmp	r3, #16
 8001610:	f300 809d 	bgt.w	800174e <Uart_ReadWriteRegister_ServoMotor+0x1fa>
 8001614:	2b03      	cmp	r3, #3
 8001616:	d002      	beq.n	800161e <Uart_ReadWriteRegister_ServoMotor+0xca>
 8001618:	2b06      	cmp	r3, #6
 800161a:	d014      	beq.n	8001646 <Uart_ReadWriteRegister_ServoMotor+0xf2>
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
        UartSendbuf[7 + i] = Write_Multi_Bytes[i];
      }
    } break;
    default:
      return;
 800161c:	e097      	b.n	800174e <Uart_ReadWriteRegister_ServoMotor+0x1fa>
      lenbuf         = 6;
 800161e:	2306      	movs	r3, #6
 8001620:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = 0x00;
 8001624:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800162c:	2200      	movs	r2, #0
 800162e:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = WordsNum;
 8001630:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001638:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800163c:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	715a      	strb	r2, [r3, #5]
    } break;
 8001644:	e063      	b.n	800170e <Uart_ReadWriteRegister_ServoMotor+0x1ba>
      lenbuf         = 6;
 8001646:	2306      	movs	r3, #6
 8001648:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = Write_Once_ByteData >> 8;
 800164c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001650:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	b29b      	uxth	r3, r3
 800165a:	b2da      	uxtb	r2, r3
 800165c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001664:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = Write_Once_ByteData & 0xFF;
 8001666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800166a:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800167a:	715a      	strb	r2, [r3, #5]
    } break;
 800167c:	e047      	b.n	800170e <Uart_ReadWriteRegister_ServoMotor+0x1ba>
      lenbuf         = 7 + 2 * WordsNum;
 800167e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001682:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	3307      	adds	r3, #7
 800168e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = 0x00;
 8001692:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800169a:	2200      	movs	r2, #0
 800169c:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = WordsNum;
 800169e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016a6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016aa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	715a      	strb	r2, [r3, #5]
      UartSendbuf[6] = 2 * WordsNum;
 80016b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016b6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016c8:	719a      	strb	r2, [r3, #6]
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80016d0:	e012      	b.n	80016f8 <Uart_ReadWriteRegister_ServoMotor+0x1a4>
        UartSendbuf[7 + i] = Write_Multi_Bytes[i];
 80016d2:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80016d6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80016da:	441a      	add	r2, r3
 80016dc:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80016e0:	3307      	adds	r3, #7
 80016e2:	7811      	ldrb	r1, [r2, #0]
 80016e4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016e8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016ec:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
 80016ee:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80016f2:	3301      	adds	r3, #1
 80016f4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80016f8:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80016fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001700:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	429a      	cmp	r2, r3
 800170a:	dbe2      	blt.n	80016d2 <Uart_ReadWriteRegister_ServoMotor+0x17e>
    } break;
 800170c:	bf00      	nop
  }
  ServoMotor.UartCurrentCmd[0] = Read_WriteFunc;
 800170e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001712:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <Uart_ReadWriteRegister_ServoMotor+0x204>)
 800171c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  ServoMotor.UartCurrentCmd[1] = Register;
 800171e:	4a0e      	ldr	r2, [pc, #56]	@ (8001758 <Uart_ReadWriteRegister_ServoMotor+0x204>)
 8001720:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001724:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	85d3      	strh	r3, [r2, #46]	@ 0x2e
  ServoMotor.UartCurrentCmd[2] = WordsNum;
 800172c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001730:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <Uart_ReadWriteRegister_ServoMotor+0x204>)
 800173a:	861a      	strh	r2, [r3, #48]	@ 0x30
  UartWrite_HexToAscii_AddLRC_ServoMotor(UartSendbuf, lenbuf);
 800173c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fe1b 	bl	8001382 <UartWrite_HexToAscii_AddLRC_ServoMotor>
 800174c:	e000      	b.n	8001750 <Uart_ReadWriteRegister_ServoMotor+0x1fc>
      return;
 800174e:	bf00      	nop
}
 8001750:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	200000a0 	.word	0x200000a0

0800175c <SetStatus_Power_ServoMotor>:

void SetStatus_Power_ServoMotor(uint8_t status) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(Power_ServoMotor_GPIO_Port, Power_ServoMotor_Pin, status);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	461a      	mov	r2, r3
 800176a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <SetStatus_Power_ServoMotor+0x28>)
 8001770:	f002 fe69 	bl	8004446 <HAL_GPIO_WritePin>
  ServoMotor.IsPowerOn = Power_ServoMotor_Pin == PowerON_ServoMotor ? 1 : 0;
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <SetStatus_Power_ServoMotor+0x2c>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40010800 	.word	0x40010800
 8001788:	200000a0 	.word	0x200000a0

0800178c <UartReceiveIT_ServoMotor>:
uint8_t GetStatus_Power_ServoMotor(void) { return ServoMotor.IsPowerOn; }

void UartReceiveIT_ServoMotor(void) {                                       // 读写器串口接收
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart_ServoMotor, (uint8_t *)Rxdbuf_ServoMotor, 1);  // 重新启动接收中断
 8001790:	2201      	movs	r2, #1
 8001792:	4903      	ldr	r1, [pc, #12]	@ (80017a0 <UartReceiveIT_ServoMotor+0x14>)
 8001794:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <UartReceiveIT_ServoMotor+0x18>)
 8001796:	f004 ffda 	bl	800674e <HAL_UART_Receive_IT>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000e4 	.word	0x200000e4
 80017a4:	20000434 	.word	0x20000434

080017a8 <UartGetData_ServoMotor>:
void UartGetData_ServoMotor(void) {  // 处理接收到的数据到新的数组，并重新接收
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  UartRegroup_ASCII_ServoMotor();
 80017ac:	f000 f8e6 	bl	800197c <UartRegroup_ASCII_ServoMotor>

  UartReceiveIT_ServoMotor();
 80017b0:	f7ff ffec 	bl	800178c <UartReceiveIT_ServoMotor>
  //	UartRxd_ServoMotor[CntRxd_ServoMotor] = Rxdbuf_ServoMotor[0];
  //	CntRxd_ServoMotor++;
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <Get_Regroup_ASCII>:

uint8_t Get_Regroup_ASCII(uint8_t data, uint8_t H_L) {
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
  uint8_t databuf;
  if ('0' <= data && data <= '9') {
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80017cc:	d906      	bls.n	80017dc <Get_Regroup_ASCII+0x24>
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b39      	cmp	r3, #57	@ 0x39
 80017d2:	d803      	bhi.n	80017dc <Get_Regroup_ASCII+0x24>
    databuf = data - '0';
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	3b30      	subs	r3, #48	@ 0x30
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e008      	b.n	80017ee <Get_Regroup_ASCII+0x36>
  } else if ('A' <= data && data <= 'F') {
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b40      	cmp	r3, #64	@ 0x40
 80017e0:	d905      	bls.n	80017ee <Get_Regroup_ASCII+0x36>
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b46      	cmp	r3, #70	@ 0x46
 80017e6:	d802      	bhi.n	80017ee <Get_Regroup_ASCII+0x36>
    databuf = data - 'A' + 0x0A;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	3b37      	subs	r3, #55	@ 0x37
 80017ec:	73fb      	strb	r3, [r7, #15]
  }
  if (H_L == 0) {
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <Get_Regroup_ASCII+0x44>
    return databuf << 4;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	e005      	b.n	8001808 <Get_Regroup_ASCII+0x50>
  } else if (H_L == 1) {
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <Get_Regroup_ASCII+0x4e>
    return databuf;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	e000      	b.n	8001808 <Get_Regroup_ASCII+0x50>
  }
  return 0;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
	...

08001814 <moteruart_receive>:
/****************************自己的***************************************/
void moteruart_receive(void) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 800181a:	af00      	add	r7, sp, #0
  uint8_t  len    = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
  uint8_t  lenbuf = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
  uint8_t  buf[255];
  uint8_t  uartbuf[255];
  uint32_t mm;
  // LOGI("SUCESS UART MOTOR");

  len    = UartRead_ServoMotor(buf, sizeof(buf));
 8001828:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800182c:	21ff      	movs	r1, #255	@ 0xff
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f920 	bl	8001a74 <UartRead_ServoMotor>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
  lenbuf = len / 2;
 800183a:	f897 3206 	ldrb.w	r3, [r7, #518]	@ 0x206
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
  for (uint8_t i = 0; i < lenbuf; i++) {
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
 800184a:	e02a      	b.n	80018a2 <moteruart_receive+0x8e>
    uartbuf[i] = Get_Regroup_ASCII(buf[2 * i], 0) | Get_Regroup_ASCII(buf[2 * i + 1], 1);
 800184c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001856:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ffaa 	bl	80017b8 <Get_Regroup_ASCII>
 8001864:	4603      	mov	r3, r0
 8001866:	461c      	mov	r4, r3
 8001868:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	3301      	adds	r3, #1
 8001870:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001874:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	2101      	movs	r1, #1
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff9b 	bl	80017b8 <Get_Regroup_ASCII>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800188a:	4322      	orrs	r2, r4
 800188c:	b2d1      	uxtb	r1, r2
 800188e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001892:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8001896:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < lenbuf; i++) {
 8001898:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800189c:	3301      	adds	r3, #1
 800189e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
 80018a2:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 80018a6:	f897 3205 	ldrb.w	r3, [r7, #517]	@ 0x205
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d3ce      	bcc.n	800184c <moteruart_receive+0x38>
  }

  if (uartbuf[0] != ServoMotor.address && uartbuf[1] != (uint8_t)(ServoMotor.UartCurrentCmd[0] & 0xFF)) {
 80018ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <moteruart_receive+0x154>)
 80018ba:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80018be:	429a      	cmp	r2, r3
 80018c0:	d012      	beq.n	80018e8 <moteruart_receive+0xd4>
 80018c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ca:	785a      	ldrb	r2, [r3, #1]
 80018cc:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <moteruart_receive+0x154>)
 80018ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d008      	beq.n	80018e8 <moteruart_receive+0xd4>
    LOGI("address error ");
 80018d6:	f001 fc4b 	bl	8003170 <HAL_GetTick>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a23      	ldr	r2, [pc, #140]	@ (800196c <moteruart_receive+0x158>)
 80018de:	4619      	mov	r1, r3
 80018e0:	4823      	ldr	r0, [pc, #140]	@ (8001970 <moteruart_receive+0x15c>)
 80018e2:	f007 ff45 	bl	8009770 <iprintf>
 80018e6:	e03a      	b.n	800195e <moteruart_receive+0x14a>
    return;
  }

  switch (uartbuf[1]) {
 80018e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018f0:	785b      	ldrb	r3, [r3, #1]
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d032      	beq.n	800195c <moteruart_receive+0x148>
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	dc31      	bgt.n	800195e <moteruart_receive+0x14a>
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d002      	beq.n	8001904 <moteruart_receive+0xf0>
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d01d      	beq.n	800193e <moteruart_receive+0x12a>
 8001902:	e02c      	b.n	800195e <moteruart_receive+0x14a>
    case Cmd_Read_Func_ServoMotor:
      motor_state_reg[0] = uartbuf[3];
 8001904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001908:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800190c:	78da      	ldrb	r2, [r3, #3]
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <moteruart_receive+0x160>)
 8001910:	701a      	strb	r2, [r3, #0]
      motor_state_reg[1] = uartbuf[4];
 8001912:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001916:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800191a:	791a      	ldrb	r2, [r3, #4]
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <moteruart_receive+0x160>)
 800191e:	705a      	strb	r2, [r3, #1]
      motor_state_reg[2] = uartbuf[5];
 8001920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001924:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001928:	795a      	ldrb	r2, [r3, #5]
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <moteruart_receive+0x160>)
 800192c:	709a      	strb	r2, [r3, #2]
      motor_state_reg[3] = uartbuf[6];
 800192e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001932:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001936:	799a      	ldrb	r2, [r3, #6]
 8001938:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <moteruart_receive+0x160>)
 800193a:	70da      	strb	r2, [r3, #3]

      break;
 800193c:	e00f      	b.n	800195e <moteruart_receive+0x14a>
    case Cmd_Write_Once_Func_ServoMotor:
      motor_ack[0] = uartbuf[4];
 800193e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001942:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001946:	791a      	ldrb	r2, [r3, #4]
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <moteruart_receive+0x164>)
 800194a:	701a      	strb	r2, [r3, #0]
      motor_ack[1] = uartbuf[5];
 800194c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001950:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001954:	795a      	ldrb	r2, [r3, #5]
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <moteruart_receive+0x164>)
 8001958:	705a      	strb	r2, [r3, #1]
      break;
 800195a:	e000      	b.n	800195e <moteruart_receive+0x14a>
    case Cmd_Write_Multi_Func_ServoMotor:
      break;
 800195c:	bf00      	nop

  // for (int i = 0; i < 8; i++)  //
  //   LOGI("data is %02x", uartbuf[i]);
  // mm = get_Position_mm(motor_state_reg, 4);
  // LOGI("distance is %d", mm);
}
 800195e:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 8001962:	46bd      	mov	sp, r7
 8001964:	bd90      	pop	{r4, r7, pc}
 8001966:	bf00      	nop
 8001968:	200000a0 	.word	0x200000a0
 800196c:	0800ae90 	.word	0x0800ae90
 8001970:	0800a498 	.word	0x0800a498
 8001974:	200001f0 	.word	0x200001f0
 8001978:	200001ec 	.word	0x200001ec

0800197c <UartRegroup_ASCII_ServoMotor>:

/*******************************************************************/

void UartRegroup_ASCII_ServoMotor(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  // static bool clear_falg;
  if (Flag_UartRegroup_ASCII_ServoMotor == 2) {
 8001980:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d108      	bne.n	800199a <UartRegroup_ASCII_ServoMotor+0x1e>
    Flag_UartRegroup_ASCII_ServoMotor = Rxdbuf_ServoMotor[0] == 0x0D ? 3 : 1;
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <UartRegroup_ASCII_ServoMotor+0xb8>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b0d      	cmp	r3, #13
 800198e:	d101      	bne.n	8001994 <UartRegroup_ASCII_ServoMotor+0x18>
 8001990:	2203      	movs	r2, #3
 8001992:	e000      	b.n	8001996 <UartRegroup_ASCII_ServoMotor+0x1a>
 8001994:	2201      	movs	r2, #1
 8001996:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 8001998:	701a      	strb	r2, [r3, #0]
  }
  switch (Flag_UartRegroup_ASCII_ServoMotor) {
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d844      	bhi.n	8001a2c <UartRegroup_ASCII_ServoMotor+0xb0>
 80019a2:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <UartRegroup_ASCII_ServoMotor+0x2c>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019bd 	.word	0x080019bd
 80019ac:	080019cd 	.word	0x080019cd
 80019b0:	080019eb 	.word	0x080019eb
 80019b4:	08001a03 	.word	0x08001a03
 80019b8:	08001a1f 	.word	0x08001a1f
    case 0: {  // 帧头必须是':'(0x3A)
      if (Rxdbuf_ServoMotor[0] == ':') Flag_UartRegroup_ASCII_ServoMotor = 1;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <UartRegroup_ASCII_ServoMotor+0xb8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80019c2:	d130      	bne.n	8001a26 <UartRegroup_ASCII_ServoMotor+0xaa>
 80019c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
    } break;
 80019ca:	e02c      	b.n	8001a26 <UartRegroup_ASCII_ServoMotor+0xaa>
    case 1: {  // 高字节
      UartRxd_ServoMotor[CntRxd_ServoMotor++] = Rxdbuf_ServoMotor[0];
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <UartRegroup_ASCII_ServoMotor+0xbc>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	b2d1      	uxtb	r1, r2
 80019d4:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <UartRegroup_ASCII_ServoMotor+0xbc>)
 80019d6:	7011      	strb	r1, [r2, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <UartRegroup_ASCII_ServoMotor+0xb8>)
 80019dc:	7819      	ldrb	r1, [r3, #0]
 80019de:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <UartRegroup_ASCII_ServoMotor+0xc0>)
 80019e0:	5499      	strb	r1, [r3, r2]
      Flag_UartRegroup_ASCII_ServoMotor       = 2;
 80019e2:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	701a      	strb	r2, [r3, #0]
    } break;
 80019e8:	e020      	b.n	8001a2c <UartRegroup_ASCII_ServoMotor+0xb0>
    case 2: {  // 低字节
      UartRxd_ServoMotor[CntRxd_ServoMotor++] = Rxdbuf_ServoMotor[0];
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <UartRegroup_ASCII_ServoMotor+0xbc>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	b2d1      	uxtb	r1, r2
 80019f2:	4a11      	ldr	r2, [pc, #68]	@ (8001a38 <UartRegroup_ASCII_ServoMotor+0xbc>)
 80019f4:	7011      	strb	r1, [r2, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <UartRegroup_ASCII_ServoMotor+0xb8>)
 80019fa:	7819      	ldrb	r1, [r3, #0]
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <UartRegroup_ASCII_ServoMotor+0xc0>)
 80019fe:	5499      	strb	r1, [r3, r2]
    } break;
 8001a00:	e014      	b.n	8001a2c <UartRegroup_ASCII_ServoMotor+0xb0>
    case 3: {  // 0x0D
      Flag_UartRegroup_ASCII_ServoMotor = 4;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 8001a04:	2204      	movs	r2, #4
 8001a06:	701a      	strb	r2, [r3, #0]
      if (ServoMotor.Flag_Event[2] >= 22) {
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <UartRegroup_ASCII_ServoMotor+0xc4>)
 8001a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a0e:	2b15      	cmp	r3, #21
 8001a10:	d90b      	bls.n	8001a2a <UartRegroup_ASCII_ServoMotor+0xae>
        // if (!clear_falg) {
        //   memset(UartRxd_ServoMotor, 0, 255);
        //   clear_falg = true;
        // }
        moteruart_receive();
 8001a12:	f7ff feff 	bl	8001814 <moteruart_receive>
        // enterQueueEvent(EVENT_MotorUart);
        Servo_info.uart_recv_state = true;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <UartRegroup_ASCII_ServoMotor+0xc8>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	725a      	strb	r2, [r3, #9]
        // LOGI("EVENT MOTOR");
      }
    } break;
 8001a1c:	e005      	b.n	8001a2a <UartRegroup_ASCII_ServoMotor+0xae>
    case 4: {  // 0x0A
      Flag_UartRxdMonitor_ServoMotor = 1;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <UartRegroup_ASCII_ServoMotor+0xcc>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
    } break;
 8001a24:	e002      	b.n	8001a2c <UartRegroup_ASCII_ServoMotor+0xb0>
    } break;
 8001a26:	bf00      	nop
 8001a28:	e000      	b.n	8001a2c <UartRegroup_ASCII_ServoMotor+0xb0>
    } break;
 8001a2a:	bf00      	nop
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200001e8 	.word	0x200001e8
 8001a34:	200000e4 	.word	0x200000e4
 8001a38:	200000e5 	.word	0x200000e5
 8001a3c:	200000e8 	.word	0x200000e8
 8001a40:	200000a0 	.word	0x200000a0
 8001a44:	200009e0 	.word	0x200009e0
 8001a48:	200001e7 	.word	0x200001e7

08001a4c <UartWrite_ServoMotor>:

void UartWrite_ServoMotor(uint8_t *pData, uint16_t Size) {  // 发送给读写器
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart_ServoMotor, pData, Size, 1000);
 8001a58:	887a      	ldrh	r2, [r7, #2]
 8001a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <UartWrite_ServoMotor+0x24>)
 8001a62:	f004 fdf1 	bl	8006648 <HAL_UART_Transmit>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000434 	.word	0x20000434

08001a74 <UartRead_ServoMotor>:
uint8_t UartRead_ServoMotor(uint8_t *buf, uint8_t len) {
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  if (len > CntRxd_ServoMotor) {
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <UartRead_ServoMotor+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d902      	bls.n	8001a90 <UartRead_ServoMotor+0x1c>
    len = CntRxd_ServoMotor;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <UartRead_ServoMotor+0x58>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	70fb      	strb	r3, [r7, #3]
  }
  for (i = 0; i < len; i++) {
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e009      	b.n	8001aaa <UartRead_ServoMotor+0x36>
    buf[i] = UartRxd_ServoMotor[i];
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	440b      	add	r3, r1
 8001a9e:	490c      	ldr	r1, [pc, #48]	@ (8001ad0 <UartRead_ServoMotor+0x5c>)
 8001aa0:	5c8a      	ldrb	r2, [r1, r2]
 8001aa2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d3f1      	bcc.n	8001a96 <UartRead_ServoMotor+0x22>
  }
  CntRxd_ServoMotor                 = 0;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <UartRead_ServoMotor+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
  Flag_UartRegroup_ASCII_ServoMotor = 0;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <UartRead_ServoMotor+0x60>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
  return len;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200000e5 	.word	0x200000e5
 8001ad0:	200000e8 	.word	0x200000e8
 8001ad4:	200001e8 	.word	0x200001e8

08001ad8 <UartRxdMonitor_ServoMotor>:
void UartRxdMonitor_ServoMotor(uint8_t time_ms) {
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  static uint8_t cnt_bkp    = 0;
  static uint8_t idle_timer = 0;
  if (CntRxd_ServoMotor > 0) {
 8001ae2:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <UartRxdMonitor_ServoMotor+0x70>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d026      	beq.n	8001b38 <UartRxdMonitor_ServoMotor+0x60>
    if (cnt_bkp != CntRxd_ServoMotor) {
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <UartRxdMonitor_ServoMotor+0x74>)
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <UartRxdMonitor_ServoMotor+0x70>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d007      	beq.n	8001b06 <UartRxdMonitor_ServoMotor+0x2e>
      cnt_bkp    = CntRxd_ServoMotor;
 8001af6:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <UartRxdMonitor_ServoMotor+0x70>)
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <UartRxdMonitor_ServoMotor+0x74>)
 8001afc:	701a      	strb	r2, [r3, #0]
      idle_timer = 0;
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <UartRxdMonitor_ServoMotor+0x78>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
      }
    }
  } else {
    cnt_bkp = 0;
  }
}
 8001b04:	e01b      	b.n	8001b3e <UartRxdMonitor_ServoMotor+0x66>
      if (idle_timer < 10) {
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <UartRxdMonitor_ServoMotor+0x78>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b09      	cmp	r3, #9
 8001b0c:	d817      	bhi.n	8001b3e <UartRxdMonitor_ServoMotor+0x66>
        idle_timer += time_ms;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <UartRxdMonitor_ServoMotor+0x78>)
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4413      	add	r3, r2
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <UartRxdMonitor_ServoMotor+0x78>)
 8001b1a:	701a      	strb	r2, [r3, #0]
        if (idle_timer >= 10) {
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <UartRxdMonitor_ServoMotor+0x78>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	d90c      	bls.n	8001b3e <UartRxdMonitor_ServoMotor+0x66>
          CntRxd_ServoMotor                 = 0;
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <UartRxdMonitor_ServoMotor+0x70>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
          Flag_UartRegroup_ASCII_ServoMotor = 0;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <UartRxdMonitor_ServoMotor+0x7c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
          Flag_UartRxdMonitor_ServoMotor    = 1;
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <UartRxdMonitor_ServoMotor+0x80>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
}
 8001b36:	e002      	b.n	8001b3e <UartRxdMonitor_ServoMotor+0x66>
    cnt_bkp = 0;
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <UartRxdMonitor_ServoMotor+0x74>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	200000e5 	.word	0x200000e5
 8001b4c:	200001f4 	.word	0x200001f4
 8001b50:	200001f5 	.word	0x200001f5
 8001b54:	200001e8 	.word	0x200001e8
 8001b58:	200001e7 	.word	0x200001e7

08001b5c <UartDriver_ServoMotor>:
void UartDriver_ServoMotor(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0c0      	sub	sp, #256	@ 0x100
 8001b60:	af00      	add	r7, sp, #0
  uint8_t len;
  uint8_t buf[255] = {0};
 8001b62:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001b66:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	23ff      	movs	r3, #255	@ 0xff
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2100      	movs	r1, #0
 8001b72:	f007 fe52 	bl	800981a <memset>
  if (Flag_UartRxdMonitor_ServoMotor) {
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <UartDriver_ServoMotor+0x50>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d011      	beq.n	8001ba2 <UartDriver_ServoMotor+0x46>
    Flag_UartRxdMonitor_ServoMotor = 0;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <UartDriver_ServoMotor+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
    len                            = UartRead_ServoMotor(buf, sizeof(buf));
 8001b84:	463b      	mov	r3, r7
 8001b86:	21ff      	movs	r1, #255	@ 0xff
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff73 	bl	8001a74 <UartRead_ServoMotor>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
    UartAction_ServoMotor(buf, len);
 8001b94:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc91 	bl	80004c4 <UartAction_ServoMotor>
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200001e7 	.word	0x200001e7

08001bb0 <HAL_UART_RxCpltCallback>:

#include "SystemTasks.h"

#include "module_driver/driver_upper.h"
#include "module_driver/driver_wireless.h"
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  // }
  // if (huart->Instance == UartX_WirelessModule)
  // {
  // 	UartGetData_WirelessModule(); // 处理接收到的数据
  // }
  if (huart->Instance == UartX_ServoMotor) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_UART_RxCpltCallback+0x20>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_RxCpltCallback+0x16>
    UartGetData_ServoMotor();  // 处理接收到的数据
 8001bc2:	f7ff fdf1 	bl	80017a8 <UartGetData_ServoMotor>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  if (huart == GetWireLessHandle()) {
 8001be0:	f007 fb4c 	bl	800927c <GetWireLessHandle>
 8001be4:	4602      	mov	r2, r0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d102      	bne.n	8001bf2 <HAL_UARTEx_RxEventCallback+0x1e>
    receive_rx_data();
 8001bec:	f007 fc14 	bl	8009418 <receive_rx_data>
  } else if (huart == GetUpperUartHandle()) {
    upper_receive_rx_data();
  }
}
 8001bf0:	e007      	b.n	8001c02 <HAL_UARTEx_RxEventCallback+0x2e>
  } else if (huart == GetUpperUartHandle()) {
 8001bf2:	f007 fa09 	bl	8009008 <GetUpperUartHandle>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_UARTEx_RxEventCallback+0x2e>
    upper_receive_rx_data();
 8001bfe:	f007 facb 	bl	8009198 <upper_receive_rx_data>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)  // 1ms
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    // TimerTasks_WirelessModule();
    // TimerTasks_Reader15693();
    TimerTasks_ServoMotor();
 8001c1e:	f7ff f9c5 	bl	8000fac <TimerTasks_ServoMotor>
  }
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40012c00 	.word	0x40012c00

08001c30 <UartWrite_WirelessModule>:
	UartRxd_WirelessModule[CntRxd_WirelessModule] = Rxdbuf_WirelessModule[0];
	CntRxd_WirelessModule++;
	UartReceiveIT_WirelessModule();
}
void UartWrite_WirelessModule(uint8_t *pData, uint16_t Size)
{//发送给读写器
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart_WirelessModule,pData,Size,1000);
 8001c3c:	887a      	ldrh	r2, [r7, #2]
 8001c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4803      	ldr	r0, [pc, #12]	@ (8001c54 <UartWrite_WirelessModule+0x24>)
 8001c46:	f004 fcff 	bl	8006648 <HAL_UART_Transmit>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000035c 	.word	0x2000035c

08001c58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c6a:	4a19      	ldr	r2, [pc, #100]	@ (8001cd0 <MX_ADC1_Init+0x78>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c82:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001c86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c94:	480d      	ldr	r0, [pc, #52]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c96:	f001 fa75 	bl	8003184 <HAL_ADC_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ca0:	f000 fb8f 	bl	80023c2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001cb6:	f001 fb4f 	bl	8003358 <HAL_ADC_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001cc0:	f000 fb7f 	bl	80023c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200001f8 	.word	0x200001f8
 8001cd0:	40012400 	.word	0x40012400

08001cd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a14      	ldr	r2, [pc, #80]	@ (8001d40 <HAL_ADC_MspInit+0x6c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d121      	bne.n	8001d38 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_ContactPoint_Pin|ADC_BAT_Pin|ADC_CurrentDetection_Pin;
 8001d24:	23b0      	movs	r3, #176	@ 0xb0
 8001d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <HAL_ADC_MspInit+0x74>)
 8001d34:	f002 f9dc 	bl	80040f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40012400 	.word	0x40012400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800

08001d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d52:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	4a19      	ldr	r2, [pc, #100]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6153      	str	r3, [r2, #20]
 8001d5e:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d6a:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6153      	str	r3, [r2, #20]
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	200f      	movs	r0, #15
 8001d88:	f001 fcf7 	bl	800377a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d8c:	200f      	movs	r0, #15
 8001d8e:	f001 fd10 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	2010      	movs	r0, #16
 8001d98:	f001 fcef 	bl	800377a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d9c:	2010      	movs	r0, #16
 8001d9e:	f001 fd08 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	203a      	movs	r0, #58	@ 0x3a
 8001da8:	f001 fce7 	bl	800377a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001dac:	203a      	movs	r0, #58	@ 0x3a
 8001dae:	f001 fd00 	bl	80037b2 <HAL_NVIC_EnableIRQ>

}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd4:	4b44      	ldr	r3, [pc, #272]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a43      	ldr	r2, [pc, #268]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001dda:	f043 0310 	orr.w	r3, r3, #16
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b41      	ldr	r3, [pc, #260]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dec:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001df2:	f043 0320 	orr.w	r3, r3, #32
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	4b38      	ldr	r3, [pc, #224]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a37      	ldr	r2, [pc, #220]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b35      	ldr	r3, [pc, #212]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a31      	ldr	r2, [pc, #196]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Power_EStopLED_Pin|Power_Host_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8001e3a:	482c      	ldr	r0, [pc, #176]	@ (8001eec <MX_GPIO_Init+0x12c>)
 8001e3c:	f002 fb03 	bl	8004446 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power_Sensor_GPIO_Port, Power_Sensor_Pin, GPIO_PIN_SET);
 8001e40:	2201      	movs	r2, #1
 8001e42:	2101      	movs	r1, #1
 8001e44:	4829      	ldr	r0, [pc, #164]	@ (8001eec <MX_GPIO_Init+0x12c>)
 8001e46:	f002 fafe 	bl	8004446 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_DetectionSwitch_Pin|Power_BLDCMotor_Pin|Power_WirelessModule_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 6114 	mov.w	r1, #2368	@ 0x940
 8001e50:	4827      	ldr	r0, [pc, #156]	@ (8001ef0 <MX_GPIO_Init+0x130>)
 8001e52:	f002 faf8 	bl	8004446 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Power_Reader15693_Pin|Power_Lidar2_Pin, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001e5c:	4824      	ldr	r0, [pc, #144]	@ (8001ef0 <MX_GPIO_Init+0x130>)
 8001e5e:	f002 faf2 	bl	8004446 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Power_Lidar1_Pin|Direction_Ctl_BLDCMotor_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2118      	movs	r1, #24
 8001e66:	4823      	ldr	r0, [pc, #140]	@ (8001ef4 <MX_GPIO_Init+0x134>)
 8001e68:	f002 faed 	bl	8004446 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Power_EStopLED_Pin|Power_Sensor_Pin|Power_Host_Pin;
 8001e6c:	f242 2301 	movw	r3, #8705	@ 0x2201
 8001e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	4819      	ldr	r0, [pc, #100]	@ (8001eec <MX_GPIO_Init+0x12c>)
 8001e86:	f002 f933 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Input_Sensor3_Pin|Input_Sensor1_Pin|Input_Sensor2_Pin|Input_EmergencyStopButton_Pin;
 8001e8a:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4813      	ldr	r0, [pc, #76]	@ (8001eec <MX_GPIO_Init+0x12c>)
 8001ea0:	f002 f926 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ADC_DetectionSwitch_Pin|Power_BLDCMotor_Pin|Power_WirelessModule_Pin|Power_Reader15693_Pin
 8001ea4:	f649 1340 	movw	r3, #39232	@ 0x9940
 8001ea8:	613b      	str	r3, [r7, #16]
                          |Power_Lidar2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480c      	ldr	r0, [pc, #48]	@ (8001ef0 <MX_GPIO_Init+0x130>)
 8001ebe:	f002 f917 	bl	80040f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Power_Lidar1_Pin|Direction_Ctl_BLDCMotor_Pin;
 8001ec2:	2318      	movs	r3, #24
 8001ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4806      	ldr	r0, [pc, #24]	@ (8001ef4 <MX_GPIO_Init+0x134>)
 8001eda:	f002 f909 	bl	80040f0 <HAL_GPIO_Init>

}
 8001ede:	bf00      	nop
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40011000 	.word	0x40011000
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	40010c00 	.word	0x40010c00

08001ef8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001efe:	4a13      	ldr	r2, [pc, #76]	@ (8001f4c <MX_I2C1_Init+0x54>)
 8001f00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f04:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <MX_I2C1_Init+0x58>)
 8001f06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f36:	f002 fa9f 	bl	8004478 <HAL_I2C_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f40:	f000 fa3f 	bl	80023c2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000228 	.word	0x20000228
 8001f4c:	40005400 	.word	0x40005400
 8001f50:	000186a0 	.word	0x000186a0

08001f54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_I2C_MspInit+0x90>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d132      	bne.n	8001fda <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 8001f8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f92:	2312      	movs	r3, #18
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4812      	ldr	r0, [pc, #72]	@ (8001fec <HAL_I2C_MspInit+0x98>)
 8001fa2:	f002 f8a5 	bl	80040f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <HAL_I2C_MspInit+0x9c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff0 <HAL_I2C_MspInit+0x9c>)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001fc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fcc:	61d3      	str	r3, [r2, #28]
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	@ 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010c00 	.word	0x40010c00
 8001ff0:	40010000 	.word	0x40010000

08001ff4 <CRC16_Calculate>:
static ENUM_CMD move_state      = kWirelessIdle;
static uint32_t distance_target = 300;

static uint8_t crc_cal[] = {0xd1, 0x10, 0x01, 0x0a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd1};

static uint16_t CRC16_Calculate(uint8_t *data, uint8_t len) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 8002000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002004:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	e022      	b.n	8002056 <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	8afb      	ldrh	r3, [r7, #22]
 800201c:	4053      	eors	r3, r2
 800201e:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e011      	b.n	800204a <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 8002026:	8afb      	ldrh	r3, [r7, #22]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 8002030:	8afb      	ldrh	r3, [r7, #22]
 8002032:	085b      	lsrs	r3, r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <CRC16_Calculate+0x84>)
 8002038:	4053      	eors	r3, r2
 800203a:	82fb      	strh	r3, [r7, #22]
 800203c:	e002      	b.n	8002044 <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 800203e:	8afb      	ldrh	r3, [r7, #22]
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3301      	adds	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b07      	cmp	r3, #7
 800204e:	ddea      	ble.n	8002026 <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	3301      	adds	r3, #1
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	429a      	cmp	r2, r3
 800205c:	dbd8      	blt.n	8002010 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 800205e:	f001 f887 	bl	8003170 <HAL_GetTick>
 8002062:	4601      	mov	r1, r0
 8002064:	8afb      	ldrh	r3, [r7, #22]
 8002066:	4a05      	ldr	r2, [pc, #20]	@ (800207c <CRC16_Calculate+0x88>)
 8002068:	4805      	ldr	r0, [pc, #20]	@ (8002080 <CRC16_Calculate+0x8c>)
 800206a:	f007 fb81 	bl	8009770 <iprintf>
  return crc16;
 800206e:	8afb      	ldrh	r3, [r7, #22]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	ffffa001 	.word	0xffffa001
 800207c:	0800aea4 	.word	0x0800aea4
 8002080:	0800a4c4 	.word	0x0800a4c4

08002084 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800208a:	f001 f819 	bl	80030c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800208e:	f000 f93b 	bl	8002308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002092:	f7ff fe95 	bl	8001dc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002096:	f7ff fe59 	bl	8001d4c <MX_DMA_Init>
  MX_UART4_Init();
 800209a:	f000 fd2b 	bl	8002af4 <MX_UART4_Init>
  MX_UART5_Init();
 800209e:	f000 fd53 	bl	8002b48 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80020a2:	f000 fd7b 	bl	8002b9c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80020a6:	f000 fda3 	bl	8002bf0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80020aa:	f000 fdcb 	bl	8002c44 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80020ae:	f7ff fdd3 	bl	8001c58 <MX_ADC1_Init>
  MX_I2C1_Init();
 80020b2:	f7ff ff21 	bl	8001ef8 <MX_I2C1_Init>
  MX_TIM4_Init();
 80020b6:	f000 fbdf 	bl	8002878 <MX_TIM4_Init>
  MX_TIM1_Init();
 80020ba:	f000 fb33 	bl	8002724 <MX_TIM1_Init>
  MX_TIM3_Init();
 80020be:	f000 fb81 	bl	80027c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  wireless_reg_handle(&huart1, &hdma_usart1_rx);
 80020c2:	4981      	ldr	r1, [pc, #516]	@ (80022c8 <main+0x244>)
 80020c4:	4881      	ldr	r0, [pc, #516]	@ (80022cc <main+0x248>)
 80020c6:	f007 f8a3 	bl	8009210 <wireless_reg_handle>
  wireless_init();
 80020ca:	f007 f8b5 	bl	8009238 <wireless_init>

  upper_uart_reg_handle(&huart4, &hdma_uart4_rx);
 80020ce:	4980      	ldr	r1, [pc, #512]	@ (80022d0 <main+0x24c>)
 80020d0:	4880      	ldr	r0, [pc, #512]	@ (80022d4 <main+0x250>)
 80020d2:	f006 ff63 	bl	8008f9c <upper_uart_reg_handle>
  upper_uart_init();
 80020d6:	f006 ff75 	bl	8008fc4 <upper_uart_init>

  motor_uart_init();
 80020da:	f7fe f8c3 	bl	8000264 <motor_uart_init>
  servo_info_updata(KGoRight, 30);
 80020de:	211e      	movs	r1, #30
 80020e0:	200c      	movs	r0, #12
 80020e2:	f006 fd71 	bl	8008bc8 <servo_info_updata>
  /* USER CODE END 2 */
  CRC16_Calculate(crc_cal, sizeof(crc_cal));
 80020e6:	210b      	movs	r1, #11
 80020e8:	487b      	ldr	r0, [pc, #492]	@ (80022d8 <main+0x254>)
 80020ea:	f7ff ff83 	bl	8001ff4 <CRC16_Calculate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    process_event();
 80020ee:	f007 fa33 	bl	8009558 <process_event>
    Events_MainLogic();
 80020f2:	f7fe f897 	bl	8000224 <Events_MainLogic>
    // send_lower(kInit, 0x05);
    // LOGI("TEST");
    // if (get_transmit_state()) {  // 接收到数据开始转移
    // transfer_process();
    //}
    if (GetMoterFlag() >= 22) {
 80020f6:	f7fe f8df 	bl	80002b8 <GetMoterFlag>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b15      	cmp	r3, #21
 80020fe:	ddf6      	ble.n	80020ee <main+0x6a>
      transfer_process();
 8002100:	f006 fa52 	bl	80085a8 <transfer_process>

      if ((get_action_mode() == 0x01) && !pandian_flag) {
 8002104:	f006 fd44 	bl	8008b90 <get_action_mode>
 8002108:	4603      	mov	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	d11b      	bne.n	8002146 <main+0xc2>
 800210e:	4b73      	ldr	r3, [pc, #460]	@ (80022dc <main+0x258>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d117      	bne.n	8002146 <main+0xc2>
        switch (move_state) {
 8002116:	4b72      	ldr	r3, [pc, #456]	@ (80022e0 <main+0x25c>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d005      	beq.n	800212a <main+0xa6>
 800211e:	2bff      	cmp	r3, #255	@ 0xff
 8002120:	d111      	bne.n	8002146 <main+0xc2>
          case kWirelessIdle:
            move_state = kWirelessStart;
 8002122:	4b6f      	ldr	r3, [pc, #444]	@ (80022e0 <main+0x25c>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
            break;
 8002128:	e00d      	b.n	8002146 <main+0xc2>
          case kWirelessStart:
            if (servo_move(KGoRight)) {
 800212a:	200c      	movs	r0, #12
 800212c:	f006 fe84 	bl	8008e38 <servo_move>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d006      	beq.n	8002144 <main+0xc0>
              servo_info_updata(KGoRight, 30);
 8002136:	211e      	movs	r1, #30
 8002138:	200c      	movs	r0, #12
 800213a:	f006 fd45 	bl	8008bc8 <servo_info_updata>
              pandian_flag = 1;
 800213e:	4b67      	ldr	r3, [pc, #412]	@ (80022dc <main+0x258>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002144:	bf00      	nop
        }
      }

      switch (pandian_flag) {
 8002146:	4b65      	ldr	r3, [pc, #404]	@ (80022dc <main+0x258>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3b01      	subs	r3, #1
 800214c:	2b04      	cmp	r3, #4
 800214e:	f200 80af 	bhi.w	80022b0 <main+0x22c>
 8002152:	a201      	add	r2, pc, #4	@ (adr r2, 8002158 <main+0xd4>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	0800216d 	.word	0x0800216d
 800215c:	080021ff 	.word	0x080021ff
 8002160:	0800221f 	.word	0x0800221f
 8002164:	0800224d 	.word	0x0800224d
 8002168:	0800228b 	.word	0x0800228b
        case 1:
          uint16_t pos1    = get_Position_mm(GetMoterStateReg(), 4);
 800216c:	f7fe f88e 	bl	800028c <GetMoterStateReg>
 8002170:	4603      	mov	r3, r0
 8002172:	2104      	movs	r1, #4
 8002174:	4618      	mov	r0, r3
 8002176:	f006 fd67 	bl	8008c48 <get_Position_mm>
 800217a:	4603      	mov	r3, r0
 800217c:	80bb      	strh	r3, [r7, #4]
          uint16_t pos_tar = get_servo_set_info()->pos;
 800217e:	f006 fd45 	bl	8008c0c <get_servo_set_info>
 8002182:	4603      	mov	r3, r0
 8002184:	791a      	ldrb	r2, [r3, #4]
 8002186:	795b      	ldrb	r3, [r3, #5]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	4313      	orrs	r3, r2
 800218c:	807b      	strh	r3, [r7, #2]
          uint8_t  tmp     = pos_tar;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	707b      	strb	r3, [r7, #1]
          pos_tar >>= 8;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	807b      	strh	r3, [r7, #2]
          pos_tar |= ((uint16_t)tmp) << 8;
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	b21b      	sxth	r3, r3
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	807b      	strh	r3, [r7, #2]
          LOGI("pos_tar3 is :%04x", pos_tar);
 80021aa:	f000 ffe1 	bl	8003170 <HAL_GetTick>
 80021ae:	4601      	mov	r1, r0
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	4a4c      	ldr	r2, [pc, #304]	@ (80022e4 <main+0x260>)
 80021b4:	484c      	ldr	r0, [pc, #304]	@ (80022e8 <main+0x264>)
 80021b6:	f007 fadb 	bl	8009770 <iprintf>
          LOGI("cur pos is %04x", pos1);
 80021ba:	f000 ffd9 	bl	8003170 <HAL_GetTick>
 80021be:	4601      	mov	r1, r0
 80021c0:	88bb      	ldrh	r3, [r7, #4]
 80021c2:	4a48      	ldr	r2, [pc, #288]	@ (80022e4 <main+0x260>)
 80021c4:	4849      	ldr	r0, [pc, #292]	@ (80022ec <main+0x268>)
 80021c6:	f007 fad3 	bl	8009770 <iprintf>
          if (pos1 >= pos_tar - 10 && pos1 <= pos_tar + 10 && pos1 != 0xff) {
 80021ca:	88ba      	ldrh	r2, [r7, #4]
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	3b0a      	subs	r3, #10
 80021d0:	429a      	cmp	r2, r3
 80021d2:	db6f      	blt.n	80022b4 <main+0x230>
 80021d4:	88ba      	ldrh	r2, [r7, #4]
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	330a      	adds	r3, #10
 80021da:	429a      	cmp	r2, r3
 80021dc:	dc6a      	bgt.n	80022b4 <main+0x230>
 80021de:	88bb      	ldrh	r3, [r7, #4]
 80021e0:	2bff      	cmp	r3, #255	@ 0xff
 80021e2:	d067      	beq.n	80022b4 <main+0x230>
            pandian_flag = 2;
 80021e4:	4b3d      	ldr	r3, [pc, #244]	@ (80022dc <main+0x258>)
 80021e6:	2202      	movs	r2, #2
 80021e8:	701a      	strb	r2, [r3, #0]
            LOGI("check finish %d", pandian_flag);
 80021ea:	f000 ffc1 	bl	8003170 <HAL_GetTick>
 80021ee:	4601      	mov	r1, r0
 80021f0:	4b3a      	ldr	r3, [pc, #232]	@ (80022dc <main+0x258>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4a3b      	ldr	r2, [pc, #236]	@ (80022e4 <main+0x260>)
 80021f6:	483e      	ldr	r0, [pc, #248]	@ (80022f0 <main+0x26c>)
 80021f8:	f007 faba 	bl	8009770 <iprintf>
          }
          break;
 80021fc:	e05a      	b.n	80022b4 <main+0x230>
        case 2:
          if (servo_speed_set(0)) {
 80021fe:	2000      	movs	r0, #0
 8002200:	f006 fda8 	bl	8008d54 <servo_speed_set>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d056      	beq.n	80022b8 <main+0x234>
            // pandian_flag = 3;
            LOGI("Back %d ", pandian_flag);
 800220a:	f000 ffb1 	bl	8003170 <HAL_GetTick>
 800220e:	4601      	mov	r1, r0
 8002210:	4b32      	ldr	r3, [pc, #200]	@ (80022dc <main+0x258>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4a33      	ldr	r2, [pc, #204]	@ (80022e4 <main+0x260>)
 8002216:	4837      	ldr	r0, [pc, #220]	@ (80022f4 <main+0x270>)
 8002218:	f007 faaa 	bl	8009770 <iprintf>
          }

          break;
 800221c:	e04c      	b.n	80022b8 <main+0x234>
        case 3:
          if (servo_move(KGoLeft)) {
 800221e:	20cc      	movs	r0, #204	@ 0xcc
 8002220:	f006 fe0a 	bl	8008e38 <servo_move>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d048      	beq.n	80022bc <main+0x238>
            servo_info_updata(KGoLeft, 30);
 800222a:	211e      	movs	r1, #30
 800222c:	20cc      	movs	r0, #204	@ 0xcc
 800222e:	f006 fccb 	bl	8008bc8 <servo_info_updata>
            pandian_flag = 4;
 8002232:	4b2a      	ldr	r3, [pc, #168]	@ (80022dc <main+0x258>)
 8002234:	2204      	movs	r2, #4
 8002236:	701a      	strb	r2, [r3, #0]

            LOGI("Back move %d", pandian_flag);
 8002238:	f000 ff9a 	bl	8003170 <HAL_GetTick>
 800223c:	4601      	mov	r1, r0
 800223e:	4b27      	ldr	r3, [pc, #156]	@ (80022dc <main+0x258>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	4a28      	ldr	r2, [pc, #160]	@ (80022e4 <main+0x260>)
 8002244:	482c      	ldr	r0, [pc, #176]	@ (80022f8 <main+0x274>)
 8002246:	f007 fa93 	bl	8009770 <iprintf>
          }

          break;
 800224a:	e037      	b.n	80022bc <main+0x238>
        case 4:
          uint16_t pos = get_Position_mm(GetMoterStateReg(), 4);
 800224c:	f7fe f81e 	bl	800028c <GetMoterStateReg>
 8002250:	4603      	mov	r3, r0
 8002252:	2104      	movs	r1, #4
 8002254:	4618      	mov	r0, r3
 8002256:	f006 fcf7 	bl	8008c48 <get_Position_mm>
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
          if (pos <= distance_target - 100 && pos != 0) {
 800225e:	88fa      	ldrh	r2, [r7, #6]
 8002260:	4b26      	ldr	r3, [pc, #152]	@ (80022fc <main+0x278>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3b64      	subs	r3, #100	@ 0x64
 8002266:	429a      	cmp	r2, r3
 8002268:	d82a      	bhi.n	80022c0 <main+0x23c>
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d027      	beq.n	80022c0 <main+0x23c>
            pandian_flag = 5;
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <main+0x258>)
 8002272:	2205      	movs	r2, #5
 8002274:	701a      	strb	r2, [r3, #0]
            LOGI("back finish %d", pandian_flag);
 8002276:	f000 ff7b 	bl	8003170 <HAL_GetTick>
 800227a:	4601      	mov	r1, r0
 800227c:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <main+0x258>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4a18      	ldr	r2, [pc, #96]	@ (80022e4 <main+0x260>)
 8002282:	481f      	ldr	r0, [pc, #124]	@ (8002300 <main+0x27c>)
 8002284:	f007 fa74 	bl	8009770 <iprintf>
          }
          break;
 8002288:	e01a      	b.n	80022c0 <main+0x23c>
        case 5:
          if (servo_speed_set(0)) {
 800228a:	2000      	movs	r0, #0
 800228c:	f006 fd62 	bl	8008d54 <servo_speed_set>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d016      	beq.n	80022c4 <main+0x240>
            pandian_flag = 6;
 8002296:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <main+0x258>)
 8002298:	2206      	movs	r2, #6
 800229a:	701a      	strb	r2, [r3, #0]
            LOGI("OK %d ", pandian_flag);
 800229c:	f000 ff68 	bl	8003170 <HAL_GetTick>
 80022a0:	4601      	mov	r1, r0
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <main+0x258>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	4a0f      	ldr	r2, [pc, #60]	@ (80022e4 <main+0x260>)
 80022a8:	4816      	ldr	r0, [pc, #88]	@ (8002304 <main+0x280>)
 80022aa:	f007 fa61 	bl	8009770 <iprintf>
          }

          break;
 80022ae:	e009      	b.n	80022c4 <main+0x240>
        default:

          break;
 80022b0:	bf00      	nop
 80022b2:	e71c      	b.n	80020ee <main+0x6a>
          break;
 80022b4:	bf00      	nop
 80022b6:	e71a      	b.n	80020ee <main+0x6a>
          break;
 80022b8:	bf00      	nop
 80022ba:	e718      	b.n	80020ee <main+0x6a>
          break;
 80022bc:	bf00      	nop
 80022be:	e716      	b.n	80020ee <main+0x6a>
          break;
 80022c0:	bf00      	nop
 80022c2:	e714      	b.n	80020ee <main+0x6a>
          break;
 80022c4:	bf00      	nop
    process_event();
 80022c6:	e712      	b.n	80020ee <main+0x6a>
 80022c8:	20000508 	.word	0x20000508
 80022cc:	200003ec 	.word	0x200003ec
 80022d0:	200004c4 	.word	0x200004c4
 80022d4:	2000035c 	.word	0x2000035c
 80022d8:	20000008 	.word	0x20000008
 80022dc:	2000027c 	.word	0x2000027c
 80022e0:	20000000 	.word	0x20000000
 80022e4:	0800aeb4 	.word	0x0800aeb4
 80022e8:	0800a4ec 	.word	0x0800a4ec
 80022ec:	0800a51c 	.word	0x0800a51c
 80022f0:	0800a548 	.word	0x0800a548
 80022f4:	0800a574 	.word	0x0800a574
 80022f8:	0800a598 	.word	0x0800a598
 80022fc:	20000004 	.word	0x20000004
 8002300:	0800a5c0 	.word	0x0800a5c0
 8002304:	0800a5ec 	.word	0x0800a5ec

08002308 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b096      	sub	sp, #88	@ 0x58
 800230c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef       RCC_OscInitStruct = {0};
 800230e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002312:	2228      	movs	r2, #40	@ 0x28
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f007 fa7f 	bl	800981a <memset>
  RCC_ClkInitTypeDef       RCC_ClkInitStruct = {0};
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit     = {0};
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]
 800233a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800233c:	2301      	movs	r3, #1
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8002340:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002344:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002346:	2300      	movs	r3, #0
 8002348:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 800234a:	2301      	movs	r3, #1
 800234c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 800234e:	2302      	movs	r3, #2
 8002350:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8002352:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002356:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL6;
 8002358:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800235c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800235e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002362:	4618      	mov	r0, r3
 8002364:	f002 f9cc 	bl	8004700 <HAL_RCC_OscConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <SystemClock_Config+0x6a>
    Error_Handler();
 800236e:	f000 f828 	bl	80023c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002372:	230f      	movs	r3, #15
 8002374:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8002376:	2302      	movs	r3, #2
 8002378:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800237e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	2102      	movs	r1, #2
 800238e:	4618      	mov	r0, r3
 8002390:	f002 fc38 	bl	8004c04 <HAL_RCC_ClockConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <SystemClock_Config+0x96>
    Error_Handler();
 800239a:	f000 f812 	bl	80023c2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800239e:	2302      	movs	r3, #2
 80023a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection    = RCC_ADCPCLK2_DIV6;
 80023a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 fdba 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <SystemClock_Config+0xb2>
    Error_Handler();
 80023b6:	f000 f804 	bl	80023c2 <Error_Handler>
  }
}
 80023ba:	bf00      	nop
 80023bc:	3758      	adds	r7, #88	@ 0x58
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c6:	b672      	cpsid	i
}
 80023c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80023ca:	bf00      	nop
 80023cc:	e7fd      	b.n	80023ca <Error_Handler+0x8>
	...

080023d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_MspInit+0x5c>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4a14      	ldr	r2, [pc, #80]	@ (800242c <HAL_MspInit+0x5c>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6193      	str	r3, [r2, #24]
 80023e2:	4b12      	ldr	r3, [pc, #72]	@ (800242c <HAL_MspInit+0x5c>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <HAL_MspInit+0x5c>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4a0e      	ldr	r2, [pc, #56]	@ (800242c <HAL_MspInit+0x5c>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	61d3      	str	r3, [r2, #28]
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <HAL_MspInit+0x5c>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <HAL_MspInit+0x60>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	4a04      	ldr	r2, [pc, #16]	@ (8002430 <HAL_MspInit+0x60>)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40021000 	.word	0x40021000
 8002430:	40010000 	.word	0x40010000

08002434 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <NMI_Handler+0x4>

0800243c <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    LOGE("hard fault");
 8002440:	f000 fe96 	bl	8003170 <HAL_GetTick>
 8002444:	4603      	mov	r3, r0
 8002446:	4a03      	ldr	r2, [pc, #12]	@ (8002454 <HardFault_Handler+0x18>)
 8002448:	4619      	mov	r1, r3
 800244a:	4803      	ldr	r0, [pc, #12]	@ (8002458 <HardFault_Handler+0x1c>)
 800244c:	f007 f990 	bl	8009770 <iprintf>
  while (1) {
 8002450:	bf00      	nop
 8002452:	e7f5      	b.n	8002440 <HardFault_Handler+0x4>
 8002454:	0800aebc 	.word	0x0800aebc
 8002458:	0800a610 	.word	0x0800a610

0800245c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1) {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    LOGE("mem fault");
 8002460:	f000 fe86 	bl	8003170 <HAL_GetTick>
 8002464:	4603      	mov	r3, r0
 8002466:	4a03      	ldr	r2, [pc, #12]	@ (8002474 <MemManage_Handler+0x18>)
 8002468:	4619      	mov	r1, r3
 800246a:	4803      	ldr	r0, [pc, #12]	@ (8002478 <MemManage_Handler+0x1c>)
 800246c:	f007 f980 	bl	8009770 <iprintf>
  while (1) {
 8002470:	bf00      	nop
 8002472:	e7f5      	b.n	8002460 <MemManage_Handler+0x4>
 8002474:	0800aed0 	.word	0x0800aed0
 8002478:	0800a638 	.word	0x0800a638

0800247c <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1) {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    LOGE("bus fault");
 8002480:	f000 fe76 	bl	8003170 <HAL_GetTick>
 8002484:	4603      	mov	r3, r0
 8002486:	4a03      	ldr	r2, [pc, #12]	@ (8002494 <BusFault_Handler+0x18>)
 8002488:	4619      	mov	r1, r3
 800248a:	4803      	ldr	r0, [pc, #12]	@ (8002498 <BusFault_Handler+0x1c>)
 800248c:	f007 f970 	bl	8009770 <iprintf>
  while (1) {
 8002490:	bf00      	nop
 8002492:	e7f5      	b.n	8002480 <BusFault_Handler+0x4>
 8002494:	0800aee4 	.word	0x0800aee4
 8002498:	0800a660 	.word	0x0800a660

0800249c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1) {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    LOGE("usage fault");
 80024a0:	f000 fe66 	bl	8003170 <HAL_GetTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4a03      	ldr	r2, [pc, #12]	@ (80024b4 <UsageFault_Handler+0x18>)
 80024a8:	4619      	mov	r1, r3
 80024aa:	4803      	ldr	r0, [pc, #12]	@ (80024b8 <UsageFault_Handler+0x1c>)
 80024ac:	f007 f960 	bl	8009770 <iprintf>
  while (1) {
 80024b0:	bf00      	nop
 80024b2:	e7f5      	b.n	80024a0 <UsageFault_Handler+0x4>
 80024b4:	0800aef8 	.word	0x0800aef8
 80024b8:	0800a688 	.word	0x0800a688

080024bc <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e4:	f000 fe32 	bl	800314c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <DMA1_Channel5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024f0:	4802      	ldr	r0, [pc, #8]	@ (80024fc <DMA1_Channel5_IRQHandler+0x10>)
 80024f2:	f001 fb93 	bl	8003c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000508 	.word	0x20000508

08002500 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002504:	4802      	ldr	r0, [pc, #8]	@ (8002510 <DMA1_Channel6_IRQHandler+0x10>)
 8002506:	f001 fb89 	bl	8003c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000054c 	.word	0x2000054c

08002514 <TIM1_UP_TIM10_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002518:	4802      	ldr	r0, [pc, #8]	@ (8002524 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800251a:	f003 f847 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000284 	.word	0x20000284

08002528 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800252c:	4802      	ldr	r0, [pc, #8]	@ (8002538 <TIM3_IRQHandler+0x10>)
 800252e:	f003 f83d 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200002cc 	.word	0x200002cc

0800253c <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <TIM4_IRQHandler+0x10>)
 8002542:	f003 f833 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000314 	.word	0x20000314

08002550 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002554:	4802      	ldr	r0, [pc, #8]	@ (8002560 <USART1_IRQHandler+0x10>)
 8002556:	f004 f97d 	bl	8006854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200003ec 	.word	0x200003ec

08002564 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002568:	4802      	ldr	r0, [pc, #8]	@ (8002574 <USART2_IRQHandler+0x10>)
 800256a:	f004 f973 	bl	8006854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000434 	.word	0x20000434

08002578 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800257c:	4802      	ldr	r0, [pc, #8]	@ (8002588 <USART3_IRQHandler+0x10>)
 800257e:	f004 f969 	bl	8006854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000047c 	.word	0x2000047c

0800258c <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void) {
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002590:	4802      	ldr	r0, [pc, #8]	@ (800259c <UART4_IRQHandler+0x10>)
 8002592:	f004 f95f 	bl	8006854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2000035c 	.word	0x2000035c

080025a0 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80025a4:	4802      	ldr	r0, [pc, #8]	@ (80025b0 <UART5_IRQHandler+0x10>)
 80025a6:	f004 f955 	bl	8006854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200003a4 	.word	0x200003a4

080025b4 <DMA2_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA2 channel3 global interrupt.
 */
void DMA2_Channel3_IRQHandler(void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80025b8:	4802      	ldr	r0, [pc, #8]	@ (80025c4 <DMA2_Channel3_IRQHandler+0x10>)
 80025ba:	f001 fb2f 	bl	8003c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200004c4 	.word	0x200004c4

080025c8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
  }
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e00a      	b.n	8002602 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ec:	f3af 8000 	nop.w
 80025f0:	4601      	mov	r1, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	60ba      	str	r2, [r7, #8]
 80025f8:	b2ca      	uxtb	r2, r1
 80025fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	dbf0      	blt.n	80025ec <_read+0x12>
  }

  return len;
 800260a:	687b      	ldr	r3, [r7, #4]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	e009      	b.n	800263a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	60ba      	str	r2, [r7, #8]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f006 fab8 	bl	8008ba4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	429a      	cmp	r2, r3
 8002640:	dbf1      	blt.n	8002626 <_write+0x12>
  }
  return len;
 8002642:	687b      	ldr	r3, [r7, #4]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_close>:

int _close(int file)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002672:	605a      	str	r2, [r3, #4]
  return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <_isatty>:

int _isatty(int file)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002688:	2301      	movs	r3, #1
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  extern uint8_t  _end;            /* Symbol defined in the linker script */
  extern uint8_t  _estack;         /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t  stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b4:	4a14      	ldr	r2, [pc, #80]	@ (8002708 <_sbrk+0x5c>)
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <_sbrk+0x60>)
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]
  const uint8_t  *max_heap    = (uint8_t *)stack_limit;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]
  uint8_t        *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 80026c0:	4b13      	ldr	r3, [pc, #76]	@ (8002710 <_sbrk+0x64>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 80026c8:	4b11      	ldr	r3, [pc, #68]	@ (8002710 <_sbrk+0x64>)
 80026ca:	4a12      	ldr	r2, [pc, #72]	@ (8002714 <_sbrk+0x68>)
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d207      	bcs.n	80026ec <_sbrk+0x40>
    errno = ENOMEM;
 80026dc:	f007 f8ec 	bl	80098b8 <__errno>
 80026e0:	4603      	mov	r3, r0
 80026e2:	220c      	movs	r2, #12
 80026e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ea:	e009      	b.n	8002700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ec:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <_sbrk+0x64>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f2:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <_sbrk+0x64>)
 80026fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20018000 	.word	0x20018000
 800270c:	00000400 	.word	0x00000400
 8002710:	20000280 	.word	0x20000280
 8002714:	20000e60 	.word	0x20000e60

08002718 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002738:	463b      	mov	r3, r7
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002740:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <MX_TIM1_Init+0x98>)
 8002742:	4a1f      	ldr	r2, [pc, #124]	@ (80027c0 <MX_TIM1_Init+0x9c>)
 8002744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002746:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <MX_TIM1_Init+0x98>)
 8002748:	2247      	movs	r2, #71	@ 0x47
 800274a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <MX_TIM1_Init+0x98>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002752:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <MX_TIM1_Init+0x98>)
 8002754:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002758:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275a:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <MX_TIM1_Init+0x98>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002760:	4b16      	ldr	r3, [pc, #88]	@ (80027bc <MX_TIM1_Init+0x98>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002766:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <MX_TIM1_Init+0x98>)
 8002768:	2280      	movs	r2, #128	@ 0x80
 800276a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800276c:	4813      	ldr	r0, [pc, #76]	@ (80027bc <MX_TIM1_Init+0x98>)
 800276e:	f002 fc8f 	bl	8005090 <HAL_TIM_Base_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002778:	f7ff fe23 	bl	80023c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800277c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002782:	f107 0308 	add.w	r3, r7, #8
 8002786:	4619      	mov	r1, r3
 8002788:	480c      	ldr	r0, [pc, #48]	@ (80027bc <MX_TIM1_Init+0x98>)
 800278a:	f003 f975 	bl	8005a78 <HAL_TIM_ConfigClockSource>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002794:	f7ff fe15 	bl	80023c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002798:	2300      	movs	r3, #0
 800279a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027a0:	463b      	mov	r3, r7
 80027a2:	4619      	mov	r1, r3
 80027a4:	4805      	ldr	r0, [pc, #20]	@ (80027bc <MX_TIM1_Init+0x98>)
 80027a6:	f003 fe73 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80027b0:	f7ff fe07 	bl	80023c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027b4:	bf00      	nop
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000284 	.word	0x20000284
 80027c0:	40012c00 	.word	0x40012c00

080027c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	@ 0x28
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ca:	f107 0320 	add.w	r3, r7, #32
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
 80027e0:	611a      	str	r2, [r3, #16]
 80027e2:	615a      	str	r2, [r3, #20]
 80027e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027e6:	4b22      	ldr	r3, [pc, #136]	@ (8002870 <MX_TIM3_Init+0xac>)
 80027e8:	4a22      	ldr	r2, [pc, #136]	@ (8002874 <MX_TIM3_Init+0xb0>)
 80027ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80027ec:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <MX_TIM3_Init+0xac>)
 80027ee:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80027f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002870 <MX_TIM3_Init+0xac>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80027fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002870 <MX_TIM3_Init+0xac>)
 80027fc:	2209      	movs	r2, #9
 80027fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <MX_TIM3_Init+0xac>)
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002806:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <MX_TIM3_Init+0xac>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800280c:	4818      	ldr	r0, [pc, #96]	@ (8002870 <MX_TIM3_Init+0xac>)
 800280e:	f002 fcfd 	bl	800520c <HAL_TIM_PWM_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002818:	f7ff fdd3 	bl	80023c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	4619      	mov	r1, r3
 800282a:	4811      	ldr	r0, [pc, #68]	@ (8002870 <MX_TIM3_Init+0xac>)
 800282c:	f003 fe30 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002836:	f7ff fdc4 	bl	80023c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800283a:	2360      	movs	r3, #96	@ 0x60
 800283c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2204      	movs	r2, #4
 800284e:	4619      	mov	r1, r3
 8002850:	4807      	ldr	r0, [pc, #28]	@ (8002870 <MX_TIM3_Init+0xac>)
 8002852:	f003 f84f 	bl	80058f4 <HAL_TIM_PWM_ConfigChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800285c:	f7ff fdb1 	bl	80023c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002860:	4803      	ldr	r0, [pc, #12]	@ (8002870 <MX_TIM3_Init+0xac>)
 8002862:	f000 f901 	bl	8002a68 <HAL_TIM_MspPostInit>

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	@ 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200002cc 	.word	0x200002cc
 8002874:	40000400 	.word	0x40000400

08002878 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	@ 0x28
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287e:	f107 0318 	add.w	r3, r7, #24
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002896:	463b      	mov	r3, r7
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002950 <MX_TIM4_Init+0xd8>)
 80028a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002954 <MX_TIM4_Init+0xdc>)
 80028a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80028a8:	4b29      	ldr	r3, [pc, #164]	@ (8002950 <MX_TIM4_Init+0xd8>)
 80028aa:	2247      	movs	r2, #71	@ 0x47
 80028ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ae:	4b28      	ldr	r3, [pc, #160]	@ (8002950 <MX_TIM4_Init+0xd8>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80028b4:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <MX_TIM4_Init+0xd8>)
 80028b6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80028ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028bc:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <MX_TIM4_Init+0xd8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028c2:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <MX_TIM4_Init+0xd8>)
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028c8:	4821      	ldr	r0, [pc, #132]	@ (8002950 <MX_TIM4_Init+0xd8>)
 80028ca:	f002 fbe1 	bl	8005090 <HAL_TIM_Base_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80028d4:	f7ff fd75 	bl	80023c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028dc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028de:	f107 0318 	add.w	r3, r7, #24
 80028e2:	4619      	mov	r1, r3
 80028e4:	481a      	ldr	r0, [pc, #104]	@ (8002950 <MX_TIM4_Init+0xd8>)
 80028e6:	f003 f8c7 	bl	8005a78 <HAL_TIM_ConfigClockSource>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80028f0:	f7ff fd67 	bl	80023c2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80028f4:	4816      	ldr	r0, [pc, #88]	@ (8002950 <MX_TIM4_Init+0xd8>)
 80028f6:	f002 fcd8 	bl	80052aa <HAL_TIM_IC_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002900:	f7ff fd5f 	bl	80023c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	4619      	mov	r1, r3
 8002912:	480f      	ldr	r0, [pc, #60]	@ (8002950 <MX_TIM4_Init+0xd8>)
 8002914:	f003 fdbc 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800291e:	f7ff fd50 	bl	80023c2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002922:	2300      	movs	r3, #0
 8002924:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002926:	2301      	movs	r3, #1
 8002928:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002932:	463b      	mov	r3, r7
 8002934:	2200      	movs	r2, #0
 8002936:	4619      	mov	r1, r3
 8002938:	4805      	ldr	r0, [pc, #20]	@ (8002950 <MX_TIM4_Init+0xd8>)
 800293a:	f002 ff3f 	bl	80057bc <HAL_TIM_IC_ConfigChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002944:	f7ff fd3d 	bl	80023c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002948:	bf00      	nop
 800294a:	3728      	adds	r7, #40	@ 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000314 	.word	0x20000314
 8002954:	40000800 	.word	0x40000800

08002958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	@ 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0318 	add.w	r3, r7, #24
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a26      	ldr	r2, [pc, #152]	@ (8002a0c <HAL_TIM_Base_MspInit+0xb4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d114      	bne.n	80029a2 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_TIM_Base_MspInit+0xb8>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <HAL_TIM_Base_MspInit+0xb8>)
 800297e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <HAL_TIM_Base_MspInit+0xb8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	2101      	movs	r1, #1
 8002994:	2019      	movs	r0, #25
 8002996:	f000 fef0 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800299a:	2019      	movs	r0, #25
 800299c:	f000 ff09 	bl	80037b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80029a0:	e030      	b.n	8002a04 <HAL_TIM_Base_MspInit+0xac>
  else if(tim_baseHandle->Instance==TIM4)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <HAL_TIM_Base_MspInit+0xbc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d12b      	bne.n	8002a04 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ac:	4b18      	ldr	r3, [pc, #96]	@ (8002a10 <HAL_TIM_Base_MspInit+0xb8>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	4a17      	ldr	r2, [pc, #92]	@ (8002a10 <HAL_TIM_Base_MspInit+0xb8>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	61d3      	str	r3, [r2, #28]
 80029b8:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <HAL_TIM_Base_MspInit+0xb8>)
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c4:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_TIM_Base_MspInit+0xb8>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	4a11      	ldr	r2, [pc, #68]	@ (8002a10 <HAL_TIM_Base_MspInit+0xb8>)
 80029ca:	f043 0308 	orr.w	r3, r3, #8
 80029ce:	6193      	str	r3, [r2, #24]
 80029d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <HAL_TIM_Base_MspInit+0xb8>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HallCount_BLDCMotor_Pin;
 80029dc:	2340      	movs	r3, #64	@ 0x40
 80029de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HallCount_BLDCMotor_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f107 0318 	add.w	r3, r7, #24
 80029ec:	4619      	mov	r1, r3
 80029ee:	480a      	ldr	r0, [pc, #40]	@ (8002a18 <HAL_TIM_Base_MspInit+0xc0>)
 80029f0:	f001 fb7e 	bl	80040f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2100      	movs	r1, #0
 80029f8:	201e      	movs	r0, #30
 80029fa:	f000 febe 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029fe:	201e      	movs	r0, #30
 8002a00:	f000 fed7 	bl	80037b2 <HAL_NVIC_EnableIRQ>
}
 8002a04:	bf00      	nop
 8002a06:	3728      	adds	r7, #40	@ 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40012c00 	.word	0x40012c00
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40000800 	.word	0x40000800
 8002a18:	40010c00 	.word	0x40010c00

08002a1c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0d      	ldr	r2, [pc, #52]	@ (8002a60 <HAL_TIM_PWM_MspInit+0x44>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d113      	bne.n	8002a56 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <HAL_TIM_PWM_MspInit+0x48>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4a0c      	ldr	r2, [pc, #48]	@ (8002a64 <HAL_TIM_PWM_MspInit+0x48>)
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	61d3      	str	r3, [r2, #28]
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <HAL_TIM_PWM_MspInit+0x48>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	201d      	movs	r0, #29
 8002a4c:	f000 fe95 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a50:	201d      	movs	r0, #29
 8002a52:	f000 feae 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40021000 	.word	0x40021000

08002a68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 030c 	add.w	r3, r7, #12
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a18      	ldr	r2, [pc, #96]	@ (8002ae4 <HAL_TIM_MspPostInit+0x7c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d129      	bne.n	8002adc <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a88:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <HAL_TIM_MspPostInit+0x80>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4a16      	ldr	r2, [pc, #88]	@ (8002ae8 <HAL_TIM_MspPostInit+0x80>)
 8002a8e:	f043 0308 	orr.w	r3, r3, #8
 8002a92:	6193      	str	r3, [r2, #24]
 8002a94:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <HAL_TIM_MspPostInit+0x80>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Speed_PWMCtl_BLDCMotor_Pin;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Speed_PWMCtl_BLDCMotor_GPIO_Port, &GPIO_InitStruct);
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	480e      	ldr	r0, [pc, #56]	@ (8002aec <HAL_TIM_MspPostInit+0x84>)
 8002ab4:	f001 fb1c 	bl	80040f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <HAL_TIM_MspPostInit+0x88>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	4a06      	ldr	r2, [pc, #24]	@ (8002af0 <HAL_TIM_MspPostInit+0x88>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002adc:	bf00      	nop
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010c00 	.word	0x40010c00
 8002af0:	40010000 	.word	0x40010000

08002af4 <MX_UART4_Init>:
DMA_HandleTypeDef  hdma_uart4_rx;
DMA_HandleTypeDef  hdma_usart1_rx;
DMA_HandleTypeDef  hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance          = UART4;
 8002af8:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <MX_UART4_Init+0x4c>)
 8002afa:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <MX_UART4_Init+0x50>)
 8002afc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate     = 230400;
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <MX_UART4_Init+0x4c>)
 8002b00:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002b04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength   = UART_WORDLENGTH_8B;
 8002b06:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <MX_UART4_Init+0x4c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits     = UART_STOPBITS_1;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <MX_UART4_Init+0x4c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity       = UART_PARITY_NONE;
 8002b12:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <MX_UART4_Init+0x4c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode         = UART_MODE_TX_RX;
 8002b18:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <MX_UART4_Init+0x4c>)
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <MX_UART4_Init+0x4c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <MX_UART4_Init+0x4c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002b2a:	4805      	ldr	r0, [pc, #20]	@ (8002b40 <MX_UART4_Init+0x4c>)
 8002b2c:	f003 fd3c 	bl	80065a8 <HAL_UART_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_UART4_Init+0x46>
    Error_Handler();
 8002b36:	f7ff fc44 	bl	80023c2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	2000035c 	.word	0x2000035c
 8002b44:	40004c00 	.word	0x40004c00

08002b48 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance          = UART5;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	@ (8002b94 <MX_UART5_Init+0x4c>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <MX_UART5_Init+0x50>)
 8002b50:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate     = 230400;
 8002b52:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <MX_UART5_Init+0x4c>)
 8002b54:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002b58:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength   = UART_WORDLENGTH_8B;
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <MX_UART5_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits     = UART_STOPBITS_1;
 8002b60:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <MX_UART5_Init+0x4c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity       = UART_PARITY_NONE;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <MX_UART5_Init+0x4c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode         = UART_MODE_TX_RX;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <MX_UART5_Init+0x4c>)
 8002b6e:	220c      	movs	r2, #12
 8002b70:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <MX_UART5_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <MX_UART5_Init+0x4c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002b7e:	4805      	ldr	r0, [pc, #20]	@ (8002b94 <MX_UART5_Init+0x4c>)
 8002b80:	f003 fd12 	bl	80065a8 <HAL_UART_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_UART5_Init+0x46>
    Error_Handler();
 8002b8a:	f7ff fc1a 	bl	80023c2 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200003a4 	.word	0x200003a4
 8002b98:	40005000 	.word	0x40005000

08002b9c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance          = USART1;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <MX_USART1_UART_Init+0x4c>)
 8002ba2:	4a12      	ldr	r2, [pc, #72]	@ (8002bec <MX_USART1_UART_Init+0x50>)
 8002ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 9600;
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <MX_USART1_UART_Init+0x4c>)
 8002ba8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8002bae:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <MX_USART1_UART_Init+0x4c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <MX_USART1_UART_Init+0x4c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 8002bba:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <MX_USART1_UART_Init+0x4c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 8002bc0:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <MX_USART1_UART_Init+0x4c>)
 8002bc2:	220c      	movs	r2, #12
 8002bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002bc6:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <MX_USART1_UART_Init+0x4c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <MX_USART1_UART_Init+0x4c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002bd2:	4805      	ldr	r0, [pc, #20]	@ (8002be8 <MX_USART1_UART_Init+0x4c>)
 8002bd4:	f003 fce8 	bl	80065a8 <HAL_UART_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_USART1_UART_Init+0x46>
    Error_Handler();
 8002bde:	f7ff fbf0 	bl	80023c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200003ec 	.word	0x200003ec
 8002bec:	40013800 	.word	0x40013800

08002bf0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <MX_USART2_UART_Init+0x4c>)
 8002bf6:	4a12      	ldr	r2, [pc, #72]	@ (8002c40 <MX_USART2_UART_Init+0x50>)
 8002bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 38400;
 8002bfa:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <MX_USART2_UART_Init+0x4c>)
 8002bfc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8002c02:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <MX_USART2_UART_Init+0x4c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <MX_USART2_UART_Init+0x4c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <MX_USART2_UART_Init+0x4c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8002c14:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <MX_USART2_UART_Init+0x4c>)
 8002c16:	220c      	movs	r2, #12
 8002c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <MX_USART2_UART_Init+0x4c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c20:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <MX_USART2_UART_Init+0x4c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002c26:	4805      	ldr	r0, [pc, #20]	@ (8002c3c <MX_USART2_UART_Init+0x4c>)
 8002c28:	f003 fcbe 	bl	80065a8 <HAL_UART_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8002c32:	f7ff fbc6 	bl	80023c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000434 	.word	0x20000434
 8002c40:	40004400 	.word	0x40004400

08002c44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance          = USART3;
 8002c48:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <MX_USART3_UART_Init+0x4c>)
 8002c4a:	4a12      	ldr	r2, [pc, #72]	@ (8002c94 <MX_USART3_UART_Init+0x50>)
 8002c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate     = 115200;
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <MX_USART3_UART_Init+0x4c>)
 8002c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <MX_USART3_UART_Init+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits     = UART_STOPBITS_1;
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <MX_USART3_UART_Init+0x4c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity       = UART_PARITY_NONE;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <MX_USART3_UART_Init+0x4c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode         = UART_MODE_TX_RX;
 8002c68:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <MX_USART3_UART_Init+0x4c>)
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <MX_USART3_UART_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <MX_USART3_UART_Init+0x4c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002c7a:	4805      	ldr	r0, [pc, #20]	@ (8002c90 <MX_USART3_UART_Init+0x4c>)
 8002c7c:	f003 fc94 	bl	80065a8 <HAL_UART_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8002c86:	f7ff fb9c 	bl	80023c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000047c 	.word	0x2000047c
 8002c94:	40004800 	.word	0x40004800

08002c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b092      	sub	sp, #72	@ 0x48
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
  if (uartHandle->Instance == UART4) {
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a8a      	ldr	r2, [pc, #552]	@ (8002edc <HAL_UART_MspInit+0x244>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d160      	bne.n	8002d7a <HAL_UART_MspInit+0xe2>
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002cb8:	4b89      	ldr	r3, [pc, #548]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	4a88      	ldr	r2, [pc, #544]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002cbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002cc2:	61d3      	str	r3, [r2, #28]
 8002cc4:	4b86      	ldr	r3, [pc, #536]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd0:	4b83      	ldr	r3, [pc, #524]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	4a82      	ldr	r2, [pc, #520]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002cd6:	f043 0310 	orr.w	r3, r3, #16
 8002cda:	6193      	str	r3, [r2, #24]
 8002cdc:	4b80      	ldr	r3, [pc, #512]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin   = GPIO_PIN_10;
 8002ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4879      	ldr	r0, [pc, #484]	@ (8002ee4 <HAL_UART_MspInit+0x24c>)
 8002cfe:	f001 f9f7 	bl	80040f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 8002d02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d06:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d14:	4619      	mov	r1, r3
 8002d16:	4873      	ldr	r0, [pc, #460]	@ (8002ee4 <HAL_UART_MspInit+0x24c>)
 8002d18:	f001 f9ea 	bl	80040f0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance                 = DMA2_Channel3;
 8002d1c:	4b72      	ldr	r3, [pc, #456]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d1e:	4a73      	ldr	r2, [pc, #460]	@ (8002eec <HAL_UART_MspInit+0x254>)
 8002d20:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002d22:	4b71      	ldr	r3, [pc, #452]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002d28:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002d2e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d30:	2280      	movs	r2, #128	@ 0x80
 8002d32:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d34:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode                = DMA_NORMAL;
 8002d40:	4b69      	ldr	r3, [pc, #420]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8002d46:	4b68      	ldr	r3, [pc, #416]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK) {
 8002d4c:	4866      	ldr	r0, [pc, #408]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d4e:	f000 fd4b 	bl	80037e8 <HAL_DMA_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002d58:	f7ff fb33 	bl	80023c2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a62      	ldr	r2, [pc, #392]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d62:	4a61      	ldr	r2, [pc, #388]	@ (8002ee8 <HAL_UART_MspInit+0x250>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6253      	str	r3, [r2, #36]	@ 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2034      	movs	r0, #52	@ 0x34
 8002d6e:	f000 fd04 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d72:	2034      	movs	r0, #52	@ 0x34
 8002d74:	f000 fd1d 	bl	80037b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d78:	e169      	b.n	800304e <HAL_UART_MspInit+0x3b6>
  } else if (uartHandle->Instance == UART5) {
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ef0 <HAL_UART_MspInit+0x258>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d145      	bne.n	8002e10 <HAL_UART_MspInit+0x178>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d84:	4b56      	ldr	r3, [pc, #344]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4a55      	ldr	r2, [pc, #340]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002d8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d8e:	61d3      	str	r3, [r2, #28]
 8002d90:	4b53      	ldr	r3, [pc, #332]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002da2:	f043 0310 	orr.w	r3, r3, #16
 8002da6:	6193      	str	r3, [r2, #24]
 8002da8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	4a49      	ldr	r2, [pc, #292]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002dba:	f043 0320 	orr.w	r3, r3, #32
 8002dbe:	6193      	str	r3, [r2, #24]
 8002dc0:	4b47      	ldr	r3, [pc, #284]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin   = GPIO_PIN_12;
 8002dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002dde:	4619      	mov	r1, r3
 8002de0:	4840      	ldr	r0, [pc, #256]	@ (8002ee4 <HAL_UART_MspInit+0x24c>)
 8002de2:	f001 f985 	bl	80040f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = GPIO_PIN_2;
 8002de6:	2304      	movs	r3, #4
 8002de8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dea:	2300      	movs	r3, #0
 8002dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002df6:	4619      	mov	r1, r3
 8002df8:	483e      	ldr	r0, [pc, #248]	@ (8002ef4 <HAL_UART_MspInit+0x25c>)
 8002dfa:	f001 f979 	bl	80040f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2100      	movs	r1, #0
 8002e02:	2035      	movs	r0, #53	@ 0x35
 8002e04:	f000 fcb9 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002e08:	2035      	movs	r0, #53	@ 0x35
 8002e0a:	f000 fcd2 	bl	80037b2 <HAL_NVIC_EnableIRQ>
}
 8002e0e:	e11e      	b.n	800304e <HAL_UART_MspInit+0x3b6>
  } else if (uartHandle->Instance == USART1) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a38      	ldr	r2, [pc, #224]	@ (8002ef8 <HAL_UART_MspInit+0x260>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d176      	bne.n	8002f08 <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4a30      	ldr	r2, [pc, #192]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e24:	6193      	str	r3, [r2, #24]
 8002e26:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e2e:	623b      	str	r3, [r7, #32]
 8002e30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6193      	str	r3, [r2, #24]
 8002e3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ee0 <HAL_UART_MspInit+0x248>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin   = AndroidSerial_TX_Pin;
 8002e4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e54:	2303      	movs	r3, #3
 8002e56:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(AndroidSerial_TX_GPIO_Port, &GPIO_InitStruct);
 8002e58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4827      	ldr	r0, [pc, #156]	@ (8002efc <HAL_UART_MspInit+0x264>)
 8002e60:	f001 f946 	bl	80040f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = AndroidSerial_RX_Pin;
 8002e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e68:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(AndroidSerial_RX_GPIO_Port, &GPIO_InitStruct);
 8002e72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e76:	4619      	mov	r1, r3
 8002e78:	4820      	ldr	r0, [pc, #128]	@ (8002efc <HAL_UART_MspInit+0x264>)
 8002e7a:	f001 f939 	bl	80040f0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8002e7e:	4b20      	ldr	r3, [pc, #128]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002e80:	4a20      	ldr	r2, [pc, #128]	@ (8002f04 <HAL_UART_MspInit+0x26c>)
 8002e82:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002e84:	4b1e      	ldr	r3, [pc, #120]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002e92:	2280      	movs	r2, #128	@ 0x80
 8002e94:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode                = DMA_NORMAL;
 8002ea2:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8002ea8:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK) {
 8002eae:	4814      	ldr	r0, [pc, #80]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002eb0:	f000 fc9a 	bl	80037e8 <HAL_DMA_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_UART_MspInit+0x226>
      Error_Handler();
 8002eba:	f7ff fa82 	bl	80023c2 <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8002f00 <HAL_UART_MspInit+0x268>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2025      	movs	r0, #37	@ 0x25
 8002ed0:	f000 fc53 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ed4:	2025      	movs	r0, #37	@ 0x25
 8002ed6:	f000 fc6c 	bl	80037b2 <HAL_NVIC_EnableIRQ>
}
 8002eda:	e0b8      	b.n	800304e <HAL_UART_MspInit+0x3b6>
 8002edc:	40004c00 	.word	0x40004c00
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40011000 	.word	0x40011000
 8002ee8:	200004c4 	.word	0x200004c4
 8002eec:	40020430 	.word	0x40020430
 8002ef0:	40005000 	.word	0x40005000
 8002ef4:	40011400 	.word	0x40011400
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	40010800 	.word	0x40010800
 8002f00:	20000508 	.word	0x20000508
 8002f04:	40020058 	.word	0x40020058
  } else if (uartHandle->Instance == USART2) {
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a52      	ldr	r2, [pc, #328]	@ (8003058 <HAL_UART_MspInit+0x3c0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d15e      	bne.n	8002fd0 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f12:	4b52      	ldr	r3, [pc, #328]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4a51      	ldr	r2, [pc, #324]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1c:	61d3      	str	r3, [r2, #28]
 8002f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	4a4b      	ldr	r2, [pc, #300]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	6193      	str	r3, [r2, #24]
 8002f36:	4b49      	ldr	r3, [pc, #292]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin   = DebugSerial_TX_Pin;
 8002f42:	2304      	movs	r3, #4
 8002f44:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(DebugSerial_TX_GPIO_Port, &GPIO_InitStruct);
 8002f4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f52:	4619      	mov	r1, r3
 8002f54:	4842      	ldr	r0, [pc, #264]	@ (8003060 <HAL_UART_MspInit+0x3c8>)
 8002f56:	f001 f8cb 	bl	80040f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = DebugSerial_RX_Pin;
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(DebugSerial_RX_GPIO_Port, &GPIO_InitStruct);
 8002f66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	483c      	ldr	r0, [pc, #240]	@ (8003060 <HAL_UART_MspInit+0x3c8>)
 8002f6e:	f001 f8bf 	bl	80040f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance                 = DMA1_Channel6;
 8002f72:	4b3c      	ldr	r3, [pc, #240]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002f74:	4a3c      	ldr	r2, [pc, #240]	@ (8003068 <HAL_UART_MspInit+0x3d0>)
 8002f76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002f78:	4b3a      	ldr	r3, [pc, #232]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002f7e:	4b39      	ldr	r3, [pc, #228]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002f84:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002f86:	2280      	movs	r2, #128	@ 0x80
 8002f88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f8a:	4b36      	ldr	r3, [pc, #216]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002f90:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode                = DMA_NORMAL;
 8002f96:	4b33      	ldr	r3, [pc, #204]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8002f9c:	4b31      	ldr	r3, [pc, #196]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8002fa2:	4830      	ldr	r0, [pc, #192]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002fa4:	f000 fc20 	bl	80037e8 <HAL_DMA_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8002fae:	f7ff fa08 	bl	80023c2 <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003064 <HAL_UART_MspInit+0x3cc>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2026      	movs	r0, #38	@ 0x26
 8002fc4:	f000 fbd9 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fc8:	2026      	movs	r0, #38	@ 0x26
 8002fca:	f000 fbf2 	bl	80037b2 <HAL_NVIC_EnableIRQ>
}
 8002fce:	e03e      	b.n	800304e <HAL_UART_MspInit+0x3b6>
  } else if (uartHandle->Instance == USART3) {
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a25      	ldr	r2, [pc, #148]	@ (800306c <HAL_UART_MspInit+0x3d4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d139      	bne.n	800304e <HAL_UART_MspInit+0x3b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fda:	4b20      	ldr	r3, [pc, #128]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4a1f      	ldr	r2, [pc, #124]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fe4:	61d3      	str	r3, [r2, #28]
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	4a19      	ldr	r2, [pc, #100]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	6193      	str	r3, [r2, #24]
 8002ffe:	4b17      	ldr	r3, [pc, #92]	@ (800305c <HAL_UART_MspInit+0x3c4>)
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin   = GPIO_PIN_10;
 800300a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800300e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003014:	2303      	movs	r3, #3
 8003016:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003018:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800301c:	4619      	mov	r1, r3
 800301e:	4814      	ldr	r0, [pc, #80]	@ (8003070 <HAL_UART_MspInit+0x3d8>)
 8003020:	f001 f866 	bl	80040f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 8003024:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003028:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302a:	2300      	movs	r3, #0
 800302c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003032:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003036:	4619      	mov	r1, r3
 8003038:	480d      	ldr	r0, [pc, #52]	@ (8003070 <HAL_UART_MspInit+0x3d8>)
 800303a:	f001 f859 	bl	80040f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	2027      	movs	r0, #39	@ 0x27
 8003044:	f000 fb99 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003048:	2027      	movs	r0, #39	@ 0x27
 800304a:	f000 fbb2 	bl	80037b2 <HAL_NVIC_EnableIRQ>
}
 800304e:	bf00      	nop
 8003050:	3748      	adds	r7, #72	@ 0x48
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40004400 	.word	0x40004400
 800305c:	40021000 	.word	0x40021000
 8003060:	40010800 	.word	0x40010800
 8003064:	2000054c 	.word	0x2000054c
 8003068:	4002006c 	.word	0x4002006c
 800306c:	40004800 	.word	0x40004800
 8003070:	40010c00 	.word	0x40010c00

08003074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003074:	f7ff fb50 	bl	8002718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003078:	480b      	ldr	r0, [pc, #44]	@ (80030a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800307a:	490c      	ldr	r1, [pc, #48]	@ (80030ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800307c:	4a0c      	ldr	r2, [pc, #48]	@ (80030b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003080:	e002      	b.n	8003088 <LoopCopyDataInit>

08003082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003086:	3304      	adds	r3, #4

08003088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800308a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800308c:	d3f9      	bcc.n	8003082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800308e:	4a09      	ldr	r2, [pc, #36]	@ (80030b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003090:	4c09      	ldr	r4, [pc, #36]	@ (80030b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003094:	e001      	b.n	800309a <LoopFillZerobss>

08003096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003098:	3204      	adds	r2, #4

0800309a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800309a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800309c:	d3fb      	bcc.n	8003096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800309e:	f006 fc11 	bl	80098c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030a2:	f7fe ffef 	bl	8002084 <main>
  bx lr
 80030a6:	4770      	bx	lr
  ldr r0, =_sdata
 80030a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80030b0:	0800b19c 	.word	0x0800b19c
  ldr r2, =_sbss
 80030b4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80030b8:	20000e60 	.word	0x20000e60

080030bc <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030bc:	e7fe      	b.n	80030bc <ADC1_2_IRQHandler>
	...

080030c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c4:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <HAL_Init+0x28>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a07      	ldr	r2, [pc, #28]	@ (80030e8 <HAL_Init+0x28>)
 80030ca:	f043 0310 	orr.w	r3, r3, #16
 80030ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d0:	2003      	movs	r0, #3
 80030d2:	f000 fb47 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d6:	200f      	movs	r0, #15
 80030d8:	f000 f808 	bl	80030ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030dc:	f7ff f978 	bl	80023d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000

080030ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f4:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <HAL_InitTick+0x54>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b12      	ldr	r3, [pc, #72]	@ (8003144 <HAL_InitTick+0x58>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003102:	fbb3 f3f1 	udiv	r3, r3, r1
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fb5f 	bl	80037ce <HAL_SYSTICK_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e00e      	b.n	8003138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0f      	cmp	r3, #15
 800311e:	d80a      	bhi.n	8003136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003120:	2200      	movs	r2, #0
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f000 fb27 	bl	800377a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800312c:	4a06      	ldr	r2, [pc, #24]	@ (8003148 <HAL_InitTick+0x5c>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000014 	.word	0x20000014
 8003144:	2000001c 	.word	0x2000001c
 8003148:	20000018 	.word	0x20000018

0800314c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003150:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <HAL_IncTick+0x1c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	4b05      	ldr	r3, [pc, #20]	@ (800316c <HAL_IncTick+0x20>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4413      	add	r3, r2
 800315c:	4a03      	ldr	r2, [pc, #12]	@ (800316c <HAL_IncTick+0x20>)
 800315e:	6013      	str	r3, [r2, #0]
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	2000001c 	.word	0x2000001c
 800316c:	20000590 	.word	0x20000590

08003170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return uwTick;
 8003174:	4b02      	ldr	r3, [pc, #8]	@ (8003180 <HAL_GetTick+0x10>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	20000590 	.word	0x20000590

08003184 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0ce      	b.n	8003344 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe fd86 	bl	8001cd4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f9bd 	bl	8003548 <ADC_ConversionStop_Disable>
 80031ce:	4603      	mov	r3, r0
 80031d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 80a9 	bne.w	8003332 <HAL_ADC_Init+0x1ae>
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f040 80a5 	bne.w	8003332 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031f0:	f023 0302 	bic.w	r3, r3, #2
 80031f4:	f043 0202 	orr.w	r2, r3, #2
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4951      	ldr	r1, [pc, #324]	@ (800334c <HAL_ADC_Init+0x1c8>)
 8003206:	428b      	cmp	r3, r1
 8003208:	d10a      	bne.n	8003220 <HAL_ADC_Init+0x9c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003212:	d002      	beq.n	800321a <HAL_ADC_Init+0x96>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	e004      	b.n	8003224 <HAL_ADC_Init+0xa0>
 800321a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800321e:	e001      	b.n	8003224 <HAL_ADC_Init+0xa0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003224:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7b1b      	ldrb	r3, [r3, #12]
 800322a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800322c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4313      	orrs	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323c:	d003      	beq.n	8003246 <HAL_ADC_Init+0xc2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <HAL_ADC_Init+0xc8>
 8003246:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800324a:	e000      	b.n	800324e <HAL_ADC_Init+0xca>
 800324c:	2300      	movs	r3, #0
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7d1b      	ldrb	r3, [r3, #20]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d119      	bne.n	8003290 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7b1b      	ldrb	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	3b01      	subs	r3, #1
 800326a:	035a      	lsls	r2, r3, #13
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	e00b      	b.n	8003290 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	4b29      	ldr	r3, [pc, #164]	@ (8003350 <HAL_ADC_Init+0x1cc>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c0:	d003      	beq.n	80032ca <HAL_ADC_Init+0x146>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d104      	bne.n	80032d4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	051b      	lsls	r3, r3, #20
 80032d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	4b19      	ldr	r3, [pc, #100]	@ (8003354 <HAL_ADC_Init+0x1d0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d10b      	bne.n	8003310 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800330e:	e018      	b.n	8003342 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003314:	f023 0312 	bic.w	r3, r3, #18
 8003318:	f043 0210 	orr.w	r2, r3, #16
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003330:	e007      	b.n	8003342 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003342:	7dfb      	ldrb	r3, [r7, #23]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40013c00 	.word	0x40013c00
 8003350:	ffe1f7fd 	.word	0xffe1f7fd
 8003354:	ff1f0efe 	.word	0xff1f0efe

08003358 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x20>
 8003374:	2302      	movs	r3, #2
 8003376:	e0dc      	b.n	8003532 <HAL_ADC_ConfigChannel+0x1da>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b06      	cmp	r3, #6
 8003386:	d81c      	bhi.n	80033c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	3b05      	subs	r3, #5
 800339a:	221f      	movs	r2, #31
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	4019      	ands	r1, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	3b05      	subs	r3, #5
 80033b4:	fa00 f203 	lsl.w	r2, r0, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	635a      	str	r2, [r3, #52]	@ 0x34
 80033c0:	e03c      	b.n	800343c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d81c      	bhi.n	8003404 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	3b23      	subs	r3, #35	@ 0x23
 80033dc:	221f      	movs	r2, #31
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	4019      	ands	r1, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	3b23      	subs	r3, #35	@ 0x23
 80033f6:	fa00 f203 	lsl.w	r2, r0, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	631a      	str	r2, [r3, #48]	@ 0x30
 8003402:	e01b      	b.n	800343c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	3b41      	subs	r3, #65	@ 0x41
 8003416:	221f      	movs	r2, #31
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	4019      	ands	r1, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	3b41      	subs	r3, #65	@ 0x41
 8003430:	fa00 f203 	lsl.w	r2, r0, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b09      	cmp	r3, #9
 8003442:	d91c      	bls.n	800347e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68d9      	ldr	r1, [r3, #12]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	3b1e      	subs	r3, #30
 8003456:	2207      	movs	r2, #7
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	4019      	ands	r1, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6898      	ldr	r0, [r3, #8]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	3b1e      	subs	r3, #30
 8003470:	fa00 f203 	lsl.w	r2, r0, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	60da      	str	r2, [r3, #12]
 800347c:	e019      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6919      	ldr	r1, [r3, #16]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	2207      	movs	r2, #7
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	4019      	ands	r1, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6898      	ldr	r0, [r3, #8]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	fa00 f203 	lsl.w	r2, r0, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d003      	beq.n	80034c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034be:	2b11      	cmp	r3, #17
 80034c0:	d132      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1d      	ldr	r2, [pc, #116]	@ (800353c <HAL_ADC_ConfigChannel+0x1e4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d125      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d126      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80034e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d11a      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034f2:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <HAL_ADC_ConfigChannel+0x1e8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a13      	ldr	r2, [pc, #76]	@ (8003544 <HAL_ADC_ConfigChannel+0x1ec>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	0c9a      	lsrs	r2, r3, #18
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003508:	e002      	b.n	8003510 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3b01      	subs	r3, #1
 800350e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f9      	bne.n	800350a <HAL_ADC_ConfigChannel+0x1b2>
 8003516:	e007      	b.n	8003528 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	40012400 	.word	0x40012400
 8003540:	20000014 	.word	0x20000014
 8003544:	431bde83 	.word	0x431bde83

08003548 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d12e      	bne.n	80035c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003572:	f7ff fdfd 	bl	8003170 <HAL_GetTick>
 8003576:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003578:	e01b      	b.n	80035b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800357a:	f7ff fdf9 	bl	8003170 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d914      	bls.n	80035b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10d      	bne.n	80035b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	f043 0210 	orr.w	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e007      	b.n	80035c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d0dc      	beq.n	800357a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <__NVIC_SetPriorityGrouping+0x44>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035e8:	4013      	ands	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035fe:	4a04      	ldr	r2, [pc, #16]	@ (8003610 <__NVIC_SetPriorityGrouping+0x44>)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	60d3      	str	r3, [r2, #12]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <__NVIC_GetPriorityGrouping+0x18>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	f003 0307 	and.w	r3, r3, #7
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	2b00      	cmp	r3, #0
 8003640:	db0b      	blt.n	800365a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	f003 021f 	and.w	r2, r3, #31
 8003648:	4906      	ldr	r1, [pc, #24]	@ (8003664 <__NVIC_EnableIRQ+0x34>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	2001      	movs	r0, #1
 8003652:	fa00 f202 	lsl.w	r2, r0, r2
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	e000e100 	.word	0xe000e100

08003668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003678:	2b00      	cmp	r3, #0
 800367a:	db0a      	blt.n	8003692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	490c      	ldr	r1, [pc, #48]	@ (80036b4 <__NVIC_SetPriority+0x4c>)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	440b      	add	r3, r1
 800368c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003690:	e00a      	b.n	80036a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4908      	ldr	r1, [pc, #32]	@ (80036b8 <__NVIC_SetPriority+0x50>)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3b04      	subs	r3, #4
 80036a0:	0112      	lsls	r2, r2, #4
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	440b      	add	r3, r1
 80036a6:	761a      	strb	r2, [r3, #24]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000e100 	.word	0xe000e100
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	@ 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f1c3 0307 	rsb	r3, r3, #7
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	bf28      	it	cs
 80036da:	2304      	movcs	r3, #4
 80036dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2b06      	cmp	r3, #6
 80036e4:	d902      	bls.n	80036ec <NVIC_EncodePriority+0x30>
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3b03      	subs	r3, #3
 80036ea:	e000      	b.n	80036ee <NVIC_EncodePriority+0x32>
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f0:	f04f 32ff 	mov.w	r2, #4294967295
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	401a      	ands	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003704:	f04f 31ff 	mov.w	r1, #4294967295
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	43d9      	mvns	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003714:	4313      	orrs	r3, r2
         );
}
 8003716:	4618      	mov	r0, r3
 8003718:	3724      	adds	r7, #36	@ 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003730:	d301      	bcc.n	8003736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003732:	2301      	movs	r3, #1
 8003734:	e00f      	b.n	8003756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003736:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <SysTick_Config+0x40>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373e:	210f      	movs	r1, #15
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f7ff ff90 	bl	8003668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003748:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <SysTick_Config+0x40>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374e:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <SysTick_Config+0x40>)
 8003750:	2207      	movs	r2, #7
 8003752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	e000e010 	.word	0xe000e010

08003764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff2d 	bl	80035cc <__NVIC_SetPriorityGrouping>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	4603      	mov	r3, r0
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800378c:	f7ff ff42 	bl	8003614 <__NVIC_GetPriorityGrouping>
 8003790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff90 	bl	80036bc <NVIC_EncodePriority>
 800379c:	4602      	mov	r2, r0
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff5f 	bl	8003668 <__NVIC_SetPriority>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4603      	mov	r3, r0
 80037ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff35 	bl	8003630 <__NVIC_EnableIRQ>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ffa2 	bl	8003720 <SysTick_Config>
 80037dc:	4603      	mov	r3, r0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e059      	b.n	80038b2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	4b2d      	ldr	r3, [pc, #180]	@ (80038bc <HAL_DMA_Init+0xd4>)
 8003806:	429a      	cmp	r2, r3
 8003808:	d80f      	bhi.n	800382a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	4b2b      	ldr	r3, [pc, #172]	@ (80038c0 <HAL_DMA_Init+0xd8>)
 8003812:	4413      	add	r3, r2
 8003814:	4a2b      	ldr	r2, [pc, #172]	@ (80038c4 <HAL_DMA_Init+0xdc>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	009a      	lsls	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a28      	ldr	r2, [pc, #160]	@ (80038c8 <HAL_DMA_Init+0xe0>)
 8003826:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003828:	e00e      	b.n	8003848 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	4b26      	ldr	r3, [pc, #152]	@ (80038cc <HAL_DMA_Init+0xe4>)
 8003832:	4413      	add	r3, r2
 8003834:	4a23      	ldr	r2, [pc, #140]	@ (80038c4 <HAL_DMA_Init+0xdc>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	009a      	lsls	r2, r3, #2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a22      	ldr	r2, [pc, #136]	@ (80038d0 <HAL_DMA_Init+0xe8>)
 8003846:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800385e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003862:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800386c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	40020407 	.word	0x40020407
 80038c0:	bffdfff8 	.word	0xbffdfff8
 80038c4:	cccccccd 	.word	0xcccccccd
 80038c8:	40020000 	.word	0x40020000
 80038cc:	bffdfbf8 	.word	0xbffdfbf8
 80038d0:	40020400 	.word	0x40020400

080038d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_DMA_Start_IT+0x20>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e04b      	b.n	800398c <HAL_DMA_Start_IT+0xb8>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d13a      	bne.n	800397e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fbb1 	bl	8004094 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 020e 	orr.w	r2, r2, #14
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e00f      	b.n	800396c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0204 	bic.w	r2, r2, #4
 800395a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 020a 	orr.w	r2, r2, #10
 800396a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e005      	b.n	800398a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003986:	2302      	movs	r3, #2
 8003988:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800398a:	7dfb      	ldrb	r3, [r7, #23]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d008      	beq.n	80039be <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2204      	movs	r2, #4
 80039b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e020      	b.n	8003a00 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 020e 	bic.w	r2, r2, #14
 80039cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e6:	2101      	movs	r1, #1
 80039e8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d005      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2204      	movs	r2, #4
 8003a28:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	e0d6      	b.n	8003bde <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 020e 	bic.w	r2, r2, #14
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b64      	ldr	r3, [pc, #400]	@ (8003be8 <HAL_DMA_Abort_IT+0x1dc>)
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d958      	bls.n	8003b0e <HAL_DMA_Abort_IT+0x102>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a62      	ldr	r2, [pc, #392]	@ (8003bec <HAL_DMA_Abort_IT+0x1e0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d04f      	beq.n	8003b06 <HAL_DMA_Abort_IT+0xfa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a61      	ldr	r2, [pc, #388]	@ (8003bf0 <HAL_DMA_Abort_IT+0x1e4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d048      	beq.n	8003b02 <HAL_DMA_Abort_IT+0xf6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5f      	ldr	r2, [pc, #380]	@ (8003bf4 <HAL_DMA_Abort_IT+0x1e8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d040      	beq.n	8003afc <HAL_DMA_Abort_IT+0xf0>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf8 <HAL_DMA_Abort_IT+0x1ec>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d038      	beq.n	8003af6 <HAL_DMA_Abort_IT+0xea>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a5c      	ldr	r2, [pc, #368]	@ (8003bfc <HAL_DMA_Abort_IT+0x1f0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d030      	beq.n	8003af0 <HAL_DMA_Abort_IT+0xe4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5b      	ldr	r2, [pc, #364]	@ (8003c00 <HAL_DMA_Abort_IT+0x1f4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d028      	beq.n	8003aea <HAL_DMA_Abort_IT+0xde>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a52      	ldr	r2, [pc, #328]	@ (8003be8 <HAL_DMA_Abort_IT+0x1dc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d020      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0xd8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a57      	ldr	r2, [pc, #348]	@ (8003c04 <HAL_DMA_Abort_IT+0x1f8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d019      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0xd4>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a55      	ldr	r2, [pc, #340]	@ (8003c08 <HAL_DMA_Abort_IT+0x1fc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d012      	beq.n	8003adc <HAL_DMA_Abort_IT+0xd0>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a54      	ldr	r2, [pc, #336]	@ (8003c0c <HAL_DMA_Abort_IT+0x200>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00a      	beq.n	8003ad6 <HAL_DMA_Abort_IT+0xca>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	@ (8003c10 <HAL_DMA_Abort_IT+0x204>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d102      	bne.n	8003ad0 <HAL_DMA_Abort_IT+0xc4>
 8003aca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ace:	e01b      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003ad0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ad4:	e018      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003ad6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ada:	e015      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003adc:	2310      	movs	r3, #16
 8003ade:	e013      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e011      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003ae4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ae8:	e00e      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003aea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003aee:	e00b      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003af0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003af4:	e008      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003afa:	e005      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b00:	e002      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003b02:	2310      	movs	r3, #16
 8003b04:	e000      	b.n	8003b08 <HAL_DMA_Abort_IT+0xfc>
 8003b06:	2301      	movs	r3, #1
 8003b08:	4a42      	ldr	r2, [pc, #264]	@ (8003c14 <HAL_DMA_Abort_IT+0x208>)
 8003b0a:	6053      	str	r3, [r2, #4]
 8003b0c:	e057      	b.n	8003bbe <HAL_DMA_Abort_IT+0x1b2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a36      	ldr	r2, [pc, #216]	@ (8003bec <HAL_DMA_Abort_IT+0x1e0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d04f      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x1ac>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a34      	ldr	r2, [pc, #208]	@ (8003bf0 <HAL_DMA_Abort_IT+0x1e4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d048      	beq.n	8003bb4 <HAL_DMA_Abort_IT+0x1a8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a33      	ldr	r2, [pc, #204]	@ (8003bf4 <HAL_DMA_Abort_IT+0x1e8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d040      	beq.n	8003bae <HAL_DMA_Abort_IT+0x1a2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a31      	ldr	r2, [pc, #196]	@ (8003bf8 <HAL_DMA_Abort_IT+0x1ec>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d038      	beq.n	8003ba8 <HAL_DMA_Abort_IT+0x19c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a30      	ldr	r2, [pc, #192]	@ (8003bfc <HAL_DMA_Abort_IT+0x1f0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d030      	beq.n	8003ba2 <HAL_DMA_Abort_IT+0x196>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2e      	ldr	r2, [pc, #184]	@ (8003c00 <HAL_DMA_Abort_IT+0x1f4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d028      	beq.n	8003b9c <HAL_DMA_Abort_IT+0x190>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a26      	ldr	r2, [pc, #152]	@ (8003be8 <HAL_DMA_Abort_IT+0x1dc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d020      	beq.n	8003b96 <HAL_DMA_Abort_IT+0x18a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2a      	ldr	r2, [pc, #168]	@ (8003c04 <HAL_DMA_Abort_IT+0x1f8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d019      	beq.n	8003b92 <HAL_DMA_Abort_IT+0x186>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a29      	ldr	r2, [pc, #164]	@ (8003c08 <HAL_DMA_Abort_IT+0x1fc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d012      	beq.n	8003b8e <HAL_DMA_Abort_IT+0x182>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a27      	ldr	r2, [pc, #156]	@ (8003c0c <HAL_DMA_Abort_IT+0x200>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00a      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x17c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a26      	ldr	r2, [pc, #152]	@ (8003c10 <HAL_DMA_Abort_IT+0x204>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d102      	bne.n	8003b82 <HAL_DMA_Abort_IT+0x176>
 8003b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b80:	e01b      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003b82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b86:	e018      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b8c:	e015      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003b8e:	2310      	movs	r3, #16
 8003b90:	e013      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e011      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003b96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b9a:	e00e      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003b9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003ba0:	e00b      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ba6:	e008      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bac:	e005      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bb2:	e002      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	e000      	b.n	8003bba <HAL_DMA_Abort_IT+0x1ae>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	4a17      	ldr	r2, [pc, #92]	@ (8003c18 <HAL_DMA_Abort_IT+0x20c>)
 8003bbc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
    } 
  }
  return status;
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40020080 	.word	0x40020080
 8003bec:	40020008 	.word	0x40020008
 8003bf0:	4002001c 	.word	0x4002001c
 8003bf4:	40020030 	.word	0x40020030
 8003bf8:	40020044 	.word	0x40020044
 8003bfc:	40020058 	.word	0x40020058
 8003c00:	4002006c 	.word	0x4002006c
 8003c04:	40020408 	.word	0x40020408
 8003c08:	4002041c 	.word	0x4002041c
 8003c0c:	40020430 	.word	0x40020430
 8003c10:	40020444 	.word	0x40020444
 8003c14:	40020400 	.word	0x40020400
 8003c18:	40020000 	.word	0x40020000

08003c1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	2204      	movs	r2, #4
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80f1 	beq.w	8003e28 <HAL_DMA_IRQHandler+0x20c>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80eb 	beq.w	8003e28 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d107      	bne.n	8003c70 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0204 	bic.w	r2, r2, #4
 8003c6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b5f      	ldr	r3, [pc, #380]	@ (8003df4 <HAL_DMA_IRQHandler+0x1d8>)
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d958      	bls.n	8003d2e <HAL_DMA_IRQHandler+0x112>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a5d      	ldr	r2, [pc, #372]	@ (8003df8 <HAL_DMA_IRQHandler+0x1dc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d04f      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x10a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003dfc <HAL_DMA_IRQHandler+0x1e0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d048      	beq.n	8003d22 <HAL_DMA_IRQHandler+0x106>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5a      	ldr	r2, [pc, #360]	@ (8003e00 <HAL_DMA_IRQHandler+0x1e4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d040      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x100>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a59      	ldr	r2, [pc, #356]	@ (8003e04 <HAL_DMA_IRQHandler+0x1e8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d038      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xfa>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a57      	ldr	r2, [pc, #348]	@ (8003e08 <HAL_DMA_IRQHandler+0x1ec>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d030      	beq.n	8003d10 <HAL_DMA_IRQHandler+0xf4>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a56      	ldr	r2, [pc, #344]	@ (8003e0c <HAL_DMA_IRQHandler+0x1f0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d028      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xee>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8003df4 <HAL_DMA_IRQHandler+0x1d8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d020      	beq.n	8003d04 <HAL_DMA_IRQHandler+0xe8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a52      	ldr	r2, [pc, #328]	@ (8003e10 <HAL_DMA_IRQHandler+0x1f4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d019      	beq.n	8003d00 <HAL_DMA_IRQHandler+0xe4>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a50      	ldr	r2, [pc, #320]	@ (8003e14 <HAL_DMA_IRQHandler+0x1f8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d012      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xe0>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a4f      	ldr	r2, [pc, #316]	@ (8003e18 <HAL_DMA_IRQHandler+0x1fc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00a      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xda>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8003e1c <HAL_DMA_IRQHandler+0x200>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d102      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0xd4>
 8003cea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003cee:	e01b      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003cf0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003cf4:	e018      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cfa:	e015      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003cfc:	2340      	movs	r3, #64	@ 0x40
 8003cfe:	e013      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003d00:	2304      	movs	r3, #4
 8003d02:	e011      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003d04:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003d08:	e00e      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003d0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d0e:	e00b      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003d10:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003d14:	e008      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003d16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d1a:	e005      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003d1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d20:	e002      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003d22:	2340      	movs	r3, #64	@ 0x40
 8003d24:	e000      	b.n	8003d28 <HAL_DMA_IRQHandler+0x10c>
 8003d26:	2304      	movs	r3, #4
 8003d28:	4a3d      	ldr	r2, [pc, #244]	@ (8003e20 <HAL_DMA_IRQHandler+0x204>)
 8003d2a:	6053      	str	r3, [r2, #4]
 8003d2c:	e057      	b.n	8003dde <HAL_DMA_IRQHandler+0x1c2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a31      	ldr	r2, [pc, #196]	@ (8003df8 <HAL_DMA_IRQHandler+0x1dc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d04f      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x1bc>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003dfc <HAL_DMA_IRQHandler+0x1e0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d048      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x1b8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2e      	ldr	r2, [pc, #184]	@ (8003e00 <HAL_DMA_IRQHandler+0x1e4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d040      	beq.n	8003dce <HAL_DMA_IRQHandler+0x1b2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2c      	ldr	r2, [pc, #176]	@ (8003e04 <HAL_DMA_IRQHandler+0x1e8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d038      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x1ac>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003e08 <HAL_DMA_IRQHandler+0x1ec>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d030      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x1a6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a29      	ldr	r2, [pc, #164]	@ (8003e0c <HAL_DMA_IRQHandler+0x1f0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d028      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x1a0>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a21      	ldr	r2, [pc, #132]	@ (8003df4 <HAL_DMA_IRQHandler+0x1d8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d020      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x19a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a25      	ldr	r2, [pc, #148]	@ (8003e10 <HAL_DMA_IRQHandler+0x1f4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d019      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x196>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a24      	ldr	r2, [pc, #144]	@ (8003e14 <HAL_DMA_IRQHandler+0x1f8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d012      	beq.n	8003dae <HAL_DMA_IRQHandler+0x192>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a22      	ldr	r2, [pc, #136]	@ (8003e18 <HAL_DMA_IRQHandler+0x1fc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00a      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x18c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a21      	ldr	r2, [pc, #132]	@ (8003e1c <HAL_DMA_IRQHandler+0x200>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d102      	bne.n	8003da2 <HAL_DMA_IRQHandler+0x186>
 8003d9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003da0:	e01b      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003da2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003da6:	e018      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003da8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dac:	e015      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003dae:	2340      	movs	r3, #64	@ 0x40
 8003db0:	e013      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003db2:	2304      	movs	r3, #4
 8003db4:	e011      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003db6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003dba:	e00e      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003dbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003dc0:	e00b      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003dc2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003dc6:	e008      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003dc8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003dcc:	e005      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dd2:	e002      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003dd4:	2340      	movs	r3, #64	@ 0x40
 8003dd6:	e000      	b.n	8003dda <HAL_DMA_IRQHandler+0x1be>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	4a12      	ldr	r2, [pc, #72]	@ (8003e24 <HAL_DMA_IRQHandler+0x208>)
 8003ddc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8136 	beq.w	8004054 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003df0:	e130      	b.n	8004054 <HAL_DMA_IRQHandler+0x438>
 8003df2:	bf00      	nop
 8003df4:	40020080 	.word	0x40020080
 8003df8:	40020008 	.word	0x40020008
 8003dfc:	4002001c 	.word	0x4002001c
 8003e00:	40020030 	.word	0x40020030
 8003e04:	40020044 	.word	0x40020044
 8003e08:	40020058 	.word	0x40020058
 8003e0c:	4002006c 	.word	0x4002006c
 8003e10:	40020408 	.word	0x40020408
 8003e14:	4002041c 	.word	0x4002041c
 8003e18:	40020430 	.word	0x40020430
 8003e1c:	40020444 	.word	0x40020444
 8003e20:	40020400 	.word	0x40020400
 8003e24:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80dd 	beq.w	8003ff4 <HAL_DMA_IRQHandler+0x3d8>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80d7 	beq.w	8003ff4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 020a 	bic.w	r2, r2, #10
 8003e62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	4b7b      	ldr	r3, [pc, #492]	@ (8004060 <HAL_DMA_IRQHandler+0x444>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d958      	bls.n	8003f2a <HAL_DMA_IRQHandler+0x30e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a79      	ldr	r2, [pc, #484]	@ (8004064 <HAL_DMA_IRQHandler+0x448>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d04f      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x306>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a78      	ldr	r2, [pc, #480]	@ (8004068 <HAL_DMA_IRQHandler+0x44c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d048      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x302>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a76      	ldr	r2, [pc, #472]	@ (800406c <HAL_DMA_IRQHandler+0x450>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d040      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2fc>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a75      	ldr	r2, [pc, #468]	@ (8004070 <HAL_DMA_IRQHandler+0x454>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d038      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x2f6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a73      	ldr	r2, [pc, #460]	@ (8004074 <HAL_DMA_IRQHandler+0x458>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d030      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x2f0>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a72      	ldr	r2, [pc, #456]	@ (8004078 <HAL_DMA_IRQHandler+0x45c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d028      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x2ea>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a69      	ldr	r2, [pc, #420]	@ (8004060 <HAL_DMA_IRQHandler+0x444>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d020      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x2e4>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800407c <HAL_DMA_IRQHandler+0x460>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d019      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2e0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6c      	ldr	r2, [pc, #432]	@ (8004080 <HAL_DMA_IRQHandler+0x464>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d012      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x2dc>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a6b      	ldr	r2, [pc, #428]	@ (8004084 <HAL_DMA_IRQHandler+0x468>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00a      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2d6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a69      	ldr	r2, [pc, #420]	@ (8004088 <HAL_DMA_IRQHandler+0x46c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d102      	bne.n	8003eec <HAL_DMA_IRQHandler+0x2d0>
 8003ee6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003eea:	e01b      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003eec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ef0:	e018      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ef6:	e015      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003ef8:	2320      	movs	r3, #32
 8003efa:	e013      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e011      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003f00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f04:	e00e      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003f06:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f0a:	e00b      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f10:	e008      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003f12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f16:	e005      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003f18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f1c:	e002      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003f1e:	2320      	movs	r3, #32
 8003f20:	e000      	b.n	8003f24 <HAL_DMA_IRQHandler+0x308>
 8003f22:	2302      	movs	r3, #2
 8003f24:	4a59      	ldr	r2, [pc, #356]	@ (800408c <HAL_DMA_IRQHandler+0x470>)
 8003f26:	6053      	str	r3, [r2, #4]
 8003f28:	e057      	b.n	8003fda <HAL_DMA_IRQHandler+0x3be>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8004064 <HAL_DMA_IRQHandler+0x448>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04f      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x3b8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a4b      	ldr	r2, [pc, #300]	@ (8004068 <HAL_DMA_IRQHandler+0x44c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d048      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x3b4>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a4a      	ldr	r2, [pc, #296]	@ (800406c <HAL_DMA_IRQHandler+0x450>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d040      	beq.n	8003fca <HAL_DMA_IRQHandler+0x3ae>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a48      	ldr	r2, [pc, #288]	@ (8004070 <HAL_DMA_IRQHandler+0x454>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d038      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x3a8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a47      	ldr	r2, [pc, #284]	@ (8004074 <HAL_DMA_IRQHandler+0x458>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d030      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x3a2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a45      	ldr	r2, [pc, #276]	@ (8004078 <HAL_DMA_IRQHandler+0x45c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d028      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x39c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a3d      	ldr	r2, [pc, #244]	@ (8004060 <HAL_DMA_IRQHandler+0x444>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d020      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x396>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a41      	ldr	r2, [pc, #260]	@ (800407c <HAL_DMA_IRQHandler+0x460>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d019      	beq.n	8003fae <HAL_DMA_IRQHandler+0x392>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a40      	ldr	r2, [pc, #256]	@ (8004080 <HAL_DMA_IRQHandler+0x464>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d012      	beq.n	8003faa <HAL_DMA_IRQHandler+0x38e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3e      	ldr	r2, [pc, #248]	@ (8004084 <HAL_DMA_IRQHandler+0x468>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x388>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3d      	ldr	r2, [pc, #244]	@ (8004088 <HAL_DMA_IRQHandler+0x46c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d102      	bne.n	8003f9e <HAL_DMA_IRQHandler+0x382>
 8003f98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f9c:	e01b      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003f9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fa2:	e018      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003fa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fa8:	e015      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003faa:	2320      	movs	r3, #32
 8003fac:	e013      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e011      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003fb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fb6:	e00e      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003fb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003fbc:	e00b      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003fbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fc2:	e008      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003fc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fc8:	e005      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003fca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fce:	e002      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	e000      	b.n	8003fd6 <HAL_DMA_IRQHandler+0x3ba>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	4a2e      	ldr	r2, [pc, #184]	@ (8004090 <HAL_DMA_IRQHandler+0x474>)
 8003fd8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d034      	beq.n	8004054 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ff2:	e02f      	b.n	8004054 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d028      	beq.n	8004056 <HAL_DMA_IRQHandler+0x43a>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d023      	beq.n	8004056 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 020e 	bic.w	r2, r2, #14
 800401c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004026:	2101      	movs	r1, #1
 8004028:	fa01 f202 	lsl.w	r2, r1, r2
 800402c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
    }
  }
  return;
 8004054:	bf00      	nop
 8004056:	bf00      	nop
}
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40020080 	.word	0x40020080
 8004064:	40020008 	.word	0x40020008
 8004068:	4002001c 	.word	0x4002001c
 800406c:	40020030 	.word	0x40020030
 8004070:	40020044 	.word	0x40020044
 8004074:	40020058 	.word	0x40020058
 8004078:	4002006c 	.word	0x4002006c
 800407c:	40020408 	.word	0x40020408
 8004080:	4002041c 	.word	0x4002041c
 8004084:	40020430 	.word	0x40020430
 8004088:	40020444 	.word	0x40020444
 800408c:	40020400 	.word	0x40020400
 8004090:	40020000 	.word	0x40020000

08004094 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040aa:	2101      	movs	r1, #1
 80040ac:	fa01 f202 	lsl.w	r2, r1, r2
 80040b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d108      	bne.n	80040d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040d2:	e007      	b.n	80040e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
	...

080040f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b08b      	sub	sp, #44	@ 0x2c
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040fa:	2300      	movs	r3, #0
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040fe:	2300      	movs	r3, #0
 8004100:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004102:	e179      	b.n	80043f8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004104:	2201      	movs	r2, #1
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	429a      	cmp	r2, r3
 800411e:	f040 8168 	bne.w	80043f2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4a96      	ldr	r2, [pc, #600]	@ (8004380 <HAL_GPIO_Init+0x290>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d05e      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
 800412c:	4a94      	ldr	r2, [pc, #592]	@ (8004380 <HAL_GPIO_Init+0x290>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d875      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 8004132:	4a94      	ldr	r2, [pc, #592]	@ (8004384 <HAL_GPIO_Init+0x294>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d058      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
 8004138:	4a92      	ldr	r2, [pc, #584]	@ (8004384 <HAL_GPIO_Init+0x294>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d86f      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 800413e:	4a92      	ldr	r2, [pc, #584]	@ (8004388 <HAL_GPIO_Init+0x298>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d052      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
 8004144:	4a90      	ldr	r2, [pc, #576]	@ (8004388 <HAL_GPIO_Init+0x298>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d869      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 800414a:	4a90      	ldr	r2, [pc, #576]	@ (800438c <HAL_GPIO_Init+0x29c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d04c      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
 8004150:	4a8e      	ldr	r2, [pc, #568]	@ (800438c <HAL_GPIO_Init+0x29c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d863      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 8004156:	4a8e      	ldr	r2, [pc, #568]	@ (8004390 <HAL_GPIO_Init+0x2a0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d046      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
 800415c:	4a8c      	ldr	r2, [pc, #560]	@ (8004390 <HAL_GPIO_Init+0x2a0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d85d      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 8004162:	2b12      	cmp	r3, #18
 8004164:	d82a      	bhi.n	80041bc <HAL_GPIO_Init+0xcc>
 8004166:	2b12      	cmp	r3, #18
 8004168:	d859      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 800416a:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <HAL_GPIO_Init+0x80>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041eb 	.word	0x080041eb
 8004174:	080041c5 	.word	0x080041c5
 8004178:	080041d7 	.word	0x080041d7
 800417c:	08004219 	.word	0x08004219
 8004180:	0800421f 	.word	0x0800421f
 8004184:	0800421f 	.word	0x0800421f
 8004188:	0800421f 	.word	0x0800421f
 800418c:	0800421f 	.word	0x0800421f
 8004190:	0800421f 	.word	0x0800421f
 8004194:	0800421f 	.word	0x0800421f
 8004198:	0800421f 	.word	0x0800421f
 800419c:	0800421f 	.word	0x0800421f
 80041a0:	0800421f 	.word	0x0800421f
 80041a4:	0800421f 	.word	0x0800421f
 80041a8:	0800421f 	.word	0x0800421f
 80041ac:	0800421f 	.word	0x0800421f
 80041b0:	0800421f 	.word	0x0800421f
 80041b4:	080041cd 	.word	0x080041cd
 80041b8:	080041e1 	.word	0x080041e1
 80041bc:	4a75      	ldr	r2, [pc, #468]	@ (8004394 <HAL_GPIO_Init+0x2a4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041c2:	e02c      	b.n	800421e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	623b      	str	r3, [r7, #32]
          break;
 80041ca:	e029      	b.n	8004220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	3304      	adds	r3, #4
 80041d2:	623b      	str	r3, [r7, #32]
          break;
 80041d4:	e024      	b.n	8004220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	3308      	adds	r3, #8
 80041dc:	623b      	str	r3, [r7, #32]
          break;
 80041de:	e01f      	b.n	8004220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	330c      	adds	r3, #12
 80041e6:	623b      	str	r3, [r7, #32]
          break;
 80041e8:	e01a      	b.n	8004220 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041f2:	2304      	movs	r3, #4
 80041f4:	623b      	str	r3, [r7, #32]
          break;
 80041f6:	e013      	b.n	8004220 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004200:	2308      	movs	r3, #8
 8004202:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	611a      	str	r2, [r3, #16]
          break;
 800420a:	e009      	b.n	8004220 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800420c:	2308      	movs	r3, #8
 800420e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	615a      	str	r2, [r3, #20]
          break;
 8004216:	e003      	b.n	8004220 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004218:	2300      	movs	r3, #0
 800421a:	623b      	str	r3, [r7, #32]
          break;
 800421c:	e000      	b.n	8004220 <HAL_GPIO_Init+0x130>
          break;
 800421e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2bff      	cmp	r3, #255	@ 0xff
 8004224:	d801      	bhi.n	800422a <HAL_GPIO_Init+0x13a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	e001      	b.n	800422e <HAL_GPIO_Init+0x13e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2bff      	cmp	r3, #255	@ 0xff
 8004234:	d802      	bhi.n	800423c <HAL_GPIO_Init+0x14c>
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	e002      	b.n	8004242 <HAL_GPIO_Init+0x152>
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	3b08      	subs	r3, #8
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	210f      	movs	r1, #15
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	6a39      	ldr	r1, [r7, #32]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	431a      	orrs	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80c1 	beq.w	80043f2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004270:	4b49      	ldr	r3, [pc, #292]	@ (8004398 <HAL_GPIO_Init+0x2a8>)
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	4a48      	ldr	r2, [pc, #288]	@ (8004398 <HAL_GPIO_Init+0x2a8>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6193      	str	r3, [r2, #24]
 800427c:	4b46      	ldr	r3, [pc, #280]	@ (8004398 <HAL_GPIO_Init+0x2a8>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004288:	4a44      	ldr	r2, [pc, #272]	@ (800439c <HAL_GPIO_Init+0x2ac>)
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	3302      	adds	r3, #2
 8004290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004294:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	220f      	movs	r2, #15
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3c      	ldr	r2, [pc, #240]	@ (80043a0 <HAL_GPIO_Init+0x2b0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d01f      	beq.n	80042f4 <HAL_GPIO_Init+0x204>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3b      	ldr	r2, [pc, #236]	@ (80043a4 <HAL_GPIO_Init+0x2b4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d019      	beq.n	80042f0 <HAL_GPIO_Init+0x200>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3a      	ldr	r2, [pc, #232]	@ (80043a8 <HAL_GPIO_Init+0x2b8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <HAL_GPIO_Init+0x1fc>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a39      	ldr	r2, [pc, #228]	@ (80043ac <HAL_GPIO_Init+0x2bc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00d      	beq.n	80042e8 <HAL_GPIO_Init+0x1f8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a38      	ldr	r2, [pc, #224]	@ (80043b0 <HAL_GPIO_Init+0x2c0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <HAL_GPIO_Init+0x1f4>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a37      	ldr	r2, [pc, #220]	@ (80043b4 <HAL_GPIO_Init+0x2c4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d101      	bne.n	80042e0 <HAL_GPIO_Init+0x1f0>
 80042dc:	2305      	movs	r3, #5
 80042de:	e00a      	b.n	80042f6 <HAL_GPIO_Init+0x206>
 80042e0:	2306      	movs	r3, #6
 80042e2:	e008      	b.n	80042f6 <HAL_GPIO_Init+0x206>
 80042e4:	2304      	movs	r3, #4
 80042e6:	e006      	b.n	80042f6 <HAL_GPIO_Init+0x206>
 80042e8:	2303      	movs	r3, #3
 80042ea:	e004      	b.n	80042f6 <HAL_GPIO_Init+0x206>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e002      	b.n	80042f6 <HAL_GPIO_Init+0x206>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <HAL_GPIO_Init+0x206>
 80042f4:	2300      	movs	r3, #0
 80042f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f8:	f002 0203 	and.w	r2, r2, #3
 80042fc:	0092      	lsls	r2, r2, #2
 80042fe:	4093      	lsls	r3, r2
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004306:	4925      	ldr	r1, [pc, #148]	@ (800439c <HAL_GPIO_Init+0x2ac>)
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	089b      	lsrs	r3, r3, #2
 800430c:	3302      	adds	r3, #2
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d006      	beq.n	800432e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004320:	4b25      	ldr	r3, [pc, #148]	@ (80043b8 <HAL_GPIO_Init+0x2c8>)
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	4924      	ldr	r1, [pc, #144]	@ (80043b8 <HAL_GPIO_Init+0x2c8>)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]
 800432c:	e006      	b.n	800433c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800432e:	4b22      	ldr	r3, [pc, #136]	@ (80043b8 <HAL_GPIO_Init+0x2c8>)
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	43db      	mvns	r3, r3
 8004336:	4920      	ldr	r1, [pc, #128]	@ (80043b8 <HAL_GPIO_Init+0x2c8>)
 8004338:	4013      	ands	r3, r2
 800433a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d006      	beq.n	8004356 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004348:	4b1b      	ldr	r3, [pc, #108]	@ (80043b8 <HAL_GPIO_Init+0x2c8>)
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	491a      	ldr	r1, [pc, #104]	@ (80043b8 <HAL_GPIO_Init+0x2c8>)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	4313      	orrs	r3, r2
 8004352:	60cb      	str	r3, [r1, #12]
 8004354:	e006      	b.n	8004364 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004356:	4b18      	ldr	r3, [pc, #96]	@ (80043b8 <HAL_GPIO_Init+0x2c8>)
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	43db      	mvns	r3, r3
 800435e:	4916      	ldr	r1, [pc, #88]	@ (80043b8 <HAL_GPIO_Init+0x2c8>)
 8004360:	4013      	ands	r3, r2
 8004362:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d025      	beq.n	80043bc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004370:	4b11      	ldr	r3, [pc, #68]	@ (80043b8 <HAL_GPIO_Init+0x2c8>)
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	4910      	ldr	r1, [pc, #64]	@ (80043b8 <HAL_GPIO_Init+0x2c8>)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
 800437c:	e025      	b.n	80043ca <HAL_GPIO_Init+0x2da>
 800437e:	bf00      	nop
 8004380:	10320000 	.word	0x10320000
 8004384:	10310000 	.word	0x10310000
 8004388:	10220000 	.word	0x10220000
 800438c:	10210000 	.word	0x10210000
 8004390:	10120000 	.word	0x10120000
 8004394:	10110000 	.word	0x10110000
 8004398:	40021000 	.word	0x40021000
 800439c:	40010000 	.word	0x40010000
 80043a0:	40010800 	.word	0x40010800
 80043a4:	40010c00 	.word	0x40010c00
 80043a8:	40011000 	.word	0x40011000
 80043ac:	40011400 	.word	0x40011400
 80043b0:	40011800 	.word	0x40011800
 80043b4:	40011c00 	.word	0x40011c00
 80043b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043bc:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <HAL_GPIO_Init+0x324>)
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	4913      	ldr	r1, [pc, #76]	@ (8004414 <HAL_GPIO_Init+0x324>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004414 <HAL_GPIO_Init+0x324>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	490e      	ldr	r1, [pc, #56]	@ (8004414 <HAL_GPIO_Init+0x324>)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
 80043e2:	e006      	b.n	80043f2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <HAL_GPIO_Init+0x324>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	4909      	ldr	r1, [pc, #36]	@ (8004414 <HAL_GPIO_Init+0x324>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	3301      	adds	r3, #1
 80043f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	f47f ae7e 	bne.w	8004104 <HAL_GPIO_Init+0x14>
  }
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	372c      	adds	r7, #44	@ 0x2c
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	40010400 	.word	0x40010400

08004418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	e001      	b.n	800443a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	807b      	strh	r3, [r7, #2]
 8004452:	4613      	mov	r3, r2
 8004454:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004456:	787b      	ldrb	r3, [r7, #1]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800445c:	887a      	ldrh	r2, [r7, #2]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004462:	e003      	b.n	800446c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004464:	887b      	ldrh	r3, [r7, #2]
 8004466:	041a      	lsls	r2, r3, #16
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	611a      	str	r2, [r3, #16]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
	...

08004478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e12b      	b.n	80046e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd fd58 	bl	8001f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2224      	movs	r2, #36	@ 0x24
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044dc:	f000 fcdc 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 80044e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4a81      	ldr	r2, [pc, #516]	@ (80046ec <HAL_I2C_Init+0x274>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d807      	bhi.n	80044fc <HAL_I2C_Init+0x84>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a80      	ldr	r2, [pc, #512]	@ (80046f0 <HAL_I2C_Init+0x278>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	bf94      	ite	ls
 80044f4:	2301      	movls	r3, #1
 80044f6:	2300      	movhi	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e006      	b.n	800450a <HAL_I2C_Init+0x92>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a7d      	ldr	r2, [pc, #500]	@ (80046f4 <HAL_I2C_Init+0x27c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	bf94      	ite	ls
 8004504:	2301      	movls	r3, #1
 8004506:	2300      	movhi	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e0e7      	b.n	80046e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a78      	ldr	r2, [pc, #480]	@ (80046f8 <HAL_I2C_Init+0x280>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	0c9b      	lsrs	r3, r3, #18
 800451c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4a6a      	ldr	r2, [pc, #424]	@ (80046ec <HAL_I2C_Init+0x274>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d802      	bhi.n	800454c <HAL_I2C_Init+0xd4>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	3301      	adds	r3, #1
 800454a:	e009      	b.n	8004560 <HAL_I2C_Init+0xe8>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	4a69      	ldr	r2, [pc, #420]	@ (80046fc <HAL_I2C_Init+0x284>)
 8004558:	fba2 2303 	umull	r2, r3, r2, r3
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	3301      	adds	r3, #1
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	430b      	orrs	r3, r1
 8004566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004572:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	495c      	ldr	r1, [pc, #368]	@ (80046ec <HAL_I2C_Init+0x274>)
 800457c:	428b      	cmp	r3, r1
 800457e:	d819      	bhi.n	80045b4 <HAL_I2C_Init+0x13c>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1e59      	subs	r1, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	fbb1 f3f3 	udiv	r3, r1, r3
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004594:	400b      	ands	r3, r1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_I2C_Init+0x138>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1e59      	subs	r1, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ae:	e051      	b.n	8004654 <HAL_I2C_Init+0x1dc>
 80045b0:	2304      	movs	r3, #4
 80045b2:	e04f      	b.n	8004654 <HAL_I2C_Init+0x1dc>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d111      	bne.n	80045e0 <HAL_I2C_Init+0x168>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1e58      	subs	r0, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	440b      	add	r3, r1
 80045ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ce:	3301      	adds	r3, #1
 80045d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e012      	b.n	8004606 <HAL_I2C_Init+0x18e>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1e58      	subs	r0, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6859      	ldr	r1, [r3, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	0099      	lsls	r1, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045f6:	3301      	adds	r3, #1
 80045f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_I2C_Init+0x196>
 800460a:	2301      	movs	r3, #1
 800460c:	e022      	b.n	8004654 <HAL_I2C_Init+0x1dc>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10e      	bne.n	8004634 <HAL_I2C_Init+0x1bc>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1e58      	subs	r0, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6859      	ldr	r1, [r3, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	440b      	add	r3, r1
 8004624:	fbb0 f3f3 	udiv	r3, r0, r3
 8004628:	3301      	adds	r3, #1
 800462a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004632:	e00f      	b.n	8004654 <HAL_I2C_Init+0x1dc>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	1e58      	subs	r0, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	0099      	lsls	r1, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	fbb0 f3f3 	udiv	r3, r0, r3
 800464a:	3301      	adds	r3, #1
 800464c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004650:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	6809      	ldr	r1, [r1, #0]
 8004658:	4313      	orrs	r3, r2
 800465a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004682:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6911      	ldr	r1, [r2, #16]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68d2      	ldr	r2, [r2, #12]
 800468e:	4311      	orrs	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	430b      	orrs	r3, r1
 8004696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	000186a0 	.word	0x000186a0
 80046f0:	001e847f 	.word	0x001e847f
 80046f4:	003d08ff 	.word	0x003d08ff
 80046f8:	431bde83 	.word	0x431bde83
 80046fc:	10624dd3 	.word	0x10624dd3

08004700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e272      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 8087 	beq.w	800482e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004720:	4b92      	ldr	r3, [pc, #584]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	2b04      	cmp	r3, #4
 800472a:	d00c      	beq.n	8004746 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800472c:	4b8f      	ldr	r3, [pc, #572]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 030c 	and.w	r3, r3, #12
 8004734:	2b08      	cmp	r3, #8
 8004736:	d112      	bne.n	800475e <HAL_RCC_OscConfig+0x5e>
 8004738:	4b8c      	ldr	r3, [pc, #560]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004744:	d10b      	bne.n	800475e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004746:	4b89      	ldr	r3, [pc, #548]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d06c      	beq.n	800482c <HAL_RCC_OscConfig+0x12c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d168      	bne.n	800482c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e24c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004766:	d106      	bne.n	8004776 <HAL_RCC_OscConfig+0x76>
 8004768:	4b80      	ldr	r3, [pc, #512]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a7f      	ldr	r2, [pc, #508]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 800476e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	e02e      	b.n	80047d4 <HAL_RCC_OscConfig+0xd4>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0x98>
 800477e:	4b7b      	ldr	r3, [pc, #492]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7a      	ldr	r2, [pc, #488]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b78      	ldr	r3, [pc, #480]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a77      	ldr	r2, [pc, #476]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e01d      	b.n	80047d4 <HAL_RCC_OscConfig+0xd4>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047a0:	d10c      	bne.n	80047bc <HAL_RCC_OscConfig+0xbc>
 80047a2:	4b72      	ldr	r3, [pc, #456]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a71      	ldr	r2, [pc, #452]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80047a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	4b6f      	ldr	r3, [pc, #444]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a6e      	ldr	r2, [pc, #440]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e00b      	b.n	80047d4 <HAL_RCC_OscConfig+0xd4>
 80047bc:	4b6b      	ldr	r3, [pc, #428]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a6a      	ldr	r2, [pc, #424]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80047c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	4b68      	ldr	r3, [pc, #416]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a67      	ldr	r2, [pc, #412]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80047ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d013      	beq.n	8004804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047dc:	f7fe fcc8 	bl	8003170 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e4:	f7fe fcc4 	bl	8003170 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b64      	cmp	r3, #100	@ 0x64
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e200      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	4b5d      	ldr	r3, [pc, #372]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCC_OscConfig+0xe4>
 8004802:	e014      	b.n	800482e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004804:	f7fe fcb4 	bl	8003170 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800480c:	f7fe fcb0 	bl	8003170 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	@ 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e1ec      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481e:	4b53      	ldr	r3, [pc, #332]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x10c>
 800482a:	e000      	b.n	800482e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800482c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d063      	beq.n	8004902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800483a:	4b4c      	ldr	r3, [pc, #304]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00b      	beq.n	800485e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004846:	4b49      	ldr	r3, [pc, #292]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	2b08      	cmp	r3, #8
 8004850:	d11c      	bne.n	800488c <HAL_RCC_OscConfig+0x18c>
 8004852:	4b46      	ldr	r3, [pc, #280]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d116      	bne.n	800488c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485e:	4b43      	ldr	r3, [pc, #268]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <HAL_RCC_OscConfig+0x176>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d001      	beq.n	8004876 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e1c0      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004876:	4b3d      	ldr	r3, [pc, #244]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4939      	ldr	r1, [pc, #228]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488a:	e03a      	b.n	8004902 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d020      	beq.n	80048d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004894:	4b36      	ldr	r3, [pc, #216]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489a:	f7fe fc69 	bl	8003170 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a2:	f7fe fc65 	bl	8003170 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e1a1      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b4:	4b2d      	ldr	r3, [pc, #180]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c0:	4b2a      	ldr	r3, [pc, #168]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4927      	ldr	r1, [pc, #156]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	600b      	str	r3, [r1, #0]
 80048d4:	e015      	b.n	8004902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048d6:	4b26      	ldr	r3, [pc, #152]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fe fc48 	bl	8003170 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e4:	f7fe fc44 	bl	8003170 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e180      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f6:	4b1d      	ldr	r3, [pc, #116]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d03a      	beq.n	8004984 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d019      	beq.n	800494a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004916:	4b17      	ldr	r3, [pc, #92]	@ (8004974 <HAL_RCC_OscConfig+0x274>)
 8004918:	2201      	movs	r2, #1
 800491a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491c:	f7fe fc28 	bl	8003170 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004924:	f7fe fc24 	bl	8003170 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e160      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004936:	4b0d      	ldr	r3, [pc, #52]	@ (800496c <HAL_RCC_OscConfig+0x26c>)
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004942:	2001      	movs	r0, #1
 8004944:	f000 fad0 	bl	8004ee8 <RCC_Delay>
 8004948:	e01c      	b.n	8004984 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800494a:	4b0a      	ldr	r3, [pc, #40]	@ (8004974 <HAL_RCC_OscConfig+0x274>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004950:	f7fe fc0e 	bl	8003170 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004956:	e00f      	b.n	8004978 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004958:	f7fe fc0a 	bl	8003170 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d908      	bls.n	8004978 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e146      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000
 8004970:	42420000 	.word	0x42420000
 8004974:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004978:	4b92      	ldr	r3, [pc, #584]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e9      	bne.n	8004958 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80a6 	beq.w	8004ade <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004996:	4b8b      	ldr	r3, [pc, #556]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10d      	bne.n	80049be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a2:	4b88      	ldr	r3, [pc, #544]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	4a87      	ldr	r2, [pc, #540]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ac:	61d3      	str	r3, [r2, #28]
 80049ae:	4b85      	ldr	r3, [pc, #532]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049be:	4b82      	ldr	r3, [pc, #520]	@ (8004bc8 <HAL_RCC_OscConfig+0x4c8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d118      	bne.n	80049fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ca:	4b7f      	ldr	r3, [pc, #508]	@ (8004bc8 <HAL_RCC_OscConfig+0x4c8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a7e      	ldr	r2, [pc, #504]	@ (8004bc8 <HAL_RCC_OscConfig+0x4c8>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d6:	f7fe fbcb 	bl	8003170 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049de:	f7fe fbc7 	bl	8003170 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b64      	cmp	r3, #100	@ 0x64
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e103      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f0:	4b75      	ldr	r3, [pc, #468]	@ (8004bc8 <HAL_RCC_OscConfig+0x4c8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_OscConfig+0x312>
 8004a04:	4b6f      	ldr	r3, [pc, #444]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	4a6e      	ldr	r2, [pc, #440]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	6213      	str	r3, [r2, #32]
 8004a10:	e02d      	b.n	8004a6e <HAL_RCC_OscConfig+0x36e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x334>
 8004a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	4a69      	ldr	r2, [pc, #420]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	6213      	str	r3, [r2, #32]
 8004a26:	4b67      	ldr	r3, [pc, #412]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	4a66      	ldr	r2, [pc, #408]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	f023 0304 	bic.w	r3, r3, #4
 8004a30:	6213      	str	r3, [r2, #32]
 8004a32:	e01c      	b.n	8004a6e <HAL_RCC_OscConfig+0x36e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b05      	cmp	r3, #5
 8004a3a:	d10c      	bne.n	8004a56 <HAL_RCC_OscConfig+0x356>
 8004a3c:	4b61      	ldr	r3, [pc, #388]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	4a60      	ldr	r2, [pc, #384]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a42:	f043 0304 	orr.w	r3, r3, #4
 8004a46:	6213      	str	r3, [r2, #32]
 8004a48:	4b5e      	ldr	r3, [pc, #376]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	4a5d      	ldr	r2, [pc, #372]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	6213      	str	r3, [r2, #32]
 8004a54:	e00b      	b.n	8004a6e <HAL_RCC_OscConfig+0x36e>
 8004a56:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4a5a      	ldr	r2, [pc, #360]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	6213      	str	r3, [r2, #32]
 8004a62:	4b58      	ldr	r3, [pc, #352]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	4a57      	ldr	r2, [pc, #348]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a68:	f023 0304 	bic.w	r3, r3, #4
 8004a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d015      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a76:	f7fe fb7b 	bl	8003170 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7e:	f7fe fb77 	bl	8003170 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e0b1      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a94:	4b4b      	ldr	r3, [pc, #300]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0ee      	beq.n	8004a7e <HAL_RCC_OscConfig+0x37e>
 8004aa0:	e014      	b.n	8004acc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa2:	f7fe fb65 	bl	8003170 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aaa:	f7fe fb61 	bl	8003170 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e09b      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac0:	4b40      	ldr	r3, [pc, #256]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1ee      	bne.n	8004aaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d105      	bne.n	8004ade <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	4a3b      	ldr	r2, [pc, #236]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 8087 	beq.w	8004bf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ae8:	4b36      	ldr	r3, [pc, #216]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d061      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d146      	bne.n	8004b8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afc:	4b33      	ldr	r3, [pc, #204]	@ (8004bcc <HAL_RCC_OscConfig+0x4cc>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b02:	f7fe fb35 	bl	8003170 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0a:	f7fe fb31 	bl	8003170 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e06d      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1c:	4b29      	ldr	r3, [pc, #164]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f0      	bne.n	8004b0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b30:	d108      	bne.n	8004b44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b32:	4b24      	ldr	r3, [pc, #144]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	4921      	ldr	r1, [pc, #132]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b44:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a19      	ldr	r1, [r3, #32]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	430b      	orrs	r3, r1
 8004b56:	491b      	ldr	r1, [pc, #108]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bcc <HAL_RCC_OscConfig+0x4cc>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fe fb05 	bl	8003170 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6a:	f7fe fb01 	bl	8003170 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e03d      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b7c:	4b11      	ldr	r3, [pc, #68]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x46a>
 8004b88:	e035      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8a:	4b10      	ldr	r3, [pc, #64]	@ (8004bcc <HAL_RCC_OscConfig+0x4cc>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b90:	f7fe faee 	bl	8003170 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b98:	f7fe faea 	bl	8003170 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e026      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004baa:	4b06      	ldr	r3, [pc, #24]	@ (8004bc4 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x498>
 8004bb6:	e01e      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e019      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40007000 	.word	0x40007000
 8004bcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <HAL_RCC_OscConfig+0x500>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000

08004c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0d0      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c18:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d910      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c26:	4b67      	ldr	r3, [pc, #412]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 0207 	bic.w	r2, r3, #7
 8004c2e:	4965      	ldr	r1, [pc, #404]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b63      	ldr	r3, [pc, #396]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b8      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c60:	4b59      	ldr	r3, [pc, #356]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4a58      	ldr	r2, [pc, #352]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4b53      	ldr	r3, [pc, #332]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b50      	ldr	r3, [pc, #320]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	494d      	ldr	r1, [pc, #308]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d040      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b47      	ldr	r3, [pc, #284]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d115      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc2:	4b41      	ldr	r3, [pc, #260]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e073      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e06b      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce2:	4b39      	ldr	r3, [pc, #228]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f023 0203 	bic.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4936      	ldr	r1, [pc, #216]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf4:	f7fe fa3c 	bl	8003170 <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfc:	f7fe fa38 	bl	8003170 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e053      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	4b2d      	ldr	r3, [pc, #180]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 020c 	and.w	r2, r3, #12
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1eb      	bne.n	8004cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d24:	4b27      	ldr	r3, [pc, #156]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d210      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b24      	ldr	r3, [pc, #144]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 0207 	bic.w	r2, r3, #7
 8004d3a:	4922      	ldr	r1, [pc, #136]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e032      	b.n	8004dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b19      	ldr	r3, [pc, #100]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4916      	ldr	r1, [pc, #88]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d7e:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	490e      	ldr	r1, [pc, #56]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d92:	f000 f821 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	490a      	ldr	r1, [pc, #40]	@ (8004dcc <HAL_RCC_ClockConfig+0x1c8>)
 8004da4:	5ccb      	ldrb	r3, [r1, r3]
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a09      	ldr	r2, [pc, #36]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dae:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe f99a 	bl	80030ec <HAL_InitTick>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40022000 	.word	0x40022000
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	0800af0c 	.word	0x0800af0c
 8004dd0:	20000014 	.word	0x20000014
 8004dd4:	20000018 	.word	0x20000018

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	2300      	movs	r3, #0
 8004dec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004df2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x94>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d002      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0x30>
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d003      	beq.n	8004e0e <HAL_RCC_GetSysClockFreq+0x36>
 8004e06:	e027      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e08:	4b19      	ldr	r3, [pc, #100]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e0a:	613b      	str	r3, [r7, #16]
      break;
 8004e0c:	e027      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	0c9b      	lsrs	r3, r3, #18
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	4a17      	ldr	r2, [pc, #92]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e18:	5cd3      	ldrb	r3, [r2, r3]
 8004e1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d010      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e26:	4b11      	ldr	r3, [pc, #68]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x94>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	0c5b      	lsrs	r3, r3, #17
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	4a11      	ldr	r2, [pc, #68]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e32:	5cd3      	ldrb	r3, [r2, r3]
 8004e34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a0d      	ldr	r2, [pc, #52]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e3a:	fb03 f202 	mul.w	r2, r3, r2
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	e004      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e4c:	fb02 f303 	mul.w	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	613b      	str	r3, [r7, #16]
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004e5a:	613b      	str	r3, [r7, #16]
      break;
 8004e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5e:	693b      	ldr	r3, [r7, #16]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	00b71b00 	.word	0x00b71b00
 8004e74:	0800af24 	.word	0x0800af24
 8004e78:	0800af34 	.word	0x0800af34
 8004e7c:	003d0900 	.word	0x003d0900
 8004e80:	007a1200 	.word	0x007a1200

08004e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e88:	4b02      	ldr	r3, [pc, #8]	@ (8004e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr
 8004e94:	20000014 	.word	0x20000014

08004e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e9c:	f7ff fff2 	bl	8004e84 <HAL_RCC_GetHCLKFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4903      	ldr	r1, [pc, #12]	@ (8004ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eae:	5ccb      	ldrb	r3, [r1, r3]
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	0800af1c 	.word	0x0800af1c

08004ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ec4:	f7ff ffde 	bl	8004e84 <HAL_RCC_GetHCLKFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	0adb      	lsrs	r3, r3, #11
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	4903      	ldr	r1, [pc, #12]	@ (8004ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	0800af1c 	.word	0x0800af1c

08004ee8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8004f1c <RCC_Delay+0x34>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8004f20 <RCC_Delay+0x38>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	0a5b      	lsrs	r3, r3, #9
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f04:	bf00      	nop
  }
  while (Delay --);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	60fa      	str	r2, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f9      	bne.n	8004f04 <RCC_Delay+0x1c>
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	20000014 	.word	0x20000014
 8004f20:	10624dd3 	.word	0x10624dd3

08004f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d07d      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f40:	2300      	movs	r3, #0
 8004f42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f44:	4b4f      	ldr	r3, [pc, #316]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10d      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f50:	4b4c      	ldr	r3, [pc, #304]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	4a4b      	ldr	r2, [pc, #300]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	61d3      	str	r3, [r2, #28]
 8004f5c:	4b49      	ldr	r3, [pc, #292]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6c:	4b46      	ldr	r3, [pc, #280]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d118      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f78:	4b43      	ldr	r3, [pc, #268]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a42      	ldr	r2, [pc, #264]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f84:	f7fe f8f4 	bl	8003170 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8a:	e008      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8c:	f7fe f8f0 	bl	8003170 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b64      	cmp	r3, #100	@ 0x64
 8004f98:	d901      	bls.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e06d      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004faa:	4b36      	ldr	r3, [pc, #216]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d02e      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d027      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fde:	4a29      	ldr	r2, [pc, #164]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d014      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fee:	f7fe f8bf 	bl	8003170 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff4:	e00a      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff6:	f7fe f8bb 	bl	8003170 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005004:	4293      	cmp	r3, r2
 8005006:	d901      	bls.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e036      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500c:	4b1d      	ldr	r3, [pc, #116]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0ee      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005018:	4b1a      	ldr	r3, [pc, #104]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4917      	ldr	r1, [pc, #92]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005026:	4313      	orrs	r3, r2
 8005028:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d105      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005030:	4b14      	ldr	r3, [pc, #80]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	4a13      	ldr	r2, [pc, #76]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005048:	4b0e      	ldr	r3, [pc, #56]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	490b      	ldr	r1, [pc, #44]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005056:	4313      	orrs	r3, r2
 8005058:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	d008      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005066:	4b07      	ldr	r3, [pc, #28]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4904      	ldr	r1, [pc, #16]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005074:	4313      	orrs	r3, r2
 8005076:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000
 8005088:	40007000 	.word	0x40007000
 800508c:	42420440 	.word	0x42420440

08005090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e041      	b.n	8005126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fd fc4e 	bl	8002958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f000 fdb4 	bl	8005c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d001      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e04e      	b.n	80051e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a22      	ldr	r2, [pc, #136]	@ (80051f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d022      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a21      	ldr	r2, [pc, #132]	@ (80051f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d01d      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517c:	d018      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1d      	ldr	r2, [pc, #116]	@ (80051f8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1b      	ldr	r2, [pc, #108]	@ (80051fc <HAL_TIM_Base_Start_IT+0xcc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00e      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1a      	ldr	r2, [pc, #104]	@ (8005200 <HAL_TIM_Base_Start_IT+0xd0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <HAL_TIM_Base_Start_IT+0xd4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a17      	ldr	r2, [pc, #92]	@ (8005208 <HAL_TIM_Base_Start_IT+0xd8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d111      	bne.n	80051d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b06      	cmp	r3, #6
 80051c0:	d010      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	e007      	b.n	80051e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr
 80051f0:	40012c00 	.word	0x40012c00
 80051f4:	40013400 	.word	0x40013400
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00
 8005204:	40014c00 	.word	0x40014c00
 8005208:	40001800 	.word	0x40001800

0800520c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e041      	b.n	80052a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fd fbf2 	bl	8002a1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f000 fcf6 	bl	8005c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e041      	b.n	8005340 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d106      	bne.n	80052d6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f839 	bl	8005348 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2202      	movs	r2, #2
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f000 fca7 	bl	8005c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr
	...

0800535c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d104      	bne.n	800537a <HAL_TIM_IC_Start_IT+0x1e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005376:	b2db      	uxtb	r3, r3
 8005378:	e013      	b.n	80053a2 <HAL_TIM_IC_Start_IT+0x46>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d104      	bne.n	800538a <HAL_TIM_IC_Start_IT+0x2e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e00b      	b.n	80053a2 <HAL_TIM_IC_Start_IT+0x46>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d104      	bne.n	800539a <HAL_TIM_IC_Start_IT+0x3e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005396:	b2db      	uxtb	r3, r3
 8005398:	e003      	b.n	80053a2 <HAL_TIM_IC_Start_IT+0x46>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <HAL_TIM_IC_Start_IT+0x58>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	e013      	b.n	80053dc <HAL_TIM_IC_Start_IT+0x80>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d104      	bne.n	80053c4 <HAL_TIM_IC_Start_IT+0x68>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	e00b      	b.n	80053dc <HAL_TIM_IC_Start_IT+0x80>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d104      	bne.n	80053d4 <HAL_TIM_IC_Start_IT+0x78>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e003      	b.n	80053dc <HAL_TIM_IC_Start_IT+0x80>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053de:	7bbb      	ldrb	r3, [r7, #14]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d102      	bne.n	80053ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80053e4:	7b7b      	ldrb	r3, [r7, #13]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d001      	beq.n	80053ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e0cc      	b.n	8005588 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_IC_Start_IT+0xa2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053fc:	e013      	b.n	8005426 <HAL_TIM_IC_Start_IT+0xca>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b04      	cmp	r3, #4
 8005402:	d104      	bne.n	800540e <HAL_TIM_IC_Start_IT+0xb2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800540c:	e00b      	b.n	8005426 <HAL_TIM_IC_Start_IT+0xca>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d104      	bne.n	800541e <HAL_TIM_IC_Start_IT+0xc2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800541c:	e003      	b.n	8005426 <HAL_TIM_IC_Start_IT+0xca>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_TIM_IC_Start_IT+0xda>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005434:	e013      	b.n	800545e <HAL_TIM_IC_Start_IT+0x102>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d104      	bne.n	8005446 <HAL_TIM_IC_Start_IT+0xea>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005444:	e00b      	b.n	800545e <HAL_TIM_IC_Start_IT+0x102>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d104      	bne.n	8005456 <HAL_TIM_IC_Start_IT+0xfa>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005454:	e003      	b.n	800545e <HAL_TIM_IC_Start_IT+0x102>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b0c      	cmp	r3, #12
 8005462:	d841      	bhi.n	80054e8 <HAL_TIM_IC_Start_IT+0x18c>
 8005464:	a201      	add	r2, pc, #4	@ (adr r2, 800546c <HAL_TIM_IC_Start_IT+0x110>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	080054a1 	.word	0x080054a1
 8005470:	080054e9 	.word	0x080054e9
 8005474:	080054e9 	.word	0x080054e9
 8005478:	080054e9 	.word	0x080054e9
 800547c:	080054b3 	.word	0x080054b3
 8005480:	080054e9 	.word	0x080054e9
 8005484:	080054e9 	.word	0x080054e9
 8005488:	080054e9 	.word	0x080054e9
 800548c:	080054c5 	.word	0x080054c5
 8005490:	080054e9 	.word	0x080054e9
 8005494:	080054e9 	.word	0x080054e9
 8005498:	080054e9 	.word	0x080054e9
 800549c:	080054d7 	.word	0x080054d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0202 	orr.w	r2, r2, #2
 80054ae:	60da      	str	r2, [r3, #12]
      break;
 80054b0:	e01d      	b.n	80054ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0204 	orr.w	r2, r2, #4
 80054c0:	60da      	str	r2, [r3, #12]
      break;
 80054c2:	e014      	b.n	80054ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0208 	orr.w	r2, r2, #8
 80054d2:	60da      	str	r2, [r3, #12]
      break;
 80054d4:	e00b      	b.n	80054ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0210 	orr.w	r2, r2, #16
 80054e4:	60da      	str	r2, [r3, #12]
      break;
 80054e6:	e002      	b.n	80054ee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      break;
 80054ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d148      	bne.n	8005586 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2201      	movs	r2, #1
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 ffa2 	bl	8006446 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a22      	ldr	r2, [pc, #136]	@ (8005590 <HAL_TIM_IC_Start_IT+0x234>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <HAL_TIM_IC_Start_IT+0x1f6>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a20      	ldr	r2, [pc, #128]	@ (8005594 <HAL_TIM_IC_Start_IT+0x238>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01d      	beq.n	8005552 <HAL_TIM_IC_Start_IT+0x1f6>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800551e:	d018      	beq.n	8005552 <HAL_TIM_IC_Start_IT+0x1f6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <HAL_TIM_IC_Start_IT+0x23c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <HAL_TIM_IC_Start_IT+0x1f6>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <HAL_TIM_IC_Start_IT+0x240>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <HAL_TIM_IC_Start_IT+0x1f6>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a19      	ldr	r2, [pc, #100]	@ (80055a0 <HAL_TIM_IC_Start_IT+0x244>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_TIM_IC_Start_IT+0x1f6>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a18      	ldr	r2, [pc, #96]	@ (80055a4 <HAL_TIM_IC_Start_IT+0x248>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_TIM_IC_Start_IT+0x1f6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a16      	ldr	r2, [pc, #88]	@ (80055a8 <HAL_TIM_IC_Start_IT+0x24c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d111      	bne.n	8005576 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b06      	cmp	r3, #6
 8005562:	d010      	beq.n	8005586 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	e007      	b.n	8005586 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0201 	orr.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40013400 	.word	0x40013400
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	40014c00 	.word	0x40014c00
 80055a8:	40001800 	.word	0x40001800

080055ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0202 	mvn.w	r2, #2
 80055d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fc ffea 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fb05 	bl	8005c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fb0b 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b04      	cmp	r3, #4
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0204 	mvn.w	r2, #4
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc ffc0 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fadb 	bl	8005c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fae1 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b08      	cmp	r3, #8
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0208 	mvn.w	r2, #8
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2204      	movs	r2, #4
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc ff96 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fab1 	bl	8005c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fab7 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0210 	mvn.w	r2, #16
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2208      	movs	r2, #8
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fc ff6c 	bl	80025c8 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa87 	bl	8005c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa8d 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0201 	mvn.w	r2, #1
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fc fa6e 	bl	8001c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573a:	2b80      	cmp	r3, #128	@ 0x80
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005748:	2b80      	cmp	r3, #128	@ 0x80
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 ff1d 	bl	8006596 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005766:	2b40      	cmp	r3, #64	@ 0x40
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005774:	2b40      	cmp	r3, #64	@ 0x40
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa51 	bl	8005c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0220 	mvn.w	r2, #32
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fee8 	bl	8006584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_TIM_IC_ConfigChannel+0x1e>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e088      	b.n	80058ec <HAL_TIM_IC_ConfigChannel+0x130>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d11b      	bne.n	8005820 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80057f8:	f000 fc6a 	bl	80060d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 020c 	bic.w	r2, r2, #12
 800580a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6999      	ldr	r1, [r3, #24]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	619a      	str	r2, [r3, #24]
 800581e:	e060      	b.n	80058e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b04      	cmp	r3, #4
 8005824:	d11c      	bne.n	8005860 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005836:	f000 fceb 	bl	8006210 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699a      	ldr	r2, [r3, #24]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005848:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6999      	ldr	r1, [r3, #24]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	021a      	lsls	r2, r3, #8
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	619a      	str	r2, [r3, #24]
 800585e:	e040      	b.n	80058e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b08      	cmp	r3, #8
 8005864:	d11b      	bne.n	800589e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005876:	f000 fd36 	bl	80062e6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 020c 	bic.w	r2, r2, #12
 8005888:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69d9      	ldr	r1, [r3, #28]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	61da      	str	r2, [r3, #28]
 800589c:	e021      	b.n	80058e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b0c      	cmp	r3, #12
 80058a2:	d11c      	bne.n	80058de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80058b4:	f000 fd52 	bl	800635c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69da      	ldr	r2, [r3, #28]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80058c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69d9      	ldr	r1, [r3, #28]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	61da      	str	r2, [r3, #28]
 80058dc:	e001      	b.n	80058e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800590e:	2302      	movs	r3, #2
 8005910:	e0ae      	b.n	8005a70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b0c      	cmp	r3, #12
 800591e:	f200 809f 	bhi.w	8005a60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005922:	a201      	add	r2, pc, #4	@ (adr r2, 8005928 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	0800595d 	.word	0x0800595d
 800592c:	08005a61 	.word	0x08005a61
 8005930:	08005a61 	.word	0x08005a61
 8005934:	08005a61 	.word	0x08005a61
 8005938:	0800599d 	.word	0x0800599d
 800593c:	08005a61 	.word	0x08005a61
 8005940:	08005a61 	.word	0x08005a61
 8005944:	08005a61 	.word	0x08005a61
 8005948:	080059df 	.word	0x080059df
 800594c:	08005a61 	.word	0x08005a61
 8005950:	08005a61 	.word	0x08005a61
 8005954:	08005a61 	.word	0x08005a61
 8005958:	08005a1f 	.word	0x08005a1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fa08 	bl	8005d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0208 	orr.w	r2, r2, #8
 8005976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0204 	bic.w	r2, r2, #4
 8005986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6999      	ldr	r1, [r3, #24]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	619a      	str	r2, [r3, #24]
      break;
 800599a:	e064      	b.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fa58 	bl	8005e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6999      	ldr	r1, [r3, #24]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	021a      	lsls	r2, r3, #8
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	619a      	str	r2, [r3, #24]
      break;
 80059dc:	e043      	b.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 faab 	bl	8005f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69da      	ldr	r2, [r3, #28]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0208 	orr.w	r2, r2, #8
 80059f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0204 	bic.w	r2, r2, #4
 8005a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69d9      	ldr	r1, [r3, #28]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	61da      	str	r2, [r3, #28]
      break;
 8005a1c:	e023      	b.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 faff 	bl	8006028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69d9      	ldr	r1, [r3, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	021a      	lsls	r2, r3, #8
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	61da      	str	r2, [r3, #28]
      break;
 8005a5e:	e002      	b.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
      break;
 8005a64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_TIM_ConfigClockSource+0x1c>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e0b4      	b.n	8005bfe <HAL_TIM_ConfigClockSource+0x186>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005acc:	d03e      	beq.n	8005b4c <HAL_TIM_ConfigClockSource+0xd4>
 8005ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad2:	f200 8087 	bhi.w	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ada:	f000 8086 	beq.w	8005bea <HAL_TIM_ConfigClockSource+0x172>
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae2:	d87f      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b70      	cmp	r3, #112	@ 0x70
 8005ae6:	d01a      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0xa6>
 8005ae8:	2b70      	cmp	r3, #112	@ 0x70
 8005aea:	d87b      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b60      	cmp	r3, #96	@ 0x60
 8005aee:	d050      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0x11a>
 8005af0:	2b60      	cmp	r3, #96	@ 0x60
 8005af2:	d877      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005af4:	2b50      	cmp	r3, #80	@ 0x50
 8005af6:	d03c      	beq.n	8005b72 <HAL_TIM_ConfigClockSource+0xfa>
 8005af8:	2b50      	cmp	r3, #80	@ 0x50
 8005afa:	d873      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005afc:	2b40      	cmp	r3, #64	@ 0x40
 8005afe:	d058      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x13a>
 8005b00:	2b40      	cmp	r3, #64	@ 0x40
 8005b02:	d86f      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005b04:	2b30      	cmp	r3, #48	@ 0x30
 8005b06:	d064      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b08:	2b30      	cmp	r3, #48	@ 0x30
 8005b0a:	d86b      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d060      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d867      	bhi.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d05c      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b18:	2b10      	cmp	r3, #16
 8005b1a:	d05a      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b1c:	e062      	b.n	8005be4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b2e:	f000 fc6b 	bl	8006408 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	609a      	str	r2, [r3, #8]
      break;
 8005b4a:	e04f      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b5c:	f000 fc54 	bl	8006408 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b6e:	609a      	str	r2, [r3, #8]
      break;
 8005b70:	e03c      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f000 fb18 	bl	80061b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2150      	movs	r1, #80	@ 0x50
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fc22 	bl	80063d4 <TIM_ITRx_SetConfig>
      break;
 8005b90:	e02c      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f000 fb72 	bl	8006288 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2160      	movs	r1, #96	@ 0x60
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fc12 	bl	80063d4 <TIM_ITRx_SetConfig>
      break;
 8005bb0:	e01c      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f000 faf8 	bl	80061b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2140      	movs	r1, #64	@ 0x40
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fc02 	bl	80063d4 <TIM_ITRx_SetConfig>
      break;
 8005bd0:	e00c      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f000 fbf9 	bl	80063d4 <TIM_ITRx_SetConfig>
      break;
 8005be2:	e003      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]
      break;
 8005be8:	e000      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d4c <TIM_Base_SetConfig+0x110>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3e      	ldr	r2, [pc, #248]	@ (8005d50 <TIM_Base_SetConfig+0x114>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00f      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c62:	d00b      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a3b      	ldr	r2, [pc, #236]	@ (8005d54 <TIM_Base_SetConfig+0x118>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d007      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8005d58 <TIM_Base_SetConfig+0x11c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a39      	ldr	r2, [pc, #228]	@ (8005d5c <TIM_Base_SetConfig+0x120>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d108      	bne.n	8005c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2e      	ldr	r2, [pc, #184]	@ (8005d4c <TIM_Base_SetConfig+0x110>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d02b      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2d      	ldr	r2, [pc, #180]	@ (8005d50 <TIM_Base_SetConfig+0x114>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d027      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca4:	d023      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d54 <TIM_Base_SetConfig+0x118>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d01f      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a29      	ldr	r2, [pc, #164]	@ (8005d58 <TIM_Base_SetConfig+0x11c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01b      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a28      	ldr	r2, [pc, #160]	@ (8005d5c <TIM_Base_SetConfig+0x120>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d017      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a27      	ldr	r2, [pc, #156]	@ (8005d60 <TIM_Base_SetConfig+0x124>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a26      	ldr	r2, [pc, #152]	@ (8005d64 <TIM_Base_SetConfig+0x128>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00f      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a25      	ldr	r2, [pc, #148]	@ (8005d68 <TIM_Base_SetConfig+0x12c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00b      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a24      	ldr	r2, [pc, #144]	@ (8005d6c <TIM_Base_SetConfig+0x130>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d007      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a23      	ldr	r2, [pc, #140]	@ (8005d70 <TIM_Base_SetConfig+0x134>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a22      	ldr	r2, [pc, #136]	@ (8005d74 <TIM_Base_SetConfig+0x138>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d108      	bne.n	8005d00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a09      	ldr	r2, [pc, #36]	@ (8005d4c <TIM_Base_SetConfig+0x110>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d003      	beq.n	8005d34 <TIM_Base_SetConfig+0xf8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a08      	ldr	r2, [pc, #32]	@ (8005d50 <TIM_Base_SetConfig+0x114>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d103      	bne.n	8005d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	615a      	str	r2, [r3, #20]
}
 8005d42:	bf00      	nop
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr
 8005d4c:	40012c00 	.word	0x40012c00
 8005d50:	40013400 	.word	0x40013400
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40014c00 	.word	0x40014c00
 8005d64:	40015000 	.word	0x40015000
 8005d68:	40015400 	.word	0x40015400
 8005d6c:	40001800 	.word	0x40001800
 8005d70:	40001c00 	.word	0x40001c00
 8005d74:	40002000 	.word	0x40002000

08005d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f023 0201 	bic.w	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0303 	bic.w	r3, r3, #3
 8005dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f023 0302 	bic.w	r3, r3, #2
 8005dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a20      	ldr	r2, [pc, #128]	@ (8005e50 <TIM_OC1_SetConfig+0xd8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC1_SetConfig+0x64>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e54 <TIM_OC1_SetConfig+0xdc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d10c      	bne.n	8005df6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f023 0308 	bic.w	r3, r3, #8
 8005de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f023 0304 	bic.w	r3, r3, #4
 8005df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a15      	ldr	r2, [pc, #84]	@ (8005e50 <TIM_OC1_SetConfig+0xd8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_OC1_SetConfig+0x8e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a14      	ldr	r2, [pc, #80]	@ (8005e54 <TIM_OC1_SetConfig+0xdc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d111      	bne.n	8005e2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40013400 	.word	0x40013400

08005e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f023 0210 	bic.w	r2, r3, #16
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f023 0320 	bic.w	r3, r3, #32
 8005ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a21      	ldr	r2, [pc, #132]	@ (8005f38 <TIM_OC2_SetConfig+0xe0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_OC2_SetConfig+0x68>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a20      	ldr	r2, [pc, #128]	@ (8005f3c <TIM_OC2_SetConfig+0xe4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10d      	bne.n	8005edc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a16      	ldr	r2, [pc, #88]	@ (8005f38 <TIM_OC2_SetConfig+0xe0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_OC2_SetConfig+0x94>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a15      	ldr	r2, [pc, #84]	@ (8005f3c <TIM_OC2_SetConfig+0xe4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d113      	bne.n	8005f14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40013400 	.word	0x40013400

08005f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0303 	bic.w	r3, r3, #3
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a21      	ldr	r2, [pc, #132]	@ (8006020 <TIM_OC3_SetConfig+0xe0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d003      	beq.n	8005fa6 <TIM_OC3_SetConfig+0x66>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a20      	ldr	r2, [pc, #128]	@ (8006024 <TIM_OC3_SetConfig+0xe4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d10d      	bne.n	8005fc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a16      	ldr	r2, [pc, #88]	@ (8006020 <TIM_OC3_SetConfig+0xe0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_OC3_SetConfig+0x92>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a15      	ldr	r2, [pc, #84]	@ (8006024 <TIM_OC3_SetConfig+0xe4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d113      	bne.n	8005ffa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	621a      	str	r2, [r3, #32]
}
 8006014:	bf00      	nop
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40013400 	.word	0x40013400

08006028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800605e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	031b      	lsls	r3, r3, #12
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a11      	ldr	r2, [pc, #68]	@ (80060c8 <TIM_OC4_SetConfig+0xa0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC4_SetConfig+0x68>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a10      	ldr	r2, [pc, #64]	@ (80060cc <TIM_OC4_SetConfig+0xa4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d109      	bne.n	80060a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006096:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	019b      	lsls	r3, r3, #6
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40013400 	.word	0x40013400

080060d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	f023 0201 	bic.w	r2, r3, #1
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a27      	ldr	r2, [pc, #156]	@ (8006198 <TIM_TI1_SetConfig+0xc8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01b      	beq.n	8006136 <TIM_TI1_SetConfig+0x66>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a26      	ldr	r2, [pc, #152]	@ (800619c <TIM_TI1_SetConfig+0xcc>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d017      	beq.n	8006136 <TIM_TI1_SetConfig+0x66>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800610c:	d013      	beq.n	8006136 <TIM_TI1_SetConfig+0x66>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4a23      	ldr	r2, [pc, #140]	@ (80061a0 <TIM_TI1_SetConfig+0xd0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00f      	beq.n	8006136 <TIM_TI1_SetConfig+0x66>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4a22      	ldr	r2, [pc, #136]	@ (80061a4 <TIM_TI1_SetConfig+0xd4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00b      	beq.n	8006136 <TIM_TI1_SetConfig+0x66>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a21      	ldr	r2, [pc, #132]	@ (80061a8 <TIM_TI1_SetConfig+0xd8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <TIM_TI1_SetConfig+0x66>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a20      	ldr	r2, [pc, #128]	@ (80061ac <TIM_TI1_SetConfig+0xdc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_TI1_SetConfig+0x66>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a1f      	ldr	r2, [pc, #124]	@ (80061b0 <TIM_TI1_SetConfig+0xe0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d101      	bne.n	800613a <TIM_TI1_SetConfig+0x6a>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <TIM_TI1_SetConfig+0x6c>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d008      	beq.n	8006152 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	e003      	b.n	800615a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	b2db      	uxtb	r3, r3
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f023 030a 	bic.w	r3, r3, #10
 8006174:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f003 030a 	and.w	r3, r3, #10
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40013400 	.word	0x40013400
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40000800 	.word	0x40000800
 80061a8:	40000c00 	.word	0x40000c00
 80061ac:	40014c00 	.word	0x40014c00
 80061b0:	40001800 	.word	0x40001800

080061b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	f023 0201 	bic.w	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 030a 	bic.w	r3, r3, #10
 80061f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f023 0210 	bic.w	r2, r3, #16
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800623c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800624e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	031b      	lsls	r3, r3, #12
 8006254:	b29b      	uxth	r3, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006262:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f023 0210 	bic.w	r2, r3, #16
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	031b      	lsls	r3, r3, #12
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	621a      	str	r2, [r3, #32]
}
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b087      	sub	sp, #28
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006322:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	b2db      	uxtb	r3, r3
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006336:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006388:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	021b      	lsls	r3, r3, #8
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800639a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	031b      	lsls	r3, r3, #12
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	031b      	lsls	r3, r3, #12
 80063b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr

080063d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f043 0307 	orr.w	r3, r3, #7
 80063f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	609a      	str	r2, [r3, #8]
}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	bc80      	pop	{r7}
 8006406:	4770      	bx	lr

08006408 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006422:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	021a      	lsls	r2, r3, #8
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	431a      	orrs	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4313      	orrs	r3, r2
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	609a      	str	r2, [r3, #8]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr

08006446 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006446:	b480      	push	{r7}
 8006448:	b087      	sub	sp, #28
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	2201      	movs	r2, #1
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a1a      	ldr	r2, [r3, #32]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	43db      	mvns	r3, r3
 8006468:	401a      	ands	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	fa01 f303 	lsl.w	r3, r1, r3
 800647e:	431a      	orrs	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	621a      	str	r2, [r3, #32]
}
 8006484:	bf00      	nop
 8006486:	371c      	adds	r7, #28
 8006488:	46bd      	mov	sp, r7
 800648a:	bc80      	pop	{r7}
 800648c:	4770      	bx	lr
	...

08006490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e05a      	b.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a20      	ldr	r2, [pc, #128]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d022      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1e      	ldr	r2, [pc, #120]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01d      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fe:	d018      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1a      	ldr	r2, [pc, #104]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a19      	ldr	r2, [pc, #100]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00e      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a17      	ldr	r2, [pc, #92]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d009      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a16      	ldr	r2, [pc, #88]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d004      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a14      	ldr	r2, [pc, #80]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d10c      	bne.n	800654c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	4313      	orrs	r3, r2
 8006542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr
 8006568:	40012c00 	.word	0x40012c00
 800656c:	40013400 	.word	0x40013400
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	40014c00 	.word	0x40014c00
 8006580:	40001800 	.word	0x40001800

08006584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr

08006596 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e042      	b.n	8006640 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fc fb62 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2224      	movs	r2, #36	@ 0x24
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 ffdf 	bl	80075b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695a      	ldr	r2, [r3, #20]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	@ 0x28
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b20      	cmp	r3, #32
 8006666:	d16d      	bne.n	8006744 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <HAL_UART_Transmit+0x2c>
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e066      	b.n	8006746 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2221      	movs	r2, #33	@ 0x21
 8006682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006686:	f7fc fd73 	bl	8003170 <HAL_GetTick>
 800668a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	88fa      	ldrh	r2, [r7, #6]
 8006690:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	88fa      	ldrh	r2, [r7, #6]
 8006696:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a0:	d108      	bne.n	80066b4 <HAL_UART_Transmit+0x6c>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	e003      	b.n	80066bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066bc:	e02a      	b.n	8006714 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2200      	movs	r2, #0
 80066c6:	2180      	movs	r1, #128	@ 0x80
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fc6e 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e036      	b.n	8006746 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	3302      	adds	r3, #2
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	e007      	b.n	8006706 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	3301      	adds	r3, #1
 8006704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1cf      	bne.n	80066be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2200      	movs	r2, #0
 8006726:	2140      	movs	r1, #64	@ 0x40
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 fc3e 	bl	8006faa <UART_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e006      	b.n	8006746 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	e000      	b.n	8006746 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006744:	2302      	movs	r3, #2
  }
}
 8006746:	4618      	mov	r0, r3
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	4613      	mov	r3, r2
 800675a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b20      	cmp	r3, #32
 8006766:	d112      	bne.n	800678e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <HAL_UART_Receive_IT+0x26>
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e00b      	b.n	8006790 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	461a      	mov	r2, r3
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 fc7e 	bl	8007086 <UART_Start_Receive_IT>
 800678a:	4603      	mov	r3, r0
 800678c:	e000      	b.n	8006790 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800678e:	2302      	movs	r3, #2
  }
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08c      	sub	sp, #48	@ 0x30
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	4613      	mov	r3, r2
 80067a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d14a      	bne.n	8006848 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e043      	b.n	800684a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	461a      	mov	r2, r3
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fc8f 	bl	80070f8 <UART_Start_Receive_DMA>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80067e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d12c      	bne.n	8006842 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d125      	bne.n	800683c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	330c      	adds	r3, #12
 800680c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	617b      	str	r3, [r7, #20]
   return(result);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f043 0310 	orr.w	r3, r3, #16
 800681c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	330c      	adds	r3, #12
 8006824:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006826:	627a      	str	r2, [r7, #36]	@ 0x24
 8006828:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6a39      	ldr	r1, [r7, #32]
 800682c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	61fb      	str	r3, [r7, #28]
   return(result);
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e5      	bne.n	8006806 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800683a:	e002      	b.n	8006842 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006846:	e000      	b.n	800684a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3730      	adds	r7, #48	@ 0x30
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b0ba      	sub	sp, #232	@ 0xe8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800687a:	2300      	movs	r3, #0
 800687c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006880:	2300      	movs	r3, #0
 8006882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10f      	bne.n	80068ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <HAL_UART_IRQHandler+0x66>
 80068a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fdbe 	bl	8007434 <UART_Receive_IT>
      return;
 80068b8:	e25b      	b.n	8006d72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 80de 	beq.w	8006a80 <HAL_UART_IRQHandler+0x22c>
 80068c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d106      	bne.n	80068de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 80d1 	beq.w	8006a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <HAL_UART_IRQHandler+0xae>
 80068ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068fa:	f043 0201 	orr.w	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <HAL_UART_IRQHandler+0xd2>
 800690e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691e:	f043 0202 	orr.w	r2, r3, #2
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00b      	beq.n	800694a <HAL_UART_IRQHandler+0xf6>
 8006932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006942:	f043 0204 	orr.w	r2, r3, #4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d011      	beq.n	800697a <HAL_UART_IRQHandler+0x126>
 8006956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d105      	bne.n	800696e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006972:	f043 0208 	orr.w	r2, r3, #8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 81f2 	beq.w	8006d68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <HAL_UART_IRQHandler+0x14e>
 8006990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fd49 	bl	8007434 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bf14      	ite	ne
 80069b0:	2301      	movne	r3, #1
 80069b2:	2300      	moveq	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <HAL_UART_IRQHandler+0x17a>
 80069c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d04f      	beq.n	8006a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fc53 	bl	800727a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d041      	beq.n	8006a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3314      	adds	r3, #20
 80069e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3314      	adds	r3, #20
 8006a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1d9      	bne.n	80069e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d013      	beq.n	8006a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c34 <HAL_UART_IRQHandler+0x3e0>)
 8006a3c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fc ffe2 	bl	8003a0c <HAL_DMA_Abort_IT>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d016      	beq.n	8006a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	e00e      	b.n	8006a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f99c 	bl	8006d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	e00a      	b.n	8006a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f998 	bl	8006d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6c:	e006      	b.n	8006a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f994 	bl	8006d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a7a:	e175      	b.n	8006d68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7c:	bf00      	nop
    return;
 8006a7e:	e173      	b.n	8006d68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	f040 814f 	bne.w	8006d28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8148 	beq.w	8006d28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8141 	beq.w	8006d28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 80b6 	beq.w	8006c38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 8145 	beq.w	8006d6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aea:	429a      	cmp	r2, r3
 8006aec:	f080 813e 	bcs.w	8006d6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006af6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	f000 8088 	beq.w	8006c14 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b30:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1d9      	bne.n	8006b04 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3314      	adds	r3, #20
 8006b56:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3314      	adds	r3, #20
 8006b70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b74:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b78:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e1      	bne.n	8006b50 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3314      	adds	r3, #20
 8006b92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3314      	adds	r3, #20
 8006bac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bb0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bb6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e3      	bne.n	8006b8c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006be4:	f023 0310 	bic.w	r3, r3, #16
 8006be8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006bf6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bf8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e3      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fc fec0 	bl	8003994 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fa ffd2 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c30:	e09c      	b.n	8006d6c <HAL_UART_IRQHandler+0x518>
 8006c32:	bf00      	nop
 8006c34:	0800733f 	.word	0x0800733f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 808e 	beq.w	8006d70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8089 	beq.w	8006d70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c82:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e3      	bne.n	8006c5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3314      	adds	r3, #20
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3314      	adds	r3, #20
 8006cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cba:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e3      	bne.n	8006c96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0310 	bic.w	r3, r3, #16
 8006cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	330c      	adds	r3, #12
 8006cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	69b9      	ldr	r1, [r7, #24]
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e3      	bne.n	8006cdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fa ff57 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d26:	e023      	b.n	8006d70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d009      	beq.n	8006d48 <HAL_UART_IRQHandler+0x4f4>
 8006d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fb10 	bl	8007366 <UART_Transmit_IT>
    return;
 8006d46:	e014      	b.n	8006d72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00e      	beq.n	8006d72 <HAL_UART_IRQHandler+0x51e>
 8006d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb4f 	bl	8007404 <UART_EndTransmit_IT>
    return;
 8006d66:	e004      	b.n	8006d72 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d68:	bf00      	nop
 8006d6a:	e002      	b.n	8006d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d70:	bf00      	nop
  }
}
 8006d72:	37e8      	adds	r7, #232	@ 0xe8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr

08006d8a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr

08006dae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b09c      	sub	sp, #112	@ 0x70
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d172      	bne.n	8006eb0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dcc:	2200      	movs	r2, #0
 8006dce:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006de6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	330c      	adds	r3, #12
 8006dee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006df0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006df2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006df6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e5      	bne.n	8006dd0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3314      	adds	r3, #20
 8006e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3314      	adds	r3, #20
 8006e22:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e24:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e5      	bne.n	8006e04 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	623b      	str	r3, [r7, #32]
   return(result);
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3314      	adds	r3, #20
 8006e56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e58:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e5      	bne.n	8006e38 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d119      	bne.n	8006eb0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	330c      	adds	r3, #12
 8006e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0310 	bic.w	r3, r3, #16
 8006e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	330c      	adds	r3, #12
 8006e9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006e9c:	61fa      	str	r2, [r7, #28]
 8006e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	69b9      	ldr	r1, [r7, #24]
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e5      	bne.n	8006e7c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d106      	bne.n	8006ecc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ec0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ec6:	f7fa fe85 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eca:	e002      	b.n	8006ed2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006ecc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ece:	f7fa fe6f 	bl	8001bb0 <HAL_UART_RxCpltCallback>
}
 8006ed2:	bf00      	nop
 8006ed4:	3770      	adds	r7, #112	@ 0x70
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2201      	movs	r2, #1
 8006eec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d108      	bne.n	8006f08 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	4619      	mov	r1, r3
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7fa fe67 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f06:	e002      	b.n	8006f0e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff ff3e 	bl	8006d8a <HAL_UART_RxHalfCpltCallback>
}
 8006f0e:	bf00      	nop
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f26:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bf14      	ite	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	2300      	moveq	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b21      	cmp	r3, #33	@ 0x21
 8006f48:	d108      	bne.n	8006f5c <UART_DMAError+0x46>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006f56:	68b8      	ldr	r0, [r7, #8]
 8006f58:	f000 f968 	bl	800722c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	bf14      	ite	ne
 8006f6a:	2301      	movne	r3, #1
 8006f6c:	2300      	moveq	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b22      	cmp	r3, #34	@ 0x22
 8006f7c:	d108      	bne.n	8006f90 <UART_DMAError+0x7a>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006f8a:	68b8      	ldr	r0, [r7, #8]
 8006f8c:	f000 f975 	bl	800727a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f94:	f043 0210 	orr.w	r2, r3, #16
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f9c:	68b8      	ldr	r0, [r7, #8]
 8006f9e:	f7ff fefd 	bl	8006d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b090      	sub	sp, #64	@ 0x40
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	603b      	str	r3, [r7, #0]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fba:	e050      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	d04c      	beq.n	800705e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <UART_WaitOnFlagUntilTimeout+0x30>
 8006fca:	f7fc f8d1 	bl	8003170 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d241      	bcs.n	800705e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	330c      	adds	r3, #12
 8006fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	330c      	adds	r3, #12
 8006ff8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ffa:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ffc:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007000:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e5      	bne.n	8006fda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3314      	adds	r3, #20
 8007014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	613b      	str	r3, [r7, #16]
   return(result);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3314      	adds	r3, #20
 800702c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800702e:	623a      	str	r2, [r7, #32]
 8007030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	69f9      	ldr	r1, [r7, #28]
 8007034:	6a3a      	ldr	r2, [r7, #32]
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	61bb      	str	r3, [r7, #24]
   return(result);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2220      	movs	r2, #32
 800704e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e00f      	b.n	800707e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4013      	ands	r3, r2
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	429a      	cmp	r2, r3
 800706c:	bf0c      	ite	eq
 800706e:	2301      	moveq	r3, #1
 8007070:	2300      	movne	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	461a      	mov	r2, r3
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	429a      	cmp	r2, r3
 800707a:	d09f      	beq.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3740      	adds	r7, #64	@ 0x40
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	4613      	mov	r3, r2
 8007092:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	88fa      	ldrh	r2, [r7, #6]
 800709e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2222      	movs	r2, #34	@ 0x22
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d007      	beq.n	80070cc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070ca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695a      	ldr	r2, [r3, #20]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0201 	orr.w	r2, r2, #1
 80070da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0220 	orr.w	r2, r2, #32
 80070ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b098      	sub	sp, #96	@ 0x60
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	88fa      	ldrh	r2, [r7, #6]
 8007110:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2222      	movs	r2, #34	@ 0x22
 800711c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007124:	4a3e      	ldr	r2, [pc, #248]	@ (8007220 <UART_Start_Receive_DMA+0x128>)
 8007126:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712c:	4a3d      	ldr	r2, [pc, #244]	@ (8007224 <UART_Start_Receive_DMA+0x12c>)
 800712e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007134:	4a3c      	ldr	r2, [pc, #240]	@ (8007228 <UART_Start_Receive_DMA+0x130>)
 8007136:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713c:	2200      	movs	r2, #0
 800713e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007140:	f107 0308 	add.w	r3, r7, #8
 8007144:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	f7fc fbbc 	bl	80038d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d019      	beq.n	80071ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	330c      	adds	r3, #12
 8007180:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800718a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800718c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007190:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800719a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800719c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80071a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80071a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e5      	bne.n	800717a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3314      	adds	r3, #20
 80071b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c0:	f043 0301 	orr.w	r3, r3, #1
 80071c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3314      	adds	r3, #20
 80071cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80071ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80071d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e5      	bne.n	80071ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3314      	adds	r3, #20
 80071e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	617b      	str	r3, [r7, #20]
   return(result);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3314      	adds	r3, #20
 8007200:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007202:	627a      	str	r2, [r7, #36]	@ 0x24
 8007204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6a39      	ldr	r1, [r7, #32]
 8007208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e5      	bne.n	80071e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3760      	adds	r7, #96	@ 0x60
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	08006daf 	.word	0x08006daf
 8007224:	08006edb 	.word	0x08006edb
 8007228:	08006f17 	.word	0x08006f17

0800722c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b089      	sub	sp, #36	@ 0x24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	60bb      	str	r3, [r7, #8]
   return(result);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800724a:	61fb      	str	r3, [r7, #28]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	61ba      	str	r2, [r7, #24]
 8007256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6979      	ldr	r1, [r7, #20]
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	613b      	str	r3, [r7, #16]
   return(result);
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e5      	bne.n	8007234 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007270:	bf00      	nop
 8007272:	3724      	adds	r7, #36	@ 0x24
 8007274:	46bd      	mov	sp, r7
 8007276:	bc80      	pop	{r7}
 8007278:	4770      	bx	lr

0800727a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800727a:	b480      	push	{r7}
 800727c:	b095      	sub	sp, #84	@ 0x54
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	330c      	adds	r3, #12
 80072a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80072a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e5      	bne.n	8007282 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3314      	adds	r3, #20
 80072bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f023 0301 	bic.w	r3, r3, #1
 80072cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3314      	adds	r3, #20
 80072d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e5      	bne.n	80072b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d119      	bne.n	8007326 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	330c      	adds	r3, #12
 80072f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	60bb      	str	r3, [r7, #8]
   return(result);
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f023 0310 	bic.w	r3, r3, #16
 8007308:	647b      	str	r3, [r7, #68]	@ 0x44
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	330c      	adds	r3, #12
 8007310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007312:	61ba      	str	r2, [r7, #24]
 8007314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6979      	ldr	r1, [r7, #20]
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	613b      	str	r3, [r7, #16]
   return(result);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e5      	bne.n	80072f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007334:	bf00      	nop
 8007336:	3754      	adds	r7, #84	@ 0x54
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr

0800733e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7ff fd1f 	bl	8006d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b21      	cmp	r3, #33	@ 0x21
 8007378:	d13e      	bne.n	80073f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007382:	d114      	bne.n	80073ae <UART_Transmit_IT+0x48>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d110      	bne.n	80073ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	1c9a      	adds	r2, r3, #2
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	621a      	str	r2, [r3, #32]
 80073ac:	e008      	b.n	80073c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	1c59      	adds	r1, r3, #1
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6211      	str	r1, [r2, #32]
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	4619      	mov	r1, r3
 80073ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10f      	bne.n	80073f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	e000      	b.n	80073fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073f8:	2302      	movs	r3, #2
  }
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr

08007404 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800741a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fca7 	bl	8006d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08c      	sub	sp, #48	@ 0x30
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b22      	cmp	r3, #34	@ 0x22
 8007446:	f040 80ae 	bne.w	80075a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007452:	d117      	bne.n	8007484 <UART_Receive_IT+0x50>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d113      	bne.n	8007484 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007464:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	b29b      	uxth	r3, r3
 800746e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007472:	b29a      	uxth	r2, r3
 8007474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007476:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747c:	1c9a      	adds	r2, r3, #2
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	629a      	str	r2, [r3, #40]	@ 0x28
 8007482:	e026      	b.n	80074d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007488:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007496:	d007      	beq.n	80074a8 <UART_Receive_IT+0x74>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <UART_Receive_IT+0x82>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	e008      	b.n	80074c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	b29b      	uxth	r3, r3
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4619      	mov	r1, r3
 80074e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d15d      	bne.n	80075a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 0220 	bic.w	r2, r2, #32
 80074f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007504:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695a      	ldr	r2, [r3, #20]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007528:	2b01      	cmp	r3, #1
 800752a:	d135      	bne.n	8007598 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	330c      	adds	r3, #12
 8007538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	613b      	str	r3, [r7, #16]
   return(result);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f023 0310 	bic.w	r3, r3, #16
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	330c      	adds	r3, #12
 8007550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007552:	623a      	str	r2, [r7, #32]
 8007554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	69f9      	ldr	r1, [r7, #28]
 8007558:	6a3a      	ldr	r2, [r7, #32]
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e5      	bne.n	8007532 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0310 	and.w	r3, r3, #16
 8007570:	2b10      	cmp	r3, #16
 8007572:	d10a      	bne.n	800758a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7fa fb1f 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
 8007596:	e002      	b.n	800759e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7fa fb09 	bl	8001bb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	e002      	b.n	80075a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	e000      	b.n	80075a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075a6:	2302      	movs	r3, #2
  }
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3730      	adds	r7, #48	@ 0x30
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80075ea:	f023 030c 	bic.w	r3, r3, #12
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6812      	ldr	r2, [r2, #0]
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	430b      	orrs	r3, r1
 80075f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a2c      	ldr	r2, [pc, #176]	@ (80076c4 <UART_SetConfig+0x114>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d103      	bne.n	8007620 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007618:	f7fd fc52 	bl	8004ec0 <HAL_RCC_GetPCLK2Freq>
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	e002      	b.n	8007626 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007620:	f7fd fc3a 	bl	8004e98 <HAL_RCC_GetPCLK1Freq>
 8007624:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4613      	mov	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	009a      	lsls	r2, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	fbb2 f3f3 	udiv	r3, r2, r3
 800763c:	4a22      	ldr	r2, [pc, #136]	@ (80076c8 <UART_SetConfig+0x118>)
 800763e:	fba2 2303 	umull	r2, r3, r2, r3
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	0119      	lsls	r1, r3, #4
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009a      	lsls	r2, r3, #2
 8007650:	441a      	add	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	fbb2 f2f3 	udiv	r2, r2, r3
 800765c:	4b1a      	ldr	r3, [pc, #104]	@ (80076c8 <UART_SetConfig+0x118>)
 800765e:	fba3 0302 	umull	r0, r3, r3, r2
 8007662:	095b      	lsrs	r3, r3, #5
 8007664:	2064      	movs	r0, #100	@ 0x64
 8007666:	fb00 f303 	mul.w	r3, r0, r3
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	3332      	adds	r3, #50	@ 0x32
 8007670:	4a15      	ldr	r2, [pc, #84]	@ (80076c8 <UART_SetConfig+0x118>)
 8007672:	fba2 2303 	umull	r2, r3, r2, r3
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800767c:	4419      	add	r1, r3
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009a      	lsls	r2, r3, #2
 8007688:	441a      	add	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	fbb2 f2f3 	udiv	r2, r2, r3
 8007694:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <UART_SetConfig+0x118>)
 8007696:	fba3 0302 	umull	r0, r3, r3, r2
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	2064      	movs	r0, #100	@ 0x64
 800769e:	fb00 f303 	mul.w	r3, r0, r3
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	3332      	adds	r3, #50	@ 0x32
 80076a8:	4a07      	ldr	r2, [pc, #28]	@ (80076c8 <UART_SetConfig+0x118>)
 80076aa:	fba2 2303 	umull	r2, r3, r2, r3
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	f003 020f 	and.w	r2, r3, #15
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	440a      	add	r2, r1
 80076ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40013800 	.word	0x40013800
 80076c8:	51eb851f 	.word	0x51eb851f

080076cc <CRC16_Calculate>:
static uint8_t action_mode = 0xff;

static uint8_t data_pack_lower(ENUM_CMD_UPPER_t type, uint8_t* data_region);
static uint8_t data_pack_upper(ENUM_CMD_UPPER_t type, uint8_t* data_region);

static uint16_t CRC16_Calculate(uint8_t* data, uint8_t len) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 80076d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80076dc:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	e022      	b.n	800772e <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	4413      	add	r3, r2
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	8afb      	ldrh	r3, [r7, #22]
 80076f4:	4053      	eors	r3, r2
 80076f6:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	e011      	b.n	8007722 <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 80076fe:	8afb      	ldrh	r3, [r7, #22]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d006      	beq.n	8007716 <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 8007708:	8afb      	ldrh	r3, [r7, #22]
 800770a:	085b      	lsrs	r3, r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	4b10      	ldr	r3, [pc, #64]	@ (8007750 <CRC16_Calculate+0x84>)
 8007710:	4053      	eors	r3, r2
 8007712:	82fb      	strh	r3, [r7, #22]
 8007714:	e002      	b.n	800771c <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 8007716:	8afb      	ldrh	r3, [r7, #22]
 8007718:	085b      	lsrs	r3, r3, #1
 800771a:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3301      	adds	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b07      	cmp	r3, #7
 8007726:	ddea      	ble.n	80076fe <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	3301      	adds	r3, #1
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	429a      	cmp	r2, r3
 8007734:	dbd8      	blt.n	80076e8 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 8007736:	f7fb fd1b 	bl	8003170 <HAL_GetTick>
 800773a:	4601      	mov	r1, r0
 800773c:	8afb      	ldrh	r3, [r7, #22]
 800773e:	4a05      	ldr	r2, [pc, #20]	@ (8007754 <CRC16_Calculate+0x88>)
 8007740:	4805      	ldr	r0, [pc, #20]	@ (8007758 <CRC16_Calculate+0x8c>)
 8007742:	f002 f815 	bl	8009770 <iprintf>
  return crc16;
 8007746:	8afb      	ldrh	r3, [r7, #22]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	ffffa001 	.word	0xffffa001
 8007754:	0800af38 	.word	0x0800af38
 8007758:	0800a6b0 	.word	0x0800a6b0

0800775c <send_lower>:

void send_lower(ENUM_CMD_UPPER_t cmd, uint8_t tail_len) {
 800775c:	b580      	push	{r7, lr}
 800775e:	b0a4      	sub	sp, #144	@ 0x90
 8007760:	af00      	add	r7, sp, #0
 8007762:	4603      	mov	r3, r0
 8007764:	460a      	mov	r2, r1
 8007766:	71fb      	strb	r3, [r7, #7]
 8007768:	4613      	mov	r3, r2
 800776a:	71bb      	strb	r3, [r7, #6]
  uint8_t data_len;
  uint8_t data_temp[DATA_REGION_SIZE];

  memcpy(data_temp, up_recv_buf + sizeof(CMD_HEAD_t), up_recv_len - sizeof(CMD_HEAD_t) - 3);
 800776c:	490f      	ldr	r1, [pc, #60]	@ (80077ac <send_lower+0x50>)
 800776e:	4b10      	ldr	r3, [pc, #64]	@ (80077b0 <send_lower+0x54>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	f1a3 0209 	sub.w	r2, r3, #9
 8007776:	f107 030c 	add.w	r3, r7, #12
 800777a:	4618      	mov	r0, r3
 800777c:	f002 f8c9 	bl	8009912 <memcpy>
  data_len = data_pack_lower(cmd, data_temp);
 8007780:	f107 020c 	add.w	r2, r7, #12
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	4611      	mov	r1, r2
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f977 	bl	8007a7c <data_pack_lower>
 800778e:	4603      	mov	r3, r0
 8007790:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  _send_lower(cmd, tail_len, data_temp, data_len);
 8007794:	79f8      	ldrb	r0, [r7, #7]
 8007796:	79b9      	ldrb	r1, [r7, #6]
 8007798:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800779c:	f107 020c 	add.w	r2, r7, #12
 80077a0:	f000 f856 	bl	8007850 <_send_lower>
}
 80077a4:	bf00      	nop
 80077a6:	3790      	adds	r7, #144	@ 0x90
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200007a2 	.word	0x200007a2
 80077b0:	2000089c 	.word	0x2000089c

080077b4 <send_upper>:

void send_upper(ENUM_CMD_UPPER_t cmd, uint8_t tail_len) {
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b0a4      	sub	sp, #144	@ 0x90
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	460a      	mov	r2, r1
 80077be:	71fb      	strb	r3, [r7, #7]
 80077c0:	4613      	mov	r3, r2
 80077c2:	71bb      	strb	r3, [r7, #6]
  uint8_t data_len;
  uint8_t data_temp[DATA_REGION_SIZE];
  memcpy(data_temp, up_recv_buf + sizeof(CMD_HEAD_t), up_recv_len - 6 - 3);
 80077c4:	491e      	ldr	r1, [pc, #120]	@ (8007840 <send_upper+0x8c>)
 80077c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007844 <send_upper+0x90>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	3b09      	subs	r3, #9
 80077cc:	461a      	mov	r2, r3
 80077ce:	f107 0308 	add.w	r3, r7, #8
 80077d2:	4618      	mov	r0, r3
 80077d4:	f002 f89d 	bl	8009912 <memcpy>
  for (int i = 0; i < up_recv_len - 6 - 3; i++) {
 80077d8:	2300      	movs	r3, #0
 80077da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077de:	e011      	b.n	8007804 <send_upper+0x50>
    LOGI("%02x", ((uint8_t*)data_temp)[i]);
 80077e0:	f7fb fcc6 	bl	8003170 <HAL_GetTick>
 80077e4:	4601      	mov	r1, r0
 80077e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077ea:	f107 0208 	add.w	r2, r7, #8
 80077ee:	4413      	add	r3, r2
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	4a15      	ldr	r2, [pc, #84]	@ (8007848 <send_upper+0x94>)
 80077f4:	4815      	ldr	r0, [pc, #84]	@ (800784c <send_upper+0x98>)
 80077f6:	f001 ffbb 	bl	8009770 <iprintf>
  for (int i = 0; i < up_recv_len - 6 - 3; i++) {
 80077fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077fe:	3301      	adds	r3, #1
 8007800:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007804:	4b0f      	ldr	r3, [pc, #60]	@ (8007844 <send_upper+0x90>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	3b09      	subs	r3, #9
 800780a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800780e:	429a      	cmp	r2, r3
 8007810:	dbe6      	blt.n	80077e0 <send_upper+0x2c>
  }
  data_len = data_pack_upper(cmd, data_temp);
 8007812:	f107 0208 	add.w	r2, r7, #8
 8007816:	79fb      	ldrb	r3, [r7, #7]
 8007818:	4611      	mov	r1, r2
 800781a:	4618      	mov	r0, r3
 800781c:	f000 f9aa 	bl	8007b74 <data_pack_upper>
 8007820:	4603      	mov	r3, r0
 8007822:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
  _send_upper(cmd, tail_len, data_temp, data_len);
 8007826:	79f8      	ldrb	r0, [r7, #7]
 8007828:	79b9      	ldrb	r1, [r7, #6]
 800782a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800782e:	f107 0208 	add.w	r2, r7, #8
 8007832:	f000 f89b 	bl	800796c <_send_upper>
}
 8007836:	bf00      	nop
 8007838:	3790      	adds	r7, #144	@ 0x90
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	200007a2 	.word	0x200007a2
 8007844:	2000089c 	.word	0x2000089c
 8007848:	0800af48 	.word	0x0800af48
 800784c:	0800a6d8 	.word	0x0800a6d8

08007850 <_send_lower>:
/// @brief send to lower computer message
/// @param cmd
/// @param tail_len  message length = head_len + tail_len
/// @param data     data region
/// @param data_len data region size
void _send_lower(ENUM_CMD_UPPER_t cmd, uint8_t tail_len, void* data, uint8_t data_size) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	603a      	str	r2, [r7, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	4603      	mov	r3, r0
 800785c:	71fb      	strb	r3, [r7, #7]
 800785e:	460b      	mov	r3, r1
 8007860:	71bb      	strb	r3, [r7, #6]
 8007862:	4613      	mov	r3, r2
 8007864:	717b      	strb	r3, [r7, #5]
  CMD_HEAD_t* p_head   = (CMD_HEAD_t*)send_buf;
 8007866:	4b3d      	ldr	r3, [pc, #244]	@ (800795c <_send_lower+0x10c>)
 8007868:	60fb      	str	r3, [r7, #12]
  uint8_t     head_len = sizeof(CMD_HEAD_t);
 800786a:	2306      	movs	r3, #6
 800786c:	72fb      	strb	r3, [r7, #11]
  uint16_t    crc16;
  p_head->head   = 0xd0;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	22d0      	movs	r2, #208	@ 0xd0
 8007872:	701a      	strb	r2, [r3, #0]
  p_head->cmd    = (uint8_t)cmd;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	79fa      	ldrb	r2, [r7, #7]
 8007878:	705a      	strb	r2, [r3, #1]
  p_head->encord = 0x01;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	709a      	strb	r2, [r3, #2]
  p_head->addr   = 0x0b;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	220b      	movs	r2, #11
 8007884:	70da      	strb	r2, [r3, #3]
  p_head->len    = tail_len;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	79ba      	ldrb	r2, [r7, #6]
 800788a:	711a      	strb	r2, [r3, #4]
  p_head->empty  = 0x00;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	715a      	strb	r2, [r3, #5]

  for (int i = 0; i < sizeof(CMD_HEAD_t); i++) {
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
 8007896:	e00d      	b.n	80078b4 <_send_lower+0x64>
    LOGI("%02x", send_buf[i]);
 8007898:	f7fb fc6a 	bl	8003170 <HAL_GetTick>
 800789c:	4601      	mov	r1, r0
 800789e:	4a2f      	ldr	r2, [pc, #188]	@ (800795c <_send_lower+0x10c>)
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	4413      	add	r3, r2
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	4a2e      	ldr	r2, [pc, #184]	@ (8007960 <_send_lower+0x110>)
 80078a8:	482e      	ldr	r0, [pc, #184]	@ (8007964 <_send_lower+0x114>)
 80078aa:	f001 ff61 	bl	8009770 <iprintf>
  for (int i = 0; i < sizeof(CMD_HEAD_t); i++) {
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	3301      	adds	r3, #1
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2b05      	cmp	r3, #5
 80078b8:	d9ee      	bls.n	8007898 <_send_lower+0x48>

  // data region copy
  // for (int i = 0; i < data_size; i++) {
  //   LOGI("%02x", ((uint8_t*)data)[i]);
  // }
  memcpy(&send_buf[head_len], (uint8_t*)data, data_size);
 80078ba:	7afb      	ldrb	r3, [r7, #11]
 80078bc:	4a27      	ldr	r2, [pc, #156]	@ (800795c <_send_lower+0x10c>)
 80078be:	4413      	add	r3, r2
 80078c0:	797a      	ldrb	r2, [r7, #5]
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f002 f824 	bl	8009912 <memcpy>
  send_len           = head_len + data_size;
 80078ca:	7afa      	ldrb	r2, [r7, #11]
 80078cc:	797b      	ldrb	r3, [r7, #5]
 80078ce:	4413      	add	r3, r2
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	4b25      	ldr	r3, [pc, #148]	@ (8007968 <_send_lower+0x118>)
 80078d4:	701a      	strb	r2, [r3, #0]
  send_buf[send_len] = 0xd1;
 80078d6:	4b24      	ldr	r3, [pc, #144]	@ (8007968 <_send_lower+0x118>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	4b1f      	ldr	r3, [pc, #124]	@ (800795c <_send_lower+0x10c>)
 80078de:	21d1      	movs	r1, #209	@ 0xd1
 80078e0:	5499      	strb	r1, [r3, r2]
  send_len += 1;
 80078e2:	4b21      	ldr	r3, [pc, #132]	@ (8007968 <_send_lower+0x118>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	3301      	adds	r3, #1
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007968 <_send_lower+0x118>)
 80078ec:	701a      	strb	r2, [r3, #0]

  crc16 = CRC16_Calculate(send_buf, send_len);
 80078ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007968 <_send_lower+0x118>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	4619      	mov	r1, r3
 80078f4:	4819      	ldr	r0, [pc, #100]	@ (800795c <_send_lower+0x10c>)
 80078f6:	f7ff fee9 	bl	80076cc <CRC16_Calculate>
 80078fa:	4603      	mov	r3, r0
 80078fc:	813b      	strh	r3, [r7, #8]
  memcpy(&send_buf[send_len], &crc16, sizeof(uint16_t));
 80078fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007968 <_send_lower+0x118>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	4b15      	ldr	r3, [pc, #84]	@ (800795c <_send_lower+0x10c>)
 8007906:	4413      	add	r3, r2
 8007908:	893a      	ldrh	r2, [r7, #8]
 800790a:	801a      	strh	r2, [r3, #0]
  send_len += 2;
 800790c:	4b16      	ldr	r3, [pc, #88]	@ (8007968 <_send_lower+0x118>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	3302      	adds	r3, #2
 8007912:	b2da      	uxtb	r2, r3
 8007914:	4b14      	ldr	r3, [pc, #80]	@ (8007968 <_send_lower+0x118>)
 8007916:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < send_len; i++)  //
 8007918:	2300      	movs	r3, #0
 800791a:	613b      	str	r3, [r7, #16]
 800791c:	e00d      	b.n	800793a <_send_lower+0xea>
    LOGI("%02x", send_buf[i]);
 800791e:	f7fb fc27 	bl	8003170 <HAL_GetTick>
 8007922:	4601      	mov	r1, r0
 8007924:	4a0d      	ldr	r2, [pc, #52]	@ (800795c <_send_lower+0x10c>)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	4413      	add	r3, r2
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	4a0c      	ldr	r2, [pc, #48]	@ (8007960 <_send_lower+0x110>)
 800792e:	480d      	ldr	r0, [pc, #52]	@ (8007964 <_send_lower+0x114>)
 8007930:	f001 ff1e 	bl	8009770 <iprintf>
  for (int i = 0; i < send_len; i++)  //
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	3301      	adds	r3, #1
 8007938:	613b      	str	r3, [r7, #16]
 800793a:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <_send_lower+0x118>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	4293      	cmp	r3, r2
 8007944:	dbeb      	blt.n	800791e <_send_lower+0xce>
  wireless_send(send_buf, send_len);
 8007946:	4b08      	ldr	r3, [pc, #32]	@ (8007968 <_send_lower+0x118>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	4619      	mov	r1, r3
 800794c:	4803      	ldr	r0, [pc, #12]	@ (800795c <_send_lower+0x10c>)
 800794e:	f001 fcad 	bl	80092ac <wireless_send>
}
 8007952:	bf00      	nop
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000594 	.word	0x20000594
 8007960:	0800af54 	.word	0x0800af54
 8007964:	0800a6d8 	.word	0x0800a6d8
 8007968:	20000694 	.word	0x20000694

0800796c <_send_upper>:
/// @brief send to upper computer message
/// @param cmd
/// @param tail_len  message length = head_len + tail_len
/// @param data     data region
/// @param data_len data region size
void _send_upper(ENUM_CMD_UPPER_t cmd, uint8_t tail_len, void* data, uint8_t data_size) {
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	603a      	str	r2, [r7, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	4603      	mov	r3, r0
 8007978:	71fb      	strb	r3, [r7, #7]
 800797a:	460b      	mov	r3, r1
 800797c:	71bb      	strb	r3, [r7, #6]
 800797e:	4613      	mov	r3, r2
 8007980:	717b      	strb	r3, [r7, #5]
  CMD_HEAD_t* p_head   = (CMD_HEAD_t*)send_buf;
 8007982:	4b38      	ldr	r3, [pc, #224]	@ (8007a64 <_send_upper+0xf8>)
 8007984:	613b      	str	r3, [r7, #16]
  uint8_t     head_len = sizeof(CMD_HEAD_t);
 8007986:	2306      	movs	r3, #6
 8007988:	73fb      	strb	r3, [r7, #15]
  uint16_t    crc16;
  p_head->head   = 0x70;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2270      	movs	r2, #112	@ 0x70
 800798e:	701a      	strb	r2, [r3, #0]
  p_head->cmd    = (uint8_t)cmd;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	79fa      	ldrb	r2, [r7, #7]
 8007994:	705a      	strb	r2, [r3, #1]
  p_head->encord = 0x01;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2201      	movs	r2, #1
 800799a:	709a      	strb	r2, [r3, #2]
  p_head->addr   = 0x0a;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	220a      	movs	r2, #10
 80079a0:	70da      	strb	r2, [r3, #3]
  p_head->len    = tail_len;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	79ba      	ldrb	r2, [r7, #6]
 80079a6:	711a      	strb	r2, [r3, #4]
  p_head->empty  = 0x00;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2200      	movs	r2, #0
 80079ac:	715a      	strb	r2, [r3, #5]

  LOGI("tail_len is %02x", tail_len);
 80079ae:	f7fb fbdf 	bl	8003170 <HAL_GetTick>
 80079b2:	4601      	mov	r1, r0
 80079b4:	79bb      	ldrb	r3, [r7, #6]
 80079b6:	4a2c      	ldr	r2, [pc, #176]	@ (8007a68 <_send_upper+0xfc>)
 80079b8:	482c      	ldr	r0, [pc, #176]	@ (8007a6c <_send_upper+0x100>)
 80079ba:	f001 fed9 	bl	8009770 <iprintf>
  // data region copy
  memcpy(&send_buf[head_len], (uint8_t*)data, data_size);
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	4a28      	ldr	r2, [pc, #160]	@ (8007a64 <_send_upper+0xf8>)
 80079c2:	4413      	add	r3, r2
 80079c4:	797a      	ldrb	r2, [r7, #5]
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 ffa2 	bl	8009912 <memcpy>
  send_len = head_len + data_size;
 80079ce:	7bfa      	ldrb	r2, [r7, #15]
 80079d0:	797b      	ldrb	r3, [r7, #5]
 80079d2:	4413      	add	r3, r2
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	4b26      	ldr	r3, [pc, #152]	@ (8007a70 <_send_upper+0x104>)
 80079d8:	701a      	strb	r2, [r3, #0]

  send_buf[send_len] = 0x71;
 80079da:	4b25      	ldr	r3, [pc, #148]	@ (8007a70 <_send_upper+0x104>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	4b20      	ldr	r3, [pc, #128]	@ (8007a64 <_send_upper+0xf8>)
 80079e2:	2171      	movs	r1, #113	@ 0x71
 80079e4:	5499      	strb	r1, [r3, r2]
  send_len += 1;
 80079e6:	4b22      	ldr	r3, [pc, #136]	@ (8007a70 <_send_upper+0x104>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	4b20      	ldr	r3, [pc, #128]	@ (8007a70 <_send_upper+0x104>)
 80079f0:	701a      	strb	r2, [r3, #0]

  crc16 = CRC16_Calculate(send_buf, send_len);
 80079f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007a70 <_send_upper+0x104>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	4619      	mov	r1, r3
 80079f8:	481a      	ldr	r0, [pc, #104]	@ (8007a64 <_send_upper+0xf8>)
 80079fa:	f7ff fe67 	bl	80076cc <CRC16_Calculate>
 80079fe:	4603      	mov	r3, r0
 8007a00:	81bb      	strh	r3, [r7, #12]
  memcpy(&send_buf[send_len], &crc16, sizeof(uint16_t));
 8007a02:	4b1b      	ldr	r3, [pc, #108]	@ (8007a70 <_send_upper+0x104>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	4b16      	ldr	r3, [pc, #88]	@ (8007a64 <_send_upper+0xf8>)
 8007a0a:	4413      	add	r3, r2
 8007a0c:	89ba      	ldrh	r2, [r7, #12]
 8007a0e:	801a      	strh	r2, [r3, #0]
  send_len += 2;
 8007a10:	4b17      	ldr	r3, [pc, #92]	@ (8007a70 <_send_upper+0x104>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	3302      	adds	r3, #2
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	4b15      	ldr	r3, [pc, #84]	@ (8007a70 <_send_upper+0x104>)
 8007a1a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < send_len; i++)  //
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	e00d      	b.n	8007a3e <_send_upper+0xd2>
    LOGI("%02x", send_buf[i]);
 8007a22:	f7fb fba5 	bl	8003170 <HAL_GetTick>
 8007a26:	4601      	mov	r1, r0
 8007a28:	4a0e      	ldr	r2, [pc, #56]	@ (8007a64 <_send_upper+0xf8>)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	4a0d      	ldr	r2, [pc, #52]	@ (8007a68 <_send_upper+0xfc>)
 8007a32:	4810      	ldr	r0, [pc, #64]	@ (8007a74 <_send_upper+0x108>)
 8007a34:	f001 fe9c 	bl	8009770 <iprintf>
  for (int i = 0; i < send_len; i++)  //
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	617b      	str	r3, [r7, #20]
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a70 <_send_upper+0x104>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	4293      	cmp	r3, r2
 8007a48:	dbeb      	blt.n	8007a22 <_send_upper+0xb6>
  // wireless_send(send_buf, send_len);

  HAL_UART_Transmit(&huart4, send_buf, send_len, 100);
 8007a4a:	4b09      	ldr	r3, [pc, #36]	@ (8007a70 <_send_upper+0x104>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	2364      	movs	r3, #100	@ 0x64
 8007a52:	4904      	ldr	r1, [pc, #16]	@ (8007a64 <_send_upper+0xf8>)
 8007a54:	4808      	ldr	r0, [pc, #32]	@ (8007a78 <_send_upper+0x10c>)
 8007a56:	f7fe fdf7 	bl	8006648 <HAL_UART_Transmit>
}
 8007a5a:	bf00      	nop
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000594 	.word	0x20000594
 8007a68:	0800af60 	.word	0x0800af60
 8007a6c:	0800a6f8 	.word	0x0800a6f8
 8007a70:	20000694 	.word	0x20000694
 8007a74:	0800a6d8 	.word	0x0800a6d8
 8007a78:	2000035c 	.word	0x2000035c

08007a7c <data_pack_lower>:

uint8_t data_pack_lower(ENUM_CMD_UPPER_t type, uint8_t* data_region) {
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	6039      	str	r1, [r7, #0]
 8007a86:	71fb      	strb	r3, [r7, #7]
  uint8_t data_size;
  if (data_region == NULL) {
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <data_pack_lower+0x26>
    LOGE("data_region is null");
 8007a8e:	f7fb fb6f 	bl	8003170 <HAL_GetTick>
 8007a92:	4603      	mov	r3, r0
 8007a94:	4a35      	ldr	r2, [pc, #212]	@ (8007b6c <data_pack_lower+0xf0>)
 8007a96:	4619      	mov	r1, r3
 8007a98:	4835      	ldr	r0, [pc, #212]	@ (8007b70 <data_pack_lower+0xf4>)
 8007a9a:	f001 fe69 	bl	8009770 <iprintf>
    return;
 8007a9e:	bf00      	nop
 8007aa0:	e060      	b.n	8007b64 <data_pack_lower+0xe8>
  }
  switch (type) {
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d04d      	beq.n	8007b44 <data_pack_lower+0xc8>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	db5a      	blt.n	8007b62 <data_pack_lower+0xe6>
 8007aac:	2b30      	cmp	r3, #48	@ 0x30
 8007aae:	dc58      	bgt.n	8007b62 <data_pack_lower+0xe6>
 8007ab0:	2b10      	cmp	r3, #16
 8007ab2:	db56      	blt.n	8007b62 <data_pack_lower+0xe6>
 8007ab4:	3b10      	subs	r3, #16
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d853      	bhi.n	8007b62 <data_pack_lower+0xe6>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <data_pack_lower+0x44>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007b4b 	.word	0x08007b4b
 8007ac4:	08007b4b 	.word	0x08007b4b
 8007ac8:	08007b63 	.word	0x08007b63
 8007acc:	08007b63 	.word	0x08007b63
 8007ad0:	08007b63 	.word	0x08007b63
 8007ad4:	08007b63 	.word	0x08007b63
 8007ad8:	08007b63 	.word	0x08007b63
 8007adc:	08007b63 	.word	0x08007b63
 8007ae0:	08007b63 	.word	0x08007b63
 8007ae4:	08007b63 	.word	0x08007b63
 8007ae8:	08007b63 	.word	0x08007b63
 8007aec:	08007b63 	.word	0x08007b63
 8007af0:	08007b63 	.word	0x08007b63
 8007af4:	08007b63 	.word	0x08007b63
 8007af8:	08007b63 	.word	0x08007b63
 8007afc:	08007b63 	.word	0x08007b63
 8007b00:	08007b57 	.word	0x08007b57
 8007b04:	08007b45 	.word	0x08007b45
 8007b08:	08007b63 	.word	0x08007b63
 8007b0c:	08007b63 	.word	0x08007b63
 8007b10:	08007b63 	.word	0x08007b63
 8007b14:	08007b63 	.word	0x08007b63
 8007b18:	08007b63 	.word	0x08007b63
 8007b1c:	08007b63 	.word	0x08007b63
 8007b20:	08007b63 	.word	0x08007b63
 8007b24:	08007b63 	.word	0x08007b63
 8007b28:	08007b63 	.word	0x08007b63
 8007b2c:	08007b63 	.word	0x08007b63
 8007b30:	08007b63 	.word	0x08007b63
 8007b34:	08007b63 	.word	0x08007b63
 8007b38:	08007b63 	.word	0x08007b63
 8007b3c:	08007b63 	.word	0x08007b63
 8007b40:	08007b51 	.word	0x08007b51
    case kInit:

    case kInquire:

      data_size = 1;
 8007b44:	2301      	movs	r3, #1
 8007b46:	73fb      	strb	r3, [r7, #15]
      break;
 8007b48:	e00b      	b.n	8007b62 <data_pack_lower+0xe6>
    case kInquireBookInfo:
    case kInquireBookNum:
      data_size = 4;
 8007b4a:	2304      	movs	r3, #4
 8007b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4e:	e008      	b.n	8007b62 <data_pack_lower+0xe6>
    case kSynClock:
      data_size = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
      break;
 8007b54:	e005      	b.n	8007b62 <data_pack_lower+0xe6>
    case kMoveAction:
      data_size = sizeof(Move_Action_t);
 8007b56:	230b      	movs	r3, #11
 8007b58:	73fb      	strb	r3, [r7, #15]
      move_data_pack(data_region);
 8007b5a:	6838      	ldr	r0, [r7, #0]
 8007b5c:	f000 f892 	bl	8007c84 <move_data_pack>
      break;
 8007b60:	bf00      	nop
  }
  return data_size;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	0800af6c 	.word	0x0800af6c
 8007b70:	0800a724 	.word	0x0800a724

08007b74 <data_pack_upper>:

uint8_t data_pack_upper(ENUM_CMD_UPPER_t type, uint8_t* data_region) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
  uint8_t data_size;
  if (data_region == NULL) {
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <data_pack_upper+0x26>
    LOGE("data_region is null");
 8007b86:	f7fb faf3 	bl	8003170 <HAL_GetTick>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4a3b      	ldr	r2, [pc, #236]	@ (8007c7c <data_pack_upper+0x108>)
 8007b8e:	4619      	mov	r1, r3
 8007b90:	483b      	ldr	r0, [pc, #236]	@ (8007c80 <data_pack_upper+0x10c>)
 8007b92:	f001 fded 	bl	8009770 <iprintf>
    return;
 8007b96:	bf00      	nop
 8007b98:	e06c      	b.n	8007c74 <data_pack_upper+0x100>
  }
  switch (type) {
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d04d      	beq.n	8007c3c <data_pack_upper+0xc8>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	db66      	blt.n	8007c72 <data_pack_upper+0xfe>
 8007ba4:	2b30      	cmp	r3, #48	@ 0x30
 8007ba6:	dc64      	bgt.n	8007c72 <data_pack_upper+0xfe>
 8007ba8:	2b10      	cmp	r3, #16
 8007baa:	db62      	blt.n	8007c72 <data_pack_upper+0xfe>
 8007bac:	3b10      	subs	r3, #16
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d85f      	bhi.n	8007c72 <data_pack_upper+0xfe>
 8007bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <data_pack_upper+0x44>)
 8007bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb8:	08007c61 	.word	0x08007c61
 8007bbc:	08007c55 	.word	0x08007c55
 8007bc0:	08007c73 	.word	0x08007c73
 8007bc4:	08007c73 	.word	0x08007c73
 8007bc8:	08007c73 	.word	0x08007c73
 8007bcc:	08007c73 	.word	0x08007c73
 8007bd0:	08007c73 	.word	0x08007c73
 8007bd4:	08007c73 	.word	0x08007c73
 8007bd8:	08007c73 	.word	0x08007c73
 8007bdc:	08007c73 	.word	0x08007c73
 8007be0:	08007c73 	.word	0x08007c73
 8007be4:	08007c73 	.word	0x08007c73
 8007be8:	08007c73 	.word	0x08007c73
 8007bec:	08007c73 	.word	0x08007c73
 8007bf0:	08007c73 	.word	0x08007c73
 8007bf4:	08007c73 	.word	0x08007c73
 8007bf8:	08007c49 	.word	0x08007c49
 8007bfc:	08007c67 	.word	0x08007c67
 8007c00:	08007c73 	.word	0x08007c73
 8007c04:	08007c73 	.word	0x08007c73
 8007c08:	08007c73 	.word	0x08007c73
 8007c0c:	08007c73 	.word	0x08007c73
 8007c10:	08007c73 	.word	0x08007c73
 8007c14:	08007c73 	.word	0x08007c73
 8007c18:	08007c73 	.word	0x08007c73
 8007c1c:	08007c73 	.word	0x08007c73
 8007c20:	08007c73 	.word	0x08007c73
 8007c24:	08007c73 	.word	0x08007c73
 8007c28:	08007c73 	.word	0x08007c73
 8007c2c:	08007c73 	.word	0x08007c73
 8007c30:	08007c73 	.word	0x08007c73
 8007c34:	08007c73 	.word	0x08007c73
 8007c38:	08007c73 	.word	0x08007c73
    case kInit:
      data_size = sizeof(Upper_Init_t);
 8007c3c:	2307      	movs	r3, #7
 8007c3e:	73fb      	strb	r3, [r7, #15]
      init_data_pack(data_region);
 8007c40:	6838      	ldr	r0, [r7, #0]
 8007c42:	f000 f8d3 	bl	8007dec <init_data_pack>
      break;
 8007c46:	e014      	b.n	8007c72 <data_pack_upper+0xfe>
    case kMoveAction:
      data_size = sizeof(Move_Action_t);
 8007c48:	230b      	movs	r3, #11
 8007c4a:	73fb      	strb	r3, [r7, #15]
      move_data_pack(data_region);
 8007c4c:	6838      	ldr	r0, [r7, #0]
 8007c4e:	f000 f819 	bl	8007c84 <move_data_pack>
      break;
 8007c52:	e00e      	b.n	8007c72 <data_pack_upper+0xfe>

    case kInquireBookInfo:
      data_size = sizeof(Book_Info_Upper_t);
 8007c54:	2312      	movs	r3, #18
 8007c56:	73fb      	strb	r3, [r7, #15]
      book_info_pack(data_region);
 8007c58:	6838      	ldr	r0, [r7, #0]
 8007c5a:	f000 f84f 	bl	8007cfc <book_info_pack>
      break;
 8007c5e:	e008      	b.n	8007c72 <data_pack_upper+0xfe>
    case kInquireBookNum:
      data_size = 4;
 8007c60:	2304      	movs	r3, #4
 8007c62:	73fb      	strb	r3, [r7, #15]
      break;
 8007c64:	e005      	b.n	8007c72 <data_pack_upper+0xfe>
    case kInquire:
      data_size = sizeof(Move_Action_t);
 8007c66:	230b      	movs	r3, #11
 8007c68:	73fb      	strb	r3, [r7, #15]
      move_data_pack(data_region);
 8007c6a:	6838      	ldr	r0, [r7, #0]
 8007c6c:	f000 f80a 	bl	8007c84 <move_data_pack>
      break;
 8007c70:	bf00      	nop
    case kSynClock:
      break;
  }

  return data_size;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	0800af7c 	.word	0x0800af7c
 8007c80:	0800a724 	.word	0x0800a724

08007c84 <move_data_pack>:

void move_data_pack(uint8_t* data_region) {
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  Motor_t        servo_info = get_servo_info();
 8007c8c:	f107 030c 	add.w	r3, r7, #12
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 ffc5 	bl	8008c20 <get_servo_info>
  Move_Action_t* p_action   = (Move_Action_t*)data_region;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	61bb      	str	r3, [r7, #24]

  p_action->x_pos       = get_Position_mm(GetMoterStateReg(), 4);
 8007c9a:	f7f8 faf7 	bl	800028c <GetMoterStateReg>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2104      	movs	r1, #4
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 ffd0 	bl	8008c48 <get_Position_mm>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	461a      	mov	r2, r3
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	801a      	strh	r2, [r3, #0]
  p_action->x_speed     = servo_info.speed;
 8007cb0:	8a7a      	ldrh	r2, [r7, #18]
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	805a      	strh	r2, [r3, #2]
  p_action->motor_state = 0xa1;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	22a1      	movs	r2, #161	@ 0xa1
 8007cba:	729a      	strb	r2, [r3, #10]
  p_action->direct      = servo_info.diretion;
 8007cbc:	7d3a      	ldrb	r2, [r7, #20]
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	725a      	strb	r2, [r3, #9]
  // p_action->y_pos           = 0x0001;
  // p_action->y_speed         = 0x0001;
  // p_action->action_state    = 0x01;

  // action_mode = p_action->action_state;
  for (int i = 0; i < sizeof(Move_Action_t); i++) {
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
 8007cc6:	e00d      	b.n	8007ce4 <move_data_pack+0x60>
    LOGI("%02x", data_region[i]);
 8007cc8:	f7fb fa52 	bl	8003170 <HAL_GetTick>
 8007ccc:	4601      	mov	r1, r0
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	4a07      	ldr	r2, [pc, #28]	@ (8007cf4 <move_data_pack+0x70>)
 8007cd8:	4807      	ldr	r0, [pc, #28]	@ (8007cf8 <move_data_pack+0x74>)
 8007cda:	f001 fd49 	bl	8009770 <iprintf>
  for (int i = 0; i < sizeof(Move_Action_t); i++) {
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	2b0a      	cmp	r3, #10
 8007ce8:	d9ee      	bls.n	8007cc8 <move_data_pack+0x44>
  }
}
 8007cea:	bf00      	nop
 8007cec:	bf00      	nop
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	0800af8c 	.word	0x0800af8c
 8007cf8:	0800a6d8 	.word	0x0800a6d8

08007cfc <book_info_pack>:

void book_num_pack(uint8_t* data_region) { uint32_t* p_num = (uint32_t*)data_region; }

void book_info_pack(uint8_t* data_region) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08a      	sub	sp, #40	@ 0x28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  Book_Info_Lower_t* p_book_info_low = (Book_Info_Lower_t*)data_region;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	623b      	str	r3, [r7, #32]
  Book_Info_Upper_t* p_book_info_up  = (Book_Info_Upper_t*)data_region;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	61fb      	str	r3, [r7, #28]
  Motor_t            servo           = get_servo_info();
 8007d0c:	f107 030c 	add.w	r3, r7, #12
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 ff85 	bl	8008c20 <get_servo_info>
  uint32_t           time_sec        = p_book_info_low->x_time / 1000;
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8007dcc <book_info_pack+0xd0>)
 8007d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d20:	099b      	lsrs	r3, r3, #6
 8007d22:	61bb      	str	r3, [r7, #24]
  LOGI("x_time is %08x", p_book_info_low->x_time);
 8007d24:	f7fb fa24 	bl	8003170 <HAL_GetTick>
 8007d28:	4601      	mov	r1, r0
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	4a28      	ldr	r2, [pc, #160]	@ (8007dd0 <book_info_pack+0xd4>)
 8007d30:	4828      	ldr	r0, [pc, #160]	@ (8007dd4 <book_info_pack+0xd8>)
 8007d32:	f001 fd1d 	bl	8009770 <iprintf>
  LOGI("sec is %d", time_sec);
 8007d36:	f7fb fa1b 	bl	8003170 <HAL_GetTick>
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	4a24      	ldr	r2, [pc, #144]	@ (8007dd0 <book_info_pack+0xd4>)
 8007d40:	4825      	ldr	r0, [pc, #148]	@ (8007dd8 <book_info_pack+0xdc>)
 8007d42:	f001 fd15 	bl	8009770 <iprintf>
  LOGI("clock is %04x", low_clock);
 8007d46:	f7fb fa13 	bl	8003170 <HAL_GetTick>
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	4b23      	ldr	r3, [pc, #140]	@ (8007ddc <book_info_pack+0xe0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd0 <book_info_pack+0xd4>)
 8007d52:	4823      	ldr	r0, [pc, #140]	@ (8007de0 <book_info_pack+0xe4>)
 8007d54:	f001 fd0c 	bl	8009770 <iprintf>
  LOGI("speed is %d", servo.speed);
 8007d58:	f7fb fa0a 	bl	8003170 <HAL_GetTick>
 8007d5c:	4601      	mov	r1, r0
 8007d5e:	8a7b      	ldrh	r3, [r7, #18]
 8007d60:	4a1b      	ldr	r2, [pc, #108]	@ (8007dd0 <book_info_pack+0xd4>)
 8007d62:	4820      	ldr	r0, [pc, #128]	@ (8007de4 <book_info_pack+0xe8>)
 8007d64:	f001 fd04 	bl	8009770 <iprintf>
  p_book_info_up->x_pos = (uint16_t)(servo.speed * (time_sec - low_clock));
 8007d68:	8a7b      	ldrh	r3, [r7, #18]
 8007d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8007ddc <book_info_pack+0xe0>)
 8007d6c:	6812      	ldr	r2, [r2, #0]
 8007d6e:	69b9      	ldr	r1, [r7, #24]
 8007d70:	1a8a      	subs	r2, r1, r2
 8007d72:	b292      	uxth	r2, r2
 8007d74:	fb02 f303 	mul.w	r3, r2, r3
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	819a      	strh	r2, [r3, #12]

  p_book_info_up->y_pox        = p_book_info_low->y_pox;
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	8a1b      	ldrh	r3, [r3, #16]
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	81da      	strh	r2, [r3, #14]
  p_book_info_up->reak_freq    = p_book_info_low->reak_freq;
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	7c9a      	ldrb	r2, [r3, #18]
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	741a      	strb	r2, [r3, #16]
  p_book_info_up->average_rssi = p_book_info_low->average_rssi;
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	7cda      	ldrb	r2, [r3, #19]
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	745a      	strb	r2, [r3, #17]

  for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
 8007d98:	2300      	movs	r3, #0
 8007d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d9c:	e00d      	b.n	8007dba <book_info_pack+0xbe>
    LOGI("%02x", data_region[i]);
 8007d9e:	f7fb f9e7 	bl	8003170 <HAL_GetTick>
 8007da2:	4601      	mov	r1, r0
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	4413      	add	r3, r2
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	4a08      	ldr	r2, [pc, #32]	@ (8007dd0 <book_info_pack+0xd4>)
 8007dae:	480e      	ldr	r0, [pc, #56]	@ (8007de8 <book_info_pack+0xec>)
 8007db0:	f001 fcde 	bl	8009770 <iprintf>
  for (int i = 0; i < sizeof(Book_Info_Upper_t); i++) {
 8007db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db6:	3301      	adds	r3, #1
 8007db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	2b11      	cmp	r3, #17
 8007dbe:	d9ee      	bls.n	8007d9e <book_info_pack+0xa2>
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop
 8007dc4:	3728      	adds	r7, #40	@ 0x28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	10624dd3 	.word	0x10624dd3
 8007dd0:	0800af9c 	.word	0x0800af9c
 8007dd4:	0800a754 	.word	0x0800a754
 8007dd8:	0800a780 	.word	0x0800a780
 8007ddc:	200009a4 	.word	0x200009a4
 8007de0:	0800a7a8 	.word	0x0800a7a8
 8007de4:	0800a7d4 	.word	0x0800a7d4
 8007de8:	0800a6d8 	.word	0x0800a6d8

08007dec <init_data_pack>:

void init_data_pack(uint8_t* data_region) {
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  Motor_t       servo_info  = get_servo_info();
 8007df4:	f107 0308 	add.w	r3, r7, #8
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 ff11 	bl	8008c20 <get_servo_info>
  Upper_Init_t* p_init      = (Upper_Init_t*)data_region;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	617b      	str	r3, [r7, #20]
  p_init->servo_conect      = servo_info.connect;
 8007e02:	897b      	ldrh	r3, [r7, #10]
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	701a      	strb	r2, [r3, #0]
  p_init->servo_reset_state = servo_info.state;
 8007e0a:	893b      	ldrh	r3, [r7, #8]
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	705a      	strb	r2, [r3, #1]
}
 8007e12:	bf00      	nop
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <init_upper>:

FSM_STATE_t init_upper(uint8_t len) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	71fb      	strb	r3, [r7, #7]
    SEND_UP,
    WAITE_LOW,
  } s_State = START;

  static uint32_t up_flow;
  switch (s_State) {
 8007e26:	4b2b      	ldr	r3, [pc, #172]	@ (8007ed4 <init_upper+0xb8>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d84d      	bhi.n	8007eca <init_upper+0xae>
 8007e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e34 <init_upper+0x18>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007e45 	.word	0x08007e45
 8007e38:	08007e4d 	.word	0x08007e4d
 8007e3c:	08007e7b 	.word	0x08007e7b
 8007e40:	08007e9b 	.word	0x08007e9b
    case START:
      s_State = SEND_INIT_LOW;
 8007e44:	4b23      	ldr	r3, [pc, #140]	@ (8007ed4 <init_upper+0xb8>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	701a      	strb	r2, [r3, #0]
      break;
 8007e4a:	e03e      	b.n	8007eca <init_upper+0xae>
    case SEND_INIT_LOW:
      send_lower(kInit, len);
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	2000      	movs	r0, #0
 8007e52:	f7ff fc83 	bl	800775c <send_lower>

      low_state = false;
 8007e56:	4b20      	ldr	r3, [pc, #128]	@ (8007ed8 <init_upper+0xbc>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_INIT_LOW;
 8007e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8007edc <init_upper+0xc0>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	601a      	str	r2, [r3, #0]

      s_State = WAITE_LOW;
 8007e62:	4b1c      	ldr	r3, [pc, #112]	@ (8007ed4 <init_upper+0xb8>)
 8007e64:	2203      	movs	r2, #3
 8007e66:	701a      	strb	r2, [r3, #0]
      LOGE("LOW FALSE");
 8007e68:	f7fb f982 	bl	8003170 <HAL_GetTick>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ee0 <init_upper+0xc4>)
 8007e70:	4619      	mov	r1, r3
 8007e72:	481c      	ldr	r0, [pc, #112]	@ (8007ee4 <init_upper+0xc8>)
 8007e74:	f001 fc7c 	bl	8009770 <iprintf>
      break;
 8007e78:	e027      	b.n	8007eca <init_upper+0xae>
    case SEND_UP:
      send_upper(kInit, len);
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	2000      	movs	r0, #0
 8007e80:	f7ff fc98 	bl	80077b4 <send_upper>

      low_state = false;
 8007e84:	4b14      	ldr	r3, [pc, #80]	@ (8007ed8 <init_upper+0xbc>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
      up_flow   = START;
 8007e8a:	4b14      	ldr	r3, [pc, #80]	@ (8007edc <init_upper+0xc0>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]

      s_State = WAITE_LOW;
 8007e90:	4b10      	ldr	r3, [pc, #64]	@ (8007ed4 <init_upper+0xb8>)
 8007e92:	2203      	movs	r2, #3
 8007e94:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e018      	b.n	8007ecc <init_upper+0xb0>
      break;
    case WAITE_LOW:
      if (true == low_state) {
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed8 <init_upper+0xbc>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00f      	beq.n	8007ec2 <init_upper+0xa6>
        LOGE("LOW TRUE");
 8007ea2:	f7fb f965 	bl	8003170 <HAL_GetTick>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee0 <init_upper+0xc4>)
 8007eaa:	4619      	mov	r1, r3
 8007eac:	480e      	ldr	r0, [pc, #56]	@ (8007ee8 <init_upper+0xcc>)
 8007eae:	f001 fc5f 	bl	8009770 <iprintf>
        switch (up_flow) {
 8007eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007edc <init_upper+0xc0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d106      	bne.n	8007ec8 <init_upper+0xac>
          case SEND_INIT_LOW:
            s_State = SEND_UP;
 8007eba:	4b06      	ldr	r3, [pc, #24]	@ (8007ed4 <init_upper+0xb8>)
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	701a      	strb	r2, [r3, #0]
        }
      } else
        s_State = WAITE_LOW;
      break;
 8007ec0:	e002      	b.n	8007ec8 <init_upper+0xac>
        s_State = WAITE_LOW;
 8007ec2:	4b04      	ldr	r3, [pc, #16]	@ (8007ed4 <init_upper+0xb8>)
 8007ec4:	2203      	movs	r2, #3
 8007ec6:	701a      	strb	r2, [r3, #0]
      break;
 8007ec8:	bf00      	nop
  }

  return fsm_onging;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	200009aa 	.word	0x200009aa
 8007ed8:	200009a2 	.word	0x200009a2
 8007edc:	200009ac 	.word	0x200009ac
 8007ee0:	0800afac 	.word	0x0800afac
 8007ee4:	0800a7fc 	.word	0x0800a7fc
 8007ee8:	0800a824 	.word	0x0800a824

08007eec <inquire_upper>:

FSM_STATE_t inquire_upper(uint8_t len) {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	71fb      	strb	r3, [r7, #7]
    SEND_UP,
    WAITE_LOW,
  } s_State = START;

  static uint32_t up_flow;
  switch (s_State) {
 8007ef6:	4b27      	ldr	r3, [pc, #156]	@ (8007f94 <inquire_upper+0xa8>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d845      	bhi.n	8007f8a <inquire_upper+0x9e>
 8007efe:	a201      	add	r2, pc, #4	@ (adr r2, 8007f04 <inquire_upper+0x18>)
 8007f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f04:	08007f15 	.word	0x08007f15
 8007f08:	08007f1d 	.word	0x08007f1d
 8007f0c:	08007f3b 	.word	0x08007f3b
 8007f10:	08007f5b 	.word	0x08007f5b
    case START:
      s_State = SEND_START_LOW;
 8007f14:	4b1f      	ldr	r3, [pc, #124]	@ (8007f94 <inquire_upper+0xa8>)
 8007f16:	2201      	movs	r2, #1
 8007f18:	701a      	strb	r2, [r3, #0]
      break;
 8007f1a:	e036      	b.n	8007f8a <inquire_upper+0x9e>
    case SEND_START_LOW:
      send_lower(kInquire, len);
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	2021      	movs	r0, #33	@ 0x21
 8007f22:	f7ff fc1b 	bl	800775c <send_lower>

      low_state = false;
 8007f26:	4b1c      	ldr	r3, [pc, #112]	@ (8007f98 <inquire_upper+0xac>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_START_LOW;
 8007f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8007f9c <inquire_upper+0xb0>)
 8007f2e:	2201      	movs	r2, #1
 8007f30:	601a      	str	r2, [r3, #0]
      s_State   = WAITE_LOW;
 8007f32:	4b18      	ldr	r3, [pc, #96]	@ (8007f94 <inquire_upper+0xa8>)
 8007f34:	2203      	movs	r2, #3
 8007f36:	701a      	strb	r2, [r3, #0]

      break;
 8007f38:	e027      	b.n	8007f8a <inquire_upper+0x9e>
    case SEND_UP:
      send_upper(kInit, len);
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f7ff fc38 	bl	80077b4 <send_upper>
      low_state = false;
 8007f44:	4b14      	ldr	r3, [pc, #80]	@ (8007f98 <inquire_upper+0xac>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_UP;
 8007f4a:	4b14      	ldr	r3, [pc, #80]	@ (8007f9c <inquire_upper+0xb0>)
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	601a      	str	r2, [r3, #0]
      s_State   = START;
 8007f50:	4b10      	ldr	r3, [pc, #64]	@ (8007f94 <inquire_upper+0xa8>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e018      	b.n	8007f8c <inquire_upper+0xa0>
      break;
    case WAITE_LOW:
      if (true == low_state) {
 8007f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f98 <inquire_upper+0xac>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00f      	beq.n	8007f82 <inquire_upper+0x96>
        LOGE("LOW TRUE");
 8007f62:	f7fb f905 	bl	8003170 <HAL_GetTick>
 8007f66:	4603      	mov	r3, r0
 8007f68:	4a0d      	ldr	r2, [pc, #52]	@ (8007fa0 <inquire_upper+0xb4>)
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	480d      	ldr	r0, [pc, #52]	@ (8007fa4 <inquire_upper+0xb8>)
 8007f6e:	f001 fbff 	bl	8009770 <iprintf>
        switch (up_flow) {
 8007f72:	4b0a      	ldr	r3, [pc, #40]	@ (8007f9c <inquire_upper+0xb0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d106      	bne.n	8007f88 <inquire_upper+0x9c>
          case SEND_START_LOW:
            s_State = SEND_UP;
 8007f7a:	4b06      	ldr	r3, [pc, #24]	@ (8007f94 <inquire_upper+0xa8>)
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	701a      	strb	r2, [r3, #0]
        }
      } else
        s_State = WAITE_LOW;
      break;
 8007f80:	e002      	b.n	8007f88 <inquire_upper+0x9c>
        s_State = WAITE_LOW;
 8007f82:	4b04      	ldr	r3, [pc, #16]	@ (8007f94 <inquire_upper+0xa8>)
 8007f84:	2203      	movs	r2, #3
 8007f86:	701a      	strb	r2, [r3, #0]
      break;
 8007f88:	bf00      	nop
  }

  return fsm_onging;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	200009b0 	.word	0x200009b0
 8007f98:	200009a2 	.word	0x200009a2
 8007f9c:	200009b4 	.word	0x200009b4
 8007fa0:	0800afb8 	.word	0x0800afb8
 8007fa4:	0800a824 	.word	0x0800a824

08007fa8 <move_action_upper>:

FSM_STATE_t move_action_upper(uint8_t len) {  // uint8_t* data, uint8_t len) {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	71fb      	strb	r3, [r7, #7]
    SEND_UP,
    WAITE_LOW,
  } s_State = START;

  static uint32_t up_flow;
  switch (s_State) {
 8007fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8008060 <move_action_upper+0xb8>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d84d      	bhi.n	8008056 <move_action_upper+0xae>
 8007fba:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc0 <move_action_upper+0x18>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08007fd1 	.word	0x08007fd1
 8007fc4:	08007fd7 	.word	0x08007fd7
 8007fc8:	08008005 	.word	0x08008005
 8007fcc:	08008035 	.word	0x08008035
    case START:
      s_State = SEND_START_LOW;
 8007fd0:	4b23      	ldr	r3, [pc, #140]	@ (8008060 <move_action_upper+0xb8>)
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	701a      	strb	r2, [r3, #0]

    case SEND_START_LOW:
      LOGE("send start");
 8007fd6:	f7fb f8cb 	bl	8003170 <HAL_GetTick>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	4a21      	ldr	r2, [pc, #132]	@ (8008064 <move_action_upper+0xbc>)
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4821      	ldr	r0, [pc, #132]	@ (8008068 <move_action_upper+0xc0>)
 8007fe2:	f001 fbc5 	bl	8009770 <iprintf>
      send_lower(kMoveAction, len);
 8007fe6:	79fb      	ldrb	r3, [r7, #7]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	2020      	movs	r0, #32
 8007fec:	f7ff fbb6 	bl	800775c <send_lower>

      low_state = false;
 8007ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800806c <move_action_upper+0xc4>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_START_LOW;
 8007ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8008070 <move_action_upper+0xc8>)
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
      s_State   = WAITE_LOW;
 8007ffc:	4b18      	ldr	r3, [pc, #96]	@ (8008060 <move_action_upper+0xb8>)
 8007ffe:	2203      	movs	r2, #3
 8008000:	701a      	strb	r2, [r3, #0]
      break;
 8008002:	e028      	b.n	8008056 <move_action_upper+0xae>
    case SEND_UP:
      LOGE("send up");
 8008004:	f7fb f8b4 	bl	8003170 <HAL_GetTick>
 8008008:	4603      	mov	r3, r0
 800800a:	4a16      	ldr	r2, [pc, #88]	@ (8008064 <move_action_upper+0xbc>)
 800800c:	4619      	mov	r1, r3
 800800e:	4819      	ldr	r0, [pc, #100]	@ (8008074 <move_action_upper+0xcc>)
 8008010:	f001 fbae 	bl	8009770 <iprintf>
      send_upper(kMoveAction, len);
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	4619      	mov	r1, r3
 8008018:	2020      	movs	r0, #32
 800801a:	f7ff fbcb 	bl	80077b4 <send_upper>

      low_state = false;
 800801e:	4b13      	ldr	r3, [pc, #76]	@ (800806c <move_action_upper+0xc4>)
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_UP;
 8008024:	4b12      	ldr	r3, [pc, #72]	@ (8008070 <move_action_upper+0xc8>)
 8008026:	2202      	movs	r2, #2
 8008028:	601a      	str	r2, [r3, #0]
      s_State   = START;
 800802a:	4b0d      	ldr	r3, [pc, #52]	@ (8008060 <move_action_upper+0xb8>)
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]

      return fsm_cpl;
 8008030:	2301      	movs	r3, #1
 8008032:	e011      	b.n	8008058 <move_action_upper+0xb0>
      break;
    case WAITE_LOW:
      // LOGE("wAIT");
      if (true == low_state) {
 8008034:	4b0d      	ldr	r3, [pc, #52]	@ (800806c <move_action_upper+0xc4>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d008      	beq.n	800804e <move_action_upper+0xa6>
        switch (up_flow) {
 800803c:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <move_action_upper+0xc8>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d107      	bne.n	8008054 <move_action_upper+0xac>
          case SEND_START_LOW:
            s_State = SEND_UP;
 8008044:	4b06      	ldr	r3, [pc, #24]	@ (8008060 <move_action_upper+0xb8>)
 8008046:	2202      	movs	r2, #2
 8008048:	701a      	strb	r2, [r3, #0]
            break;
 800804a:	bf00      	nop
        }
      } else

        s_State = WAITE_LOW;
      break;
 800804c:	e002      	b.n	8008054 <move_action_upper+0xac>
        s_State = WAITE_LOW;
 800804e:	4b04      	ldr	r3, [pc, #16]	@ (8008060 <move_action_upper+0xb8>)
 8008050:	2203      	movs	r2, #3
 8008052:	701a      	strb	r2, [r3, #0]
      break;
 8008054:	bf00      	nop
  }

  return fsm_onging;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	200009b8 	.word	0x200009b8
 8008064:	0800afc8 	.word	0x0800afc8
 8008068:	0800a848 	.word	0x0800a848
 800806c:	200009a2 	.word	0x200009a2
 8008070:	200009bc 	.word	0x200009bc
 8008074:	0800a870 	.word	0x0800a870

08008078 <book_info_upper>:

FSM_STATE_t book_info_upper(void) {
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
    SEND_UP,
    WAITE_LOW,
  } s_State = START;

  static uint32_t up_flow;
  switch (s_State) {
 800807c:	4b29      	ldr	r3, [pc, #164]	@ (8008124 <book_info_upper+0xac>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b03      	cmp	r3, #3
 8008082:	d84c      	bhi.n	800811e <book_info_upper+0xa6>
 8008084:	a201      	add	r2, pc, #4	@ (adr r2, 800808c <book_info_upper+0x14>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	0800809d 	.word	0x0800809d
 8008090:	080080a3 	.word	0x080080a3
 8008094:	080080cf 	.word	0x080080cf
 8008098:	080080fd 	.word	0x080080fd
    case START:
      s_State = SEND_START_LOW;
 800809c:	4b21      	ldr	r3, [pc, #132]	@ (8008124 <book_info_upper+0xac>)
 800809e:	2201      	movs	r2, #1
 80080a0:	701a      	strb	r2, [r3, #0]

    case SEND_START_LOW:
      LOGE("send start");
 80080a2:	f7fb f865 	bl	8003170 <HAL_GetTick>
 80080a6:	4603      	mov	r3, r0
 80080a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008128 <book_info_upper+0xb0>)
 80080aa:	4619      	mov	r1, r3
 80080ac:	481f      	ldr	r0, [pc, #124]	@ (800812c <book_info_upper+0xb4>)
 80080ae:	f001 fb5f 	bl	8009770 <iprintf>
      send_lower(kInquireBookInfo, 4 + 3 + 1);  // 4 == 数据序列， 3 == crc + 帧尾， 1 == 数据区预留位
 80080b2:	2108      	movs	r1, #8
 80080b4:	2011      	movs	r0, #17
 80080b6:	f7ff fb51 	bl	800775c <send_lower>

      low_state = false;
 80080ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008130 <book_info_upper+0xb8>)
 80080bc:	2200      	movs	r2, #0
 80080be:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_START_LOW;
 80080c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008134 <book_info_upper+0xbc>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
      s_State   = WAITE_LOW;
 80080c6:	4b17      	ldr	r3, [pc, #92]	@ (8008124 <book_info_upper+0xac>)
 80080c8:	2203      	movs	r2, #3
 80080ca:	701a      	strb	r2, [r3, #0]
      break;
 80080cc:	e027      	b.n	800811e <book_info_upper+0xa6>
    case SEND_UP:
      LOGE("send up");
 80080ce:	f7fb f84f 	bl	8003170 <HAL_GetTick>
 80080d2:	4603      	mov	r3, r0
 80080d4:	4a14      	ldr	r2, [pc, #80]	@ (8008128 <book_info_upper+0xb0>)
 80080d6:	4619      	mov	r1, r3
 80080d8:	4817      	ldr	r0, [pc, #92]	@ (8008138 <book_info_upper+0xc0>)
 80080da:	f001 fb49 	bl	8009770 <iprintf>
      send_upper(kInquireBookInfo, sizeof(Book_Info_Upper_t) + 3 + 1);
 80080de:	2116      	movs	r1, #22
 80080e0:	2011      	movs	r0, #17
 80080e2:	f7ff fb67 	bl	80077b4 <send_upper>

      low_state = false;
 80080e6:	4b12      	ldr	r3, [pc, #72]	@ (8008130 <book_info_upper+0xb8>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_UP;
 80080ec:	4b11      	ldr	r3, [pc, #68]	@ (8008134 <book_info_upper+0xbc>)
 80080ee:	2202      	movs	r2, #2
 80080f0:	601a      	str	r2, [r3, #0]
      s_State   = START;
 80080f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008124 <book_info_upper+0xac>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	701a      	strb	r2, [r3, #0]

      return fsm_cpl;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e011      	b.n	8008120 <book_info_upper+0xa8>
      break;
    case WAITE_LOW:
      // LOGE("wAIT");
      if (true == low_state) {
 80080fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008130 <book_info_upper+0xb8>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d008      	beq.n	8008116 <book_info_upper+0x9e>
        switch (up_flow) {
 8008104:	4b0b      	ldr	r3, [pc, #44]	@ (8008134 <book_info_upper+0xbc>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d107      	bne.n	800811c <book_info_upper+0xa4>
          case SEND_START_LOW:
            s_State = SEND_UP;
 800810c:	4b05      	ldr	r3, [pc, #20]	@ (8008124 <book_info_upper+0xac>)
 800810e:	2202      	movs	r2, #2
 8008110:	701a      	strb	r2, [r3, #0]
            break;
 8008112:	bf00      	nop
        }
      } else

        s_State = WAITE_LOW;
      break;
 8008114:	e002      	b.n	800811c <book_info_upper+0xa4>
        s_State = WAITE_LOW;
 8008116:	4b03      	ldr	r3, [pc, #12]	@ (8008124 <book_info_upper+0xac>)
 8008118:	2203      	movs	r2, #3
 800811a:	701a      	strb	r2, [r3, #0]
      break;
 800811c:	bf00      	nop
  }

  return fsm_onging;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	bd80      	pop	{r7, pc}
 8008124:	200009c0 	.word	0x200009c0
 8008128:	0800afdc 	.word	0x0800afdc
 800812c:	0800a848 	.word	0x0800a848
 8008130:	200009a2 	.word	0x200009a2
 8008134:	200009c4 	.word	0x200009c4
 8008138:	0800a870 	.word	0x0800a870

0800813c <book_num_upper>:

FSM_STATE_t book_num_upper(void) {
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
    SEND_UP,
    WAITE_LOW,
  } s_State = START;

  static uint32_t up_flow;
  switch (s_State) {
 8008140:	4b29      	ldr	r3, [pc, #164]	@ (80081e8 <book_num_upper+0xac>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b03      	cmp	r3, #3
 8008146:	d84c      	bhi.n	80081e2 <book_num_upper+0xa6>
 8008148:	a201      	add	r2, pc, #4	@ (adr r2, 8008150 <book_num_upper+0x14>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008161 	.word	0x08008161
 8008154:	08008167 	.word	0x08008167
 8008158:	08008193 	.word	0x08008193
 800815c:	080081c1 	.word	0x080081c1
    case START:
      s_State = SEND_START_LOW;
 8008160:	4b21      	ldr	r3, [pc, #132]	@ (80081e8 <book_num_upper+0xac>)
 8008162:	2201      	movs	r2, #1
 8008164:	701a      	strb	r2, [r3, #0]

    case SEND_START_LOW:
      LOGE("send start");
 8008166:	f7fb f803 	bl	8003170 <HAL_GetTick>
 800816a:	4603      	mov	r3, r0
 800816c:	4a1f      	ldr	r2, [pc, #124]	@ (80081ec <book_num_upper+0xb0>)
 800816e:	4619      	mov	r1, r3
 8008170:	481f      	ldr	r0, [pc, #124]	@ (80081f0 <book_num_upper+0xb4>)
 8008172:	f001 fafd 	bl	8009770 <iprintf>
      send_lower(kInquireBookNum, 4 + 3 + 1);  // 4 == 数据序列， 3 == crc + 帧尾， 1 == 数据区预留位
 8008176:	2108      	movs	r1, #8
 8008178:	2010      	movs	r0, #16
 800817a:	f7ff faef 	bl	800775c <send_lower>

      low_state = false;
 800817e:	4b1d      	ldr	r3, [pc, #116]	@ (80081f4 <book_num_upper+0xb8>)
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_START_LOW;
 8008184:	4b1c      	ldr	r3, [pc, #112]	@ (80081f8 <book_num_upper+0xbc>)
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
      s_State   = WAITE_LOW;
 800818a:	4b17      	ldr	r3, [pc, #92]	@ (80081e8 <book_num_upper+0xac>)
 800818c:	2203      	movs	r2, #3
 800818e:	701a      	strb	r2, [r3, #0]
      break;
 8008190:	e027      	b.n	80081e2 <book_num_upper+0xa6>
    case SEND_UP:
      LOGE("send up");
 8008192:	f7fa ffed 	bl	8003170 <HAL_GetTick>
 8008196:	4603      	mov	r3, r0
 8008198:	4a14      	ldr	r2, [pc, #80]	@ (80081ec <book_num_upper+0xb0>)
 800819a:	4619      	mov	r1, r3
 800819c:	4817      	ldr	r0, [pc, #92]	@ (80081fc <book_num_upper+0xc0>)
 800819e:	f001 fae7 	bl	8009770 <iprintf>
      send_upper(kInquireBookNum, 4 + 3 + 1);
 80081a2:	2108      	movs	r1, #8
 80081a4:	2010      	movs	r0, #16
 80081a6:	f7ff fb05 	bl	80077b4 <send_upper>

      low_state = false;
 80081aa:	4b12      	ldr	r3, [pc, #72]	@ (80081f4 <book_num_upper+0xb8>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_UP;
 80081b0:	4b11      	ldr	r3, [pc, #68]	@ (80081f8 <book_num_upper+0xbc>)
 80081b2:	2202      	movs	r2, #2
 80081b4:	601a      	str	r2, [r3, #0]
      s_State   = START;
 80081b6:	4b0c      	ldr	r3, [pc, #48]	@ (80081e8 <book_num_upper+0xac>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	701a      	strb	r2, [r3, #0]

      return fsm_cpl;
 80081bc:	2301      	movs	r3, #1
 80081be:	e011      	b.n	80081e4 <book_num_upper+0xa8>
      break;
    case WAITE_LOW:
      // LOGE("wAIT");
      if (true == low_state) {
 80081c0:	4b0c      	ldr	r3, [pc, #48]	@ (80081f4 <book_num_upper+0xb8>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d008      	beq.n	80081da <book_num_upper+0x9e>
        switch (up_flow) {
 80081c8:	4b0b      	ldr	r3, [pc, #44]	@ (80081f8 <book_num_upper+0xbc>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d107      	bne.n	80081e0 <book_num_upper+0xa4>
          case SEND_START_LOW:
            s_State = SEND_UP;
 80081d0:	4b05      	ldr	r3, [pc, #20]	@ (80081e8 <book_num_upper+0xac>)
 80081d2:	2202      	movs	r2, #2
 80081d4:	701a      	strb	r2, [r3, #0]
            break;
 80081d6:	bf00      	nop
        }
      } else

        s_State = WAITE_LOW;
      break;
 80081d8:	e002      	b.n	80081e0 <book_num_upper+0xa4>
        s_State = WAITE_LOW;
 80081da:	4b03      	ldr	r3, [pc, #12]	@ (80081e8 <book_num_upper+0xac>)
 80081dc:	2203      	movs	r2, #3
 80081de:	701a      	strb	r2, [r3, #0]
      break;
 80081e0:	bf00      	nop
  }

  return fsm_onging;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	200009c8 	.word	0x200009c8
 80081ec:	0800afec 	.word	0x0800afec
 80081f0:	0800a848 	.word	0x0800a848
 80081f4:	200009a2 	.word	0x200009a2
 80081f8:	200009cc 	.word	0x200009cc
 80081fc:	0800a870 	.word	0x0800a870

08008200 <syn_clock_upper>:

FSM_STATE_t syn_clock_upper(void) {
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
    SEND_START_LOW,
    WAITE_LOW,
  } s_State = START;

  static uint32_t up_flow;
  switch (s_State) {
 8008204:	4b1b      	ldr	r3, [pc, #108]	@ (8008274 <syn_clock_upper+0x74>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b02      	cmp	r3, #2
 800820a:	d01f      	beq.n	800824c <syn_clock_upper+0x4c>
 800820c:	2b02      	cmp	r3, #2
 800820e:	dc2e      	bgt.n	800826e <syn_clock_upper+0x6e>
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <syn_clock_upper+0x1a>
 8008214:	2b01      	cmp	r3, #1
 8008216:	d003      	beq.n	8008220 <syn_clock_upper+0x20>
 8008218:	e029      	b.n	800826e <syn_clock_upper+0x6e>
    case START:
      s_State = SEND_START_LOW;
 800821a:	4b16      	ldr	r3, [pc, #88]	@ (8008274 <syn_clock_upper+0x74>)
 800821c:	2201      	movs	r2, #1
 800821e:	701a      	strb	r2, [r3, #0]

    case SEND_START_LOW:
      LOGE("send start");
 8008220:	f7fa ffa6 	bl	8003170 <HAL_GetTick>
 8008224:	4603      	mov	r3, r0
 8008226:	4a14      	ldr	r2, [pc, #80]	@ (8008278 <syn_clock_upper+0x78>)
 8008228:	4619      	mov	r1, r3
 800822a:	4814      	ldr	r0, [pc, #80]	@ (800827c <syn_clock_upper+0x7c>)
 800822c:	f001 faa0 	bl	8009770 <iprintf>
      send_lower(kSynClock, 4);
 8008230:	2104      	movs	r1, #4
 8008232:	2030      	movs	r0, #48	@ 0x30
 8008234:	f7ff fa92 	bl	800775c <send_lower>

      low_state = false;
 8008238:	4b11      	ldr	r3, [pc, #68]	@ (8008280 <syn_clock_upper+0x80>)
 800823a:	2200      	movs	r2, #0
 800823c:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_START_LOW;
 800823e:	4b11      	ldr	r3, [pc, #68]	@ (8008284 <syn_clock_upper+0x84>)
 8008240:	2201      	movs	r2, #1
 8008242:	601a      	str	r2, [r3, #0]
      s_State   = WAITE_LOW;
 8008244:	4b0b      	ldr	r3, [pc, #44]	@ (8008274 <syn_clock_upper+0x74>)
 8008246:	2202      	movs	r2, #2
 8008248:	701a      	strb	r2, [r3, #0]
      break;
 800824a:	e010      	b.n	800826e <syn_clock_upper+0x6e>
    case WAITE_LOW:
      // LOGE("wAIT");
      if (true == low_state) {
 800824c:	4b0c      	ldr	r3, [pc, #48]	@ (8008280 <syn_clock_upper+0x80>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d008      	beq.n	8008266 <syn_clock_upper+0x66>
        switch (up_flow) {
 8008254:	4b0b      	ldr	r3, [pc, #44]	@ (8008284 <syn_clock_upper+0x84>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d107      	bne.n	800826c <syn_clock_upper+0x6c>
          case SEND_START_LOW:
            s_State = START;
 800825c:	4b05      	ldr	r3, [pc, #20]	@ (8008274 <syn_clock_upper+0x74>)
 800825e:	2200      	movs	r2, #0
 8008260:	701a      	strb	r2, [r3, #0]
            return fsm_cpl;
 8008262:	2301      	movs	r3, #1
 8008264:	e004      	b.n	8008270 <syn_clock_upper+0x70>
        }
      } else
        s_State = WAITE_LOW;
 8008266:	4b03      	ldr	r3, [pc, #12]	@ (8008274 <syn_clock_upper+0x74>)
 8008268:	2202      	movs	r2, #2
 800826a:	701a      	strb	r2, [r3, #0]
      break;
 800826c:	bf00      	nop
  }

  return fsm_onging;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	bd80      	pop	{r7, pc}
 8008274:	200009d0 	.word	0x200009d0
 8008278:	0800affc 	.word	0x0800affc
 800827c:	0800a848 	.word	0x0800a848
 8008280:	200009a2 	.word	0x200009a2
 8008284:	200009d4 	.word	0x200009d4

08008288 <init_low>:

FSM_STATE_t init_low(void) {
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0

  static enum {
    START,
    RECV_INIT,
  } s_State = START;
  switch (s_State) {
 800828e:	4b1b      	ldr	r3, [pc, #108]	@ (80082fc <init_low+0x74>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <init_low+0x14>
 8008296:	2b01      	cmp	r3, #1
 8008298:	d003      	beq.n	80082a2 <init_low+0x1a>
 800829a:	e029      	b.n	80082f0 <init_low+0x68>
    case START:
      s_State = RECV_INIT;
 800829c:	4b17      	ldr	r3, [pc, #92]	@ (80082fc <init_low+0x74>)
 800829e:	2201      	movs	r2, #1
 80082a0:	701a      	strb	r2, [r3, #0]
    case RECV_INIT:
      memcpy(up_recv_buf, low_recv_buf, low_recv_len);
 80082a2:	4b17      	ldr	r3, [pc, #92]	@ (8008300 <init_low+0x78>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	4916      	ldr	r1, [pc, #88]	@ (8008304 <init_low+0x7c>)
 80082aa:	4817      	ldr	r0, [pc, #92]	@ (8008308 <init_low+0x80>)
 80082ac:	f001 fb31 	bl	8009912 <memcpy>
      up_recv_len = low_recv_len;
 80082b0:	4b13      	ldr	r3, [pc, #76]	@ (8008300 <init_low+0x78>)
 80082b2:	781a      	ldrb	r2, [r3, #0]
 80082b4:	4b15      	ldr	r3, [pc, #84]	@ (800830c <init_low+0x84>)
 80082b6:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < up_recv_len; i++)  //
 80082b8:	2300      	movs	r3, #0
 80082ba:	607b      	str	r3, [r7, #4]
 80082bc:	e00d      	b.n	80082da <init_low+0x52>
        LOGI("%02x", up_recv_buf[i]);
 80082be:	f7fa ff57 	bl	8003170 <HAL_GetTick>
 80082c2:	4601      	mov	r1, r0
 80082c4:	4a10      	ldr	r2, [pc, #64]	@ (8008308 <init_low+0x80>)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4413      	add	r3, r2
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	4a10      	ldr	r2, [pc, #64]	@ (8008310 <init_low+0x88>)
 80082ce:	4811      	ldr	r0, [pc, #68]	@ (8008314 <init_low+0x8c>)
 80082d0:	f001 fa4e 	bl	8009770 <iprintf>
      for (int i = 0; i < up_recv_len; i++)  //
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3301      	adds	r3, #1
 80082d8:	607b      	str	r3, [r7, #4]
 80082da:	4b0c      	ldr	r3, [pc, #48]	@ (800830c <init_low+0x84>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4293      	cmp	r3, r2
 80082e4:	dbeb      	blt.n	80082be <init_low+0x36>
      s_State = START;
 80082e6:	4b05      	ldr	r3, [pc, #20]	@ (80082fc <init_low+0x74>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e000      	b.n	80082f2 <init_low+0x6a>
      break;
  }

  return fsm_onging;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	200009d8 	.word	0x200009d8
 8008300:	200009a0 	.word	0x200009a0
 8008304:	200008a0 	.word	0x200008a0
 8008308:	2000079c 	.word	0x2000079c
 800830c:	2000089c 	.word	0x2000089c
 8008310:	0800b00c 	.word	0x0800b00c
 8008314:	0800a6d8 	.word	0x0800a6d8

08008318 <move_action_low>:

FSM_STATE_t move_action_low(void) {
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
    // RECV_SYN_CLOCK,
    RECV_START,
    WAITE,
  } s_State = START;

  switch (s_State) {
 800831e:	4b1f      	ldr	r3, [pc, #124]	@ (800839c <move_action_low+0x84>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <move_action_low+0x14>
 8008326:	2b01      	cmp	r3, #1
 8008328:	d003      	beq.n	8008332 <move_action_low+0x1a>
 800832a:	e031      	b.n	8008390 <move_action_low+0x78>
    case START:
      s_State = RECV_START;
 800832c:	4b1b      	ldr	r3, [pc, #108]	@ (800839c <move_action_low+0x84>)
 800832e:	2201      	movs	r2, #1
 8008330:	701a      	strb	r2, [r3, #0]
    case RECV_START:
      LOGI("RECV START");
 8008332:	f7fa ff1d 	bl	8003170 <HAL_GetTick>
 8008336:	4603      	mov	r3, r0
 8008338:	4a19      	ldr	r2, [pc, #100]	@ (80083a0 <move_action_low+0x88>)
 800833a:	4619      	mov	r1, r3
 800833c:	4819      	ldr	r0, [pc, #100]	@ (80083a4 <move_action_low+0x8c>)
 800833e:	f001 fa17 	bl	8009770 <iprintf>
      memcpy(up_recv_buf, low_recv_buf, low_recv_len);
 8008342:	4b19      	ldr	r3, [pc, #100]	@ (80083a8 <move_action_low+0x90>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	4918      	ldr	r1, [pc, #96]	@ (80083ac <move_action_low+0x94>)
 800834a:	4819      	ldr	r0, [pc, #100]	@ (80083b0 <move_action_low+0x98>)
 800834c:	f001 fae1 	bl	8009912 <memcpy>
      up_recv_len = low_recv_len;
 8008350:	4b15      	ldr	r3, [pc, #84]	@ (80083a8 <move_action_low+0x90>)
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	4b17      	ldr	r3, [pc, #92]	@ (80083b4 <move_action_low+0x9c>)
 8008356:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < up_recv_len; i++)  //
 8008358:	2300      	movs	r3, #0
 800835a:	607b      	str	r3, [r7, #4]
 800835c:	e00d      	b.n	800837a <move_action_low+0x62>
        LOGI("%02x", up_recv_buf[i]);
 800835e:	f7fa ff07 	bl	8003170 <HAL_GetTick>
 8008362:	4601      	mov	r1, r0
 8008364:	4a12      	ldr	r2, [pc, #72]	@ (80083b0 <move_action_low+0x98>)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4413      	add	r3, r2
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	4a0c      	ldr	r2, [pc, #48]	@ (80083a0 <move_action_low+0x88>)
 800836e:	4812      	ldr	r0, [pc, #72]	@ (80083b8 <move_action_low+0xa0>)
 8008370:	f001 f9fe 	bl	8009770 <iprintf>
      for (int i = 0; i < up_recv_len; i++)  //
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3301      	adds	r3, #1
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	4b0e      	ldr	r3, [pc, #56]	@ (80083b4 <move_action_low+0x9c>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4293      	cmp	r3, r2
 8008384:	dbeb      	blt.n	800835e <move_action_low+0x46>
      s_State = START;
 8008386:	4b05      	ldr	r3, [pc, #20]	@ (800839c <move_action_low+0x84>)
 8008388:	2200      	movs	r2, #0
 800838a:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 800838c:	2301      	movs	r3, #1
 800838e:	e000      	b.n	8008392 <move_action_low+0x7a>

      break;
  }

  return fsm_onging;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	200009d9 	.word	0x200009d9
 80083a0:	0800b018 	.word	0x0800b018
 80083a4:	0800a894 	.word	0x0800a894
 80083a8:	200009a0 	.word	0x200009a0
 80083ac:	200008a0 	.word	0x200008a0
 80083b0:	2000079c 	.word	0x2000079c
 80083b4:	2000089c 	.word	0x2000089c
 80083b8:	0800a6d8 	.word	0x0800a6d8

080083bc <inquire_low>:

FSM_STATE_t inquire_low(void) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
    // RECV_SYN_CLOCK,
    RECV_START,
    WAITE,
  } s_State = START;

  switch (s_State) {
 80083c2:	4b1f      	ldr	r3, [pc, #124]	@ (8008440 <inquire_low+0x84>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <inquire_low+0x14>
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d003      	beq.n	80083d6 <inquire_low+0x1a>
 80083ce:	e031      	b.n	8008434 <inquire_low+0x78>
    case START:
      s_State = RECV_START;
 80083d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008440 <inquire_low+0x84>)
 80083d2:	2201      	movs	r2, #1
 80083d4:	701a      	strb	r2, [r3, #0]

    case RECV_START:
      LOGI("RECV START");
 80083d6:	f7fa fecb 	bl	8003170 <HAL_GetTick>
 80083da:	4603      	mov	r3, r0
 80083dc:	4a19      	ldr	r2, [pc, #100]	@ (8008444 <inquire_low+0x88>)
 80083de:	4619      	mov	r1, r3
 80083e0:	4819      	ldr	r0, [pc, #100]	@ (8008448 <inquire_low+0x8c>)
 80083e2:	f001 f9c5 	bl	8009770 <iprintf>
      memcpy(up_recv_buf, low_recv_buf, low_recv_len);
 80083e6:	4b19      	ldr	r3, [pc, #100]	@ (800844c <inquire_low+0x90>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	4918      	ldr	r1, [pc, #96]	@ (8008450 <inquire_low+0x94>)
 80083ee:	4819      	ldr	r0, [pc, #100]	@ (8008454 <inquire_low+0x98>)
 80083f0:	f001 fa8f 	bl	8009912 <memcpy>
      up_recv_len = low_recv_len;
 80083f4:	4b15      	ldr	r3, [pc, #84]	@ (800844c <inquire_low+0x90>)
 80083f6:	781a      	ldrb	r2, [r3, #0]
 80083f8:	4b17      	ldr	r3, [pc, #92]	@ (8008458 <inquire_low+0x9c>)
 80083fa:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < up_recv_len; i++)  //
 80083fc:	2300      	movs	r3, #0
 80083fe:	607b      	str	r3, [r7, #4]
 8008400:	e00d      	b.n	800841e <inquire_low+0x62>
        LOGI("%02x", up_recv_buf[i]);
 8008402:	f7fa feb5 	bl	8003170 <HAL_GetTick>
 8008406:	4601      	mov	r1, r0
 8008408:	4a12      	ldr	r2, [pc, #72]	@ (8008454 <inquire_low+0x98>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	4a0c      	ldr	r2, [pc, #48]	@ (8008444 <inquire_low+0x88>)
 8008412:	4812      	ldr	r0, [pc, #72]	@ (800845c <inquire_low+0xa0>)
 8008414:	f001 f9ac 	bl	8009770 <iprintf>
      for (int i = 0; i < up_recv_len; i++)  //
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3301      	adds	r3, #1
 800841c:	607b      	str	r3, [r7, #4]
 800841e:	4b0e      	ldr	r3, [pc, #56]	@ (8008458 <inquire_low+0x9c>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4293      	cmp	r3, r2
 8008428:	dbeb      	blt.n	8008402 <inquire_low+0x46>
      s_State = START;
 800842a:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <inquire_low+0x84>)
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <inquire_low+0x7a>

      break;
  }

  return fsm_onging;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	200009da 	.word	0x200009da
 8008444:	0800b028 	.word	0x0800b028
 8008448:	0800a894 	.word	0x0800a894
 800844c:	200009a0 	.word	0x200009a0
 8008450:	200008a0 	.word	0x200008a0
 8008454:	2000079c 	.word	0x2000079c
 8008458:	2000089c 	.word	0x2000089c
 800845c:	0800a6d8 	.word	0x0800a6d8

08008460 <book_info_low>:

FSM_STATE_t book_info_low(void) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
    // RECV_SYN_CLOCK,
    RECV_START,
    WAITE,
  } s_State = START;

  switch (s_State) {
 8008466:	4b1f      	ldr	r3, [pc, #124]	@ (80084e4 <book_info_low+0x84>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <book_info_low+0x14>
 800846e:	2b01      	cmp	r3, #1
 8008470:	d003      	beq.n	800847a <book_info_low+0x1a>
 8008472:	e031      	b.n	80084d8 <book_info_low+0x78>
    case START:
      s_State = RECV_START;
 8008474:	4b1b      	ldr	r3, [pc, #108]	@ (80084e4 <book_info_low+0x84>)
 8008476:	2201      	movs	r2, #1
 8008478:	701a      	strb	r2, [r3, #0]
    case RECV_START:
      LOGI("RECV START");
 800847a:	f7fa fe79 	bl	8003170 <HAL_GetTick>
 800847e:	4603      	mov	r3, r0
 8008480:	4a19      	ldr	r2, [pc, #100]	@ (80084e8 <book_info_low+0x88>)
 8008482:	4619      	mov	r1, r3
 8008484:	4819      	ldr	r0, [pc, #100]	@ (80084ec <book_info_low+0x8c>)
 8008486:	f001 f973 	bl	8009770 <iprintf>
      memcpy(up_recv_buf, low_recv_buf, low_recv_len);
 800848a:	4b19      	ldr	r3, [pc, #100]	@ (80084f0 <book_info_low+0x90>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	4918      	ldr	r1, [pc, #96]	@ (80084f4 <book_info_low+0x94>)
 8008492:	4819      	ldr	r0, [pc, #100]	@ (80084f8 <book_info_low+0x98>)
 8008494:	f001 fa3d 	bl	8009912 <memcpy>
      up_recv_len = low_recv_len;
 8008498:	4b15      	ldr	r3, [pc, #84]	@ (80084f0 <book_info_low+0x90>)
 800849a:	781a      	ldrb	r2, [r3, #0]
 800849c:	4b17      	ldr	r3, [pc, #92]	@ (80084fc <book_info_low+0x9c>)
 800849e:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < up_recv_len; i++)  //
 80084a0:	2300      	movs	r3, #0
 80084a2:	607b      	str	r3, [r7, #4]
 80084a4:	e00d      	b.n	80084c2 <book_info_low+0x62>
        LOGI("%02x", up_recv_buf[i]);
 80084a6:	f7fa fe63 	bl	8003170 <HAL_GetTick>
 80084aa:	4601      	mov	r1, r0
 80084ac:	4a12      	ldr	r2, [pc, #72]	@ (80084f8 <book_info_low+0x98>)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	4a0c      	ldr	r2, [pc, #48]	@ (80084e8 <book_info_low+0x88>)
 80084b6:	4812      	ldr	r0, [pc, #72]	@ (8008500 <book_info_low+0xa0>)
 80084b8:	f001 f95a 	bl	8009770 <iprintf>
      for (int i = 0; i < up_recv_len; i++)  //
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3301      	adds	r3, #1
 80084c0:	607b      	str	r3, [r7, #4]
 80084c2:	4b0e      	ldr	r3, [pc, #56]	@ (80084fc <book_info_low+0x9c>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4293      	cmp	r3, r2
 80084cc:	dbeb      	blt.n	80084a6 <book_info_low+0x46>
      s_State = START;
 80084ce:	4b05      	ldr	r3, [pc, #20]	@ (80084e4 <book_info_low+0x84>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e000      	b.n	80084da <book_info_low+0x7a>

      break;
  }

  return fsm_onging;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	200009db 	.word	0x200009db
 80084e8:	0800b034 	.word	0x0800b034
 80084ec:	0800a894 	.word	0x0800a894
 80084f0:	200009a0 	.word	0x200009a0
 80084f4:	200008a0 	.word	0x200008a0
 80084f8:	2000079c 	.word	0x2000079c
 80084fc:	2000089c 	.word	0x2000089c
 8008500:	0800a6d8 	.word	0x0800a6d8

08008504 <book_num_low>:

FSM_STATE_t book_num_low(void) {
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
    // RECV_SYN_CLOCK,
    RECV_START,
    WAITE,
  } s_State = START;

  switch (s_State) {
 800850a:	4b1f      	ldr	r3, [pc, #124]	@ (8008588 <book_num_low+0x84>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <book_num_low+0x14>
 8008512:	2b01      	cmp	r3, #1
 8008514:	d003      	beq.n	800851e <book_num_low+0x1a>
 8008516:	e031      	b.n	800857c <book_num_low+0x78>
    case START:
      s_State = RECV_START;
 8008518:	4b1b      	ldr	r3, [pc, #108]	@ (8008588 <book_num_low+0x84>)
 800851a:	2201      	movs	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
    case RECV_START:
      LOGI("RECV START");
 800851e:	f7fa fe27 	bl	8003170 <HAL_GetTick>
 8008522:	4603      	mov	r3, r0
 8008524:	4a19      	ldr	r2, [pc, #100]	@ (800858c <book_num_low+0x88>)
 8008526:	4619      	mov	r1, r3
 8008528:	4819      	ldr	r0, [pc, #100]	@ (8008590 <book_num_low+0x8c>)
 800852a:	f001 f921 	bl	8009770 <iprintf>
      memcpy(up_recv_buf, low_recv_buf, low_recv_len);
 800852e:	4b19      	ldr	r3, [pc, #100]	@ (8008594 <book_num_low+0x90>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	4918      	ldr	r1, [pc, #96]	@ (8008598 <book_num_low+0x94>)
 8008536:	4819      	ldr	r0, [pc, #100]	@ (800859c <book_num_low+0x98>)
 8008538:	f001 f9eb 	bl	8009912 <memcpy>
      up_recv_len = low_recv_len;
 800853c:	4b15      	ldr	r3, [pc, #84]	@ (8008594 <book_num_low+0x90>)
 800853e:	781a      	ldrb	r2, [r3, #0]
 8008540:	4b17      	ldr	r3, [pc, #92]	@ (80085a0 <book_num_low+0x9c>)
 8008542:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < up_recv_len; i++)  //
 8008544:	2300      	movs	r3, #0
 8008546:	607b      	str	r3, [r7, #4]
 8008548:	e00d      	b.n	8008566 <book_num_low+0x62>
        LOGI("%02x", up_recv_buf[i]);
 800854a:	f7fa fe11 	bl	8003170 <HAL_GetTick>
 800854e:	4601      	mov	r1, r0
 8008550:	4a12      	ldr	r2, [pc, #72]	@ (800859c <book_num_low+0x98>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4413      	add	r3, r2
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	4a0c      	ldr	r2, [pc, #48]	@ (800858c <book_num_low+0x88>)
 800855a:	4812      	ldr	r0, [pc, #72]	@ (80085a4 <book_num_low+0xa0>)
 800855c:	f001 f908 	bl	8009770 <iprintf>
      for (int i = 0; i < up_recv_len; i++)  //
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3301      	adds	r3, #1
 8008564:	607b      	str	r3, [r7, #4]
 8008566:	4b0e      	ldr	r3, [pc, #56]	@ (80085a0 <book_num_low+0x9c>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4293      	cmp	r3, r2
 8008570:	dbeb      	blt.n	800854a <book_num_low+0x46>
      s_State = START;
 8008572:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <book_num_low+0x84>)
 8008574:	2200      	movs	r2, #0
 8008576:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 8008578:	2301      	movs	r3, #1
 800857a:	e000      	b.n	800857e <book_num_low+0x7a>

      break;
  }

  return fsm_onging;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	200009dc 	.word	0x200009dc
 800858c:	0800b044 	.word	0x0800b044
 8008590:	0800a894 	.word	0x0800a894
 8008594:	200009a0 	.word	0x200009a0
 8008598:	200008a0 	.word	0x200008a0
 800859c:	2000079c 	.word	0x2000079c
 80085a0:	2000089c 	.word	0x2000089c
 80085a4:	0800a6d8 	.word	0x0800a6d8

080085a8 <transfer_process>:

  return fsm_onging;
}

// 先一条龙服务。上位机 -> 中 -> 下位机
void transfer_process(void) {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
  CMD_HEAD_t* p_head_recv = (CMD_HEAD_t*)recv_buf;
 80085ae:	4b2e      	ldr	r3, [pc, #184]	@ (8008668 <transfer_process+0xc0>)
 80085b0:	607b      	str	r3, [r7, #4]

  if (0x0B == p_head_recv->addr) {  // 下位机
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	78db      	ldrb	r3, [r3, #3]
 80085b6:	2b0b      	cmp	r3, #11
 80085b8:	d116      	bne.n	80085e8 <transfer_process+0x40>
    LOGI("RECV lower");
 80085ba:	f7fa fdd9 	bl	8003170 <HAL_GetTick>
 80085be:	4603      	mov	r3, r0
 80085c0:	4a2a      	ldr	r2, [pc, #168]	@ (800866c <transfer_process+0xc4>)
 80085c2:	4619      	mov	r1, r3
 80085c4:	482a      	ldr	r0, [pc, #168]	@ (8008670 <transfer_process+0xc8>)
 80085c6:	f001 f8d3 	bl	8009770 <iprintf>
    memcpy(low_recv_buf, recv_buf, recv_len);
 80085ca:	4b2a      	ldr	r3, [pc, #168]	@ (8008674 <transfer_process+0xcc>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	4925      	ldr	r1, [pc, #148]	@ (8008668 <transfer_process+0xc0>)
 80085d2:	4829      	ldr	r0, [pc, #164]	@ (8008678 <transfer_process+0xd0>)
 80085d4:	f001 f99d 	bl	8009912 <memcpy>
    low_recv_len = recv_len;
 80085d8:	4b26      	ldr	r3, [pc, #152]	@ (8008674 <transfer_process+0xcc>)
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	4b27      	ldr	r3, [pc, #156]	@ (800867c <transfer_process+0xd4>)
 80085de:	701a      	strb	r2, [r3, #0]
    low_start    = true;
 80085e0:	4b27      	ldr	r3, [pc, #156]	@ (8008680 <transfer_process+0xd8>)
 80085e2:	2201      	movs	r2, #1
 80085e4:	701a      	strb	r2, [r3, #0]
 80085e6:	e019      	b.n	800861c <transfer_process+0x74>
  } else if (0x0A == p_head_recv->addr) {  // 上位机
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	78db      	ldrb	r3, [r3, #3]
 80085ec:	2b0a      	cmp	r3, #10
 80085ee:	d115      	bne.n	800861c <transfer_process+0x74>
    LOGI("RECV upper");
 80085f0:	f7fa fdbe 	bl	8003170 <HAL_GetTick>
 80085f4:	4603      	mov	r3, r0
 80085f6:	4a1d      	ldr	r2, [pc, #116]	@ (800866c <transfer_process+0xc4>)
 80085f8:	4619      	mov	r1, r3
 80085fa:	4822      	ldr	r0, [pc, #136]	@ (8008684 <transfer_process+0xdc>)
 80085fc:	f001 f8b8 	bl	8009770 <iprintf>
    memcpy(up_recv_buf, recv_buf, recv_len);
 8008600:	4b1c      	ldr	r3, [pc, #112]	@ (8008674 <transfer_process+0xcc>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	4918      	ldr	r1, [pc, #96]	@ (8008668 <transfer_process+0xc0>)
 8008608:	481f      	ldr	r0, [pc, #124]	@ (8008688 <transfer_process+0xe0>)
 800860a:	f001 f982 	bl	8009912 <memcpy>
    up_recv_len = recv_len;
 800860e:	4b19      	ldr	r3, [pc, #100]	@ (8008674 <transfer_process+0xcc>)
 8008610:	781a      	ldrb	r2, [r3, #0]
 8008612:	4b1e      	ldr	r3, [pc, #120]	@ (800868c <transfer_process+0xe4>)
 8008614:	701a      	strb	r2, [r3, #0]
    upper_start = true;
 8008616:	4b1e      	ldr	r3, [pc, #120]	@ (8008690 <transfer_process+0xe8>)
 8008618:	2201      	movs	r2, #1
 800861a:	701a      	strb	r2, [r3, #0]

    // for (int i = 0; i < up_recv_len; i++)  //
    //   LOGI("%02x", up_recv_buf[i]);
  }

  if (upper_start) {
 800861c:	4b1c      	ldr	r3, [pc, #112]	@ (8008690 <transfer_process+0xe8>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <transfer_process+0x88>
    upper_process(up_recv_buf, up_recv_len);
 8008624:	4b19      	ldr	r3, [pc, #100]	@ (800868c <transfer_process+0xe4>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	4619      	mov	r1, r3
 800862a:	4817      	ldr	r0, [pc, #92]	@ (8008688 <transfer_process+0xe0>)
 800862c:	f000 f832 	bl	8008694 <upper_process>
  }
  if (low_start) {
 8008630:	4b13      	ldr	r3, [pc, #76]	@ (8008680 <transfer_process+0xd8>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <transfer_process+0x9c>
    lower_process(low_recv_buf, low_recv_len);
 8008638:	4b10      	ldr	r3, [pc, #64]	@ (800867c <transfer_process+0xd4>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	4619      	mov	r1, r3
 800863e:	480e      	ldr	r0, [pc, #56]	@ (8008678 <transfer_process+0xd0>)
 8008640:	f000 f970 	bl	8008924 <lower_process>
  }

  memset(recv_buf, 0, recv_len);
 8008644:	4b0b      	ldr	r3, [pc, #44]	@ (8008674 <transfer_process+0xcc>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	2100      	movs	r1, #0
 800864c:	4806      	ldr	r0, [pc, #24]	@ (8008668 <transfer_process+0xc0>)
 800864e:	f001 f8e4 	bl	800981a <memset>
  recv_len = 0;
 8008652:	4b08      	ldr	r3, [pc, #32]	@ (8008674 <transfer_process+0xcc>)
 8008654:	2200      	movs	r2, #0
 8008656:	701a      	strb	r2, [r3, #0]
  transmit_using(false);
 8008658:	2000      	movs	r0, #0
 800865a:	f000 fa7f 	bl	8008b5c <transmit_using>
}
 800865e:	bf00      	nop
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20000698 	.word	0x20000698
 800866c:	0800b054 	.word	0x0800b054
 8008670:	0800a8bc 	.word	0x0800a8bc
 8008674:	20000798 	.word	0x20000798
 8008678:	200008a0 	.word	0x200008a0
 800867c:	200009a0 	.word	0x200009a0
 8008680:	200009a1 	.word	0x200009a1
 8008684:	0800a8e4 	.word	0x0800a8e4
 8008688:	2000079c 	.word	0x2000079c
 800868c:	2000089c 	.word	0x2000089c
 8008690:	2000089d 	.word	0x2000089d

08008694 <upper_process>:

static uint8_t revc_cmd;

void upper_process(uint8_t* packet, uint8_t len) {
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af02      	add	r7, sp, #8
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  CMD_HEAD_t* p_head_recv = (CMD_HEAD_t*)packet;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	613b      	str	r3, [r7, #16]
  Motor_t*    servo_set   = get_servo_set_info();
 80086a4:	f000 fab2 	bl	8008c0c <get_servo_set_info>
 80086a8:	60f8      	str	r0, [r7, #12]
  // for (int i = 0; i < data_size; i++) {
  //   LOGI("%02x", data_region[i]);
  // }
  Move_Action_t* p_action = (Move_Action_t*)(&(packet[sizeof(CMD_HEAD_t)]));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3306      	adds	r3, #6
 80086ae:	60bb      	str	r3, [r7, #8]

  switch (p_head_recv->cmd) {
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d051      	beq.n	800875c <upper_process+0xc8>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f2c0 8114 	blt.w	80088e6 <upper_process+0x252>
 80086be:	2b30      	cmp	r3, #48	@ 0x30
 80086c0:	f300 8111 	bgt.w	80088e6 <upper_process+0x252>
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	f2c0 810e 	blt.w	80088e6 <upper_process+0x252>
 80086ca:	3b10      	subs	r3, #16
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	f200 810a 	bhi.w	80088e6 <upper_process+0x252>
 80086d2:	a201      	add	r2, pc, #4	@ (adr r2, 80086d8 <upper_process+0x44>)
 80086d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d8:	0800886b 	.word	0x0800886b
 80086dc:	0800888d 	.word	0x0800888d
 80086e0:	080088e7 	.word	0x080088e7
 80086e4:	080088e7 	.word	0x080088e7
 80086e8:	080088e7 	.word	0x080088e7
 80086ec:	080088e7 	.word	0x080088e7
 80086f0:	080088e7 	.word	0x080088e7
 80086f4:	080088e7 	.word	0x080088e7
 80086f8:	080088e7 	.word	0x080088e7
 80086fc:	080088e7 	.word	0x080088e7
 8008700:	080088e7 	.word	0x080088e7
 8008704:	080088e7 	.word	0x080088e7
 8008708:	080088e7 	.word	0x080088e7
 800870c:	080088e7 	.word	0x080088e7
 8008710:	080088e7 	.word	0x080088e7
 8008714:	080088e7 	.word	0x080088e7
 8008718:	08008787 	.word	0x08008787
 800871c:	08008843 	.word	0x08008843
 8008720:	080088e7 	.word	0x080088e7
 8008724:	080088e7 	.word	0x080088e7
 8008728:	080088e7 	.word	0x080088e7
 800872c:	080088e7 	.word	0x080088e7
 8008730:	080088e7 	.word	0x080088e7
 8008734:	080088e7 	.word	0x080088e7
 8008738:	080088e7 	.word	0x080088e7
 800873c:	080088e7 	.word	0x080088e7
 8008740:	080088e7 	.word	0x080088e7
 8008744:	080088e7 	.word	0x080088e7
 8008748:	080088e7 	.word	0x080088e7
 800874c:	080088e7 	.word	0x080088e7
 8008750:	080088e7 	.word	0x080088e7
 8008754:	080088e7 	.word	0x080088e7
 8008758:	080088af 	.word	0x080088af
    case kInit:

      if (!init_upper(p_head_recv->len)) {
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	791b      	ldrb	r3, [r3, #4]
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff fb5b 	bl	8007e1c <init_upper>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 80b1 	beq.w	80088d0 <upper_process+0x23c>
        return;
      }

      LOGI("Init CPL");
 800876e:	f7fa fcff 	bl	8003170 <HAL_GetTick>
 8008772:	4603      	mov	r3, r0
 8008774:	4a5d      	ldr	r2, [pc, #372]	@ (80088ec <upper_process+0x258>)
 8008776:	4619      	mov	r1, r3
 8008778:	485d      	ldr	r0, [pc, #372]	@ (80088f0 <upper_process+0x25c>)
 800877a:	f000 fff9 	bl	8009770 <iprintf>
      upper_start = false;
 800877e:	4b5d      	ldr	r3, [pc, #372]	@ (80088f4 <upper_process+0x260>)
 8008780:	2200      	movs	r2, #0
 8008782:	701a      	strb	r2, [r3, #0]
      break;
 8008784:	e0af      	b.n	80088e6 <upper_process+0x252>
    case kMoveAction:
      if (!revc_cmd) {
 8008786:	4b5c      	ldr	r3, [pc, #368]	@ (80088f8 <upper_process+0x264>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d142      	bne.n	8008814 <upper_process+0x180>
        revc_cmd       = 1;
 800878e:	4b5a      	ldr	r3, [pc, #360]	@ (80088f8 <upper_process+0x264>)
 8008790:	2201      	movs	r2, #1
 8008792:	701a      	strb	r2, [r3, #0]
        servo_set->pos = p_action->x_pos;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	b29a      	uxth	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	809a      	strh	r2, [r3, #4]
        action_mode    = p_action->action_state;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	7a1a      	ldrb	r2, [r3, #8]
 80087a2:	4b56      	ldr	r3, [pc, #344]	@ (80088fc <upper_process+0x268>)
 80087a4:	701a      	strb	r2, [r3, #0]
        LOGI("ser_pos is: %04x", servo_set->pos);
 80087a6:	f7fa fce3 	bl	8003170 <HAL_GetTick>
 80087aa:	4601      	mov	r1, r0
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	889b      	ldrh	r3, [r3, #4]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	4a4e      	ldr	r2, [pc, #312]	@ (80088ec <upper_process+0x258>)
 80087b4:	4852      	ldr	r0, [pc, #328]	@ (8008900 <upper_process+0x26c>)
 80087b6:	f000 ffdb 	bl	8009770 <iprintf>
        LOGI("p_act is: %04x", p_action->x_pos);
 80087ba:	f7fa fcd9 	bl	8003170 <HAL_GetTick>
 80087be:	4601      	mov	r1, r0
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	4a49      	ldr	r2, [pc, #292]	@ (80088ec <upper_process+0x258>)
 80087c8:	484e      	ldr	r0, [pc, #312]	@ (8008904 <upper_process+0x270>)
 80087ca:	f000 ffd1 	bl	8009770 <iprintf>
        for (int i = 0; i < sizeof(Move_Action_t); i++) {
 80087ce:	2300      	movs	r3, #0
 80087d0:	617b      	str	r3, [r7, #20]
 80087d2:	e00d      	b.n	80087f0 <upper_process+0x15c>
          LOGI("pos is: %02x", packet[i]);
 80087d4:	f7fa fccc 	bl	8003170 <HAL_GetTick>
 80087d8:	4601      	mov	r1, r0
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	4413      	add	r3, r2
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	4a42      	ldr	r2, [pc, #264]	@ (80088ec <upper_process+0x258>)
 80087e4:	4848      	ldr	r0, [pc, #288]	@ (8008908 <upper_process+0x274>)
 80087e6:	f000 ffc3 	bl	8009770 <iprintf>
        for (int i = 0; i < sizeof(Move_Action_t); i++) {
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	3301      	adds	r3, #1
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2b0a      	cmp	r3, #10
 80087f4:	d9ee      	bls.n	80087d4 <upper_process+0x140>
        }
        LOGI("cmd_head is: %x", *p_head_recv);
 80087f6:	f7fa fcbb 	bl	8003170 <HAL_GetTick>
 80087fa:	4601      	mov	r1, r0
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	4610      	mov	r0, r2
 8008802:	466a      	mov	r2, sp
 8008804:	3304      	adds	r3, #4
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	8013      	strh	r3, [r2, #0]
 800880a:	4603      	mov	r3, r0
 800880c:	4a37      	ldr	r2, [pc, #220]	@ (80088ec <upper_process+0x258>)
 800880e:	483f      	ldr	r0, [pc, #252]	@ (800890c <upper_process+0x278>)
 8008810:	f000 ffae 	bl	8009770 <iprintf>
      }

      if (!move_action_upper(p_head_recv->len)) {
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	791b      	ldrb	r3, [r3, #4]
 8008818:	4618      	mov	r0, r3
 800881a:	f7ff fbc5 	bl	8007fa8 <move_action_upper>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d057      	beq.n	80088d4 <upper_process+0x240>
        return;
      }
      revc_cmd = 0;
 8008824:	4b34      	ldr	r3, [pc, #208]	@ (80088f8 <upper_process+0x264>)
 8008826:	2200      	movs	r2, #0
 8008828:	701a      	strb	r2, [r3, #0]
      LOGI("MOVE ACTION CPL");
 800882a:	f7fa fca1 	bl	8003170 <HAL_GetTick>
 800882e:	4603      	mov	r3, r0
 8008830:	4a2e      	ldr	r2, [pc, #184]	@ (80088ec <upper_process+0x258>)
 8008832:	4619      	mov	r1, r3
 8008834:	4836      	ldr	r0, [pc, #216]	@ (8008910 <upper_process+0x27c>)
 8008836:	f000 ff9b 	bl	8009770 <iprintf>
      upper_start = false;
 800883a:	4b2e      	ldr	r3, [pc, #184]	@ (80088f4 <upper_process+0x260>)
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
      break;
 8008840:	e051      	b.n	80088e6 <upper_process+0x252>
    case kInquire:
      if (!inquire_upper(p_head_recv->len)) {
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	791b      	ldrb	r3, [r3, #4]
 8008846:	4618      	mov	r0, r3
 8008848:	f7ff fb50 	bl	8007eec <inquire_upper>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d042      	beq.n	80088d8 <upper_process+0x244>
        return;
      }
      LOGI("INQUIRE CPL");
 8008852:	f7fa fc8d 	bl	8003170 <HAL_GetTick>
 8008856:	4603      	mov	r3, r0
 8008858:	4a24      	ldr	r2, [pc, #144]	@ (80088ec <upper_process+0x258>)
 800885a:	4619      	mov	r1, r3
 800885c:	482d      	ldr	r0, [pc, #180]	@ (8008914 <upper_process+0x280>)
 800885e:	f000 ff87 	bl	8009770 <iprintf>
      upper_start = false;
 8008862:	4b24      	ldr	r3, [pc, #144]	@ (80088f4 <upper_process+0x260>)
 8008864:	2200      	movs	r2, #0
 8008866:	701a      	strb	r2, [r3, #0]
      break;
 8008868:	e03d      	b.n	80088e6 <upper_process+0x252>
    case kInquireBookNum:
      if (!book_num_upper()) {
 800886a:	f7ff fc67 	bl	800813c <book_num_upper>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d033      	beq.n	80088dc <upper_process+0x248>
        return;
      }
      LOGI("BOOK NUM CPL");
 8008874:	f7fa fc7c 	bl	8003170 <HAL_GetTick>
 8008878:	4603      	mov	r3, r0
 800887a:	4a1c      	ldr	r2, [pc, #112]	@ (80088ec <upper_process+0x258>)
 800887c:	4619      	mov	r1, r3
 800887e:	4826      	ldr	r0, [pc, #152]	@ (8008918 <upper_process+0x284>)
 8008880:	f000 ff76 	bl	8009770 <iprintf>
      upper_start = false;
 8008884:	4b1b      	ldr	r3, [pc, #108]	@ (80088f4 <upper_process+0x260>)
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
      break;
 800888a:	e02c      	b.n	80088e6 <upper_process+0x252>
    case kInquireBookInfo:
      if (!book_info_upper()) {
 800888c:	f7ff fbf4 	bl	8008078 <book_info_upper>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d024      	beq.n	80088e0 <upper_process+0x24c>
        return;
      }
      LOGI("BOOK INFO CPL");
 8008896:	f7fa fc6b 	bl	8003170 <HAL_GetTick>
 800889a:	4603      	mov	r3, r0
 800889c:	4a13      	ldr	r2, [pc, #76]	@ (80088ec <upper_process+0x258>)
 800889e:	4619      	mov	r1, r3
 80088a0:	481e      	ldr	r0, [pc, #120]	@ (800891c <upper_process+0x288>)
 80088a2:	f000 ff65 	bl	8009770 <iprintf>
      upper_start = false;
 80088a6:	4b13      	ldr	r3, [pc, #76]	@ (80088f4 <upper_process+0x260>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	701a      	strb	r2, [r3, #0]
      break;
 80088ac:	e01b      	b.n	80088e6 <upper_process+0x252>

    case kSynClock:

      if (!syn_clock_upper()) {
 80088ae:	f7ff fca7 	bl	8008200 <syn_clock_upper>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d015      	beq.n	80088e4 <upper_process+0x250>
        return;
      }
      LOGI("syn_Clock CPL");
 80088b8:	f7fa fc5a 	bl	8003170 <HAL_GetTick>
 80088bc:	4603      	mov	r3, r0
 80088be:	4a0b      	ldr	r2, [pc, #44]	@ (80088ec <upper_process+0x258>)
 80088c0:	4619      	mov	r1, r3
 80088c2:	4817      	ldr	r0, [pc, #92]	@ (8008920 <upper_process+0x28c>)
 80088c4:	f000 ff54 	bl	8009770 <iprintf>
      upper_start = false;
 80088c8:	4b0a      	ldr	r3, [pc, #40]	@ (80088f4 <upper_process+0x260>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	701a      	strb	r2, [r3, #0]
      break;
 80088ce:	e00a      	b.n	80088e6 <upper_process+0x252>
        return;
 80088d0:	bf00      	nop
 80088d2:	e008      	b.n	80088e6 <upper_process+0x252>
        return;
 80088d4:	bf00      	nop
 80088d6:	e006      	b.n	80088e6 <upper_process+0x252>
        return;
 80088d8:	bf00      	nop
 80088da:	e004      	b.n	80088e6 <upper_process+0x252>
        return;
 80088dc:	bf00      	nop
 80088de:	e002      	b.n	80088e6 <upper_process+0x252>
        return;
 80088e0:	bf00      	nop
 80088e2:	e000      	b.n	80088e6 <upper_process+0x252>
        return;
 80088e4:	bf00      	nop
  }
}
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	0800b068 	.word	0x0800b068
 80088f0:	0800a90c 	.word	0x0800a90c
 80088f4:	2000089d 	.word	0x2000089d
 80088f8:	200009a9 	.word	0x200009a9
 80088fc:	2000001d 	.word	0x2000001d
 8008900:	0800a930 	.word	0x0800a930
 8008904:	0800a95c 	.word	0x0800a95c
 8008908:	0800a988 	.word	0x0800a988
 800890c:	0800a9b0 	.word	0x0800a9b0
 8008910:	0800a9dc 	.word	0x0800a9dc
 8008914:	0800aa08 	.word	0x0800aa08
 8008918:	0800aa30 	.word	0x0800aa30
 800891c:	0800aa58 	.word	0x0800aa58
 8008920:	0800aa84 	.word	0x0800aa84

08008924 <lower_process>:
void lower_process(uint8_t* pack_data, uint8_t len) {
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  CMD_HEAD_t* p_head_recv = (CMD_HEAD_t*)pack_data;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	613b      	str	r3, [r7, #16]
  uint8_t*    data_region = (pack_data + sizeof(CMD_HEAD_t));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3306      	adds	r3, #6
 8008938:	60fb      	str	r3, [r7, #12]
  uint8_t     data_size   = len - sizeof(CMD_HEAD_t) - 2 - 1;  // 1 = 帧尾，1 = size data region，2 = crc16
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	3b09      	subs	r3, #9
 800893e:	72fb      	strb	r3, [r7, #11]
  // for (int i = 0; i < len; i++) {
  //   LOGI("%02x", pack_data[i]);
  // }

  switch (p_head_recv->cmd) {
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d051      	beq.n	80089ec <lower_process+0xc8>
 8008948:	2b00      	cmp	r3, #0
 800894a:	f2c0 80ce 	blt.w	8008aea <lower_process+0x1c6>
 800894e:	2b30      	cmp	r3, #48	@ 0x30
 8008950:	f300 80cb 	bgt.w	8008aea <lower_process+0x1c6>
 8008954:	2b10      	cmp	r3, #16
 8008956:	f2c0 80c8 	blt.w	8008aea <lower_process+0x1c6>
 800895a:	3b10      	subs	r3, #16
 800895c:	2b20      	cmp	r3, #32
 800895e:	f200 80c4 	bhi.w	8008aea <lower_process+0x1c6>
 8008962:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <lower_process+0x44>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	08008a1d 	.word	0x08008a1d
 800896c:	08008a35 	.word	0x08008a35
 8008970:	08008aeb 	.word	0x08008aeb
 8008974:	08008aeb 	.word	0x08008aeb
 8008978:	08008aeb 	.word	0x08008aeb
 800897c:	08008aeb 	.word	0x08008aeb
 8008980:	08008aeb 	.word	0x08008aeb
 8008984:	08008aeb 	.word	0x08008aeb
 8008988:	08008aeb 	.word	0x08008aeb
 800898c:	08008aeb 	.word	0x08008aeb
 8008990:	08008aeb 	.word	0x08008aeb
 8008994:	08008aeb 	.word	0x08008aeb
 8008998:	08008aeb 	.word	0x08008aeb
 800899c:	08008aeb 	.word	0x08008aeb
 80089a0:	08008aeb 	.word	0x08008aeb
 80089a4:	08008aeb 	.word	0x08008aeb
 80089a8:	08008a05 	.word	0x08008a05
 80089ac:	08008a4d 	.word	0x08008a4d
 80089b0:	08008aeb 	.word	0x08008aeb
 80089b4:	08008aeb 	.word	0x08008aeb
 80089b8:	08008aeb 	.word	0x08008aeb
 80089bc:	08008aeb 	.word	0x08008aeb
 80089c0:	08008aeb 	.word	0x08008aeb
 80089c4:	08008aeb 	.word	0x08008aeb
 80089c8:	08008aeb 	.word	0x08008aeb
 80089cc:	08008aeb 	.word	0x08008aeb
 80089d0:	08008aeb 	.word	0x08008aeb
 80089d4:	08008aeb 	.word	0x08008aeb
 80089d8:	08008aeb 	.word	0x08008aeb
 80089dc:	08008aeb 	.word	0x08008aeb
 80089e0:	08008aeb 	.word	0x08008aeb
 80089e4:	08008aeb 	.word	0x08008aeb
 80089e8:	08008a65 	.word	0x08008a65
    case kInit:

      if (init_low()) {
 80089ec:	f7ff fc4c 	bl	8008288 <init_low>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d070      	beq.n	8008ad8 <lower_process+0x1b4>
        low_start = false;
 80089f6:	4b42      	ldr	r3, [pc, #264]	@ (8008b00 <lower_process+0x1dc>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]
        low_state = true;
 80089fc:	4b41      	ldr	r3, [pc, #260]	@ (8008b04 <lower_process+0x1e0>)
 80089fe:	2201      	movs	r2, #1
 8008a00:	701a      	strb	r2, [r3, #0]
      }

      break;
 8008a02:	e069      	b.n	8008ad8 <lower_process+0x1b4>
    case kMoveAction:
      if (move_action_low()) {
 8008a04:	f7ff fc88 	bl	8008318 <move_action_low>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d066      	beq.n	8008adc <lower_process+0x1b8>
        low_start = false;
 8008a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8008b00 <lower_process+0x1dc>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	701a      	strb	r2, [r3, #0]
        low_state = true;
 8008a14:	4b3b      	ldr	r3, [pc, #236]	@ (8008b04 <lower_process+0x1e0>)
 8008a16:	2201      	movs	r2, #1
 8008a18:	701a      	strb	r2, [r3, #0]
      }

      break;
 8008a1a:	e05f      	b.n	8008adc <lower_process+0x1b8>
    case kInquireBookNum:
      if (book_num_low()) {
 8008a1c:	f7ff fd72 	bl	8008504 <book_num_low>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d05c      	beq.n	8008ae0 <lower_process+0x1bc>
        low_start = false;
 8008a26:	4b36      	ldr	r3, [pc, #216]	@ (8008b00 <lower_process+0x1dc>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	701a      	strb	r2, [r3, #0]
        low_state = true;
 8008a2c:	4b35      	ldr	r3, [pc, #212]	@ (8008b04 <lower_process+0x1e0>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008a32:	e055      	b.n	8008ae0 <lower_process+0x1bc>
    case kInquireBookInfo:
      if (book_info_low()) {
 8008a34:	f7ff fd14 	bl	8008460 <book_info_low>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d052      	beq.n	8008ae4 <lower_process+0x1c0>
        low_start = false;
 8008a3e:	4b30      	ldr	r3, [pc, #192]	@ (8008b00 <lower_process+0x1dc>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
        low_state = true;
 8008a44:	4b2f      	ldr	r3, [pc, #188]	@ (8008b04 <lower_process+0x1e0>)
 8008a46:	2201      	movs	r2, #1
 8008a48:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008a4a:	e04b      	b.n	8008ae4 <lower_process+0x1c0>

    case kInquire:
      if (inquire_low()) {
 8008a4c:	f7ff fcb6 	bl	80083bc <inquire_low>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d048      	beq.n	8008ae8 <lower_process+0x1c4>
        // LOGE("LOW ACTION TURE");

        low_start = false;
 8008a56:	4b2a      	ldr	r3, [pc, #168]	@ (8008b00 <lower_process+0x1dc>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	701a      	strb	r2, [r3, #0]
        low_state = true;
 8008a5c:	4b29      	ldr	r3, [pc, #164]	@ (8008b04 <lower_process+0x1e0>)
 8008a5e:	2201      	movs	r2, #1
 8008a60:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008a62:	e041      	b.n	8008ae8 <lower_process+0x1c4>
    case kSynClock:

      if (data_size != 4) {
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d008      	beq.n	8008a7c <lower_process+0x158>
        LOGE("low recv clock error %d", data_size);
 8008a6a:	f7fa fb81 	bl	8003170 <HAL_GetTick>
 8008a6e:	4601      	mov	r1, r0
 8008a70:	7afb      	ldrb	r3, [r7, #11]
 8008a72:	4a25      	ldr	r2, [pc, #148]	@ (8008b08 <lower_process+0x1e4>)
 8008a74:	4825      	ldr	r0, [pc, #148]	@ (8008b0c <lower_process+0x1e8>)
 8008a76:	f000 fe7b 	bl	8009770 <iprintf>
        break;
 8008a7a:	e036      	b.n	8008aea <lower_process+0x1c6>
      }
      LOGI("RECV CLOCK");
 8008a7c:	f7fa fb78 	bl	8003170 <HAL_GetTick>
 8008a80:	4603      	mov	r3, r0
 8008a82:	4a21      	ldr	r2, [pc, #132]	@ (8008b08 <lower_process+0x1e4>)
 8008a84:	4619      	mov	r1, r3
 8008a86:	4822      	ldr	r0, [pc, #136]	@ (8008b10 <lower_process+0x1ec>)
 8008a88:	f000 fe72 	bl	8009770 <iprintf>
      low_clock = (uint32_t*)data_region;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4a21      	ldr	r2, [pc, #132]	@ (8008b14 <lower_process+0x1f0>)
 8008a90:	6013      	str	r3, [r2, #0]
      low_clock /= 1000;
 8008a92:	4b20      	ldr	r3, [pc, #128]	@ (8008b14 <lower_process+0x1f0>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a20      	ldr	r2, [pc, #128]	@ (8008b18 <lower_process+0x1f4>)
 8008a98:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9c:	099b      	lsrs	r3, r3, #6
 8008a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008b14 <lower_process+0x1f0>)
 8008aa0:	6013      	str	r3, [r2, #0]
      for (int i = 0; i < 4; i++)  //
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	e00d      	b.n	8008ac4 <lower_process+0x1a0>
        LOGI("%02x", data_region[i]);
 8008aa8:	f7fa fb62 	bl	8003170 <HAL_GetTick>
 8008aac:	4601      	mov	r1, r0
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	4a14      	ldr	r2, [pc, #80]	@ (8008b08 <lower_process+0x1e4>)
 8008ab8:	4818      	ldr	r0, [pc, #96]	@ (8008b1c <lower_process+0x1f8>)
 8008aba:	f000 fe59 	bl	8009770 <iprintf>
      for (int i = 0; i < 4; i++)  //
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	ddee      	ble.n	8008aa8 <lower_process+0x184>
      low_start = false;
 8008aca:	4b0d      	ldr	r3, [pc, #52]	@ (8008b00 <lower_process+0x1dc>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	701a      	strb	r2, [r3, #0]
      low_state = true;
 8008ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8008b04 <lower_process+0x1e0>)
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	701a      	strb	r2, [r3, #0]
      break;
 8008ad6:	e008      	b.n	8008aea <lower_process+0x1c6>
      break;
 8008ad8:	bf00      	nop
 8008ada:	e006      	b.n	8008aea <lower_process+0x1c6>
      break;
 8008adc:	bf00      	nop
 8008ade:	e004      	b.n	8008aea <lower_process+0x1c6>
      break;
 8008ae0:	bf00      	nop
 8008ae2:	e002      	b.n	8008aea <lower_process+0x1c6>
      break;
 8008ae4:	bf00      	nop
 8008ae6:	e000      	b.n	8008aea <lower_process+0x1c6>
      break;
 8008ae8:	bf00      	nop
  }

  memset(low_recv_buf, 0, low_recv_len);
 8008aea:	4b0d      	ldr	r3, [pc, #52]	@ (8008b20 <lower_process+0x1fc>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	2100      	movs	r1, #0
 8008af2:	480c      	ldr	r0, [pc, #48]	@ (8008b24 <lower_process+0x200>)
 8008af4:	f000 fe91 	bl	800981a <memset>
}
 8008af8:	bf00      	nop
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	200009a1 	.word	0x200009a1
 8008b04:	200009a2 	.word	0x200009a2
 8008b08:	0800b078 	.word	0x0800b078
 8008b0c:	0800aab0 	.word	0x0800aab0
 8008b10:	0800aae4 	.word	0x0800aae4
 8008b14:	200009a4 	.word	0x200009a4
 8008b18:	10624dd3 	.word	0x10624dd3
 8008b1c:	0800a6d8 	.word	0x0800a6d8
 8008b20:	200009a0 	.word	0x200009a0
 8008b24:	200008a0 	.word	0x200008a0

08008b28 <get_cmd_cache>:

uint8_t* get_cmd_cache(void) { return recv_buf; }
 8008b28:	b480      	push	{r7}
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	4b02      	ldr	r3, [pc, #8]	@ (8008b38 <get_cmd_cache+0x10>)
 8008b2e:	4618      	mov	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000698 	.word	0x20000698

08008b3c <set_cmd_recv_len>:
void     set_cmd_recv_len(uint8_t len) { recv_len = len; }
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4603      	mov	r3, r0
 8008b44:	71fb      	strb	r3, [r7, #7]
 8008b46:	4a04      	ldr	r2, [pc, #16]	@ (8008b58 <set_cmd_recv_len+0x1c>)
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	7013      	strb	r3, [r2, #0]
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	20000798 	.word	0x20000798

08008b5c <transmit_using>:
void     transmit_using(bool state) { user_power = state; }
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	71fb      	strb	r3, [r7, #7]
 8008b66:	4a04      	ldr	r2, [pc, #16]	@ (8008b78 <transmit_using+0x1c>)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	7013      	strb	r3, [r2, #0]
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bc80      	pop	{r7}
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	200009a8 	.word	0x200009a8

08008b7c <get_transmit_state>:
bool     get_transmit_state(void) { return user_power; }
 8008b7c:	b480      	push	{r7}
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	4b02      	ldr	r3, [pc, #8]	@ (8008b8c <get_transmit_state+0x10>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	4618      	mov	r0, r3
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr
 8008b8c:	200009a8 	.word	0x200009a8

08008b90 <get_action_mode>:

 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	4b02      	ldr	r3, [pc, #8]	@ (8008ba0 <get_action_mode+0x10>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bc80      	pop	{r7}
 8008b9e:	4770      	bx	lr
 8008ba0:	2000001d 	.word	0x2000001d

08008ba4 <__io_putchar>:
//   return ch;
// }

// �ض��� printf
int __io_putchar(int ch)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, 0xffff);
 8008bac:	1d39      	adds	r1, r7, #4
 8008bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	4803      	ldr	r0, [pc, #12]	@ (8008bc4 <__io_putchar+0x20>)
 8008bb6:	f7fd fd47 	bl	8006648 <HAL_UART_Transmit>
  return ch;
 8008bba:	687b      	ldr	r3, [r7, #4]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	200003a4 	.word	0x200003a4

08008bc8 <servo_info_updata>:
//   } while (0)

Motor_t        Servo_info;
static Motor_t Servo_set;

void servo_info_updata(uint8_t direct, uint8_t speed) {
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	460a      	mov	r2, r1
 8008bd2:	71fb      	strb	r3, [r7, #7]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	71bb      	strb	r3, [r7, #6]
  Servo_info.connect  = 1;
 8008bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8008c08 <servo_info_updata+0x40>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	805a      	strh	r2, [r3, #2]
  Servo_info.pos      = get_Position_mm(GetMoterStateReg(), 4);
 8008bde:	f7f7 fb55 	bl	800028c <GetMoterStateReg>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2104      	movs	r1, #4
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f82e 	bl	8008c48 <get_Position_mm>
 8008bec:	4603      	mov	r3, r0
 8008bee:	461a      	mov	r2, r3
 8008bf0:	4b05      	ldr	r3, [pc, #20]	@ (8008c08 <servo_info_updata+0x40>)
 8008bf2:	809a      	strh	r2, [r3, #4]
  Servo_info.speed    = 1;
 8008bf4:	4b04      	ldr	r3, [pc, #16]	@ (8008c08 <servo_info_updata+0x40>)
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	80da      	strh	r2, [r3, #6]
  Servo_info.diretion = direct;
 8008bfa:	4a03      	ldr	r2, [pc, #12]	@ (8008c08 <servo_info_updata+0x40>)
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	7213      	strb	r3, [r2, #8]
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	200009e0 	.word	0x200009e0

08008c0c <get_servo_set_info>:

void servo_info_set(uint8_t pos) { Servo_set.pos = pos; }

Motor_t* get_servo_set_info(void) { return &Servo_set; }
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	4b02      	ldr	r3, [pc, #8]	@ (8008c1c <get_servo_set_info+0x10>)
 8008c12:	4618      	mov	r0, r3
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bc80      	pop	{r7}
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	200009ec 	.word	0x200009ec

08008c20 <get_servo_info>:
uint16_t get_servo_set_info_speed(void) { Servo_set.pos; }
Motor_t  get_servo_info(void) { return Servo_info; }
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4906      	ldr	r1, [pc, #24]	@ (8008c44 <get_servo_info+0x24>)
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	460b      	mov	r3, r1
 8008c30:	cb03      	ldmia	r3!, {r0, r1}
 8008c32:	6010      	str	r0, [r2, #0]
 8008c34:	6051      	str	r1, [r2, #4]
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	8113      	strh	r3, [r2, #8]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bc80      	pop	{r7}
 8008c42:	4770      	bx	lr
 8008c44:	200009e0 	.word	0x200009e0

08008c48 <get_Position_mm>:

uint16_t get_Position_mm(uint8_t* buf, uint8_t len) {  // 计算获取当前距离
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  uint16_t       Position_mm_buf;
  uint32_t       Position_um;
  uint32_t       time = HAL_GetTick();
 8008c54:	f7fa fa8c 	bl	8003170 <HAL_GetTick>
 8008c58:	6138      	str	r0, [r7, #16]
  static uint8_t num;

  while (!Servo_info.uart_recv_state) {
 8008c5a:	e014      	b.n	8008c86 <get_Position_mm+0x3e>
    if (has_pass_time(time) > 100) {
 8008c5c:	6938      	ldr	r0, [r7, #16]
 8008c5e:	f000 fcad 	bl	80095bc <has_pass_time>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b64      	cmp	r3, #100	@ 0x64
 8008c66:	d90a      	bls.n	8008c7e <get_Position_mm+0x36>
      LOGW("time out");
 8008c68:	f7fa fa82 	bl	8003170 <HAL_GetTick>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	4a33      	ldr	r2, [pc, #204]	@ (8008d3c <get_Position_mm+0xf4>)
 8008c70:	4619      	mov	r1, r3
 8008c72:	4833      	ldr	r0, [pc, #204]	@ (8008d40 <get_Position_mm+0xf8>)
 8008c74:	f000 fd7c 	bl	8009770 <iprintf>
      return 0xffff;
 8008c78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c7c:	e059      	b.n	8008d32 <get_Position_mm+0xea>
    }
    Uart_Send_MovementRegister_ServoMotor(0, 0);
 8008c7e:	2100      	movs	r1, #0
 8008c80:	2000      	movs	r0, #0
 8008c82:	f7f8 fa19 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
  while (!Servo_info.uart_recv_state) {
 8008c86:	4b2f      	ldr	r3, [pc, #188]	@ (8008d44 <get_Position_mm+0xfc>)
 8008c88:	7a5b      	ldrb	r3, [r3, #9]
 8008c8a:	f083 0301 	eor.w	r3, r3, #1
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e3      	bne.n	8008c5c <get_Position_mm+0x14>
  }
  Servo_info.uart_recv_state = false;
 8008c94:	4b2b      	ldr	r3, [pc, #172]	@ (8008d44 <get_Position_mm+0xfc>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	725a      	strb	r2, [r3, #9]
  // for (int i = 0; i < 4; i++) {
  //   LOGI("%02x", buf[i]);
  // }

  if (0x80 == (buf[2] & 0x80)) {  // 负方向，向右
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3302      	adds	r3, #2
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	b25b      	sxtb	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	da1e      	bge.n	8008ce4 <get_Position_mm+0x9c>
    Position_um = 0xFFFFFFFF - (((uint32_t)buf[2] << 24) + ((uint32_t)buf[3] << 16) + ((uint32_t)buf[0] << 8) + ((uint32_t)buf[1] << 0));
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3302      	adds	r3, #2
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	061a      	lsls	r2, r3, #24
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3303      	adds	r3, #3
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	041b      	lsls	r3, r3, #16
 8008cb6:	441a      	add	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	021b      	lsls	r3, r3, #8
 8008cbe:	4413      	add	r3, r2
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	3201      	adds	r2, #1
 8008cc4:	7812      	ldrb	r2, [r2, #0]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	43db      	mvns	r3, r3
 8008cca:	617b      	str	r3, [r7, #20]
    Position_um = Position_um + 1;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	617b      	str	r3, [r7, #20]
    LOGI("right");
 8008cd2:	f7fa fa4d 	bl	8003170 <HAL_GetTick>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	4a18      	ldr	r2, [pc, #96]	@ (8008d3c <get_Position_mm+0xf4>)
 8008cda:	4619      	mov	r1, r3
 8008cdc:	481a      	ldr	r0, [pc, #104]	@ (8008d48 <get_Position_mm+0x100>)
 8008cde:	f000 fd47 	bl	8009770 <iprintf>
 8008ce2:	e01f      	b.n	8008d24 <get_Position_mm+0xdc>
    // Direction_of_position = MINUS_Right;
  } else if (0x00 == (buf[2] & 0x80)) {  // 正方向，向左
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	b25b      	sxtb	r3, r3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	db19      	blt.n	8008d24 <get_Position_mm+0xdc>
    Position_um = ((uint32_t)buf[2] << 24) + ((uint32_t)buf[3] << 16) + ((uint32_t)buf[0] << 8) + ((uint32_t)buf[1] << 0);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3302      	adds	r3, #2
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	061a      	lsls	r2, r3, #24
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3303      	adds	r3, #3
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	041b      	lsls	r3, r3, #16
 8008d00:	441a      	add	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	021b      	lsls	r3, r3, #8
 8008d08:	4413      	add	r3, r2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	3201      	adds	r2, #1
 8008d0e:	7812      	ldrb	r2, [r2, #0]
 8008d10:	4413      	add	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]
    LOGI("left");
 8008d14:	f7fa fa2c 	bl	8003170 <HAL_GetTick>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	4a08      	ldr	r2, [pc, #32]	@ (8008d3c <get_Position_mm+0xf4>)
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	480b      	ldr	r0, [pc, #44]	@ (8008d4c <get_Position_mm+0x104>)
 8008d20:	f000 fd26 	bl	8009770 <iprintf>
    // Direction_of_position = PLUS_Left;
  }
  Position_mm_buf = (uint16_t)(Position_um / 1000);
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	4a0a      	ldr	r2, [pc, #40]	@ (8008d50 <get_Position_mm+0x108>)
 8008d28:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2c:	099b      	lsrs	r3, r3, #6
 8008d2e:	81fb      	strh	r3, [r7, #14]
  // if (Position_mm_buf > 5000) {
  //   return 0;
  // }

  // LOGI("DIS %d", Position_mm_buf);
  return Position_mm_buf;
 8008d30:	89fb      	ldrh	r3, [r7, #14]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	0800b088 	.word	0x0800b088
 8008d40:	0800ab0c 	.word	0x0800ab0c
 8008d44:	200009e0 	.word	0x200009e0
 8008d48:	0800ab30 	.word	0x0800ab30
 8008d4c:	0800ab54 	.word	0x0800ab54
 8008d50:	10624dd3 	.word	0x10624dd3

08008d54 <servo_speed_set>:

FSM_STATE_t servo_speed_set(uint16_t speed) {
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t time = HAL_GetTick();
 8008d5e:	f7fa fa07 	bl	8003170 <HAL_GetTick>
 8008d62:	6178      	str	r0, [r7, #20]
  uint8_t* ack  = NULL;
 8008d64:	2300      	movs	r3, #0
 8008d66:	613b      	str	r3, [r7, #16]
  uint16_t data = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	81fb      	strh	r3, [r7, #14]
  while (!Servo_info.state) {
 8008d6c:	e050      	b.n	8008e10 <servo_speed_set+0xbc>
    if (has_pass_time(time) > 100) {
 8008d6e:	6978      	ldr	r0, [r7, #20]
 8008d70:	f000 fc24 	bl	80095bc <has_pass_time>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b64      	cmp	r3, #100	@ 0x64
 8008d78:	d909      	bls.n	8008d8e <servo_speed_set+0x3a>
      LOGE("time out");
 8008d7a:	f7fa f9f9 	bl	8003170 <HAL_GetTick>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4a27      	ldr	r2, [pc, #156]	@ (8008e20 <servo_speed_set+0xcc>)
 8008d82:	4619      	mov	r1, r3
 8008d84:	4827      	ldr	r0, [pc, #156]	@ (8008e24 <servo_speed_set+0xd0>)
 8008d86:	f000 fcf3 	bl	8009770 <iprintf>
      return fsm_timeout;
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	e044      	b.n	8008e18 <servo_speed_set+0xc4>
    }
    Servo_info.uart_recv_state = false;
 8008d8e:	4b26      	ldr	r3, [pc, #152]	@ (8008e28 <servo_speed_set+0xd4>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	725a      	strb	r2, [r3, #9]

    Uart_Send_MovementRegister_ServoMotor(3, speed);
 8008d94:	88fb      	ldrh	r3, [r7, #6]
 8008d96:	4619      	mov	r1, r3
 8008d98:	2003      	movs	r0, #3
 8008d9a:	f7f8 f98d 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>

    ack = GetMoterAck();
 8008d9e:	f7f7 fa6b 	bl	8000278 <GetMoterAck>
 8008da2:	6138      	str	r0, [r7, #16]

    /*************Debug****************/
    LOGI("ack is %02x", ack[0]);
 8008da4:	f7fa f9e4 	bl	8003170 <HAL_GetTick>
 8008da8:	4601      	mov	r1, r0
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	4a1c      	ldr	r2, [pc, #112]	@ (8008e20 <servo_speed_set+0xcc>)
 8008db0:	481e      	ldr	r0, [pc, #120]	@ (8008e2c <servo_speed_set+0xd8>)
 8008db2:	f000 fcdd 	bl	8009770 <iprintf>
    LOGI("ack is %02x", ack[1]);
 8008db6:	f7fa f9db 	bl	8003170 <HAL_GetTick>
 8008dba:	4601      	mov	r1, r0
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	4a17      	ldr	r2, [pc, #92]	@ (8008e20 <servo_speed_set+0xcc>)
 8008dc4:	4819      	ldr	r0, [pc, #100]	@ (8008e2c <servo_speed_set+0xd8>)
 8008dc6:	f000 fcd3 	bl	8009770 <iprintf>
    /*********************************/
    if (NULL == ack) {
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <servo_speed_set+0x92>
      LOGE("ack is null");
 8008dd0:	f7fa f9ce 	bl	8003170 <HAL_GetTick>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4a12      	ldr	r2, [pc, #72]	@ (8008e20 <servo_speed_set+0xcc>)
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4815      	ldr	r0, [pc, #84]	@ (8008e30 <servo_speed_set+0xdc>)
 8008ddc:	f000 fcc8 	bl	8009770 <iprintf>
      return fsm_error;
 8008de0:	f04f 33ff 	mov.w	r3, #4294967295
 8008de4:	e018      	b.n	8008e18 <servo_speed_set+0xc4>
    }

    if ((0x00 == ack[0] && speed == ack[1])) {
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d110      	bne.n	8008e10 <servo_speed_set+0xbc>
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	3301      	adds	r3, #1
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	88fb      	ldrh	r3, [r7, #6]
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d109      	bne.n	8008e10 <servo_speed_set+0xbc>
      LOGI("speed sucess");
 8008dfc:	f7fa f9b8 	bl	8003170 <HAL_GetTick>
 8008e00:	4603      	mov	r3, r0
 8008e02:	4a07      	ldr	r2, [pc, #28]	@ (8008e20 <servo_speed_set+0xcc>)
 8008e04:	4619      	mov	r1, r3
 8008e06:	480b      	ldr	r0, [pc, #44]	@ (8008e34 <servo_speed_set+0xe0>)
 8008e08:	f000 fcb2 	bl	8009770 <iprintf>
      return fsm_cpl;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e003      	b.n	8008e18 <servo_speed_set+0xc4>
  while (!Servo_info.state) {
 8008e10:	4b05      	ldr	r3, [pc, #20]	@ (8008e28 <servo_speed_set+0xd4>)
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0aa      	beq.n	8008d6e <servo_speed_set+0x1a>
    }
  }
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	0800b098 	.word	0x0800b098
 8008e24:	0800ab74 	.word	0x0800ab74
 8008e28:	200009e0 	.word	0x200009e0
 8008e2c:	0800ab98 	.word	0x0800ab98
 8008e30:	0800abc0 	.word	0x0800abc0
 8008e34:	0800abe8 	.word	0x0800abe8

08008e38 <servo_move>:

FSM_STATE_t servo_move(ENUM_MOTOR_MOTION direction) {
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	71fb      	strb	r3, [r7, #7]
  uint32_t time = HAL_GetTick();
 8008e42:	f7fa f995 	bl	8003170 <HAL_GetTick>
 8008e46:	6178      	str	r0, [r7, #20]
  uint8_t* ack  = NULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	613b      	str	r3, [r7, #16]
  uint16_t data = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	81fb      	strh	r3, [r7, #14]
  while (!Servo_info.state) {
 8008e50:	e08d      	b.n	8008f6e <servo_move+0x136>
    if (has_pass_time(time) > 100) {
 8008e52:	6978      	ldr	r0, [r7, #20]
 8008e54:	f000 fbb2 	bl	80095bc <has_pass_time>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b64      	cmp	r3, #100	@ 0x64
 8008e5c:	d909      	bls.n	8008e72 <servo_move+0x3a>
      LOGE("time out");
 8008e5e:	f7fa f987 	bl	8003170 <HAL_GetTick>
 8008e62:	4603      	mov	r3, r0
 8008e64:	4a46      	ldr	r2, [pc, #280]	@ (8008f80 <servo_move+0x148>)
 8008e66:	4619      	mov	r1, r3
 8008e68:	4846      	ldr	r0, [pc, #280]	@ (8008f84 <servo_move+0x14c>)
 8008e6a:	f000 fc81 	bl	8009770 <iprintf>
      return fsm_timeout;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e082      	b.n	8008f78 <servo_move+0x140>
    }
    Servo_info.uart_recv_state = false;
 8008e72:	4b45      	ldr	r3, [pc, #276]	@ (8008f88 <servo_move+0x150>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	725a      	strb	r2, [r3, #9]

    if (ON_LEFT == GetMoterOnPos()) {
 8008e78:	f7f7 fa12 	bl	80002a0 <GetMoterOnPos>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e82:	d111      	bne.n	8008ea8 <servo_move+0x70>
      if (KGoLeft == direction)
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2bcc      	cmp	r3, #204	@ 0xcc
 8008e88:	d105      	bne.n	8008e96 <servo_move+0x5e>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);
 8008e8a:	f241 3186 	movw	r1, #4998	@ 0x1386
 8008e8e:	2003      	movs	r0, #3
 8008e90:	f7f8 f912 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 8008e94:	e01e      	b.n	8008ed4 <servo_move+0x9c>
      else if (KGoRight == direction)
 8008e96:	79fb      	ldrb	r3, [r7, #7]
 8008e98:	2b0c      	cmp	r3, #12
 8008e9a:	d11b      	bne.n	8008ed4 <servo_move+0x9c>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);
 8008e9c:	f241 3187 	movw	r1, #4999	@ 0x1387
 8008ea0:	2003      	movs	r0, #3
 8008ea2:	f7f8 f909 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 8008ea6:	e015      	b.n	8008ed4 <servo_move+0x9c>

    } else if (ON_RIGHT == GetMoterOnPos()) {
 8008ea8:	f7f7 f9fa 	bl	80002a0 <GetMoterOnPos>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d110      	bne.n	8008ed4 <servo_move+0x9c>
      if (KGoLeft == direction)
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	2bcc      	cmp	r3, #204	@ 0xcc
 8008eb6:	d105      	bne.n	8008ec4 <servo_move+0x8c>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);
 8008eb8:	f241 3187 	movw	r1, #4999	@ 0x1387
 8008ebc:	2003      	movs	r0, #3
 8008ebe:	f7f8 f8fb 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 8008ec2:	e007      	b.n	8008ed4 <servo_move+0x9c>
      else if (KGoRight == direction)
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	2b0c      	cmp	r3, #12
 8008ec8:	d104      	bne.n	8008ed4 <servo_move+0x9c>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);
 8008eca:	f241 3186 	movw	r1, #4998	@ 0x1386
 8008ece:	2003      	movs	r0, #3
 8008ed0:	f7f8 f8f2 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
    }

    ack = GetMoterAck();
 8008ed4:	f7f7 f9d0 	bl	8000278 <GetMoterAck>
 8008ed8:	6138      	str	r0, [r7, #16]
    LOGI("ack is %02x", ack[0]);
 8008eda:	f7fa f949 	bl	8003170 <HAL_GetTick>
 8008ede:	4601      	mov	r1, r0
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	4a26      	ldr	r2, [pc, #152]	@ (8008f80 <servo_move+0x148>)
 8008ee6:	4829      	ldr	r0, [pc, #164]	@ (8008f8c <servo_move+0x154>)
 8008ee8:	f000 fc42 	bl	8009770 <iprintf>
    LOGI("ack is %02x", ack[1]);
 8008eec:	f7fa f940 	bl	8003170 <HAL_GetTick>
 8008ef0:	4601      	mov	r1, r0
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	4a21      	ldr	r2, [pc, #132]	@ (8008f80 <servo_move+0x148>)
 8008efa:	4824      	ldr	r0, [pc, #144]	@ (8008f8c <servo_move+0x154>)
 8008efc:	f000 fc38 	bl	8009770 <iprintf>
    if (NULL == ack) {
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10a      	bne.n	8008f1c <servo_move+0xe4>
      LOGE("ack is null");
 8008f06:	f7fa f933 	bl	8003170 <HAL_GetTick>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008f80 <servo_move+0x148>)
 8008f0e:	4619      	mov	r1, r3
 8008f10:	481f      	ldr	r0, [pc, #124]	@ (8008f90 <servo_move+0x158>)
 8008f12:	f000 fc2d 	bl	8009770 <iprintf>
      return fsm_error;
 8008f16:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1a:	e02d      	b.n	8008f78 <servo_move+0x140>
    }
    data = ack[0];
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	81fb      	strh	r3, [r7, #14]
    data <<= 8;
 8008f22:	89fb      	ldrh	r3, [r7, #14]
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	81fb      	strh	r3, [r7, #14]
    data |= ack[1];
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	89fb      	ldrh	r3, [r7, #14]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	81fb      	strh	r3, [r7, #14]
    LOGI("data is %04x", data);
 8008f36:	f7fa f91b 	bl	8003170 <HAL_GetTick>
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	89fb      	ldrh	r3, [r7, #14]
 8008f3e:	4a10      	ldr	r2, [pc, #64]	@ (8008f80 <servo_move+0x148>)
 8008f40:	4814      	ldr	r0, [pc, #80]	@ (8008f94 <servo_move+0x15c>)
 8008f42:	f000 fc15 	bl	8009770 <iprintf>
    //(((uint16_t)ack[4] << 8) | ack[5])
    if (JOGmode_Data_CCW == data ||  //
 8008f46:	89fb      	ldrh	r3, [r7, #14]
 8008f48:	f241 3286 	movw	r2, #4998	@ 0x1386
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d004      	beq.n	8008f5a <servo_move+0x122>
 8008f50:	89fb      	ldrh	r3, [r7, #14]
 8008f52:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d109      	bne.n	8008f6e <servo_move+0x136>
        JOGmode_Data_CW == data) {
      LOGI("Is success");
 8008f5a:	f7fa f909 	bl	8003170 <HAL_GetTick>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	4a07      	ldr	r2, [pc, #28]	@ (8008f80 <servo_move+0x148>)
 8008f62:	4619      	mov	r1, r3
 8008f64:	480c      	ldr	r0, [pc, #48]	@ (8008f98 <servo_move+0x160>)
 8008f66:	f000 fc03 	bl	8009770 <iprintf>
      return fsm_cpl;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e004      	b.n	8008f78 <servo_move+0x140>
  while (!Servo_info.state) {
 8008f6e:	4b06      	ldr	r3, [pc, #24]	@ (8008f88 <servo_move+0x150>)
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f43f af6d 	beq.w	8008e52 <servo_move+0x1a>
    }
  }
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	0800b0a8 	.word	0x0800b0a8
 8008f84:	0800ab74 	.word	0x0800ab74
 8008f88:	200009e0 	.word	0x200009e0
 8008f8c:	0800ab98 	.word	0x0800ab98
 8008f90:	0800abc0 	.word	0x0800abc0
 8008f94:	0800ac10 	.word	0x0800ac10
 8008f98:	0800ac38 	.word	0x0800ac38

08008f9c <upper_uart_reg_handle>:
static uint8_t rx_cache;
static bool    flag = false;

static void upper_packet_analys(void);

void upper_uart_reg_handle(UART_HandleTypeDef *h_uart, DMA_HandleTypeDef *h_dma) {
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  m_uart = h_uart;
 8008fa6:	4a05      	ldr	r2, [pc, #20]	@ (8008fbc <upper_uart_reg_handle+0x20>)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6013      	str	r3, [r2, #0]
  m_dma  = h_dma;
 8008fac:	4a04      	ldr	r2, [pc, #16]	@ (8008fc0 <upper_uart_reg_handle+0x24>)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	6013      	str	r3, [r2, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr
 8008fbc:	200009f8 	.word	0x200009f8
 8008fc0:	200009fc 	.word	0x200009fc

08008fc4 <upper_uart_init>:

void upper_uart_init(void) {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  registCallback(EVENT_UpperUart, upper_packet_analys);          // 注册事件表
 8008fc8:	490b      	ldr	r1, [pc, #44]	@ (8008ff8 <upper_uart_init+0x34>)
 8008fca:	2001      	movs	r0, #1
 8008fcc:	f000 fa60 	bl	8009490 <registCallback>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ffc <upper_uart_init+0x38>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fd8:	4909      	ldr	r1, [pc, #36]	@ (8009000 <upper_uart_init+0x3c>)
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fd fbdc 	bl	8006798 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 8008fe0:	4b08      	ldr	r3, [pc, #32]	@ (8009004 <upper_uart_init+0x40>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	4b06      	ldr	r3, [pc, #24]	@ (8009004 <upper_uart_init+0x40>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0204 	bic.w	r2, r2, #4
 8008ff2:	601a      	str	r2, [r3, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	080090cd 	.word	0x080090cd
 8008ffc:	200009f8 	.word	0x200009f8
 8009000:	20000a00 	.word	0x20000a00
 8009004:	200009fc 	.word	0x200009fc

08009008 <GetUpperUartHandle>:

UART_HandleTypeDef *GetUpperUartHandle(void) {
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  if (m_uart == NULL) {
 800900c:	4b08      	ldr	r3, [pc, #32]	@ (8009030 <GetUpperUartHandle+0x28>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <GetUpperUartHandle+0x22>
    LOGW("not get m_uart");
 8009014:	f7fa f8ac 	bl	8003170 <HAL_GetTick>
 8009018:	4603      	mov	r3, r0
 800901a:	4a06      	ldr	r2, [pc, #24]	@ (8009034 <GetUpperUartHandle+0x2c>)
 800901c:	4619      	mov	r1, r3
 800901e:	4806      	ldr	r0, [pc, #24]	@ (8009038 <GetUpperUartHandle+0x30>)
 8009020:	f000 fba6 	bl	8009770 <iprintf>
    return m_uart;
 8009024:	4b02      	ldr	r3, [pc, #8]	@ (8009030 <GetUpperUartHandle+0x28>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	e7ff      	b.n	800902a <GetUpperUartHandle+0x22>
  }
}
 800902a:	4618      	mov	r0, r3
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	200009f8 	.word	0x200009f8
 8009034:	0800b0b4 	.word	0x0800b0b4
 8009038:	0800ac60 	.word	0x0800ac60

0800903c <CRC16_Calculate>:

static uint16_t CRC16_Calculate(uint8_t *data, uint8_t len) {
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 8009048:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800904c:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 8009052:	2300      	movs	r3, #0
 8009054:	613b      	str	r3, [r7, #16]
 8009056:	e022      	b.n	800909e <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	4413      	add	r3, r2
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	461a      	mov	r2, r3
 8009062:	8afb      	ldrh	r3, [r7, #22]
 8009064:	4053      	eors	r3, r2
 8009066:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8009068:	2300      	movs	r3, #0
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	e011      	b.n	8009092 <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 800906e:	8afb      	ldrh	r3, [r7, #22]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b00      	cmp	r3, #0
 8009076:	d006      	beq.n	8009086 <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 8009078:	8afb      	ldrh	r3, [r7, #22]
 800907a:	085b      	lsrs	r3, r3, #1
 800907c:	b29a      	uxth	r2, r3
 800907e:	4b10      	ldr	r3, [pc, #64]	@ (80090c0 <CRC16_Calculate+0x84>)
 8009080:	4053      	eors	r3, r2
 8009082:	82fb      	strh	r3, [r7, #22]
 8009084:	e002      	b.n	800908c <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 8009086:	8afb      	ldrh	r3, [r7, #22]
 8009088:	085b      	lsrs	r3, r3, #1
 800908a:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3301      	adds	r3, #1
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b07      	cmp	r3, #7
 8009096:	ddea      	ble.n	800906e <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	3301      	adds	r3, #1
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	dbd8      	blt.n	8009058 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 80090a6:	f7fa f863 	bl	8003170 <HAL_GetTick>
 80090aa:	4601      	mov	r1, r0
 80090ac:	8afb      	ldrh	r3, [r7, #22]
 80090ae:	4a05      	ldr	r2, [pc, #20]	@ (80090c4 <CRC16_Calculate+0x88>)
 80090b0:	4805      	ldr	r0, [pc, #20]	@ (80090c8 <CRC16_Calculate+0x8c>)
 80090b2:	f000 fb5d 	bl	8009770 <iprintf>
  return crc16;
 80090b6:	8afb      	ldrh	r3, [r7, #22]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	ffffa001 	.word	0xffffa001
 80090c4:	0800b0c8 	.word	0x0800b0c8
 80090c8:	0800ac8c 	.word	0x0800ac8c

080090cc <upper_packet_analys>:

void upper_packet_analys(void) {
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
  uint8_t  type     = rx_buf[0];
 80090d2:	4b2b      	ldr	r3, [pc, #172]	@ (8009180 <upper_packet_analys+0xb4>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	72fb      	strb	r3, [r7, #11]
  uint16_t pack_len = rx_buf[4];
 80090d8:	4b29      	ldr	r3, [pc, #164]	@ (8009180 <upper_packet_analys+0xb4>)
 80090da:	791b      	ldrb	r3, [r3, #4]
 80090dc:	813b      	strh	r3, [r7, #8]
  uint8_t *recv_cmd;
  bool     transmit_state = get_transmit_state();
 80090de:	f7ff fd4d 	bl	8008b7c <get_transmit_state>
 80090e2:	4603      	mov	r3, r0
 80090e4:	71fb      	strb	r3, [r7, #7]

  for (int i = 0; i < rx_len; i++)  //
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	e00d      	b.n	8009108 <upper_packet_analys+0x3c>
    LOGI("%02x", rx_buf[i]);
 80090ec:	f7fa f840 	bl	8003170 <HAL_GetTick>
 80090f0:	4601      	mov	r1, r0
 80090f2:	4a23      	ldr	r2, [pc, #140]	@ (8009180 <upper_packet_analys+0xb4>)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	4a22      	ldr	r2, [pc, #136]	@ (8009184 <upper_packet_analys+0xb8>)
 80090fc:	4822      	ldr	r0, [pc, #136]	@ (8009188 <upper_packet_analys+0xbc>)
 80090fe:	f000 fb37 	bl	8009770 <iprintf>
  for (int i = 0; i < rx_len; i++)  //
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3301      	adds	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	4b20      	ldr	r3, [pc, #128]	@ (800918c <upper_packet_analys+0xc0>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	461a      	mov	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4293      	cmp	r3, r2
 8009112:	dbeb      	blt.n	80090ec <upper_packet_analys+0x20>

  if (type == 0xd0) {
 8009114:	7afb      	ldrb	r3, [r7, #11]
 8009116:	2bd0      	cmp	r3, #208	@ 0xd0
 8009118:	d12f      	bne.n	800917a <upper_packet_analys+0xae>
    if (CRC16_Calculate(rx_buf, rx_len)) {
 800911a:	4b1c      	ldr	r3, [pc, #112]	@ (800918c <upper_packet_analys+0xc0>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	4619      	mov	r1, r3
 8009120:	4817      	ldr	r0, [pc, #92]	@ (8009180 <upper_packet_analys+0xb4>)
 8009122:	f7ff ff8b 	bl	800903c <CRC16_Calculate>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d008      	beq.n	800913e <upper_packet_analys+0x72>
      LOGE("CRC error");
 800912c:	f7fa f820 	bl	8003170 <HAL_GetTick>
 8009130:	4603      	mov	r3, r0
 8009132:	4a14      	ldr	r2, [pc, #80]	@ (8009184 <upper_packet_analys+0xb8>)
 8009134:	4619      	mov	r1, r3
 8009136:	4816      	ldr	r0, [pc, #88]	@ (8009190 <upper_packet_analys+0xc4>)
 8009138:	f000 fb1a 	bl	8009770 <iprintf>
      return;
 800913c:	e01d      	b.n	800917a <upper_packet_analys+0xae>
    }

    if (transmit_state) {
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d008      	beq.n	8009156 <upper_packet_analys+0x8a>
      LOGE("transmit has occupied");
 8009144:	f7fa f814 	bl	8003170 <HAL_GetTick>
 8009148:	4603      	mov	r3, r0
 800914a:	4a0e      	ldr	r2, [pc, #56]	@ (8009184 <upper_packet_analys+0xb8>)
 800914c:	4619      	mov	r1, r3
 800914e:	4811      	ldr	r0, [pc, #68]	@ (8009194 <upper_packet_analys+0xc8>)
 8009150:	f000 fb0e 	bl	8009770 <iprintf>
      return;
 8009154:	e011      	b.n	800917a <upper_packet_analys+0xae>
    }

    transmit_using(true);
 8009156:	2001      	movs	r0, #1
 8009158:	f7ff fd00 	bl	8008b5c <transmit_using>

    // lower computer recv
    recv_cmd = get_cmd_cache();
 800915c:	f7ff fce4 	bl	8008b28 <get_cmd_cache>
 8009160:	6038      	str	r0, [r7, #0]

    memcpy(recv_cmd, rx_buf, rx_len);
 8009162:	4b0a      	ldr	r3, [pc, #40]	@ (800918c <upper_packet_analys+0xc0>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	4905      	ldr	r1, [pc, #20]	@ (8009180 <upper_packet_analys+0xb4>)
 800916a:	6838      	ldr	r0, [r7, #0]
 800916c:	f000 fbd1 	bl	8009912 <memcpy>
    // for (int i = 0; i < 10; i++)  //
    //   LOGI("%02x", recv_cmd[i]);

    // LOGI("%08x", (get_cmd_cache())[0]);
    // LOGI("%08x", recv_cmd);
    set_cmd_recv_len(rx_len);
 8009170:	4b06      	ldr	r3, [pc, #24]	@ (800918c <upper_packet_analys+0xc0>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f7ff fce1 	bl	8008b3c <set_cmd_recv_len>
  }
}
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	20000a00 	.word	0x20000a00
 8009184:	0800b0d8 	.word	0x0800b0d8
 8009188:	0800acb4 	.word	0x0800acb4
 800918c:	20000b00 	.word	0x20000b00
 8009190:	0800acd4 	.word	0x0800acd4
 8009194:	0800acfc 	.word	0x0800acfc

08009198 <upper_receive_rx_data>:

void upper_receive_rx_data(void) {
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
  flag = true;
 800919c:	4b15      	ldr	r3, [pc, #84]	@ (80091f4 <upper_receive_rx_data+0x5c>)
 800919e:	2201      	movs	r2, #1
 80091a0:	701a      	strb	r2, [r3, #0]
  enterQueueEvent(EVENT_UpperUart);
 80091a2:	2001      	movs	r0, #1
 80091a4:	f000 f98c 	bl	80094c0 <enterQueueEvent>
  rx_len = RECV_BUF_LEN - __HAL_DMA_GET_COUNTER(m_dma);
 80091a8:	4b13      	ldr	r3, [pc, #76]	@ (80091f8 <upper_receive_rx_data+0x60>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	425b      	negs	r3, r3
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	4b11      	ldr	r3, [pc, #68]	@ (80091fc <upper_receive_rx_data+0x64>)
 80091b8:	701a      	strb	r2, [r3, #0]
  LOGI("%d", rx_len);
 80091ba:	f7f9 ffd9 	bl	8003170 <HAL_GetTick>
 80091be:	4601      	mov	r1, r0
 80091c0:	4b0e      	ldr	r3, [pc, #56]	@ (80091fc <upper_receive_rx_data+0x64>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	4a0e      	ldr	r2, [pc, #56]	@ (8009200 <upper_receive_rx_data+0x68>)
 80091c6:	480f      	ldr	r0, [pc, #60]	@ (8009204 <upper_receive_rx_data+0x6c>)
 80091c8:	f000 fad2 	bl	8009770 <iprintf>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 80091cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009208 <upper_receive_rx_data+0x70>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80091d4:	490d      	ldr	r1, [pc, #52]	@ (800920c <upper_receive_rx_data+0x74>)
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fd fade 	bl	8006798 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 80091dc:	4b06      	ldr	r3, [pc, #24]	@ (80091f8 <upper_receive_rx_data+0x60>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	4b04      	ldr	r3, [pc, #16]	@ (80091f8 <upper_receive_rx_data+0x60>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0204 	bic.w	r2, r2, #4
 80091ee:	601a      	str	r2, [r3, #0]
}
 80091f0:	bf00      	nop
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20000b01 	.word	0x20000b01
 80091f8:	200009fc 	.word	0x200009fc
 80091fc:	20000b00 	.word	0x20000b00
 8009200:	0800b0ec 	.word	0x0800b0ec
 8009204:	0800ad30 	.word	0x0800ad30
 8009208:	200009f8 	.word	0x200009f8
 800920c:	20000a00 	.word	0x20000a00

08009210 <wireless_reg_handle>:

static uint8_t book_buf[WIRELESS_MAX_BUF_LEN];

static void wireless_packet_analys(void);

void wireless_reg_handle(UART_HandleTypeDef *h_uart, DMA_HandleTypeDef *h_dma) {
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  m_uart = h_uart;
 800921a:	4a05      	ldr	r2, [pc, #20]	@ (8009230 <wireless_reg_handle+0x20>)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6013      	str	r3, [r2, #0]
  m_dma  = h_dma;
 8009220:	4a04      	ldr	r2, [pc, #16]	@ (8009234 <wireless_reg_handle+0x24>)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	6013      	str	r3, [r2, #0]
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr
 8009230:	20000b04 	.word	0x20000b04
 8009234:	20000b08 	.word	0x20000b08

08009238 <wireless_init>:

void wireless_init(void) {
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
  registCallback(EVENT_Wirless, wireless_packet_analys);         // 注册事件表
 800923c:	490b      	ldr	r1, [pc, #44]	@ (800926c <wireless_init+0x34>)
 800923e:	2000      	movs	r0, #0
 8009240:	f000 f926 	bl	8009490 <registCallback>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 8009244:	4b0a      	ldr	r3, [pc, #40]	@ (8009270 <wireless_init+0x38>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800924c:	4909      	ldr	r1, [pc, #36]	@ (8009274 <wireless_init+0x3c>)
 800924e:	4618      	mov	r0, r3
 8009250:	f7fd faa2 	bl	8006798 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 8009254:	4b08      	ldr	r3, [pc, #32]	@ (8009278 <wireless_init+0x40>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	4b06      	ldr	r3, [pc, #24]	@ (8009278 <wireless_init+0x40>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f022 0204 	bic.w	r2, r2, #4
 8009266:	601a      	str	r2, [r3, #0]
}
 8009268:	bf00      	nop
 800926a:	bd80      	pop	{r7, pc}
 800926c:	08009365 	.word	0x08009365
 8009270:	20000b04 	.word	0x20000b04
 8009274:	20000b0c 	.word	0x20000b0c
 8009278:	20000b08 	.word	0x20000b08

0800927c <GetWireLessHandle>:

UART_HandleTypeDef *GetWireLessHandle(void) {
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
  if (m_uart == NULL) LOGW("not get m_uart");
 8009280:	4b07      	ldr	r3, [pc, #28]	@ (80092a0 <GetWireLessHandle+0x24>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d107      	bne.n	8009298 <GetWireLessHandle+0x1c>
 8009288:	f7f9 ff72 	bl	8003170 <HAL_GetTick>
 800928c:	4603      	mov	r3, r0
 800928e:	4a05      	ldr	r2, [pc, #20]	@ (80092a4 <GetWireLessHandle+0x28>)
 8009290:	4619      	mov	r1, r3
 8009292:	4805      	ldr	r0, [pc, #20]	@ (80092a8 <GetWireLessHandle+0x2c>)
 8009294:	f000 fa6c 	bl	8009770 <iprintf>
  return m_uart;
 8009298:	4b01      	ldr	r3, [pc, #4]	@ (80092a0 <GetWireLessHandle+0x24>)
 800929a:	681b      	ldr	r3, [r3, #0]
}
 800929c:	4618      	mov	r0, r3
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20000b04 	.word	0x20000b04
 80092a4:	0800b104 	.word	0x0800b104
 80092a8:	0800ad50 	.word	0x0800ad50

080092ac <wireless_send>:

void wireless_send(uint8_t *data, uint8_t len) { HAL_UART_Transmit(m_uart, data, len, 100); }
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
 80092b8:	4b05      	ldr	r3, [pc, #20]	@ (80092d0 <wireless_send+0x24>)
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	78fb      	ldrb	r3, [r7, #3]
 80092be:	b29a      	uxth	r2, r3
 80092c0:	2364      	movs	r3, #100	@ 0x64
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	f7fd f9c0 	bl	8006648 <HAL_UART_Transmit>
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	20000b04 	.word	0x20000b04

080092d4 <CRC16_Calculate>:

static uint16_t CRC16_Calculate(uint8_t *data, uint8_t len) {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 80092e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80092e4:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 80092ea:	2300      	movs	r3, #0
 80092ec:	613b      	str	r3, [r7, #16]
 80092ee:	e022      	b.n	8009336 <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	4413      	add	r3, r2
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	461a      	mov	r2, r3
 80092fa:	8afb      	ldrh	r3, [r7, #22]
 80092fc:	4053      	eors	r3, r2
 80092fe:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	e011      	b.n	800932a <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 8009306:	8afb      	ldrh	r3, [r7, #22]
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d006      	beq.n	800931e <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 8009310:	8afb      	ldrh	r3, [r7, #22]
 8009312:	085b      	lsrs	r3, r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	4b10      	ldr	r3, [pc, #64]	@ (8009358 <CRC16_Calculate+0x84>)
 8009318:	4053      	eors	r3, r2
 800931a:	82fb      	strh	r3, [r7, #22]
 800931c:	e002      	b.n	8009324 <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 800931e:	8afb      	ldrh	r3, [r7, #22]
 8009320:	085b      	lsrs	r3, r3, #1
 8009322:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3301      	adds	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b07      	cmp	r3, #7
 800932e:	ddea      	ble.n	8009306 <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	3301      	adds	r3, #1
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	78fb      	ldrb	r3, [r7, #3]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	429a      	cmp	r2, r3
 800933c:	dbd8      	blt.n	80092f0 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 800933e:	f7f9 ff17 	bl	8003170 <HAL_GetTick>
 8009342:	4601      	mov	r1, r0
 8009344:	8afb      	ldrh	r3, [r7, #22]
 8009346:	4a05      	ldr	r2, [pc, #20]	@ (800935c <CRC16_Calculate+0x88>)
 8009348:	4805      	ldr	r0, [pc, #20]	@ (8009360 <CRC16_Calculate+0x8c>)
 800934a:	f000 fa11 	bl	8009770 <iprintf>
  return crc16;
 800934e:	8afb      	ldrh	r3, [r7, #22]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3718      	adds	r7, #24
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	ffffa001 	.word	0xffffa001
 800935c:	0800b118 	.word	0x0800b118
 8009360:	0800ad7c 	.word	0x0800ad7c

08009364 <wireless_packet_analys>:

void wireless_packet_analys(void) {
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
  uint8_t  type     = rx_buf[0];
 800936a:	4b25      	ldr	r3, [pc, #148]	@ (8009400 <wireless_packet_analys+0x9c>)
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	73fb      	strb	r3, [r7, #15]
  uint16_t pack_len = rx_buf[4];
 8009370:	4b23      	ldr	r3, [pc, #140]	@ (8009400 <wireless_packet_analys+0x9c>)
 8009372:	791b      	ldrb	r3, [r3, #4]
 8009374:	81bb      	strh	r3, [r7, #12]
  uint8_t *recv_cmd;
  bool     transmit_state = get_transmit_state();
 8009376:	f7ff fc01 	bl	8008b7c <get_transmit_state>
 800937a:	4603      	mov	r3, r0
 800937c:	72fb      	strb	r3, [r7, #11]
  LOGI("WIRLESS");
 800937e:	f7f9 fef7 	bl	8003170 <HAL_GetTick>
 8009382:	4603      	mov	r3, r0
 8009384:	4a1f      	ldr	r2, [pc, #124]	@ (8009404 <wireless_packet_analys+0xa0>)
 8009386:	4619      	mov	r1, r3
 8009388:	481f      	ldr	r0, [pc, #124]	@ (8009408 <wireless_packet_analys+0xa4>)
 800938a:	f000 f9f1 	bl	8009770 <iprintf>
  if (type == 0x70) {
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	2b70      	cmp	r3, #112	@ 0x70
 8009392:	d131      	bne.n	80093f8 <wireless_packet_analys+0x94>
    if (CRC16_Calculate(&rx_buf, 5 + pack_len)) {
 8009394:	89bb      	ldrh	r3, [r7, #12]
 8009396:	b2db      	uxtb	r3, r3
 8009398:	3305      	adds	r3, #5
 800939a:	b2db      	uxtb	r3, r3
 800939c:	4619      	mov	r1, r3
 800939e:	4818      	ldr	r0, [pc, #96]	@ (8009400 <wireless_packet_analys+0x9c>)
 80093a0:	f7ff ff98 	bl	80092d4 <CRC16_Calculate>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d008      	beq.n	80093bc <wireless_packet_analys+0x58>
      LOGE("CRC error");
 80093aa:	f7f9 fee1 	bl	8003170 <HAL_GetTick>
 80093ae:	4603      	mov	r3, r0
 80093b0:	4a14      	ldr	r2, [pc, #80]	@ (8009404 <wireless_packet_analys+0xa0>)
 80093b2:	4619      	mov	r1, r3
 80093b4:	4815      	ldr	r0, [pc, #84]	@ (800940c <wireless_packet_analys+0xa8>)
 80093b6:	f000 f9db 	bl	8009770 <iprintf>
      return;
 80093ba:	e01d      	b.n	80093f8 <wireless_packet_analys+0x94>
    }
    // lower computer recv
    if (transmit_state) {
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d008      	beq.n	80093d4 <wireless_packet_analys+0x70>
      LOGE("transmit has occupied");
 80093c2:	f7f9 fed5 	bl	8003170 <HAL_GetTick>
 80093c6:	4603      	mov	r3, r0
 80093c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009404 <wireless_packet_analys+0xa0>)
 80093ca:	4619      	mov	r1, r3
 80093cc:	4810      	ldr	r0, [pc, #64]	@ (8009410 <wireless_packet_analys+0xac>)
 80093ce:	f000 f9cf 	bl	8009770 <iprintf>
      return;
 80093d2:	e011      	b.n	80093f8 <wireless_packet_analys+0x94>
    }

    transmit_using(true);
 80093d4:	2001      	movs	r0, #1
 80093d6:	f7ff fbc1 	bl	8008b5c <transmit_using>
    recv_cmd = get_cmd_cache();
 80093da:	f7ff fba5 	bl	8008b28 <get_cmd_cache>
 80093de:	6078      	str	r0, [r7, #4]
    memcpy(recv_cmd, rx_buf, rx_len);
 80093e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009414 <wireless_packet_analys+0xb0>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
 80093e6:	4906      	ldr	r1, [pc, #24]	@ (8009400 <wireless_packet_analys+0x9c>)
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fa92 	bl	8009912 <memcpy>
    set_cmd_recv_len(rx_len);
 80093ee:	4b09      	ldr	r3, [pc, #36]	@ (8009414 <wireless_packet_analys+0xb0>)
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff fba2 	bl	8008b3c <set_cmd_recv_len>
  //     return;
  //   }

  // event_data_book(&(rx_buf[2]), pack_len);
  // }
}
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20000b0c 	.word	0x20000b0c
 8009404:	0800b128 	.word	0x0800b128
 8009408:	0800ada4 	.word	0x0800ada4
 800940c:	0800adc8 	.word	0x0800adc8
 8009410:	0800adf0 	.word	0x0800adf0
 8009414:	20000c0c 	.word	0x20000c0c

08009418 <receive_rx_data>:
  return cmd;
  //}
  // return 10;
}

void receive_rx_data(void) {
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
  flag = true;
 800941c:	4b15      	ldr	r3, [pc, #84]	@ (8009474 <receive_rx_data+0x5c>)
 800941e:	2201      	movs	r2, #1
 8009420:	701a      	strb	r2, [r3, #0]
  enterQueueEvent(EVENT_Wirless);
 8009422:	2000      	movs	r0, #0
 8009424:	f000 f84c 	bl	80094c0 <enterQueueEvent>
  rx_len = WIRELESS_MAX_BUF_LEN - __HAL_DMA_GET_COUNTER(m_dma);
 8009428:	4b13      	ldr	r3, [pc, #76]	@ (8009478 <receive_rx_data+0x60>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	b2db      	uxtb	r3, r3
 8009432:	425b      	negs	r3, r3
 8009434:	b2da      	uxtb	r2, r3
 8009436:	4b11      	ldr	r3, [pc, #68]	@ (800947c <receive_rx_data+0x64>)
 8009438:	701a      	strb	r2, [r3, #0]
  LOGI("%d", rx_len);
 800943a:	f7f9 fe99 	bl	8003170 <HAL_GetTick>
 800943e:	4601      	mov	r1, r0
 8009440:	4b0e      	ldr	r3, [pc, #56]	@ (800947c <receive_rx_data+0x64>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	4a0e      	ldr	r2, [pc, #56]	@ (8009480 <receive_rx_data+0x68>)
 8009446:	480f      	ldr	r0, [pc, #60]	@ (8009484 <receive_rx_data+0x6c>)
 8009448:	f000 f992 	bl	8009770 <iprintf>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 800944c:	4b0e      	ldr	r3, [pc, #56]	@ (8009488 <receive_rx_data+0x70>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009454:	490d      	ldr	r1, [pc, #52]	@ (800948c <receive_rx_data+0x74>)
 8009456:	4618      	mov	r0, r3
 8009458:	f7fd f99e 	bl	8006798 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 800945c:	4b06      	ldr	r3, [pc, #24]	@ (8009478 <receive_rx_data+0x60>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	4b04      	ldr	r3, [pc, #16]	@ (8009478 <receive_rx_data+0x60>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0204 	bic.w	r2, r2, #4
 800946e:	601a      	str	r2, [r3, #0]
}
 8009470:	bf00      	nop
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20000c0d 	.word	0x20000c0d
 8009478:	20000b08 	.word	0x20000b08
 800947c:	20000c0c 	.word	0x20000c0c
 8009480:	0800b140 	.word	0x0800b140
 8009484:	0800ae44 	.word	0x0800ae44
 8009488:	20000b04 	.word	0x20000b04
 800948c:	20000b0c 	.word	0x20000b0c

08009490 <registCallback>:
static uint8_t eventQueueHead = 0;
static uint8_t eventQueueTail = 0;

static EVENT_t m_cbs[EVENT_QUEUE_SIZE];  // 事件队列表

void registCallback(EVENT_TYPE type, event_callback cb) {
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	6039      	str	r1, [r7, #0]
 800949a:	71fb      	strb	r3, [r7, #7]
  m_cbs[type].type     = type;
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	4907      	ldr	r1, [pc, #28]	@ (80094bc <registCallback+0x2c>)
 80094a0:	79fa      	ldrb	r2, [r7, #7]
 80094a2:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
  m_cbs[type].callback = cb;
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	4a04      	ldr	r2, [pc, #16]	@ (80094bc <registCallback+0x2c>)
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	4413      	add	r3, r2
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	605a      	str	r2, [r3, #4]
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bc80      	pop	{r7}
 80094ba:	4770      	bx	lr
 80094bc:	20000c94 	.word	0x20000c94

080094c0 <enterQueueEvent>:

void enterQueueEvent(EVENT_TYPE type) {
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	71fb      	strb	r3, [r7, #7]
  if ((eventQueueHead + 1) % EVENT_QUEUE_SIZE == eventQueueTail) {
 80094ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009540 <enterQueueEvent+0x80>)
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	3301      	adds	r3, #1
 80094d0:	425a      	negs	r2, r3
 80094d2:	f003 030f 	and.w	r3, r3, #15
 80094d6:	f002 020f 	and.w	r2, r2, #15
 80094da:	bf58      	it	pl
 80094dc:	4253      	negpl	r3, r2
 80094de:	4a19      	ldr	r2, [pc, #100]	@ (8009544 <enterQueueEvent+0x84>)
 80094e0:	7812      	ldrb	r2, [r2, #0]
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d108      	bne.n	80094f8 <enterQueueEvent+0x38>
    LOGW("event queue full");
 80094e6:	f7f9 fe43 	bl	8003170 <HAL_GetTick>
 80094ea:	4603      	mov	r3, r0
 80094ec:	4a16      	ldr	r2, [pc, #88]	@ (8009548 <enterQueueEvent+0x88>)
 80094ee:	4619      	mov	r1, r3
 80094f0:	4816      	ldr	r0, [pc, #88]	@ (800954c <enterQueueEvent+0x8c>)
 80094f2:	f000 f93d 	bl	8009770 <iprintf>
    return;
 80094f6:	e01f      	b.n	8009538 <enterQueueEvent+0x78>
  }
  eventQueue[eventQueueHead].type     = type;
 80094f8:	4b11      	ldr	r3, [pc, #68]	@ (8009540 <enterQueueEvent+0x80>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	4619      	mov	r1, r3
 80094fe:	4a14      	ldr	r2, [pc, #80]	@ (8009550 <enterQueueEvent+0x90>)
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
  eventQueue[eventQueueHead].callback = m_cbs[type].callback;
 8009506:	79fb      	ldrb	r3, [r7, #7]
 8009508:	4a0d      	ldr	r2, [pc, #52]	@ (8009540 <enterQueueEvent+0x80>)
 800950a:	7812      	ldrb	r2, [r2, #0]
 800950c:	4610      	mov	r0, r2
 800950e:	4a11      	ldr	r2, [pc, #68]	@ (8009554 <enterQueueEvent+0x94>)
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	4413      	add	r3, r2
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	490e      	ldr	r1, [pc, #56]	@ (8009550 <enterQueueEvent+0x90>)
 8009518:	00c3      	lsls	r3, r0, #3
 800951a:	440b      	add	r3, r1
 800951c:	605a      	str	r2, [r3, #4]
  eventQueueHead                      = (eventQueueHead + 1) % EVENT_QUEUE_SIZE;
 800951e:	4b08      	ldr	r3, [pc, #32]	@ (8009540 <enterQueueEvent+0x80>)
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	3301      	adds	r3, #1
 8009524:	425a      	negs	r2, r3
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	f002 020f 	and.w	r2, r2, #15
 800952e:	bf58      	it	pl
 8009530:	4253      	negpl	r3, r2
 8009532:	b2da      	uxtb	r2, r3
 8009534:	4b02      	ldr	r3, [pc, #8]	@ (8009540 <enterQueueEvent+0x80>)
 8009536:	701a      	strb	r2, [r3, #0]
}
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000c90 	.word	0x20000c90
 8009544:	20000c91 	.word	0x20000c91
 8009548:	0800b150 	.word	0x0800b150
 800954c:	0800ae64 	.word	0x0800ae64
 8009550:	20000c10 	.word	0x20000c10
 8009554:	20000c94 	.word	0x20000c94

08009558 <process_event>:

void process_event(void) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
  while (eventQueueTail != eventQueueHead) {
 800955e:	e01b      	b.n	8009598 <process_event+0x40>
    EVENT_t event = eventQueue[eventQueueTail];
 8009560:	4b13      	ldr	r3, [pc, #76]	@ (80095b0 <process_event+0x58>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	4913      	ldr	r1, [pc, #76]	@ (80095b4 <process_event+0x5c>)
 8009566:	463a      	mov	r2, r7
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	440b      	add	r3, r1
 800956c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009570:	e882 0003 	stmia.w	r2, {r0, r1}
    if (event.callback != NULL) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <process_event+0x26>
      event.callback();  // 调用回调函数
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4798      	blx	r3
    }
    eventQueueTail = (eventQueueTail + 1) % EVENT_QUEUE_SIZE;
 800957e:	4b0c      	ldr	r3, [pc, #48]	@ (80095b0 <process_event+0x58>)
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	3301      	adds	r3, #1
 8009584:	425a      	negs	r2, r3
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	f002 020f 	and.w	r2, r2, #15
 800958e:	bf58      	it	pl
 8009590:	4253      	negpl	r3, r2
 8009592:	b2da      	uxtb	r2, r3
 8009594:	4b06      	ldr	r3, [pc, #24]	@ (80095b0 <process_event+0x58>)
 8009596:	701a      	strb	r2, [r3, #0]
  while (eventQueueTail != eventQueueHead) {
 8009598:	4b05      	ldr	r3, [pc, #20]	@ (80095b0 <process_event+0x58>)
 800959a:	781a      	ldrb	r2, [r3, #0]
 800959c:	4b06      	ldr	r3, [pc, #24]	@ (80095b8 <process_event+0x60>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d1dd      	bne.n	8009560 <process_event+0x8>
  }
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000c91 	.word	0x20000c91
 80095b4:	20000c10 	.word	0x20000c10
 80095b8:	20000c90 	.word	0x20000c90

080095bc <has_pass_time>:
#include "tick.h"

#include "stm32f1xx_hal.h"

uint32_t has_pass_time(uint32_t last_time)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
    int32_t pass_time;
    pass_time = HAL_GetTick() - last_time;
 80095c4:	f7f9 fdd4 	bl	8003170 <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	60fb      	str	r3, [r7, #12]
    if (pass_time >= 0)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	db01      	blt.n	80095da <has_pass_time+0x1e>
        return pass_time;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	e003      	b.n	80095e2 <has_pass_time+0x26>
    else
        return UINT32_MAX - last_time - pass_time;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	43da      	mvns	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <std>:
 80095ec:	2300      	movs	r3, #0
 80095ee:	b510      	push	{r4, lr}
 80095f0:	4604      	mov	r4, r0
 80095f2:	e9c0 3300 	strd	r3, r3, [r0]
 80095f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095fa:	6083      	str	r3, [r0, #8]
 80095fc:	8181      	strh	r1, [r0, #12]
 80095fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009600:	81c2      	strh	r2, [r0, #14]
 8009602:	6183      	str	r3, [r0, #24]
 8009604:	4619      	mov	r1, r3
 8009606:	2208      	movs	r2, #8
 8009608:	305c      	adds	r0, #92	@ 0x5c
 800960a:	f000 f906 	bl	800981a <memset>
 800960e:	4b0d      	ldr	r3, [pc, #52]	@ (8009644 <std+0x58>)
 8009610:	6224      	str	r4, [r4, #32]
 8009612:	6263      	str	r3, [r4, #36]	@ 0x24
 8009614:	4b0c      	ldr	r3, [pc, #48]	@ (8009648 <std+0x5c>)
 8009616:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009618:	4b0c      	ldr	r3, [pc, #48]	@ (800964c <std+0x60>)
 800961a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800961c:	4b0c      	ldr	r3, [pc, #48]	@ (8009650 <std+0x64>)
 800961e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009620:	4b0c      	ldr	r3, [pc, #48]	@ (8009654 <std+0x68>)
 8009622:	429c      	cmp	r4, r3
 8009624:	d006      	beq.n	8009634 <std+0x48>
 8009626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800962a:	4294      	cmp	r4, r2
 800962c:	d002      	beq.n	8009634 <std+0x48>
 800962e:	33d0      	adds	r3, #208	@ 0xd0
 8009630:	429c      	cmp	r4, r3
 8009632:	d105      	bne.n	8009640 <std+0x54>
 8009634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800963c:	f000 b966 	b.w	800990c <__retarget_lock_init_recursive>
 8009640:	bd10      	pop	{r4, pc}
 8009642:	bf00      	nop
 8009644:	08009795 	.word	0x08009795
 8009648:	080097b7 	.word	0x080097b7
 800964c:	080097ef 	.word	0x080097ef
 8009650:	08009813 	.word	0x08009813
 8009654:	20000d14 	.word	0x20000d14

08009658 <stdio_exit_handler>:
 8009658:	4a02      	ldr	r2, [pc, #8]	@ (8009664 <stdio_exit_handler+0xc>)
 800965a:	4903      	ldr	r1, [pc, #12]	@ (8009668 <stdio_exit_handler+0x10>)
 800965c:	4803      	ldr	r0, [pc, #12]	@ (800966c <stdio_exit_handler+0x14>)
 800965e:	f000 b869 	b.w	8009734 <_fwalk_sglue>
 8009662:	bf00      	nop
 8009664:	20000020 	.word	0x20000020
 8009668:	0800a1bd 	.word	0x0800a1bd
 800966c:	20000030 	.word	0x20000030

08009670 <cleanup_stdio>:
 8009670:	6841      	ldr	r1, [r0, #4]
 8009672:	4b0c      	ldr	r3, [pc, #48]	@ (80096a4 <cleanup_stdio+0x34>)
 8009674:	b510      	push	{r4, lr}
 8009676:	4299      	cmp	r1, r3
 8009678:	4604      	mov	r4, r0
 800967a:	d001      	beq.n	8009680 <cleanup_stdio+0x10>
 800967c:	f000 fd9e 	bl	800a1bc <_fflush_r>
 8009680:	68a1      	ldr	r1, [r4, #8]
 8009682:	4b09      	ldr	r3, [pc, #36]	@ (80096a8 <cleanup_stdio+0x38>)
 8009684:	4299      	cmp	r1, r3
 8009686:	d002      	beq.n	800968e <cleanup_stdio+0x1e>
 8009688:	4620      	mov	r0, r4
 800968a:	f000 fd97 	bl	800a1bc <_fflush_r>
 800968e:	68e1      	ldr	r1, [r4, #12]
 8009690:	4b06      	ldr	r3, [pc, #24]	@ (80096ac <cleanup_stdio+0x3c>)
 8009692:	4299      	cmp	r1, r3
 8009694:	d004      	beq.n	80096a0 <cleanup_stdio+0x30>
 8009696:	4620      	mov	r0, r4
 8009698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800969c:	f000 bd8e 	b.w	800a1bc <_fflush_r>
 80096a0:	bd10      	pop	{r4, pc}
 80096a2:	bf00      	nop
 80096a4:	20000d14 	.word	0x20000d14
 80096a8:	20000d7c 	.word	0x20000d7c
 80096ac:	20000de4 	.word	0x20000de4

080096b0 <global_stdio_init.part.0>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	4b0b      	ldr	r3, [pc, #44]	@ (80096e0 <global_stdio_init.part.0+0x30>)
 80096b4:	4c0b      	ldr	r4, [pc, #44]	@ (80096e4 <global_stdio_init.part.0+0x34>)
 80096b6:	4a0c      	ldr	r2, [pc, #48]	@ (80096e8 <global_stdio_init.part.0+0x38>)
 80096b8:	4620      	mov	r0, r4
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	2104      	movs	r1, #4
 80096be:	2200      	movs	r2, #0
 80096c0:	f7ff ff94 	bl	80095ec <std>
 80096c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80096c8:	2201      	movs	r2, #1
 80096ca:	2109      	movs	r1, #9
 80096cc:	f7ff ff8e 	bl	80095ec <std>
 80096d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80096d4:	2202      	movs	r2, #2
 80096d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096da:	2112      	movs	r1, #18
 80096dc:	f7ff bf86 	b.w	80095ec <std>
 80096e0:	20000e4c 	.word	0x20000e4c
 80096e4:	20000d14 	.word	0x20000d14
 80096e8:	08009659 	.word	0x08009659

080096ec <__sfp_lock_acquire>:
 80096ec:	4801      	ldr	r0, [pc, #4]	@ (80096f4 <__sfp_lock_acquire+0x8>)
 80096ee:	f000 b90e 	b.w	800990e <__retarget_lock_acquire_recursive>
 80096f2:	bf00      	nop
 80096f4:	20000e55 	.word	0x20000e55

080096f8 <__sfp_lock_release>:
 80096f8:	4801      	ldr	r0, [pc, #4]	@ (8009700 <__sfp_lock_release+0x8>)
 80096fa:	f000 b909 	b.w	8009910 <__retarget_lock_release_recursive>
 80096fe:	bf00      	nop
 8009700:	20000e55 	.word	0x20000e55

08009704 <__sinit>:
 8009704:	b510      	push	{r4, lr}
 8009706:	4604      	mov	r4, r0
 8009708:	f7ff fff0 	bl	80096ec <__sfp_lock_acquire>
 800970c:	6a23      	ldr	r3, [r4, #32]
 800970e:	b11b      	cbz	r3, 8009718 <__sinit+0x14>
 8009710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009714:	f7ff bff0 	b.w	80096f8 <__sfp_lock_release>
 8009718:	4b04      	ldr	r3, [pc, #16]	@ (800972c <__sinit+0x28>)
 800971a:	6223      	str	r3, [r4, #32]
 800971c:	4b04      	ldr	r3, [pc, #16]	@ (8009730 <__sinit+0x2c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1f5      	bne.n	8009710 <__sinit+0xc>
 8009724:	f7ff ffc4 	bl	80096b0 <global_stdio_init.part.0>
 8009728:	e7f2      	b.n	8009710 <__sinit+0xc>
 800972a:	bf00      	nop
 800972c:	08009671 	.word	0x08009671
 8009730:	20000e4c 	.word	0x20000e4c

08009734 <_fwalk_sglue>:
 8009734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009738:	4607      	mov	r7, r0
 800973a:	4688      	mov	r8, r1
 800973c:	4614      	mov	r4, r2
 800973e:	2600      	movs	r6, #0
 8009740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009744:	f1b9 0901 	subs.w	r9, r9, #1
 8009748:	d505      	bpl.n	8009756 <_fwalk_sglue+0x22>
 800974a:	6824      	ldr	r4, [r4, #0]
 800974c:	2c00      	cmp	r4, #0
 800974e:	d1f7      	bne.n	8009740 <_fwalk_sglue+0xc>
 8009750:	4630      	mov	r0, r6
 8009752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009756:	89ab      	ldrh	r3, [r5, #12]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d907      	bls.n	800976c <_fwalk_sglue+0x38>
 800975c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009760:	3301      	adds	r3, #1
 8009762:	d003      	beq.n	800976c <_fwalk_sglue+0x38>
 8009764:	4629      	mov	r1, r5
 8009766:	4638      	mov	r0, r7
 8009768:	47c0      	blx	r8
 800976a:	4306      	orrs	r6, r0
 800976c:	3568      	adds	r5, #104	@ 0x68
 800976e:	e7e9      	b.n	8009744 <_fwalk_sglue+0x10>

08009770 <iprintf>:
 8009770:	b40f      	push	{r0, r1, r2, r3}
 8009772:	b507      	push	{r0, r1, r2, lr}
 8009774:	4906      	ldr	r1, [pc, #24]	@ (8009790 <iprintf+0x20>)
 8009776:	ab04      	add	r3, sp, #16
 8009778:	6808      	ldr	r0, [r1, #0]
 800977a:	f853 2b04 	ldr.w	r2, [r3], #4
 800977e:	6881      	ldr	r1, [r0, #8]
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	f000 f9f3 	bl	8009b6c <_vfiprintf_r>
 8009786:	b003      	add	sp, #12
 8009788:	f85d eb04 	ldr.w	lr, [sp], #4
 800978c:	b004      	add	sp, #16
 800978e:	4770      	bx	lr
 8009790:	2000002c 	.word	0x2000002c

08009794 <__sread>:
 8009794:	b510      	push	{r4, lr}
 8009796:	460c      	mov	r4, r1
 8009798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979c:	f000 f868 	bl	8009870 <_read_r>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	bfab      	itete	ge
 80097a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80097a6:	89a3      	ldrhlt	r3, [r4, #12]
 80097a8:	181b      	addge	r3, r3, r0
 80097aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80097ae:	bfac      	ite	ge
 80097b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80097b2:	81a3      	strhlt	r3, [r4, #12]
 80097b4:	bd10      	pop	{r4, pc}

080097b6 <__swrite>:
 80097b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ba:	461f      	mov	r7, r3
 80097bc:	898b      	ldrh	r3, [r1, #12]
 80097be:	4605      	mov	r5, r0
 80097c0:	05db      	lsls	r3, r3, #23
 80097c2:	460c      	mov	r4, r1
 80097c4:	4616      	mov	r6, r2
 80097c6:	d505      	bpl.n	80097d4 <__swrite+0x1e>
 80097c8:	2302      	movs	r3, #2
 80097ca:	2200      	movs	r2, #0
 80097cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d0:	f000 f83c 	bl	800984c <_lseek_r>
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	4632      	mov	r2, r6
 80097d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097dc:	81a3      	strh	r3, [r4, #12]
 80097de:	4628      	mov	r0, r5
 80097e0:	463b      	mov	r3, r7
 80097e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ea:	f000 b853 	b.w	8009894 <_write_r>

080097ee <__sseek>:
 80097ee:	b510      	push	{r4, lr}
 80097f0:	460c      	mov	r4, r1
 80097f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f6:	f000 f829 	bl	800984c <_lseek_r>
 80097fa:	1c43      	adds	r3, r0, #1
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	bf15      	itete	ne
 8009800:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009802:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009806:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800980a:	81a3      	strheq	r3, [r4, #12]
 800980c:	bf18      	it	ne
 800980e:	81a3      	strhne	r3, [r4, #12]
 8009810:	bd10      	pop	{r4, pc}

08009812 <__sclose>:
 8009812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009816:	f000 b809 	b.w	800982c <_close_r>

0800981a <memset>:
 800981a:	4603      	mov	r3, r0
 800981c:	4402      	add	r2, r0
 800981e:	4293      	cmp	r3, r2
 8009820:	d100      	bne.n	8009824 <memset+0xa>
 8009822:	4770      	bx	lr
 8009824:	f803 1b01 	strb.w	r1, [r3], #1
 8009828:	e7f9      	b.n	800981e <memset+0x4>
	...

0800982c <_close_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	2300      	movs	r3, #0
 8009830:	4d05      	ldr	r5, [pc, #20]	@ (8009848 <_close_r+0x1c>)
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7f8 ff08 	bl	800264c <_close>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_close_r+0x1a>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_close_r+0x1a>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	20000e50 	.word	0x20000e50

0800984c <_lseek_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	4611      	mov	r1, r2
 8009854:	2200      	movs	r2, #0
 8009856:	4d05      	ldr	r5, [pc, #20]	@ (800986c <_lseek_r+0x20>)
 8009858:	602a      	str	r2, [r5, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	f7f8 ff1a 	bl	8002694 <_lseek>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_lseek_r+0x1e>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_lseek_r+0x1e>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	20000e50 	.word	0x20000e50

08009870 <_read_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4604      	mov	r4, r0
 8009874:	4608      	mov	r0, r1
 8009876:	4611      	mov	r1, r2
 8009878:	2200      	movs	r2, #0
 800987a:	4d05      	ldr	r5, [pc, #20]	@ (8009890 <_read_r+0x20>)
 800987c:	602a      	str	r2, [r5, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	f7f8 feab 	bl	80025da <_read>
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	d102      	bne.n	800988e <_read_r+0x1e>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	b103      	cbz	r3, 800988e <_read_r+0x1e>
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	20000e50 	.word	0x20000e50

08009894 <_write_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	4604      	mov	r4, r0
 8009898:	4608      	mov	r0, r1
 800989a:	4611      	mov	r1, r2
 800989c:	2200      	movs	r2, #0
 800989e:	4d05      	ldr	r5, [pc, #20]	@ (80098b4 <_write_r+0x20>)
 80098a0:	602a      	str	r2, [r5, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f7f8 feb6 	bl	8002614 <_write>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_write_r+0x1e>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_write_r+0x1e>
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	20000e50 	.word	0x20000e50

080098b8 <__errno>:
 80098b8:	4b01      	ldr	r3, [pc, #4]	@ (80098c0 <__errno+0x8>)
 80098ba:	6818      	ldr	r0, [r3, #0]
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	2000002c 	.word	0x2000002c

080098c4 <__libc_init_array>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	2600      	movs	r6, #0
 80098c8:	4d0c      	ldr	r5, [pc, #48]	@ (80098fc <__libc_init_array+0x38>)
 80098ca:	4c0d      	ldr	r4, [pc, #52]	@ (8009900 <__libc_init_array+0x3c>)
 80098cc:	1b64      	subs	r4, r4, r5
 80098ce:	10a4      	asrs	r4, r4, #2
 80098d0:	42a6      	cmp	r6, r4
 80098d2:	d109      	bne.n	80098e8 <__libc_init_array+0x24>
 80098d4:	f000 fdd0 	bl	800a478 <_init>
 80098d8:	2600      	movs	r6, #0
 80098da:	4d0a      	ldr	r5, [pc, #40]	@ (8009904 <__libc_init_array+0x40>)
 80098dc:	4c0a      	ldr	r4, [pc, #40]	@ (8009908 <__libc_init_array+0x44>)
 80098de:	1b64      	subs	r4, r4, r5
 80098e0:	10a4      	asrs	r4, r4, #2
 80098e2:	42a6      	cmp	r6, r4
 80098e4:	d105      	bne.n	80098f2 <__libc_init_array+0x2e>
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ec:	4798      	blx	r3
 80098ee:	3601      	adds	r6, #1
 80098f0:	e7ee      	b.n	80098d0 <__libc_init_array+0xc>
 80098f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f6:	4798      	blx	r3
 80098f8:	3601      	adds	r6, #1
 80098fa:	e7f2      	b.n	80098e2 <__libc_init_array+0x1e>
 80098fc:	0800b194 	.word	0x0800b194
 8009900:	0800b194 	.word	0x0800b194
 8009904:	0800b194 	.word	0x0800b194
 8009908:	0800b198 	.word	0x0800b198

0800990c <__retarget_lock_init_recursive>:
 800990c:	4770      	bx	lr

0800990e <__retarget_lock_acquire_recursive>:
 800990e:	4770      	bx	lr

08009910 <__retarget_lock_release_recursive>:
 8009910:	4770      	bx	lr

08009912 <memcpy>:
 8009912:	440a      	add	r2, r1
 8009914:	4291      	cmp	r1, r2
 8009916:	f100 33ff 	add.w	r3, r0, #4294967295
 800991a:	d100      	bne.n	800991e <memcpy+0xc>
 800991c:	4770      	bx	lr
 800991e:	b510      	push	{r4, lr}
 8009920:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009924:	4291      	cmp	r1, r2
 8009926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800992a:	d1f9      	bne.n	8009920 <memcpy+0xe>
 800992c:	bd10      	pop	{r4, pc}
	...

08009930 <_free_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4605      	mov	r5, r0
 8009934:	2900      	cmp	r1, #0
 8009936:	d040      	beq.n	80099ba <_free_r+0x8a>
 8009938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800993c:	1f0c      	subs	r4, r1, #4
 800993e:	2b00      	cmp	r3, #0
 8009940:	bfb8      	it	lt
 8009942:	18e4      	addlt	r4, r4, r3
 8009944:	f000 f8de 	bl	8009b04 <__malloc_lock>
 8009948:	4a1c      	ldr	r2, [pc, #112]	@ (80099bc <_free_r+0x8c>)
 800994a:	6813      	ldr	r3, [r2, #0]
 800994c:	b933      	cbnz	r3, 800995c <_free_r+0x2c>
 800994e:	6063      	str	r3, [r4, #4]
 8009950:	6014      	str	r4, [r2, #0]
 8009952:	4628      	mov	r0, r5
 8009954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009958:	f000 b8da 	b.w	8009b10 <__malloc_unlock>
 800995c:	42a3      	cmp	r3, r4
 800995e:	d908      	bls.n	8009972 <_free_r+0x42>
 8009960:	6820      	ldr	r0, [r4, #0]
 8009962:	1821      	adds	r1, r4, r0
 8009964:	428b      	cmp	r3, r1
 8009966:	bf01      	itttt	eq
 8009968:	6819      	ldreq	r1, [r3, #0]
 800996a:	685b      	ldreq	r3, [r3, #4]
 800996c:	1809      	addeq	r1, r1, r0
 800996e:	6021      	streq	r1, [r4, #0]
 8009970:	e7ed      	b.n	800994e <_free_r+0x1e>
 8009972:	461a      	mov	r2, r3
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	b10b      	cbz	r3, 800997c <_free_r+0x4c>
 8009978:	42a3      	cmp	r3, r4
 800997a:	d9fa      	bls.n	8009972 <_free_r+0x42>
 800997c:	6811      	ldr	r1, [r2, #0]
 800997e:	1850      	adds	r0, r2, r1
 8009980:	42a0      	cmp	r0, r4
 8009982:	d10b      	bne.n	800999c <_free_r+0x6c>
 8009984:	6820      	ldr	r0, [r4, #0]
 8009986:	4401      	add	r1, r0
 8009988:	1850      	adds	r0, r2, r1
 800998a:	4283      	cmp	r3, r0
 800998c:	6011      	str	r1, [r2, #0]
 800998e:	d1e0      	bne.n	8009952 <_free_r+0x22>
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	4408      	add	r0, r1
 8009996:	6010      	str	r0, [r2, #0]
 8009998:	6053      	str	r3, [r2, #4]
 800999a:	e7da      	b.n	8009952 <_free_r+0x22>
 800999c:	d902      	bls.n	80099a4 <_free_r+0x74>
 800999e:	230c      	movs	r3, #12
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	e7d6      	b.n	8009952 <_free_r+0x22>
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	1821      	adds	r1, r4, r0
 80099a8:	428b      	cmp	r3, r1
 80099aa:	bf01      	itttt	eq
 80099ac:	6819      	ldreq	r1, [r3, #0]
 80099ae:	685b      	ldreq	r3, [r3, #4]
 80099b0:	1809      	addeq	r1, r1, r0
 80099b2:	6021      	streq	r1, [r4, #0]
 80099b4:	6063      	str	r3, [r4, #4]
 80099b6:	6054      	str	r4, [r2, #4]
 80099b8:	e7cb      	b.n	8009952 <_free_r+0x22>
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	20000e5c 	.word	0x20000e5c

080099c0 <sbrk_aligned>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	4e0f      	ldr	r6, [pc, #60]	@ (8009a00 <sbrk_aligned+0x40>)
 80099c4:	460c      	mov	r4, r1
 80099c6:	6831      	ldr	r1, [r6, #0]
 80099c8:	4605      	mov	r5, r0
 80099ca:	b911      	cbnz	r1, 80099d2 <sbrk_aligned+0x12>
 80099cc:	f000 fcb2 	bl	800a334 <_sbrk_r>
 80099d0:	6030      	str	r0, [r6, #0]
 80099d2:	4621      	mov	r1, r4
 80099d4:	4628      	mov	r0, r5
 80099d6:	f000 fcad 	bl	800a334 <_sbrk_r>
 80099da:	1c43      	adds	r3, r0, #1
 80099dc:	d103      	bne.n	80099e6 <sbrk_aligned+0x26>
 80099de:	f04f 34ff 	mov.w	r4, #4294967295
 80099e2:	4620      	mov	r0, r4
 80099e4:	bd70      	pop	{r4, r5, r6, pc}
 80099e6:	1cc4      	adds	r4, r0, #3
 80099e8:	f024 0403 	bic.w	r4, r4, #3
 80099ec:	42a0      	cmp	r0, r4
 80099ee:	d0f8      	beq.n	80099e2 <sbrk_aligned+0x22>
 80099f0:	1a21      	subs	r1, r4, r0
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 fc9e 	bl	800a334 <_sbrk_r>
 80099f8:	3001      	adds	r0, #1
 80099fa:	d1f2      	bne.n	80099e2 <sbrk_aligned+0x22>
 80099fc:	e7ef      	b.n	80099de <sbrk_aligned+0x1e>
 80099fe:	bf00      	nop
 8009a00:	20000e58 	.word	0x20000e58

08009a04 <_malloc_r>:
 8009a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a08:	1ccd      	adds	r5, r1, #3
 8009a0a:	f025 0503 	bic.w	r5, r5, #3
 8009a0e:	3508      	adds	r5, #8
 8009a10:	2d0c      	cmp	r5, #12
 8009a12:	bf38      	it	cc
 8009a14:	250c      	movcc	r5, #12
 8009a16:	2d00      	cmp	r5, #0
 8009a18:	4606      	mov	r6, r0
 8009a1a:	db01      	blt.n	8009a20 <_malloc_r+0x1c>
 8009a1c:	42a9      	cmp	r1, r5
 8009a1e:	d904      	bls.n	8009a2a <_malloc_r+0x26>
 8009a20:	230c      	movs	r3, #12
 8009a22:	6033      	str	r3, [r6, #0]
 8009a24:	2000      	movs	r0, #0
 8009a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b00 <_malloc_r+0xfc>
 8009a2e:	f000 f869 	bl	8009b04 <__malloc_lock>
 8009a32:	f8d8 3000 	ldr.w	r3, [r8]
 8009a36:	461c      	mov	r4, r3
 8009a38:	bb44      	cbnz	r4, 8009a8c <_malloc_r+0x88>
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f7ff ffbf 	bl	80099c0 <sbrk_aligned>
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	4604      	mov	r4, r0
 8009a46:	d158      	bne.n	8009afa <_malloc_r+0xf6>
 8009a48:	f8d8 4000 	ldr.w	r4, [r8]
 8009a4c:	4627      	mov	r7, r4
 8009a4e:	2f00      	cmp	r7, #0
 8009a50:	d143      	bne.n	8009ada <_malloc_r+0xd6>
 8009a52:	2c00      	cmp	r4, #0
 8009a54:	d04b      	beq.n	8009aee <_malloc_r+0xea>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	4639      	mov	r1, r7
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	eb04 0903 	add.w	r9, r4, r3
 8009a60:	f000 fc68 	bl	800a334 <_sbrk_r>
 8009a64:	4581      	cmp	r9, r0
 8009a66:	d142      	bne.n	8009aee <_malloc_r+0xea>
 8009a68:	6821      	ldr	r1, [r4, #0]
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	1a6d      	subs	r5, r5, r1
 8009a6e:	4629      	mov	r1, r5
 8009a70:	f7ff ffa6 	bl	80099c0 <sbrk_aligned>
 8009a74:	3001      	adds	r0, #1
 8009a76:	d03a      	beq.n	8009aee <_malloc_r+0xea>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	442b      	add	r3, r5
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	bb62      	cbnz	r2, 8009ae0 <_malloc_r+0xdc>
 8009a86:	f8c8 7000 	str.w	r7, [r8]
 8009a8a:	e00f      	b.n	8009aac <_malloc_r+0xa8>
 8009a8c:	6822      	ldr	r2, [r4, #0]
 8009a8e:	1b52      	subs	r2, r2, r5
 8009a90:	d420      	bmi.n	8009ad4 <_malloc_r+0xd0>
 8009a92:	2a0b      	cmp	r2, #11
 8009a94:	d917      	bls.n	8009ac6 <_malloc_r+0xc2>
 8009a96:	1961      	adds	r1, r4, r5
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	6025      	str	r5, [r4, #0]
 8009a9c:	bf18      	it	ne
 8009a9e:	6059      	strne	r1, [r3, #4]
 8009aa0:	6863      	ldr	r3, [r4, #4]
 8009aa2:	bf08      	it	eq
 8009aa4:	f8c8 1000 	streq.w	r1, [r8]
 8009aa8:	5162      	str	r2, [r4, r5]
 8009aaa:	604b      	str	r3, [r1, #4]
 8009aac:	4630      	mov	r0, r6
 8009aae:	f000 f82f 	bl	8009b10 <__malloc_unlock>
 8009ab2:	f104 000b 	add.w	r0, r4, #11
 8009ab6:	1d23      	adds	r3, r4, #4
 8009ab8:	f020 0007 	bic.w	r0, r0, #7
 8009abc:	1ac2      	subs	r2, r0, r3
 8009abe:	bf1c      	itt	ne
 8009ac0:	1a1b      	subne	r3, r3, r0
 8009ac2:	50a3      	strne	r3, [r4, r2]
 8009ac4:	e7af      	b.n	8009a26 <_malloc_r+0x22>
 8009ac6:	6862      	ldr	r2, [r4, #4]
 8009ac8:	42a3      	cmp	r3, r4
 8009aca:	bf0c      	ite	eq
 8009acc:	f8c8 2000 	streq.w	r2, [r8]
 8009ad0:	605a      	strne	r2, [r3, #4]
 8009ad2:	e7eb      	b.n	8009aac <_malloc_r+0xa8>
 8009ad4:	4623      	mov	r3, r4
 8009ad6:	6864      	ldr	r4, [r4, #4]
 8009ad8:	e7ae      	b.n	8009a38 <_malloc_r+0x34>
 8009ada:	463c      	mov	r4, r7
 8009adc:	687f      	ldr	r7, [r7, #4]
 8009ade:	e7b6      	b.n	8009a4e <_malloc_r+0x4a>
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	42a3      	cmp	r3, r4
 8009ae6:	d1fb      	bne.n	8009ae0 <_malloc_r+0xdc>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	6053      	str	r3, [r2, #4]
 8009aec:	e7de      	b.n	8009aac <_malloc_r+0xa8>
 8009aee:	230c      	movs	r3, #12
 8009af0:	4630      	mov	r0, r6
 8009af2:	6033      	str	r3, [r6, #0]
 8009af4:	f000 f80c 	bl	8009b10 <__malloc_unlock>
 8009af8:	e794      	b.n	8009a24 <_malloc_r+0x20>
 8009afa:	6005      	str	r5, [r0, #0]
 8009afc:	e7d6      	b.n	8009aac <_malloc_r+0xa8>
 8009afe:	bf00      	nop
 8009b00:	20000e5c 	.word	0x20000e5c

08009b04 <__malloc_lock>:
 8009b04:	4801      	ldr	r0, [pc, #4]	@ (8009b0c <__malloc_lock+0x8>)
 8009b06:	f7ff bf02 	b.w	800990e <__retarget_lock_acquire_recursive>
 8009b0a:	bf00      	nop
 8009b0c:	20000e54 	.word	0x20000e54

08009b10 <__malloc_unlock>:
 8009b10:	4801      	ldr	r0, [pc, #4]	@ (8009b18 <__malloc_unlock+0x8>)
 8009b12:	f7ff befd 	b.w	8009910 <__retarget_lock_release_recursive>
 8009b16:	bf00      	nop
 8009b18:	20000e54 	.word	0x20000e54

08009b1c <__sfputc_r>:
 8009b1c:	6893      	ldr	r3, [r2, #8]
 8009b1e:	b410      	push	{r4}
 8009b20:	3b01      	subs	r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	6093      	str	r3, [r2, #8]
 8009b26:	da07      	bge.n	8009b38 <__sfputc_r+0x1c>
 8009b28:	6994      	ldr	r4, [r2, #24]
 8009b2a:	42a3      	cmp	r3, r4
 8009b2c:	db01      	blt.n	8009b32 <__sfputc_r+0x16>
 8009b2e:	290a      	cmp	r1, #10
 8009b30:	d102      	bne.n	8009b38 <__sfputc_r+0x1c>
 8009b32:	bc10      	pop	{r4}
 8009b34:	f000 bb6a 	b.w	800a20c <__swbuf_r>
 8009b38:	6813      	ldr	r3, [r2, #0]
 8009b3a:	1c58      	adds	r0, r3, #1
 8009b3c:	6010      	str	r0, [r2, #0]
 8009b3e:	7019      	strb	r1, [r3, #0]
 8009b40:	4608      	mov	r0, r1
 8009b42:	bc10      	pop	{r4}
 8009b44:	4770      	bx	lr

08009b46 <__sfputs_r>:
 8009b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b48:	4606      	mov	r6, r0
 8009b4a:	460f      	mov	r7, r1
 8009b4c:	4614      	mov	r4, r2
 8009b4e:	18d5      	adds	r5, r2, r3
 8009b50:	42ac      	cmp	r4, r5
 8009b52:	d101      	bne.n	8009b58 <__sfputs_r+0x12>
 8009b54:	2000      	movs	r0, #0
 8009b56:	e007      	b.n	8009b68 <__sfputs_r+0x22>
 8009b58:	463a      	mov	r2, r7
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b60:	f7ff ffdc 	bl	8009b1c <__sfputc_r>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d1f3      	bne.n	8009b50 <__sfputs_r+0xa>
 8009b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b6c <_vfiprintf_r>:
 8009b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b70:	460d      	mov	r5, r1
 8009b72:	4614      	mov	r4, r2
 8009b74:	4698      	mov	r8, r3
 8009b76:	4606      	mov	r6, r0
 8009b78:	b09d      	sub	sp, #116	@ 0x74
 8009b7a:	b118      	cbz	r0, 8009b84 <_vfiprintf_r+0x18>
 8009b7c:	6a03      	ldr	r3, [r0, #32]
 8009b7e:	b90b      	cbnz	r3, 8009b84 <_vfiprintf_r+0x18>
 8009b80:	f7ff fdc0 	bl	8009704 <__sinit>
 8009b84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b86:	07d9      	lsls	r1, r3, #31
 8009b88:	d405      	bmi.n	8009b96 <_vfiprintf_r+0x2a>
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	059a      	lsls	r2, r3, #22
 8009b8e:	d402      	bmi.n	8009b96 <_vfiprintf_r+0x2a>
 8009b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b92:	f7ff febc 	bl	800990e <__retarget_lock_acquire_recursive>
 8009b96:	89ab      	ldrh	r3, [r5, #12]
 8009b98:	071b      	lsls	r3, r3, #28
 8009b9a:	d501      	bpl.n	8009ba0 <_vfiprintf_r+0x34>
 8009b9c:	692b      	ldr	r3, [r5, #16]
 8009b9e:	b99b      	cbnz	r3, 8009bc8 <_vfiprintf_r+0x5c>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f000 fb70 	bl	800a288 <__swsetup_r>
 8009ba8:	b170      	cbz	r0, 8009bc8 <_vfiprintf_r+0x5c>
 8009baa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bac:	07dc      	lsls	r4, r3, #31
 8009bae:	d504      	bpl.n	8009bba <_vfiprintf_r+0x4e>
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb4:	b01d      	add	sp, #116	@ 0x74
 8009bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	0598      	lsls	r0, r3, #22
 8009bbe:	d4f7      	bmi.n	8009bb0 <_vfiprintf_r+0x44>
 8009bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bc2:	f7ff fea5 	bl	8009910 <__retarget_lock_release_recursive>
 8009bc6:	e7f3      	b.n	8009bb0 <_vfiprintf_r+0x44>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bcc:	2320      	movs	r3, #32
 8009bce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bd2:	2330      	movs	r3, #48	@ 0x30
 8009bd4:	f04f 0901 	mov.w	r9, #1
 8009bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bdc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009d88 <_vfiprintf_r+0x21c>
 8009be0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009be4:	4623      	mov	r3, r4
 8009be6:	469a      	mov	sl, r3
 8009be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bec:	b10a      	cbz	r2, 8009bf2 <_vfiprintf_r+0x86>
 8009bee:	2a25      	cmp	r2, #37	@ 0x25
 8009bf0:	d1f9      	bne.n	8009be6 <_vfiprintf_r+0x7a>
 8009bf2:	ebba 0b04 	subs.w	fp, sl, r4
 8009bf6:	d00b      	beq.n	8009c10 <_vfiprintf_r+0xa4>
 8009bf8:	465b      	mov	r3, fp
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f7ff ffa1 	bl	8009b46 <__sfputs_r>
 8009c04:	3001      	adds	r0, #1
 8009c06:	f000 80a7 	beq.w	8009d58 <_vfiprintf_r+0x1ec>
 8009c0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c0c:	445a      	add	r2, fp
 8009c0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c10:	f89a 3000 	ldrb.w	r3, [sl]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 809f 	beq.w	8009d58 <_vfiprintf_r+0x1ec>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c24:	f10a 0a01 	add.w	sl, sl, #1
 8009c28:	9304      	str	r3, [sp, #16]
 8009c2a:	9307      	str	r3, [sp, #28]
 8009c2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c30:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c32:	4654      	mov	r4, sl
 8009c34:	2205      	movs	r2, #5
 8009c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3a:	4853      	ldr	r0, [pc, #332]	@ (8009d88 <_vfiprintf_r+0x21c>)
 8009c3c:	f000 fb8a 	bl	800a354 <memchr>
 8009c40:	9a04      	ldr	r2, [sp, #16]
 8009c42:	b9d8      	cbnz	r0, 8009c7c <_vfiprintf_r+0x110>
 8009c44:	06d1      	lsls	r1, r2, #27
 8009c46:	bf44      	itt	mi
 8009c48:	2320      	movmi	r3, #32
 8009c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c4e:	0713      	lsls	r3, r2, #28
 8009c50:	bf44      	itt	mi
 8009c52:	232b      	movmi	r3, #43	@ 0x2b
 8009c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c58:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c5e:	d015      	beq.n	8009c8c <_vfiprintf_r+0x120>
 8009c60:	4654      	mov	r4, sl
 8009c62:	2000      	movs	r0, #0
 8009c64:	f04f 0c0a 	mov.w	ip, #10
 8009c68:	9a07      	ldr	r2, [sp, #28]
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c70:	3b30      	subs	r3, #48	@ 0x30
 8009c72:	2b09      	cmp	r3, #9
 8009c74:	d94b      	bls.n	8009d0e <_vfiprintf_r+0x1a2>
 8009c76:	b1b0      	cbz	r0, 8009ca6 <_vfiprintf_r+0x13a>
 8009c78:	9207      	str	r2, [sp, #28]
 8009c7a:	e014      	b.n	8009ca6 <_vfiprintf_r+0x13a>
 8009c7c:	eba0 0308 	sub.w	r3, r0, r8
 8009c80:	fa09 f303 	lsl.w	r3, r9, r3
 8009c84:	4313      	orrs	r3, r2
 8009c86:	46a2      	mov	sl, r4
 8009c88:	9304      	str	r3, [sp, #16]
 8009c8a:	e7d2      	b.n	8009c32 <_vfiprintf_r+0xc6>
 8009c8c:	9b03      	ldr	r3, [sp, #12]
 8009c8e:	1d19      	adds	r1, r3, #4
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	9103      	str	r1, [sp, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bfbb      	ittet	lt
 8009c98:	425b      	neglt	r3, r3
 8009c9a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c9e:	9307      	strge	r3, [sp, #28]
 8009ca0:	9307      	strlt	r3, [sp, #28]
 8009ca2:	bfb8      	it	lt
 8009ca4:	9204      	strlt	r2, [sp, #16]
 8009ca6:	7823      	ldrb	r3, [r4, #0]
 8009ca8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009caa:	d10a      	bne.n	8009cc2 <_vfiprintf_r+0x156>
 8009cac:	7863      	ldrb	r3, [r4, #1]
 8009cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cb0:	d132      	bne.n	8009d18 <_vfiprintf_r+0x1ac>
 8009cb2:	9b03      	ldr	r3, [sp, #12]
 8009cb4:	3402      	adds	r4, #2
 8009cb6:	1d1a      	adds	r2, r3, #4
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	9203      	str	r2, [sp, #12]
 8009cbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cc0:	9305      	str	r3, [sp, #20]
 8009cc2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009d8c <_vfiprintf_r+0x220>
 8009cc6:	2203      	movs	r2, #3
 8009cc8:	4650      	mov	r0, sl
 8009cca:	7821      	ldrb	r1, [r4, #0]
 8009ccc:	f000 fb42 	bl	800a354 <memchr>
 8009cd0:	b138      	cbz	r0, 8009ce2 <_vfiprintf_r+0x176>
 8009cd2:	2240      	movs	r2, #64	@ 0x40
 8009cd4:	9b04      	ldr	r3, [sp, #16]
 8009cd6:	eba0 000a 	sub.w	r0, r0, sl
 8009cda:	4082      	lsls	r2, r0
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	3401      	adds	r4, #1
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce6:	2206      	movs	r2, #6
 8009ce8:	4829      	ldr	r0, [pc, #164]	@ (8009d90 <_vfiprintf_r+0x224>)
 8009cea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cee:	f000 fb31 	bl	800a354 <memchr>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d03f      	beq.n	8009d76 <_vfiprintf_r+0x20a>
 8009cf6:	4b27      	ldr	r3, [pc, #156]	@ (8009d94 <_vfiprintf_r+0x228>)
 8009cf8:	bb1b      	cbnz	r3, 8009d42 <_vfiprintf_r+0x1d6>
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	3307      	adds	r3, #7
 8009cfe:	f023 0307 	bic.w	r3, r3, #7
 8009d02:	3308      	adds	r3, #8
 8009d04:	9303      	str	r3, [sp, #12]
 8009d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d08:	443b      	add	r3, r7
 8009d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d0c:	e76a      	b.n	8009be4 <_vfiprintf_r+0x78>
 8009d0e:	460c      	mov	r4, r1
 8009d10:	2001      	movs	r0, #1
 8009d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d16:	e7a8      	b.n	8009c6a <_vfiprintf_r+0xfe>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f04f 0c0a 	mov.w	ip, #10
 8009d1e:	4619      	mov	r1, r3
 8009d20:	3401      	adds	r4, #1
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	4620      	mov	r0, r4
 8009d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d2a:	3a30      	subs	r2, #48	@ 0x30
 8009d2c:	2a09      	cmp	r2, #9
 8009d2e:	d903      	bls.n	8009d38 <_vfiprintf_r+0x1cc>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d0c6      	beq.n	8009cc2 <_vfiprintf_r+0x156>
 8009d34:	9105      	str	r1, [sp, #20]
 8009d36:	e7c4      	b.n	8009cc2 <_vfiprintf_r+0x156>
 8009d38:	4604      	mov	r4, r0
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d40:	e7f0      	b.n	8009d24 <_vfiprintf_r+0x1b8>
 8009d42:	ab03      	add	r3, sp, #12
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	462a      	mov	r2, r5
 8009d48:	4630      	mov	r0, r6
 8009d4a:	4b13      	ldr	r3, [pc, #76]	@ (8009d98 <_vfiprintf_r+0x22c>)
 8009d4c:	a904      	add	r1, sp, #16
 8009d4e:	f3af 8000 	nop.w
 8009d52:	4607      	mov	r7, r0
 8009d54:	1c78      	adds	r0, r7, #1
 8009d56:	d1d6      	bne.n	8009d06 <_vfiprintf_r+0x19a>
 8009d58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d5a:	07d9      	lsls	r1, r3, #31
 8009d5c:	d405      	bmi.n	8009d6a <_vfiprintf_r+0x1fe>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	059a      	lsls	r2, r3, #22
 8009d62:	d402      	bmi.n	8009d6a <_vfiprintf_r+0x1fe>
 8009d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d66:	f7ff fdd3 	bl	8009910 <__retarget_lock_release_recursive>
 8009d6a:	89ab      	ldrh	r3, [r5, #12]
 8009d6c:	065b      	lsls	r3, r3, #25
 8009d6e:	f53f af1f 	bmi.w	8009bb0 <_vfiprintf_r+0x44>
 8009d72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d74:	e71e      	b.n	8009bb4 <_vfiprintf_r+0x48>
 8009d76:	ab03      	add	r3, sp, #12
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	462a      	mov	r2, r5
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4b06      	ldr	r3, [pc, #24]	@ (8009d98 <_vfiprintf_r+0x22c>)
 8009d80:	a904      	add	r1, sp, #16
 8009d82:	f000 f87d 	bl	8009e80 <_printf_i>
 8009d86:	e7e4      	b.n	8009d52 <_vfiprintf_r+0x1e6>
 8009d88:	0800b160 	.word	0x0800b160
 8009d8c:	0800b166 	.word	0x0800b166
 8009d90:	0800b16a 	.word	0x0800b16a
 8009d94:	00000000 	.word	0x00000000
 8009d98:	08009b47 	.word	0x08009b47

08009d9c <_printf_common>:
 8009d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da0:	4616      	mov	r6, r2
 8009da2:	4698      	mov	r8, r3
 8009da4:	688a      	ldr	r2, [r1, #8]
 8009da6:	690b      	ldr	r3, [r1, #16]
 8009da8:	4607      	mov	r7, r0
 8009daa:	4293      	cmp	r3, r2
 8009dac:	bfb8      	it	lt
 8009dae:	4613      	movlt	r3, r2
 8009db0:	6033      	str	r3, [r6, #0]
 8009db2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009db6:	460c      	mov	r4, r1
 8009db8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009dbc:	b10a      	cbz	r2, 8009dc2 <_printf_common+0x26>
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	6033      	str	r3, [r6, #0]
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	0699      	lsls	r1, r3, #26
 8009dc6:	bf42      	ittt	mi
 8009dc8:	6833      	ldrmi	r3, [r6, #0]
 8009dca:	3302      	addmi	r3, #2
 8009dcc:	6033      	strmi	r3, [r6, #0]
 8009dce:	6825      	ldr	r5, [r4, #0]
 8009dd0:	f015 0506 	ands.w	r5, r5, #6
 8009dd4:	d106      	bne.n	8009de4 <_printf_common+0x48>
 8009dd6:	f104 0a19 	add.w	sl, r4, #25
 8009dda:	68e3      	ldr	r3, [r4, #12]
 8009ddc:	6832      	ldr	r2, [r6, #0]
 8009dde:	1a9b      	subs	r3, r3, r2
 8009de0:	42ab      	cmp	r3, r5
 8009de2:	dc2b      	bgt.n	8009e3c <_printf_common+0xa0>
 8009de4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009de8:	6822      	ldr	r2, [r4, #0]
 8009dea:	3b00      	subs	r3, #0
 8009dec:	bf18      	it	ne
 8009dee:	2301      	movne	r3, #1
 8009df0:	0692      	lsls	r2, r2, #26
 8009df2:	d430      	bmi.n	8009e56 <_printf_common+0xba>
 8009df4:	4641      	mov	r1, r8
 8009df6:	4638      	mov	r0, r7
 8009df8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009dfc:	47c8      	blx	r9
 8009dfe:	3001      	adds	r0, #1
 8009e00:	d023      	beq.n	8009e4a <_printf_common+0xae>
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	6922      	ldr	r2, [r4, #16]
 8009e06:	f003 0306 	and.w	r3, r3, #6
 8009e0a:	2b04      	cmp	r3, #4
 8009e0c:	bf14      	ite	ne
 8009e0e:	2500      	movne	r5, #0
 8009e10:	6833      	ldreq	r3, [r6, #0]
 8009e12:	f04f 0600 	mov.w	r6, #0
 8009e16:	bf08      	it	eq
 8009e18:	68e5      	ldreq	r5, [r4, #12]
 8009e1a:	f104 041a 	add.w	r4, r4, #26
 8009e1e:	bf08      	it	eq
 8009e20:	1aed      	subeq	r5, r5, r3
 8009e22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009e26:	bf08      	it	eq
 8009e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	bfc4      	itt	gt
 8009e30:	1a9b      	subgt	r3, r3, r2
 8009e32:	18ed      	addgt	r5, r5, r3
 8009e34:	42b5      	cmp	r5, r6
 8009e36:	d11a      	bne.n	8009e6e <_printf_common+0xd2>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e008      	b.n	8009e4e <_printf_common+0xb2>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	4652      	mov	r2, sl
 8009e40:	4641      	mov	r1, r8
 8009e42:	4638      	mov	r0, r7
 8009e44:	47c8      	blx	r9
 8009e46:	3001      	adds	r0, #1
 8009e48:	d103      	bne.n	8009e52 <_printf_common+0xb6>
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e52:	3501      	adds	r5, #1
 8009e54:	e7c1      	b.n	8009dda <_printf_common+0x3e>
 8009e56:	2030      	movs	r0, #48	@ 0x30
 8009e58:	18e1      	adds	r1, r4, r3
 8009e5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e5e:	1c5a      	adds	r2, r3, #1
 8009e60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e64:	4422      	add	r2, r4
 8009e66:	3302      	adds	r3, #2
 8009e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e6c:	e7c2      	b.n	8009df4 <_printf_common+0x58>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4622      	mov	r2, r4
 8009e72:	4641      	mov	r1, r8
 8009e74:	4638      	mov	r0, r7
 8009e76:	47c8      	blx	r9
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d0e6      	beq.n	8009e4a <_printf_common+0xae>
 8009e7c:	3601      	adds	r6, #1
 8009e7e:	e7d9      	b.n	8009e34 <_printf_common+0x98>

08009e80 <_printf_i>:
 8009e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e84:	7e0f      	ldrb	r7, [r1, #24]
 8009e86:	4691      	mov	r9, r2
 8009e88:	2f78      	cmp	r7, #120	@ 0x78
 8009e8a:	4680      	mov	r8, r0
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	469a      	mov	sl, r3
 8009e90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e96:	d807      	bhi.n	8009ea8 <_printf_i+0x28>
 8009e98:	2f62      	cmp	r7, #98	@ 0x62
 8009e9a:	d80a      	bhi.n	8009eb2 <_printf_i+0x32>
 8009e9c:	2f00      	cmp	r7, #0
 8009e9e:	f000 80d1 	beq.w	800a044 <_printf_i+0x1c4>
 8009ea2:	2f58      	cmp	r7, #88	@ 0x58
 8009ea4:	f000 80b8 	beq.w	800a018 <_printf_i+0x198>
 8009ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009eac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009eb0:	e03a      	b.n	8009f28 <_printf_i+0xa8>
 8009eb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009eb6:	2b15      	cmp	r3, #21
 8009eb8:	d8f6      	bhi.n	8009ea8 <_printf_i+0x28>
 8009eba:	a101      	add	r1, pc, #4	@ (adr r1, 8009ec0 <_printf_i+0x40>)
 8009ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ec0:	08009f19 	.word	0x08009f19
 8009ec4:	08009f2d 	.word	0x08009f2d
 8009ec8:	08009ea9 	.word	0x08009ea9
 8009ecc:	08009ea9 	.word	0x08009ea9
 8009ed0:	08009ea9 	.word	0x08009ea9
 8009ed4:	08009ea9 	.word	0x08009ea9
 8009ed8:	08009f2d 	.word	0x08009f2d
 8009edc:	08009ea9 	.word	0x08009ea9
 8009ee0:	08009ea9 	.word	0x08009ea9
 8009ee4:	08009ea9 	.word	0x08009ea9
 8009ee8:	08009ea9 	.word	0x08009ea9
 8009eec:	0800a02b 	.word	0x0800a02b
 8009ef0:	08009f57 	.word	0x08009f57
 8009ef4:	08009fe5 	.word	0x08009fe5
 8009ef8:	08009ea9 	.word	0x08009ea9
 8009efc:	08009ea9 	.word	0x08009ea9
 8009f00:	0800a04d 	.word	0x0800a04d
 8009f04:	08009ea9 	.word	0x08009ea9
 8009f08:	08009f57 	.word	0x08009f57
 8009f0c:	08009ea9 	.word	0x08009ea9
 8009f10:	08009ea9 	.word	0x08009ea9
 8009f14:	08009fed 	.word	0x08009fed
 8009f18:	6833      	ldr	r3, [r6, #0]
 8009f1a:	1d1a      	adds	r2, r3, #4
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6032      	str	r2, [r6, #0]
 8009f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e09c      	b.n	800a066 <_printf_i+0x1e6>
 8009f2c:	6833      	ldr	r3, [r6, #0]
 8009f2e:	6820      	ldr	r0, [r4, #0]
 8009f30:	1d19      	adds	r1, r3, #4
 8009f32:	6031      	str	r1, [r6, #0]
 8009f34:	0606      	lsls	r6, r0, #24
 8009f36:	d501      	bpl.n	8009f3c <_printf_i+0xbc>
 8009f38:	681d      	ldr	r5, [r3, #0]
 8009f3a:	e003      	b.n	8009f44 <_printf_i+0xc4>
 8009f3c:	0645      	lsls	r5, r0, #25
 8009f3e:	d5fb      	bpl.n	8009f38 <_printf_i+0xb8>
 8009f40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	da03      	bge.n	8009f50 <_printf_i+0xd0>
 8009f48:	232d      	movs	r3, #45	@ 0x2d
 8009f4a:	426d      	negs	r5, r5
 8009f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f50:	230a      	movs	r3, #10
 8009f52:	4858      	ldr	r0, [pc, #352]	@ (800a0b4 <_printf_i+0x234>)
 8009f54:	e011      	b.n	8009f7a <_printf_i+0xfa>
 8009f56:	6821      	ldr	r1, [r4, #0]
 8009f58:	6833      	ldr	r3, [r6, #0]
 8009f5a:	0608      	lsls	r0, r1, #24
 8009f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f60:	d402      	bmi.n	8009f68 <_printf_i+0xe8>
 8009f62:	0649      	lsls	r1, r1, #25
 8009f64:	bf48      	it	mi
 8009f66:	b2ad      	uxthmi	r5, r5
 8009f68:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f6a:	6033      	str	r3, [r6, #0]
 8009f6c:	bf14      	ite	ne
 8009f6e:	230a      	movne	r3, #10
 8009f70:	2308      	moveq	r3, #8
 8009f72:	4850      	ldr	r0, [pc, #320]	@ (800a0b4 <_printf_i+0x234>)
 8009f74:	2100      	movs	r1, #0
 8009f76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f7a:	6866      	ldr	r6, [r4, #4]
 8009f7c:	2e00      	cmp	r6, #0
 8009f7e:	60a6      	str	r6, [r4, #8]
 8009f80:	db05      	blt.n	8009f8e <_printf_i+0x10e>
 8009f82:	6821      	ldr	r1, [r4, #0]
 8009f84:	432e      	orrs	r6, r5
 8009f86:	f021 0104 	bic.w	r1, r1, #4
 8009f8a:	6021      	str	r1, [r4, #0]
 8009f8c:	d04b      	beq.n	800a026 <_printf_i+0x1a6>
 8009f8e:	4616      	mov	r6, r2
 8009f90:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f94:	fb03 5711 	mls	r7, r3, r1, r5
 8009f98:	5dc7      	ldrb	r7, [r0, r7]
 8009f9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f9e:	462f      	mov	r7, r5
 8009fa0:	42bb      	cmp	r3, r7
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	d9f4      	bls.n	8009f90 <_printf_i+0x110>
 8009fa6:	2b08      	cmp	r3, #8
 8009fa8:	d10b      	bne.n	8009fc2 <_printf_i+0x142>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	07df      	lsls	r7, r3, #31
 8009fae:	d508      	bpl.n	8009fc2 <_printf_i+0x142>
 8009fb0:	6923      	ldr	r3, [r4, #16]
 8009fb2:	6861      	ldr	r1, [r4, #4]
 8009fb4:	4299      	cmp	r1, r3
 8009fb6:	bfde      	ittt	le
 8009fb8:	2330      	movle	r3, #48	@ 0x30
 8009fba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fc2:	1b92      	subs	r2, r2, r6
 8009fc4:	6122      	str	r2, [r4, #16]
 8009fc6:	464b      	mov	r3, r9
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4640      	mov	r0, r8
 8009fcc:	f8cd a000 	str.w	sl, [sp]
 8009fd0:	aa03      	add	r2, sp, #12
 8009fd2:	f7ff fee3 	bl	8009d9c <_printf_common>
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d14a      	bne.n	800a070 <_printf_i+0x1f0>
 8009fda:	f04f 30ff 	mov.w	r0, #4294967295
 8009fde:	b004      	add	sp, #16
 8009fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	f043 0320 	orr.w	r3, r3, #32
 8009fea:	6023      	str	r3, [r4, #0]
 8009fec:	2778      	movs	r7, #120	@ 0x78
 8009fee:	4832      	ldr	r0, [pc, #200]	@ (800a0b8 <_printf_i+0x238>)
 8009ff0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ff4:	6823      	ldr	r3, [r4, #0]
 8009ff6:	6831      	ldr	r1, [r6, #0]
 8009ff8:	061f      	lsls	r7, r3, #24
 8009ffa:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ffe:	d402      	bmi.n	800a006 <_printf_i+0x186>
 800a000:	065f      	lsls	r7, r3, #25
 800a002:	bf48      	it	mi
 800a004:	b2ad      	uxthmi	r5, r5
 800a006:	6031      	str	r1, [r6, #0]
 800a008:	07d9      	lsls	r1, r3, #31
 800a00a:	bf44      	itt	mi
 800a00c:	f043 0320 	orrmi.w	r3, r3, #32
 800a010:	6023      	strmi	r3, [r4, #0]
 800a012:	b11d      	cbz	r5, 800a01c <_printf_i+0x19c>
 800a014:	2310      	movs	r3, #16
 800a016:	e7ad      	b.n	8009f74 <_printf_i+0xf4>
 800a018:	4826      	ldr	r0, [pc, #152]	@ (800a0b4 <_printf_i+0x234>)
 800a01a:	e7e9      	b.n	8009ff0 <_printf_i+0x170>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	f023 0320 	bic.w	r3, r3, #32
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	e7f6      	b.n	800a014 <_printf_i+0x194>
 800a026:	4616      	mov	r6, r2
 800a028:	e7bd      	b.n	8009fa6 <_printf_i+0x126>
 800a02a:	6833      	ldr	r3, [r6, #0]
 800a02c:	6825      	ldr	r5, [r4, #0]
 800a02e:	1d18      	adds	r0, r3, #4
 800a030:	6961      	ldr	r1, [r4, #20]
 800a032:	6030      	str	r0, [r6, #0]
 800a034:	062e      	lsls	r6, r5, #24
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	d501      	bpl.n	800a03e <_printf_i+0x1be>
 800a03a:	6019      	str	r1, [r3, #0]
 800a03c:	e002      	b.n	800a044 <_printf_i+0x1c4>
 800a03e:	0668      	lsls	r0, r5, #25
 800a040:	d5fb      	bpl.n	800a03a <_printf_i+0x1ba>
 800a042:	8019      	strh	r1, [r3, #0]
 800a044:	2300      	movs	r3, #0
 800a046:	4616      	mov	r6, r2
 800a048:	6123      	str	r3, [r4, #16]
 800a04a:	e7bc      	b.n	8009fc6 <_printf_i+0x146>
 800a04c:	6833      	ldr	r3, [r6, #0]
 800a04e:	2100      	movs	r1, #0
 800a050:	1d1a      	adds	r2, r3, #4
 800a052:	6032      	str	r2, [r6, #0]
 800a054:	681e      	ldr	r6, [r3, #0]
 800a056:	6862      	ldr	r2, [r4, #4]
 800a058:	4630      	mov	r0, r6
 800a05a:	f000 f97b 	bl	800a354 <memchr>
 800a05e:	b108      	cbz	r0, 800a064 <_printf_i+0x1e4>
 800a060:	1b80      	subs	r0, r0, r6
 800a062:	6060      	str	r0, [r4, #4]
 800a064:	6863      	ldr	r3, [r4, #4]
 800a066:	6123      	str	r3, [r4, #16]
 800a068:	2300      	movs	r3, #0
 800a06a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a06e:	e7aa      	b.n	8009fc6 <_printf_i+0x146>
 800a070:	4632      	mov	r2, r6
 800a072:	4649      	mov	r1, r9
 800a074:	4640      	mov	r0, r8
 800a076:	6923      	ldr	r3, [r4, #16]
 800a078:	47d0      	blx	sl
 800a07a:	3001      	adds	r0, #1
 800a07c:	d0ad      	beq.n	8009fda <_printf_i+0x15a>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	079b      	lsls	r3, r3, #30
 800a082:	d413      	bmi.n	800a0ac <_printf_i+0x22c>
 800a084:	68e0      	ldr	r0, [r4, #12]
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	4298      	cmp	r0, r3
 800a08a:	bfb8      	it	lt
 800a08c:	4618      	movlt	r0, r3
 800a08e:	e7a6      	b.n	8009fde <_printf_i+0x15e>
 800a090:	2301      	movs	r3, #1
 800a092:	4632      	mov	r2, r6
 800a094:	4649      	mov	r1, r9
 800a096:	4640      	mov	r0, r8
 800a098:	47d0      	blx	sl
 800a09a:	3001      	adds	r0, #1
 800a09c:	d09d      	beq.n	8009fda <_printf_i+0x15a>
 800a09e:	3501      	adds	r5, #1
 800a0a0:	68e3      	ldr	r3, [r4, #12]
 800a0a2:	9903      	ldr	r1, [sp, #12]
 800a0a4:	1a5b      	subs	r3, r3, r1
 800a0a6:	42ab      	cmp	r3, r5
 800a0a8:	dcf2      	bgt.n	800a090 <_printf_i+0x210>
 800a0aa:	e7eb      	b.n	800a084 <_printf_i+0x204>
 800a0ac:	2500      	movs	r5, #0
 800a0ae:	f104 0619 	add.w	r6, r4, #25
 800a0b2:	e7f5      	b.n	800a0a0 <_printf_i+0x220>
 800a0b4:	0800b171 	.word	0x0800b171
 800a0b8:	0800b182 	.word	0x0800b182

0800a0bc <__sflush_r>:
 800a0bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	0716      	lsls	r6, r2, #28
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	d454      	bmi.n	800a174 <__sflush_r+0xb8>
 800a0ca:	684b      	ldr	r3, [r1, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	dc02      	bgt.n	800a0d6 <__sflush_r+0x1a>
 800a0d0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	dd48      	ble.n	800a168 <__sflush_r+0xac>
 800a0d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0d8:	2e00      	cmp	r6, #0
 800a0da:	d045      	beq.n	800a168 <__sflush_r+0xac>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0e2:	682f      	ldr	r7, [r5, #0]
 800a0e4:	6a21      	ldr	r1, [r4, #32]
 800a0e6:	602b      	str	r3, [r5, #0]
 800a0e8:	d030      	beq.n	800a14c <__sflush_r+0x90>
 800a0ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	0759      	lsls	r1, r3, #29
 800a0f0:	d505      	bpl.n	800a0fe <__sflush_r+0x42>
 800a0f2:	6863      	ldr	r3, [r4, #4]
 800a0f4:	1ad2      	subs	r2, r2, r3
 800a0f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0f8:	b10b      	cbz	r3, 800a0fe <__sflush_r+0x42>
 800a0fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0fc:	1ad2      	subs	r2, r2, r3
 800a0fe:	2300      	movs	r3, #0
 800a100:	4628      	mov	r0, r5
 800a102:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a104:	6a21      	ldr	r1, [r4, #32]
 800a106:	47b0      	blx	r6
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	89a3      	ldrh	r3, [r4, #12]
 800a10c:	d106      	bne.n	800a11c <__sflush_r+0x60>
 800a10e:	6829      	ldr	r1, [r5, #0]
 800a110:	291d      	cmp	r1, #29
 800a112:	d82b      	bhi.n	800a16c <__sflush_r+0xb0>
 800a114:	4a28      	ldr	r2, [pc, #160]	@ (800a1b8 <__sflush_r+0xfc>)
 800a116:	40ca      	lsrs	r2, r1
 800a118:	07d6      	lsls	r6, r2, #31
 800a11a:	d527      	bpl.n	800a16c <__sflush_r+0xb0>
 800a11c:	2200      	movs	r2, #0
 800a11e:	6062      	str	r2, [r4, #4]
 800a120:	6922      	ldr	r2, [r4, #16]
 800a122:	04d9      	lsls	r1, r3, #19
 800a124:	6022      	str	r2, [r4, #0]
 800a126:	d504      	bpl.n	800a132 <__sflush_r+0x76>
 800a128:	1c42      	adds	r2, r0, #1
 800a12a:	d101      	bne.n	800a130 <__sflush_r+0x74>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b903      	cbnz	r3, 800a132 <__sflush_r+0x76>
 800a130:	6560      	str	r0, [r4, #84]	@ 0x54
 800a132:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a134:	602f      	str	r7, [r5, #0]
 800a136:	b1b9      	cbz	r1, 800a168 <__sflush_r+0xac>
 800a138:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a13c:	4299      	cmp	r1, r3
 800a13e:	d002      	beq.n	800a146 <__sflush_r+0x8a>
 800a140:	4628      	mov	r0, r5
 800a142:	f7ff fbf5 	bl	8009930 <_free_r>
 800a146:	2300      	movs	r3, #0
 800a148:	6363      	str	r3, [r4, #52]	@ 0x34
 800a14a:	e00d      	b.n	800a168 <__sflush_r+0xac>
 800a14c:	2301      	movs	r3, #1
 800a14e:	4628      	mov	r0, r5
 800a150:	47b0      	blx	r6
 800a152:	4602      	mov	r2, r0
 800a154:	1c50      	adds	r0, r2, #1
 800a156:	d1c9      	bne.n	800a0ec <__sflush_r+0x30>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0c6      	beq.n	800a0ec <__sflush_r+0x30>
 800a15e:	2b1d      	cmp	r3, #29
 800a160:	d001      	beq.n	800a166 <__sflush_r+0xaa>
 800a162:	2b16      	cmp	r3, #22
 800a164:	d11d      	bne.n	800a1a2 <__sflush_r+0xe6>
 800a166:	602f      	str	r7, [r5, #0]
 800a168:	2000      	movs	r0, #0
 800a16a:	e021      	b.n	800a1b0 <__sflush_r+0xf4>
 800a16c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a170:	b21b      	sxth	r3, r3
 800a172:	e01a      	b.n	800a1aa <__sflush_r+0xee>
 800a174:	690f      	ldr	r7, [r1, #16]
 800a176:	2f00      	cmp	r7, #0
 800a178:	d0f6      	beq.n	800a168 <__sflush_r+0xac>
 800a17a:	0793      	lsls	r3, r2, #30
 800a17c:	bf18      	it	ne
 800a17e:	2300      	movne	r3, #0
 800a180:	680e      	ldr	r6, [r1, #0]
 800a182:	bf08      	it	eq
 800a184:	694b      	ldreq	r3, [r1, #20]
 800a186:	1bf6      	subs	r6, r6, r7
 800a188:	600f      	str	r7, [r1, #0]
 800a18a:	608b      	str	r3, [r1, #8]
 800a18c:	2e00      	cmp	r6, #0
 800a18e:	ddeb      	ble.n	800a168 <__sflush_r+0xac>
 800a190:	4633      	mov	r3, r6
 800a192:	463a      	mov	r2, r7
 800a194:	4628      	mov	r0, r5
 800a196:	6a21      	ldr	r1, [r4, #32]
 800a198:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a19c:	47e0      	blx	ip
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	dc07      	bgt.n	800a1b2 <__sflush_r+0xf6>
 800a1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ae:	81a3      	strh	r3, [r4, #12]
 800a1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b2:	4407      	add	r7, r0
 800a1b4:	1a36      	subs	r6, r6, r0
 800a1b6:	e7e9      	b.n	800a18c <__sflush_r+0xd0>
 800a1b8:	20400001 	.word	0x20400001

0800a1bc <_fflush_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	690b      	ldr	r3, [r1, #16]
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	b913      	cbnz	r3, 800a1cc <_fflush_r+0x10>
 800a1c6:	2500      	movs	r5, #0
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	b118      	cbz	r0, 800a1d6 <_fflush_r+0x1a>
 800a1ce:	6a03      	ldr	r3, [r0, #32]
 800a1d0:	b90b      	cbnz	r3, 800a1d6 <_fflush_r+0x1a>
 800a1d2:	f7ff fa97 	bl	8009704 <__sinit>
 800a1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0f3      	beq.n	800a1c6 <_fflush_r+0xa>
 800a1de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1e0:	07d0      	lsls	r0, r2, #31
 800a1e2:	d404      	bmi.n	800a1ee <_fflush_r+0x32>
 800a1e4:	0599      	lsls	r1, r3, #22
 800a1e6:	d402      	bmi.n	800a1ee <_fflush_r+0x32>
 800a1e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ea:	f7ff fb90 	bl	800990e <__retarget_lock_acquire_recursive>
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	f7ff ff63 	bl	800a0bc <__sflush_r>
 800a1f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1f8:	4605      	mov	r5, r0
 800a1fa:	07da      	lsls	r2, r3, #31
 800a1fc:	d4e4      	bmi.n	800a1c8 <_fflush_r+0xc>
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	059b      	lsls	r3, r3, #22
 800a202:	d4e1      	bmi.n	800a1c8 <_fflush_r+0xc>
 800a204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a206:	f7ff fb83 	bl	8009910 <__retarget_lock_release_recursive>
 800a20a:	e7dd      	b.n	800a1c8 <_fflush_r+0xc>

0800a20c <__swbuf_r>:
 800a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20e:	460e      	mov	r6, r1
 800a210:	4614      	mov	r4, r2
 800a212:	4605      	mov	r5, r0
 800a214:	b118      	cbz	r0, 800a21e <__swbuf_r+0x12>
 800a216:	6a03      	ldr	r3, [r0, #32]
 800a218:	b90b      	cbnz	r3, 800a21e <__swbuf_r+0x12>
 800a21a:	f7ff fa73 	bl	8009704 <__sinit>
 800a21e:	69a3      	ldr	r3, [r4, #24]
 800a220:	60a3      	str	r3, [r4, #8]
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	071a      	lsls	r2, r3, #28
 800a226:	d501      	bpl.n	800a22c <__swbuf_r+0x20>
 800a228:	6923      	ldr	r3, [r4, #16]
 800a22a:	b943      	cbnz	r3, 800a23e <__swbuf_r+0x32>
 800a22c:	4621      	mov	r1, r4
 800a22e:	4628      	mov	r0, r5
 800a230:	f000 f82a 	bl	800a288 <__swsetup_r>
 800a234:	b118      	cbz	r0, 800a23e <__swbuf_r+0x32>
 800a236:	f04f 37ff 	mov.w	r7, #4294967295
 800a23a:	4638      	mov	r0, r7
 800a23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	6922      	ldr	r2, [r4, #16]
 800a242:	b2f6      	uxtb	r6, r6
 800a244:	1a98      	subs	r0, r3, r2
 800a246:	6963      	ldr	r3, [r4, #20]
 800a248:	4637      	mov	r7, r6
 800a24a:	4283      	cmp	r3, r0
 800a24c:	dc05      	bgt.n	800a25a <__swbuf_r+0x4e>
 800a24e:	4621      	mov	r1, r4
 800a250:	4628      	mov	r0, r5
 800a252:	f7ff ffb3 	bl	800a1bc <_fflush_r>
 800a256:	2800      	cmp	r0, #0
 800a258:	d1ed      	bne.n	800a236 <__swbuf_r+0x2a>
 800a25a:	68a3      	ldr	r3, [r4, #8]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	60a3      	str	r3, [r4, #8]
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	6022      	str	r2, [r4, #0]
 800a266:	701e      	strb	r6, [r3, #0]
 800a268:	6962      	ldr	r2, [r4, #20]
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d004      	beq.n	800a27a <__swbuf_r+0x6e>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	07db      	lsls	r3, r3, #31
 800a274:	d5e1      	bpl.n	800a23a <__swbuf_r+0x2e>
 800a276:	2e0a      	cmp	r6, #10
 800a278:	d1df      	bne.n	800a23a <__swbuf_r+0x2e>
 800a27a:	4621      	mov	r1, r4
 800a27c:	4628      	mov	r0, r5
 800a27e:	f7ff ff9d 	bl	800a1bc <_fflush_r>
 800a282:	2800      	cmp	r0, #0
 800a284:	d0d9      	beq.n	800a23a <__swbuf_r+0x2e>
 800a286:	e7d6      	b.n	800a236 <__swbuf_r+0x2a>

0800a288 <__swsetup_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4b29      	ldr	r3, [pc, #164]	@ (800a330 <__swsetup_r+0xa8>)
 800a28c:	4605      	mov	r5, r0
 800a28e:	6818      	ldr	r0, [r3, #0]
 800a290:	460c      	mov	r4, r1
 800a292:	b118      	cbz	r0, 800a29c <__swsetup_r+0x14>
 800a294:	6a03      	ldr	r3, [r0, #32]
 800a296:	b90b      	cbnz	r3, 800a29c <__swsetup_r+0x14>
 800a298:	f7ff fa34 	bl	8009704 <__sinit>
 800a29c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2a0:	0719      	lsls	r1, r3, #28
 800a2a2:	d422      	bmi.n	800a2ea <__swsetup_r+0x62>
 800a2a4:	06da      	lsls	r2, r3, #27
 800a2a6:	d407      	bmi.n	800a2b8 <__swsetup_r+0x30>
 800a2a8:	2209      	movs	r2, #9
 800a2aa:	602a      	str	r2, [r5, #0]
 800a2ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b4:	81a3      	strh	r3, [r4, #12]
 800a2b6:	e033      	b.n	800a320 <__swsetup_r+0x98>
 800a2b8:	0758      	lsls	r0, r3, #29
 800a2ba:	d512      	bpl.n	800a2e2 <__swsetup_r+0x5a>
 800a2bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2be:	b141      	cbz	r1, 800a2d2 <__swsetup_r+0x4a>
 800a2c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2c4:	4299      	cmp	r1, r3
 800a2c6:	d002      	beq.n	800a2ce <__swsetup_r+0x46>
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f7ff fb31 	bl	8009930 <_free_r>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2d8:	81a3      	strh	r3, [r4, #12]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6063      	str	r3, [r4, #4]
 800a2de:	6923      	ldr	r3, [r4, #16]
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	f043 0308 	orr.w	r3, r3, #8
 800a2e8:	81a3      	strh	r3, [r4, #12]
 800a2ea:	6923      	ldr	r3, [r4, #16]
 800a2ec:	b94b      	cbnz	r3, 800a302 <__swsetup_r+0x7a>
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2f8:	d003      	beq.n	800a302 <__swsetup_r+0x7a>
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	f000 f85c 	bl	800a3ba <__smakebuf_r>
 800a302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a306:	f013 0201 	ands.w	r2, r3, #1
 800a30a:	d00a      	beq.n	800a322 <__swsetup_r+0x9a>
 800a30c:	2200      	movs	r2, #0
 800a30e:	60a2      	str	r2, [r4, #8]
 800a310:	6962      	ldr	r2, [r4, #20]
 800a312:	4252      	negs	r2, r2
 800a314:	61a2      	str	r2, [r4, #24]
 800a316:	6922      	ldr	r2, [r4, #16]
 800a318:	b942      	cbnz	r2, 800a32c <__swsetup_r+0xa4>
 800a31a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a31e:	d1c5      	bne.n	800a2ac <__swsetup_r+0x24>
 800a320:	bd38      	pop	{r3, r4, r5, pc}
 800a322:	0799      	lsls	r1, r3, #30
 800a324:	bf58      	it	pl
 800a326:	6962      	ldrpl	r2, [r4, #20]
 800a328:	60a2      	str	r2, [r4, #8]
 800a32a:	e7f4      	b.n	800a316 <__swsetup_r+0x8e>
 800a32c:	2000      	movs	r0, #0
 800a32e:	e7f7      	b.n	800a320 <__swsetup_r+0x98>
 800a330:	2000002c 	.word	0x2000002c

0800a334 <_sbrk_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	2300      	movs	r3, #0
 800a338:	4d05      	ldr	r5, [pc, #20]	@ (800a350 <_sbrk_r+0x1c>)
 800a33a:	4604      	mov	r4, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	602b      	str	r3, [r5, #0]
 800a340:	f7f8 f9b4 	bl	80026ac <_sbrk>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d102      	bne.n	800a34e <_sbrk_r+0x1a>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	b103      	cbz	r3, 800a34e <_sbrk_r+0x1a>
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	20000e50 	.word	0x20000e50

0800a354 <memchr>:
 800a354:	4603      	mov	r3, r0
 800a356:	b510      	push	{r4, lr}
 800a358:	b2c9      	uxtb	r1, r1
 800a35a:	4402      	add	r2, r0
 800a35c:	4293      	cmp	r3, r2
 800a35e:	4618      	mov	r0, r3
 800a360:	d101      	bne.n	800a366 <memchr+0x12>
 800a362:	2000      	movs	r0, #0
 800a364:	e003      	b.n	800a36e <memchr+0x1a>
 800a366:	7804      	ldrb	r4, [r0, #0]
 800a368:	3301      	adds	r3, #1
 800a36a:	428c      	cmp	r4, r1
 800a36c:	d1f6      	bne.n	800a35c <memchr+0x8>
 800a36e:	bd10      	pop	{r4, pc}

0800a370 <__swhatbuf_r>:
 800a370:	b570      	push	{r4, r5, r6, lr}
 800a372:	460c      	mov	r4, r1
 800a374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a378:	4615      	mov	r5, r2
 800a37a:	2900      	cmp	r1, #0
 800a37c:	461e      	mov	r6, r3
 800a37e:	b096      	sub	sp, #88	@ 0x58
 800a380:	da0c      	bge.n	800a39c <__swhatbuf_r+0x2c>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	2100      	movs	r1, #0
 800a386:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a38a:	bf14      	ite	ne
 800a38c:	2340      	movne	r3, #64	@ 0x40
 800a38e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a392:	2000      	movs	r0, #0
 800a394:	6031      	str	r1, [r6, #0]
 800a396:	602b      	str	r3, [r5, #0]
 800a398:	b016      	add	sp, #88	@ 0x58
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	466a      	mov	r2, sp
 800a39e:	f000 f849 	bl	800a434 <_fstat_r>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	dbed      	blt.n	800a382 <__swhatbuf_r+0x12>
 800a3a6:	9901      	ldr	r1, [sp, #4]
 800a3a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3b0:	4259      	negs	r1, r3
 800a3b2:	4159      	adcs	r1, r3
 800a3b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3b8:	e7eb      	b.n	800a392 <__swhatbuf_r+0x22>

0800a3ba <__smakebuf_r>:
 800a3ba:	898b      	ldrh	r3, [r1, #12]
 800a3bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3be:	079d      	lsls	r5, r3, #30
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	d507      	bpl.n	800a3d6 <__smakebuf_r+0x1c>
 800a3c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	6163      	str	r3, [r4, #20]
 800a3d2:	b003      	add	sp, #12
 800a3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3d6:	466a      	mov	r2, sp
 800a3d8:	ab01      	add	r3, sp, #4
 800a3da:	f7ff ffc9 	bl	800a370 <__swhatbuf_r>
 800a3de:	9f00      	ldr	r7, [sp, #0]
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	4639      	mov	r1, r7
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7ff fb0d 	bl	8009a04 <_malloc_r>
 800a3ea:	b948      	cbnz	r0, 800a400 <__smakebuf_r+0x46>
 800a3ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f0:	059a      	lsls	r2, r3, #22
 800a3f2:	d4ee      	bmi.n	800a3d2 <__smakebuf_r+0x18>
 800a3f4:	f023 0303 	bic.w	r3, r3, #3
 800a3f8:	f043 0302 	orr.w	r3, r3, #2
 800a3fc:	81a3      	strh	r3, [r4, #12]
 800a3fe:	e7e2      	b.n	800a3c6 <__smakebuf_r+0xc>
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a40a:	81a3      	strh	r3, [r4, #12]
 800a40c:	9b01      	ldr	r3, [sp, #4]
 800a40e:	6020      	str	r0, [r4, #0]
 800a410:	b15b      	cbz	r3, 800a42a <__smakebuf_r+0x70>
 800a412:	4630      	mov	r0, r6
 800a414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a418:	f000 f81e 	bl	800a458 <_isatty_r>
 800a41c:	b128      	cbz	r0, 800a42a <__smakebuf_r+0x70>
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	f023 0303 	bic.w	r3, r3, #3
 800a424:	f043 0301 	orr.w	r3, r3, #1
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	431d      	orrs	r5, r3
 800a42e:	81a5      	strh	r5, [r4, #12]
 800a430:	e7cf      	b.n	800a3d2 <__smakebuf_r+0x18>
	...

0800a434 <_fstat_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	2300      	movs	r3, #0
 800a438:	4d06      	ldr	r5, [pc, #24]	@ (800a454 <_fstat_r+0x20>)
 800a43a:	4604      	mov	r4, r0
 800a43c:	4608      	mov	r0, r1
 800a43e:	4611      	mov	r1, r2
 800a440:	602b      	str	r3, [r5, #0]
 800a442:	f7f8 f90e 	bl	8002662 <_fstat>
 800a446:	1c43      	adds	r3, r0, #1
 800a448:	d102      	bne.n	800a450 <_fstat_r+0x1c>
 800a44a:	682b      	ldr	r3, [r5, #0]
 800a44c:	b103      	cbz	r3, 800a450 <_fstat_r+0x1c>
 800a44e:	6023      	str	r3, [r4, #0]
 800a450:	bd38      	pop	{r3, r4, r5, pc}
 800a452:	bf00      	nop
 800a454:	20000e50 	.word	0x20000e50

0800a458 <_isatty_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	2300      	movs	r3, #0
 800a45c:	4d05      	ldr	r5, [pc, #20]	@ (800a474 <_isatty_r+0x1c>)
 800a45e:	4604      	mov	r4, r0
 800a460:	4608      	mov	r0, r1
 800a462:	602b      	str	r3, [r5, #0]
 800a464:	f7f8 f90c 	bl	8002680 <_isatty>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_isatty_r+0x1a>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_isatty_r+0x1a>
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	20000e50 	.word	0x20000e50

0800a478 <_init>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	bf00      	nop
 800a47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47e:	bc08      	pop	{r3}
 800a480:	469e      	mov	lr, r3
 800a482:	4770      	bx	lr

0800a484 <_fini>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	bf00      	nop
 800a488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48a:	bc08      	pop	{r3}
 800a48c:	469e      	mov	lr, r3
 800a48e:	4770      	bx	lr
