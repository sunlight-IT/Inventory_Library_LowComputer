
InventoryRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099dc  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b3c  08009bc0  08009bc0  0000abc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6fc  0800a6fc  0000c070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a6fc  0800a6fc  0000c070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a6fc  0800a6fc  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6fc  0800a6fc  0000b6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a700  0800a700  0000b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800a704  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dbc  20000070  0800a774  0000c070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e2c  0800a774  0000ce2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ddf  00000000  00000000  0000c099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046cc  00000000  00000000  00023e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00028548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112f  00000000  00000000  00029b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000068bf  00000000  00000000  0002ac8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ede  00000000  00000000  0003154e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9cc6  00000000  00000000  0005342c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd0f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000601c  00000000  00000000  000fd138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00103154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08009ba8 	.word	0x08009ba8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08009ba8 	.word	0x08009ba8

08000224 <Events_MainLogic>:
 */

#include "MainLogic.h"

uint8_t Flag_Events_MainLogic = 0;
void    Events_MainLogic(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  switch (Flag_Events_MainLogic) {
 8000228:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <Events_MainLogic+0x34>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <Events_MainLogic+0x12>
 8000230:	2b01      	cmp	r3, #1
 8000232:	d00b      	beq.n	800024c <Events_MainLogic+0x28>
      // Events_WirelessModule();//鏃犵嚎涓插彛浜嬩欢
      // Events_BLDCMotor();
      Events_ServoMotor();
    } break;
  }
}
 8000234:	e00d      	b.n	8000252 <Events_MainLogic+0x2e>
      HAL_TIM_Base_Start_IT(&htim1);
 8000236:	4809      	ldr	r0, [pc, #36]	@ (800025c <Events_MainLogic+0x38>)
 8000238:	f004 fefe 	bl	8005038 <HAL_TIM_Base_Start_IT>
      HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	4808      	ldr	r0, [pc, #32]	@ (8000260 <Events_MainLogic+0x3c>)
 8000240:	f005 f810 	bl	8005264 <HAL_TIM_IC_Start_IT>
      Flag_Events_MainLogic = 1;
 8000244:	4b04      	ldr	r3, [pc, #16]	@ (8000258 <Events_MainLogic+0x34>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
    } break;
 800024a:	e002      	b.n	8000252 <Events_MainLogic+0x2e>
      Events_ServoMotor();
 800024c:	f000 f840 	bl	80002d0 <Events_ServoMotor>
    } break;
 8000250:	bf00      	nop
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	2000008c 	.word	0x2000008c
 800025c:	20000274 	.word	0x20000274
 8000260:	20000304 	.word	0x20000304

08000264 <motor_uart_init>:
static UART_HandleTypeDef *m_uart;
static DMA_HandleTypeDef  *m_dma;

static void moteruart_receive(void);

void motor_uart_init(void) {  //
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  registCallback(EVENT_MotorUart, moteruart_receive);
 8000268:	4902      	ldr	r1, [pc, #8]	@ (8000274 <motor_uart_init+0x10>)
 800026a:	2002      	movs	r0, #2
 800026c:	f008 fca8 	bl	8008bc0 <registCallback>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	08001815 	.word	0x08001815

08000278 <GetMoterAck>:
  registCallback(EVENT_MotorUart, moteruart_receive);  // 注册事件表
  // HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
  // __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
}

uint8_t *GetMoterAck(void) { return motor_ack; }
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
 800027c:	4b02      	ldr	r3, [pc, #8]	@ (8000288 <GetMoterAck+0x10>)
 800027e:	4618      	mov	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	200001dc 	.word	0x200001dc

0800028c <GetMoterStateReg>:
uint8_t *GetMoterStateReg(void) { return motor_state_reg; }
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
 8000290:	4b02      	ldr	r3, [pc, #8]	@ (800029c <GetMoterStateReg+0x10>)
 8000292:	4618      	mov	r0, r3
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	200001e0 	.word	0x200001e0

080002a0 <GetMoterOnPos>:
int8_t   GetMoterOnPos(void) { return ServoMotor.MotorPosition; }
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <GetMoterOnPos+0x14>)
 80002a6:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000090 	.word	0x20000090

080002b8 <GetMoterFlag>:
uint8_t  GetMoterFlag(void) { return ServoMotor.Flag_Event[2]; }
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <GetMoterFlag+0x14>)
 80002be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80002c2:	4618      	mov	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000090 	.word	0x20000090

080002d0 <Events_ServoMotor>:
void test(uint8_t *buf) {
  for (uint8_t i = 0; i < 4; i++) {
    buf[i + 1] = ServoMotor.Flag_Event[i];
  }
}
void Events_ServoMotor(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  UartDriver_ServoMotor();
 80002d4:	f001 fc42 	bl	8001b5c <UartDriver_ServoMotor>
  switch (ServoMotor.Flag_Event[0]) {
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <Events_ServoMotor+0x28>)
 80002da:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d002      	beq.n	80002e8 <Events_ServoMotor+0x18>
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d003      	beq.n	80002ee <Events_ServoMotor+0x1e>
    } break;
    case 1: {
      Event_Movement_ServoMotor();
    } break;
  }
}
 80002e6:	e005      	b.n	80002f4 <Events_ServoMotor+0x24>
      Event_Init_ServoMotor();
 80002e8:	f000 f808 	bl	80002fc <Event_Init_ServoMotor>
    } break;
 80002ec:	e002      	b.n	80002f4 <Events_ServoMotor+0x24>
      Event_Movement_ServoMotor();
 80002ee:	f000 fd27 	bl	8000d40 <Event_Movement_ServoMotor>
    } break;
 80002f2:	bf00      	nop
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000090 	.word	0x20000090

080002fc <Event_Init_ServoMotor>:

void Event_Init_ServoMotor(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  // LOGI("STATE : %d", ServoMotor.Flag_Event[1]);
  switch (ServoMotor.Flag_Event[1]) {
 8000300:	4b6e      	ldr	r3, [pc, #440]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000302:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000306:	2b1a      	cmp	r3, #26
 8000308:	f200 80d5 	bhi.w	80004b6 <Event_Init_ServoMotor+0x1ba>
 800030c:	a201      	add	r2, pc, #4	@ (adr r2, 8000314 <Event_Init_ServoMotor+0x18>)
 800030e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000312:	bf00      	nop
 8000314:	08000381 	.word	0x08000381
 8000318:	080004b7 	.word	0x080004b7
 800031c:	080003a5 	.word	0x080003a5
 8000320:	080004b7 	.word	0x080004b7
 8000324:	080003bb 	.word	0x080003bb
 8000328:	080004b7 	.word	0x080004b7
 800032c:	080003d1 	.word	0x080003d1
 8000330:	080004b7 	.word	0x080004b7
 8000334:	080003e7 	.word	0x080003e7
 8000338:	080004b7 	.word	0x080004b7
 800033c:	080003fd 	.word	0x080003fd
 8000340:	080004b7 	.word	0x080004b7
 8000344:	08000413 	.word	0x08000413
 8000348:	080004b7 	.word	0x080004b7
 800034c:	08000429 	.word	0x08000429
 8000350:	080004b7 	.word	0x080004b7
 8000354:	0800043f 	.word	0x0800043f
 8000358:	080004b7 	.word	0x080004b7
 800035c:	08000455 	.word	0x08000455
 8000360:	080004b7 	.word	0x080004b7
 8000364:	0800046b 	.word	0x0800046b
 8000368:	080004b7 	.word	0x080004b7
 800036c:	08000481 	.word	0x08000481
 8000370:	080004b7 	.word	0x080004b7
 8000374:	08000497 	.word	0x08000497
 8000378:	080004b7 	.word	0x080004b7
 800037c:	080004ad 	.word	0x080004ad
    case 0: {
      SetStatus_Power_ServoMotor(PowerON_ServoMotor);  // 打开伺服驱动器的电源
 8000380:	2000      	movs	r0, #0
 8000382:	f001 f9eb 	bl	800175c <SetStatus_Power_ServoMotor>
      UartReceiveIT_ServoMotor();                      // 打开伺服驱动器的串口接收
 8000386:	f001 fa01 	bl	800178c <UartReceiveIT_ServoMotor>
      ServoMotor.address       = 0x01;                 // 伺服电机地址设置
 800038a:	4b4c      	ldr	r3, [pc, #304]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 800038c:	2201      	movs	r2, #1
 800038e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      ServoMotor.MotorPosition = ON_LEFT;
 8000392:	4b4a      	ldr	r3, [pc, #296]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000394:	22ff      	movs	r2, #255	@ 0xff
 8000396:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      ServoMotor.Flag_Event[1] = 1;  // 定时器定时变2，因为伺服驱动器启动时间大约5s
 800039a:	4b48      	ldr	r3, [pc, #288]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 800039c:	2201      	movs	r2, #1
 800039e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003a2:	e088      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 2: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003a4:	4846      	ldr	r0, [pc, #280]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 80003a6:	f000 fe7b 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(0);  // 串口发送：检测状态监控寄存器1-5设置指令,发送是Read_Func，10words
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 fed4 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 3;            // 等待串口返回，返回正确赋值14，错误赋值4，串口连上则赋值IsConnected = 1，超时5s：定时器赋值2重新发送
 80003b0:	4b42      	ldr	r3, [pc, #264]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80003b2:	2203      	movs	r2, #3
 80003b4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003b8:	e07d      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 4: {  // 状态监控寄存器1-5配置错误，发送状态监控寄存器1配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003ba:	4841      	ldr	r0, [pc, #260]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 80003bc:	f000 fe70 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(1);  // 设置状态监控寄存器1，发送是Write_Once_Func
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 fec9 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 5;            // 等待串口返回，返回正确赋值6，错误或者超时2s，赋值4
 80003c6:	4b3d      	ldr	r3, [pc, #244]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80003c8:	2205      	movs	r2, #5
 80003ca:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003ce:	e072      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 6: {  // 状态监控寄存器2配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003d0:	483b      	ldr	r0, [pc, #236]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 80003d2:	f000 fe65 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(2);  // 设置状态监控寄存器2，发送是Write_Once_Func
 80003d6:	2002      	movs	r0, #2
 80003d8:	f000 febe 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 7;            // 等待串口返回，返回正确赋值8，错误或者超时2s，赋值6
 80003dc:	4b37      	ldr	r3, [pc, #220]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80003de:	2207      	movs	r2, #7
 80003e0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003e4:	e067      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 8: {  // 状态监控寄存器3配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003e6:	4836      	ldr	r0, [pc, #216]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 80003e8:	f000 fe5a 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(3);  // 设置状态监控寄存器3，发送是Write_Once_Func
 80003ec:	2003      	movs	r0, #3
 80003ee:	f000 feb3 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 9;            // 等待串口返回，返回正确赋值10，错误或者超时2s，赋值8
 80003f2:	4b32      	ldr	r3, [pc, #200]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80003f4:	2209      	movs	r2, #9
 80003f6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80003fa:	e05c      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 10: {  // 状态监控寄存器4配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 80003fc:	4830      	ldr	r0, [pc, #192]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 80003fe:	f000 fe4f 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(4);  // 设置状态监控寄存器4，发送是Write_Once_Func
 8000402:	2004      	movs	r0, #4
 8000404:	f000 fea8 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 11;           // 等待串口返回，返回正确赋值12，错误或者超时2s，赋值10
 8000408:	4b2c      	ldr	r3, [pc, #176]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 800040a:	220b      	movs	r2, #11
 800040c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000410:	e051      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 12: {  // 状态监控寄存器5配置
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000412:	482b      	ldr	r0, [pc, #172]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 8000414:	f000 fe44 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(5);  // 设置状态监控寄存器5，发送是Write_Once_Func
 8000418:	2005      	movs	r0, #5
 800041a:	f000 fe9d 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 13;           // 等待串口返回，返回正确赋值2,重读寄存器的状态，错误或者超时2s，赋值12
 800041e:	4b27      	ldr	r3, [pc, #156]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000420:	220d      	movs	r2, #13
 8000422:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000426:	e046      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 14: {  // 状态监控寄存器都是正确的
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000428:	4825      	ldr	r0, [pc, #148]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 800042a:	f000 fe39 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(6);  // 查询电子齿轮比分子分母的设置,发送是Read_Func，4words
 800042e:	2006      	movs	r0, #6
 8000430:	f000 fe92 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 15;           // 等待串口返回，返回正确赋值18,重读寄存器的设置，错误赋值16，超时2s，赋值14
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000436:	220f      	movs	r2, #15
 8000438:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800043c:	e03b      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 16: {
      //
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800043e:	4820      	ldr	r0, [pc, #128]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 8000440:	f000 fe2e 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(7);  // 电子齿轮比分子分母的设置，发送是Write_Multi_Func，4words
 8000444:	2007      	movs	r0, #7
 8000446:	f000 fe87 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 17;           // 等待串口返回，返回正确赋值14,重读寄存器的设置，错误或者超时2s，赋值16
 800044a:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 800044c:	2211      	movs	r2, #17
 800044e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000452:	e030      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 18: {  // 读取脉冲清除模式，需要设置为0x11;
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000454:	481a      	ldr	r0, [pc, #104]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 8000456:	f000 fe23 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(8);  // 读取脉冲清除模式，需要设置为0x11，发送是Read_Func，1words
 800045a:	2008      	movs	r0, #8
 800045c:	f000 fe7c 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 19;           // 等待串口返回，返回正确赋值22,重读寄存器的设置，错误赋值20，超时2s，赋值18
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000462:	2213      	movs	r2, #19
 8000464:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000468:	e025      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 20: {  // 脉冲清除模式，需要设置为0x11;
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 800046a:	4815      	ldr	r0, [pc, #84]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 800046c:	f000 fe18 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(9);  // 脉冲清除模式，需要设置为0x11，发送是Write_Once_Func，1words
 8000470:	2009      	movs	r0, #9
 8000472:	f000 fe71 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 21;           // 等待串口返回，返回正确赋值18,重读寄存器的设置，错误超时2s，赋值20
 8000476:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 8000478:	2215      	movs	r2, #21
 800047a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 800047e:	e01a      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 22: {  //
      // 脉冲模式设置正确，读取EEPROM是否为不保存模式
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 8000482:	f000 fe0d 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(10);  // 读取EEPROM是否为不保存模式，发送是Read_Func，1words
 8000486:	200a      	movs	r0, #10
 8000488:	f000 fe66 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 23;            // 等待串口返回，返回正确赋值26,重读寄存器的设置，错误赋值24，超时2s，赋值22
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 800048e:	2217      	movs	r2, #23
 8000490:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 8000494:	e00f      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 24: {
      //
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[0]);
 8000496:	480a      	ldr	r0, [pc, #40]	@ (80004c0 <Event_Init_ServoMotor+0x1c4>)
 8000498:	f000 fe02 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      UartSend_MonitorRegister_ServoMotor(11);  // 设置EEPROM为不保存模式，发送是Write_Once_Func，1words
 800049c:	200b      	movs	r0, #11
 800049e:	f000 fe5b 	bl	8001158 <UartSend_MonitorRegister_ServoMotor>
      ServoMotor.Flag_Event[1] = 25;            // 等待串口返回，返回正确赋值22,重读寄存器的设置，错误超时2s，赋值24
 80004a2:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80004a4:	2219      	movs	r2, #25
 80004a6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    } break;
 80004aa:	e004      	b.n	80004b6 <Event_Init_ServoMotor+0x1ba>
    case 26: {  // 设置了EEPROM不保存模式
      ServoMotor.Flag_Event[0] = 1;
 80004ac:	4b03      	ldr	r3, [pc, #12]	@ (80004bc <Event_Init_ServoMotor+0x1c0>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    } break;
 80004b4:	bf00      	nop
  }
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000090 	.word	0x20000090
 80004c0:	200000c2 	.word	0x200000c2

080004c4 <UartAction_ServoMotor>:
void UartAction_ServoMotor(uint8_t *buf, uint8_t len) {
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b0c5      	sub	sp, #276	@ 0x114
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80004d2:	6018      	str	r0, [r3, #0]
 80004d4:	460a      	mov	r2, r1
 80004d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004da:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80004de:	701a      	strb	r2, [r3, #0]
  uint8_t uartbuf[255] = {0};
 80004e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80004e8:	4618      	mov	r0, r3
 80004ea:	23ff      	movs	r3, #255	@ 0xff
 80004ec:	461a      	mov	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f008 fd2b 	bl	8008f4a <memset>
  uint8_t lenbuf       = len / 2;
 80004f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004f8:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	085b      	lsrs	r3, r3, #1
 8000500:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
  for (uint8_t i = 0; i < lenbuf; i++) {
 8000504:	2300      	movs	r3, #0
 8000506:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800050a:	e02f      	b.n	800056c <UartAction_ServoMotor+0xa8>
    uartbuf[i] = Get_Regroup_ASCII(buf[2 * i], 0) | Get_Regroup_ASCII(buf[2 * i + 1], 1);
 800050c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	461a      	mov	r2, r3
 8000514:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000518:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4413      	add	r3, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f001 f947 	bl	80017b8 <Get_Regroup_ASCII>
 800052a:	4603      	mov	r3, r0
 800052c:	461c      	mov	r4, r3
 800052e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	3301      	adds	r3, #1
 8000536:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800053a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800053e:	6812      	ldr	r2, [r2, #0]
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2101      	movs	r1, #1
 8000546:	4618      	mov	r0, r3
 8000548:	f001 f936 	bl	80017b8 <Get_Regroup_ASCII>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000554:	4322      	orrs	r2, r4
 8000556:	b2d1      	uxtb	r1, r2
 8000558:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800055c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000560:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < lenbuf; i++) {
 8000562:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000566:	3301      	adds	r3, #1
 8000568:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800056c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8000570:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8000574:	429a      	cmp	r2, r3
 8000576:	d3c9      	bcc.n	800050c <UartAction_ServoMotor+0x48>
  }

  if (uartbuf[0] != ServoMotor.address && uartbuf[1] != (uint8_t)(ServoMotor.UartCurrentCmd[0] & 0xFF)) {
 8000578:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800057c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	4bba      	ldr	r3, [pc, #744]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000584:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000588:	429a      	cmp	r2, r3
 800058a:	d00a      	beq.n	80005a2 <UartAction_ServoMotor+0xde>
 800058c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000594:	785a      	ldrb	r2, [r3, #1]
 8000596:	4bb5      	ldr	r3, [pc, #724]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000598:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800059a:	b2db      	uxtb	r3, r3
 800059c:	429a      	cmp	r2, r3
 800059e:	f040 83c2 	bne.w	8000d26 <UartAction_ServoMotor+0x862>
    return;
  }
  UartWrite_WirelessModule(uartbuf, lenbuf);
 80005a2:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fb3e 	bl	8001c30 <UartWrite_WirelessModule>
  switch (uartbuf[1]) {
 80005b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005bc:	785b      	ldrb	r3, [r3, #1]
 80005be:	2b10      	cmp	r3, #16
 80005c0:	f000 8397 	beq.w	8000cf2 <UartAction_ServoMotor+0x82e>
 80005c4:	2b10      	cmp	r3, #16
 80005c6:	f300 83b5 	bgt.w	8000d34 <UartAction_ServoMotor+0x870>
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d003      	beq.n	80005d6 <UartAction_ServoMotor+0x112>
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	f000 80e2 	beq.w	8000798 <UartAction_ServoMotor+0x2d4>
 80005d4:	e3ae      	b.n	8000d34 <UartAction_ServoMotor+0x870>
    case Cmd_Read_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 寄存器
 80005d6:	4ba5      	ldr	r3, [pc, #660]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 80005d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80005da:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80005de:	f000 80bd 	beq.w	800075c <UartAction_ServoMotor+0x298>
 80005e2:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80005e6:	f300 83a0 	bgt.w	8000d2a <UartAction_ServoMotor+0x866>
 80005ea:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80005ee:	f000 809f 	beq.w	8000730 <UartAction_ServoMotor+0x26c>
 80005f2:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80005f6:	f300 8398 	bgt.w	8000d2a <UartAction_ServoMotor+0x866>
 80005fa:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 80005fe:	d067      	beq.n	80006d0 <UartAction_ServoMotor+0x20c>
 8000600:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 8000604:	f300 8391 	bgt.w	8000d2a <UartAction_ServoMotor+0x866>
 8000608:	2b12      	cmp	r3, #18
 800060a:	f000 80bd 	beq.w	8000788 <UartAction_ServoMotor+0x2c4>
 800060e:	2b22      	cmp	r3, #34	@ 0x22
 8000610:	d000      	beq.n	8000614 <UartAction_ServoMotor+0x150>
              }
            } break;
          }
        } break;
      }
    } break;
 8000612:	e38a      	b.n	8000d2a <UartAction_ServoMotor+0x866>
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000614:	4b95      	ldr	r3, [pc, #596]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000616:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000618:	2b01      	cmp	r3, #1
 800061a:	d057      	beq.n	80006cc <UartAction_ServoMotor+0x208>
 800061c:	2b0a      	cmp	r3, #10
 800061e:	d000      	beq.n	8000622 <UartAction_ServoMotor+0x15e>
        } break;
 8000620:	e0b9      	b.n	8000796 <UartAction_ServoMotor+0x2d2>
              ServoMotor.IsConnected         = 1;
 8000622:	4b92      	ldr	r3, [pc, #584]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000624:	2201      	movs	r2, #1
 8000626:	705a      	strb	r2, [r3, #1]
              uint8_t MonitorRegisterSet_buf = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[4] != (PulseMonitor_0022H & 0xFF)) {
 800062e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <UartAction_ServoMotor+0x184>
                MonitorRegisterSet_buf |= 0x01;
 800063c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[8] != (TorqueMonitor_0024H & 0xFF)) {
 8000648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800064c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	2b0b      	cmp	r3, #11
 8000654:	d005      	beq.n	8000662 <UartAction_ServoMotor+0x19e>
                MonitorRegisterSet_buf |= 0x02;
 8000656:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800065a:	f043 0302 	orr.w	r3, r3, #2
 800065e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[12] != (SpeedMonitor_0026H & 0xFF)) {
 8000662:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800066a:	7b1b      	ldrb	r3, [r3, #12]
 800066c:	2b07      	cmp	r3, #7
 800066e:	d005      	beq.n	800067c <UartAction_ServoMotor+0x1b8>
                MonitorRegisterSet_buf |= 0x04;
 8000670:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[16] != (Monitor_0028H & 0xFF)) {
 800067c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000684:	7c1b      	ldrb	r3, [r3, #16]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d005      	beq.n	8000696 <UartAction_ServoMotor+0x1d2>
                MonitorRegisterSet_buf |= 0x08;
 800068a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (uartbuf[20] != (Monitor_002AH & 0xFF)) {
 8000696:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800069a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800069e:	7d1b      	ldrb	r3, [r3, #20]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d005      	beq.n	80006b0 <UartAction_ServoMotor+0x1ec>
                MonitorRegisterSet_buf |= 0x10;
 80006a4:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
              if (MonitorRegisterSet_buf) {    // 有配置错误
 80006b0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <UartAction_ServoMotor+0x1fe>
                ServoMotor.Flag_Event[1] = 4;  // 重新设置状态监控寄存器1
 80006b8:	4b6c      	ldr	r3, [pc, #432]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 80006ba:	2204      	movs	r2, #4
 80006bc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 80006c0:	e005      	b.n	80006ce <UartAction_ServoMotor+0x20a>
                ServoMotor.Flag_Event[1] = 14;
 80006c2:	4b6a      	ldr	r3, [pc, #424]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 80006c4:	220e      	movs	r2, #14
 80006c6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 80006ca:	e000      	b.n	80006ce <UartAction_ServoMotor+0x20a>
            } break;
 80006cc:	bf00      	nop
        } break;
 80006ce:	e062      	b.n	8000796 <UartAction_ServoMotor+0x2d2>
          switch (ServoMotor.UartCurrentCmd[2]) {
 80006d0:	4b66      	ldr	r3, [pc, #408]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 80006d2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d159      	bne.n	800078c <UartAction_ServoMotor+0x2c8>
              uint8_t GearRatioRegisterSet_buf = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              if (uartbuf[4] != (GearRatio_Numerator_0158H & 0xFF)) {
 80006de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80006ea:	d005      	beq.n	80006f8 <UartAction_ServoMotor+0x234>
                GearRatioRegisterSet_buf |= 0x01;
 80006ec:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              if (uartbuf[8] != (GearRatio_Denominator_015AH & 0xFF)) {
 80006f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000700:	7a1b      	ldrb	r3, [r3, #8]
 8000702:	2b5e      	cmp	r3, #94	@ 0x5e
 8000704:	d005      	beq.n	8000712 <UartAction_ServoMotor+0x24e>
                GearRatioRegisterSet_buf |= 0x02;
 8000706:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
              if (GearRatioRegisterSet_buf) {   // 有配置错误
 8000712:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <UartAction_ServoMotor+0x260>
                ServoMotor.Flag_Event[1] = 16;  // 重新设置电子齿轮比分子分母寄存器
 800071a:	4b54      	ldr	r3, [pc, #336]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800071c:	2210      	movs	r2, #16
 800071e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000722:	e003      	b.n	800072c <UartAction_ServoMotor+0x268>
                ServoMotor.Flag_Event[1] = 18;
 8000724:	4b51      	ldr	r3, [pc, #324]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000726:	2212      	movs	r2, #18
 8000728:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800072c:	bf00      	nop
        } break;
 800072e:	e02d      	b.n	800078c <UartAction_ServoMotor+0x2c8>
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000730:	4b4e      	ldr	r3, [pc, #312]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000732:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000734:	2b01      	cmp	r3, #1
 8000736:	d12b      	bne.n	8000790 <UartAction_ServoMotor+0x2cc>
              if (uartbuf[4] == (EEPROM_Disable_P2_30 & 0xFF)) {  // 已经设置了EEPROM不保存
 8000738:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800073c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	2b05      	cmp	r3, #5
 8000744:	d104      	bne.n	8000750 <UartAction_ServoMotor+0x28c>
                ServoMotor.Flag_Event[1] = 26;
 8000746:	4b49      	ldr	r3, [pc, #292]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000748:	221a      	movs	r2, #26
 800074a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800074e:	e003      	b.n	8000758 <UartAction_ServoMotor+0x294>
                ServoMotor.Flag_Event[1] = 24;
 8000750:	4b46      	ldr	r3, [pc, #280]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000752:	2218      	movs	r2, #24
 8000754:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000758:	bf00      	nop
        } break;
 800075a:	e019      	b.n	8000790 <UartAction_ServoMotor+0x2cc>
          switch (ServoMotor.UartCurrentCmd[2]) {
 800075c:	4b43      	ldr	r3, [pc, #268]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800075e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000760:	2b01      	cmp	r3, #1
 8000762:	d117      	bne.n	8000794 <UartAction_ServoMotor+0x2d0>
              if (uartbuf[4] == (PulseReset_Data_P2_50 & 0xFF)) {  // 已经设置脉冲清除模式，为0x11;
 8000764:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	2b11      	cmp	r3, #17
 8000770:	d104      	bne.n	800077c <UartAction_ServoMotor+0x2b8>
                ServoMotor.Flag_Event[1] = 22;
 8000772:	4b3e      	ldr	r3, [pc, #248]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000774:	2216      	movs	r2, #22
 8000776:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 800077a:	e003      	b.n	8000784 <UartAction_ServoMotor+0x2c0>
                ServoMotor.Flag_Event[1] = 20;
 800077c:	4b3b      	ldr	r3, [pc, #236]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800077e:	2214      	movs	r2, #20
 8000780:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000784:	bf00      	nop
        } break;
 8000786:	e005      	b.n	8000794 <UartAction_ServoMotor+0x2d0>
        } break;
 8000788:	bf00      	nop
 800078a:	e2ce      	b.n	8000d2a <UartAction_ServoMotor+0x866>
        } break;
 800078c:	bf00      	nop
 800078e:	e2cc      	b.n	8000d2a <UartAction_ServoMotor+0x866>
        } break;
 8000790:	bf00      	nop
 8000792:	e2ca      	b.n	8000d2a <UartAction_ServoMotor+0x866>
        } break;
 8000794:	bf00      	nop
    } break;
 8000796:	e2c8      	b.n	8000d2a <UartAction_ServoMotor+0x866>
    case Cmd_Write_Once_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 读取寄存器
 8000798:	4b34      	ldr	r3, [pc, #208]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800079a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800079c:	f240 420a 	movw	r2, #1034	@ 0x40a
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f000 80f2 	beq.w	800098a <UartAction_ServoMotor+0x4c6>
 80007a6:	f240 420a 	movw	r2, #1034	@ 0x40a
 80007aa:	4293      	cmp	r3, r2
 80007ac:	f300 82bf 	bgt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007b0:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80007b4:	f000 80e4 	beq.w	8000980 <UartAction_ServoMotor+0x4bc>
 80007b8:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 80007bc:	f300 82b7 	bgt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007c0:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80007c4:	f000 80d7 	beq.w	8000976 <UartAction_ServoMotor+0x4b2>
 80007c8:	f5b3 7f0f 	cmp.w	r3, #572	@ 0x23c
 80007cc:	f300 82af 	bgt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007d0:	f240 2216 	movw	r2, #534	@ 0x216
 80007d4:	4293      	cmp	r3, r2
 80007d6:	f000 809a 	beq.w	800090e <UartAction_ServoMotor+0x44a>
 80007da:	f240 2216 	movw	r2, #534	@ 0x216
 80007de:	4293      	cmp	r3, r2
 80007e0:	f300 82a5 	bgt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007e4:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 80007e8:	d05e      	beq.n	80008a8 <UartAction_ServoMotor+0x3e4>
 80007ea:	f5b3 7f05 	cmp.w	r3, #532	@ 0x214
 80007ee:	f300 829e 	bgt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80007f4:	dc1c      	bgt.n	8000830 <UartAction_ServoMotor+0x36c>
 80007f6:	2b22      	cmp	r3, #34	@ 0x22
 80007f8:	f2c0 8299 	blt.w	8000d2e <UartAction_ServoMotor+0x86a>
 80007fc:	3b22      	subs	r3, #34	@ 0x22
 80007fe:	2b08      	cmp	r3, #8
 8000800:	f200 8295 	bhi.w	8000d2e <UartAction_ServoMotor+0x86a>
 8000804:	a201      	add	r2, pc, #4	@ (adr r2, 800080c <UartAction_ServoMotor+0x348>)
 8000806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080a:	bf00      	nop
 800080c:	08000839 	.word	0x08000839
 8000810:	08000d2f 	.word	0x08000d2f
 8000814:	08000843 	.word	0x08000843
 8000818:	08000d2f 	.word	0x08000d2f
 800081c:	0800084d 	.word	0x0800084d
 8000820:	08000d2f 	.word	0x08000d2f
 8000824:	08000857 	.word	0x08000857
 8000828:	08000d2f 	.word	0x08000d2f
 800082c:	08000861 	.word	0x08000861
 8000830:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000834:	d01c      	beq.n	8000870 <UartAction_ServoMotor+0x3ac>
              }
            } break;
          }
        } break;
      }
    } break;
 8000836:	e27a      	b.n	8000d2e <UartAction_ServoMotor+0x86a>
          ServoMotor.Flag_Event[1] = 6;        // 设置状态监控寄存器2
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800083a:	2206      	movs	r2, #6
 800083c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000840:	e256      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 8;  // 设置状态监控寄存器3
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000844:	2208      	movs	r2, #8
 8000846:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800084a:	e251      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 10;  // 设置状态监控寄存器4
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 800084e:	220a      	movs	r2, #10
 8000850:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000854:	e24c      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 12;  // 设置状态监控寄存器5
 8000856:	4b05      	ldr	r3, [pc, #20]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000858:	220c      	movs	r2, #12
 800085a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800085e:	e247      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 2;  // 重新检查状态监控寄存器1-5
 8000860:	4b02      	ldr	r3, [pc, #8]	@ (800086c <UartAction_ServoMotor+0x3a8>)
 8000862:	2202      	movs	r2, #2
 8000864:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000868:	e242      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
 800086a:	bf00      	nop
 800086c:	20000090 	.word	0x20000090
          switch (ServoMotor.Flag_Event[2]) {
 8000870:	4bc0      	ldr	r3, [pc, #768]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000876:	2b17      	cmp	r3, #23
 8000878:	f040 8237 	bne.w	8000cea <UartAction_ServoMotor+0x826>
              ServoMotor.Flag_Event[2] = Szmode_Data_P1_01 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 24 : 22;
 800087c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000880:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800088c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000890:	7952      	ldrb	r2, [r2, #5]
 8000892:	4313      	orrs	r3, r2
 8000894:	2b04      	cmp	r3, #4
 8000896:	d101      	bne.n	800089c <UartAction_ServoMotor+0x3d8>
 8000898:	2218      	movs	r2, #24
 800089a:	e000      	b.n	800089e <UartAction_ServoMotor+0x3da>
 800089c:	2216      	movs	r2, #22
 800089e:	4bb5      	ldr	r3, [pc, #724]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 80008a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 80008a4:	bf00      	nop
        } break;
 80008a6:	e220      	b.n	8000cea <UartAction_ServoMotor+0x826>
          switch (ServoMotor.Flag_Event[2]) {
 80008a8:	4bb2      	ldr	r3, [pc, #712]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 80008aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80008ae:	2b05      	cmp	r3, #5
 80008b0:	d002      	beq.n	80008b8 <UartAction_ServoMotor+0x3f4>
 80008b2:	2b19      	cmp	r3, #25
 80008b4:	d015      	beq.n	80008e2 <UartAction_ServoMotor+0x41e>
        } break;
 80008b6:	e21b      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
              ServoMotor.Flag_Event[2] = DI1_Data_ServoON == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 6 : 4;
 80008b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008c8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80008cc:	7952      	ldrb	r2, [r2, #5]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d101      	bne.n	80008d8 <UartAction_ServoMotor+0x414>
 80008d4:	2206      	movs	r2, #6
 80008d6:	e000      	b.n	80008da <UartAction_ServoMotor+0x416>
 80008d8:	2204      	movs	r2, #4
 80008da:	4ba6      	ldr	r3, [pc, #664]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 80008dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 80008e0:	e014      	b.n	800090c <UartAction_ServoMotor+0x448>
              ServoMotor.Flag_Event[2] = DI1_Data_ServoON == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 26 : 24;
 80008e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008ea:	791b      	ldrb	r3, [r3, #4]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80008f2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80008f6:	7952      	ldrb	r2, [r2, #5]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d101      	bne.n	8000902 <UartAction_ServoMotor+0x43e>
 80008fe:	221a      	movs	r2, #26
 8000900:	e000      	b.n	8000904 <UartAction_ServoMotor+0x440>
 8000902:	2218      	movs	r2, #24
 8000904:	4b9b      	ldr	r3, [pc, #620]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 800090a:	bf00      	nop
        } break;
 800090c:	e1f0      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          switch (ServoMotor.Flag_Event[2]) {
 800090e:	4b99      	ldr	r3, [pc, #612]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000914:	2b13      	cmp	r3, #19
 8000916:	d002      	beq.n	800091e <UartAction_ServoMotor+0x45a>
 8000918:	2b15      	cmp	r3, #21
 800091a:	d015      	beq.n	8000948 <UartAction_ServoMotor+0x484>
        } break;
 800091c:	e1e8      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_Start_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 16;
 800091e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000922:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800092e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000932:	7952      	ldrb	r2, [r2, #5]
 8000934:	4313      	orrs	r3, r2
 8000936:	2b04      	cmp	r3, #4
 8000938:	d101      	bne.n	800093e <UartAction_ServoMotor+0x47a>
 800093a:	2214      	movs	r2, #20
 800093c:	e000      	b.n	8000940 <UartAction_ServoMotor+0x47c>
 800093e:	2210      	movs	r2, #16
 8000940:	4b8c      	ldr	r3, [pc, #560]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000946:	e015      	b.n	8000974 <UartAction_ServoMotor+0x4b0>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_End_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 22 : 20;
 8000948:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800094c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000958:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800095c:	7952      	ldrb	r2, [r2, #5]
 800095e:	4313      	orrs	r3, r2
 8000960:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000964:	d101      	bne.n	800096a <UartAction_ServoMotor+0x4a6>
 8000966:	2216      	movs	r2, #22
 8000968:	e000      	b.n	800096c <UartAction_ServoMotor+0x4a8>
 800096a:	2214      	movs	r2, #20
 800096c:	4b81      	ldr	r3, [pc, #516]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 800096e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000972:	bf00      	nop
        } break;
 8000974:	e1bc      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 22;  // 重新读取EEPROM设置是否为不保存模式
 8000976:	4b7f      	ldr	r3, [pc, #508]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000978:	2216      	movs	r2, #22
 800097a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 800097e:	e1b7      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          ServoMotor.Flag_Event[1] = 18;  // 重新读取脉冲清除模式
 8000980:	4b7c      	ldr	r3, [pc, #496]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000982:	2212      	movs	r2, #18
 8000984:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
        } break;
 8000988:	e1b2      	b.n	8000cf0 <UartAction_ServoMotor+0x82c>
          switch (ServoMotor.Flag_Event[2]) {
 800098a:	4b7a      	ldr	r3, [pc, #488]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 800098c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000990:	3b03      	subs	r3, #3
 8000992:	2b1a      	cmp	r3, #26
 8000994:	f200 81ab 	bhi.w	8000cee <UartAction_ServoMotor+0x82a>
 8000998:	a201      	add	r2, pc, #4	@ (adr r2, 80009a0 <UartAction_ServoMotor+0x4dc>)
 800099a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099e:	bf00      	nop
 80009a0:	08000a0d 	.word	0x08000a0d
 80009a4:	08000cef 	.word	0x08000cef
 80009a8:	08000cef 	.word	0x08000cef
 80009ac:	08000cef 	.word	0x08000cef
 80009b0:	08000a37 	.word	0x08000a37
 80009b4:	08000cef 	.word	0x08000cef
 80009b8:	08000a61 	.word	0x08000a61
 80009bc:	08000cef 	.word	0x08000cef
 80009c0:	08000ad5 	.word	0x08000ad5
 80009c4:	08000cef 	.word	0x08000cef
 80009c8:	08000aff 	.word	0x08000aff
 80009cc:	08000cef 	.word	0x08000cef
 80009d0:	08000b79 	.word	0x08000b79
 80009d4:	08000cef 	.word	0x08000cef
 80009d8:	08000ba3 	.word	0x08000ba3
 80009dc:	08000cef 	.word	0x08000cef
 80009e0:	08000bcd 	.word	0x08000bcd
 80009e4:	08000cef 	.word	0x08000cef
 80009e8:	08000cef 	.word	0x08000cef
 80009ec:	08000cef 	.word	0x08000cef
 80009f0:	08000cef 	.word	0x08000cef
 80009f4:	08000cef 	.word	0x08000cef
 80009f8:	08000cef 	.word	0x08000cef
 80009fc:	08000cef 	.word	0x08000cef
 8000a00:	08000c3f 	.word	0x08000c3f
 8000a04:	08000cef 	.word	0x08000cef
 8000a08:	08000c69 	.word	0x08000c69
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 4 : 2;
 8000a0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a14:	791b      	ldrb	r3, [r3, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d108      	bne.n	8000a2c <UartAction_ServoMotor+0x568>
 8000a1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a22:	795b      	ldrb	r3, [r3, #5]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d101      	bne.n	8000a2c <UartAction_ServoMotor+0x568>
 8000a28:	2204      	movs	r2, #4
 8000a2a:	e000      	b.n	8000a2e <UartAction_ServoMotor+0x56a>
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	4b51      	ldr	r3, [pc, #324]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a34:	e158      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x14) ? 8 : 6;
 8000a36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d108      	bne.n	8000a56 <UartAction_ServoMotor+0x592>
 8000a44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a4c:	795b      	ldrb	r3, [r3, #5]
 8000a4e:	2b14      	cmp	r3, #20
 8000a50:	d101      	bne.n	8000a56 <UartAction_ServoMotor+0x592>
 8000a52:	2208      	movs	r2, #8
 8000a54:	e000      	b.n	8000a58 <UartAction_ServoMotor+0x594>
 8000a56:	2206      	movs	r2, #6
 8000a58:	4b46      	ldr	r3, [pc, #280]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a5e:	e143      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CCW往左动JOGmode_Data_CCW
 8000a60:	4b44      	ldr	r3, [pc, #272]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a62:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d116      	bne.n	8000a98 <UartAction_ServoMotor+0x5d4>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 10 : 8;
 8000a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a7a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a7e:	7952      	ldrb	r2, [r2, #5]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <UartAction_ServoMotor+0x5ca>
 8000a8a:	220a      	movs	r2, #10
 8000a8c:	e000      	b.n	8000a90 <UartAction_ServoMotor+0x5cc>
 8000a8e:	2208      	movs	r2, #8
 8000a90:	4b38      	ldr	r3, [pc, #224]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000a96:	e120      	b.n	8000cda <UartAction_ServoMotor+0x816>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CW往右动
 8000a98:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000a9a:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa2:	f040 811a 	bne.w	8000cda <UartAction_ServoMotor+0x816>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 10 : 8;
 8000aa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000aae:	791b      	ldrb	r3, [r3, #4]
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ab6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000aba:	7952      	ldrb	r2, [r2, #5]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <UartAction_ServoMotor+0x606>
 8000ac6:	220a      	movs	r2, #10
 8000ac8:	e000      	b.n	8000acc <UartAction_ServoMotor+0x608>
 8000aca:	2208      	movs	r2, #8
 8000acc:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000ad2:	e102      	b.n	8000cda <UartAction_ServoMotor+0x816>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 12 : 10;
 8000ad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d108      	bne.n	8000af4 <UartAction_ServoMotor+0x630>
 8000ae2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000aea:	795b      	ldrb	r3, [r3, #5]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <UartAction_ServoMotor+0x630>
 8000af0:	220c      	movs	r2, #12
 8000af2:	e000      	b.n	8000af6 <UartAction_ServoMotor+0x632>
 8000af4:	220a      	movs	r2, #10
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000afc:	e0f4      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CW往右动
 8000afe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b00:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d116      	bne.n	8000b36 <UartAction_ServoMotor+0x672>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 14 : 12;
 8000b08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b18:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000b1c:	7952      	ldrb	r2, [r2, #5]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d101      	bne.n	8000b2c <UartAction_ServoMotor+0x668>
 8000b28:	220e      	movs	r2, #14
 8000b2a:	e000      	b.n	8000b2e <UartAction_ServoMotor+0x66a>
 8000b2c:	220c      	movs	r2, #12
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b34:	e0d3      	b.n	8000cde <UartAction_ServoMotor+0x81a>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CCW往左动
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b38:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	f040 80cd 	bne.w	8000cde <UartAction_ServoMotor+0x81a>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 14 : 12;
 8000b44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b54:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000b58:	7952      	ldrb	r2, [r2, #5]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <UartAction_ServoMotor+0x6a4>
 8000b64:	220e      	movs	r2, #14
 8000b66:	e000      	b.n	8000b6a <UartAction_ServoMotor+0x6a6>
 8000b68:	220c      	movs	r2, #12
 8000b6a:	4b02      	ldr	r3, [pc, #8]	@ (8000b74 <UartAction_ServoMotor+0x6b0>)
 8000b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000b70:	e0b5      	b.n	8000cde <UartAction_ServoMotor+0x81a>
 8000b72:	bf00      	nop
 8000b74:	20000090 	.word	0x20000090
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 16 : 14;
 8000b78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b80:	791b      	ldrb	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d108      	bne.n	8000b98 <UartAction_ServoMotor+0x6d4>
 8000b86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b8e:	795b      	ldrb	r3, [r3, #5]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <UartAction_ServoMotor+0x6d4>
 8000b94:	2210      	movs	r2, #16
 8000b96:	e000      	b.n	8000b9a <UartAction_ServoMotor+0x6d6>
 8000b98:	220e      	movs	r2, #14
 8000b9a:	4b68      	ldr	r3, [pc, #416]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000ba0:	e0a2      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              ServoMotor.Flag_Event[2] = DI2_PulseClear_Start_Data_P2_11 == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 18 : 16;
 8000ba2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bb2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bb6:	7952      	ldrb	r2, [r2, #5]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d101      	bne.n	8000bc2 <UartAction_ServoMotor+0x6fe>
 8000bbe:	2212      	movs	r2, #18
 8000bc0:	e000      	b.n	8000bc4 <UartAction_ServoMotor+0x700>
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000bca:	e08d      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CCW往左动JOGmode_Data_CCW
 8000bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000bce:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d116      	bne.n	8000c04 <UartAction_ServoMotor+0x740>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 18;
 8000bd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000be6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bea:	7952      	ldrb	r2, [r2, #5]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <UartAction_ServoMotor+0x736>
 8000bf6:	2214      	movs	r2, #20
 8000bf8:	e000      	b.n	8000bfc <UartAction_ServoMotor+0x738>
 8000bfa:	2212      	movs	r2, #18
 8000bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c02:	e06e      	b.n	8000ce2 <UartAction_ServoMotor+0x81e>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CW往右动
 8000c04:	4b4d      	ldr	r3, [pc, #308]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000c06:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0e:	d168      	bne.n	8000ce2 <UartAction_ServoMotor+0x81e>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 20 : 18;
 8000c10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c18:	791b      	ldrb	r3, [r3, #4]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c20:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c24:	7952      	ldrb	r2, [r2, #5]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <UartAction_ServoMotor+0x770>
 8000c30:	2214      	movs	r2, #20
 8000c32:	e000      	b.n	8000c36 <UartAction_ServoMotor+0x772>
 8000c34:	2212      	movs	r2, #18
 8000c36:	4b41      	ldr	r3, [pc, #260]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c3c:	e051      	b.n	8000ce2 <UartAction_ServoMotor+0x81e>
              ServoMotor.Flag_Event[2] = (uartbuf[4] == 0x00 && uartbuf[5] == 0x00) ? 28 : 26;
 8000c3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c46:	791b      	ldrb	r3, [r3, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d108      	bne.n	8000c5e <UartAction_ServoMotor+0x79a>
 8000c4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c54:	795b      	ldrb	r3, [r3, #5]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <UartAction_ServoMotor+0x79a>
 8000c5a:	221c      	movs	r2, #28
 8000c5c:	e000      	b.n	8000c60 <UartAction_ServoMotor+0x79c>
 8000c5e:	221a      	movs	r2, #26
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c66:	e03f      	b.n	8000ce8 <UartAction_ServoMotor+0x824>
              if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {  // 右//CW往右动
 8000c68:	4b34      	ldr	r3, [pc, #208]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000c6a:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d116      	bne.n	8000ca0 <UartAction_ServoMotor+0x7dc>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 30 : 28;
 8000c72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c7a:	791b      	ldrb	r3, [r3, #4]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c82:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c86:	7952      	ldrb	r2, [r2, #5]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <UartAction_ServoMotor+0x7d2>
 8000c92:	221e      	movs	r2, #30
 8000c94:	e000      	b.n	8000c98 <UartAction_ServoMotor+0x7d4>
 8000c96:	221c      	movs	r2, #28
 8000c98:	4b28      	ldr	r3, [pc, #160]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000c9e:	e022      	b.n	8000ce6 <UartAction_ServoMotor+0x822>
              } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左//CCW往左动
 8000ca0:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000ca2:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000caa:	d11c      	bne.n	8000ce6 <UartAction_ServoMotor+0x822>
                ServoMotor.Flag_Event[2] = JOGmode_Data_CCW == (((uint16_t)uartbuf[4] << 8) | uartbuf[5]) ? 30 : 28;
 8000cac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000cb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000cb4:	791b      	ldrb	r3, [r3, #4]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000cbc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000cc0:	7952      	ldrb	r2, [r2, #5]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d101      	bne.n	8000cd0 <UartAction_ServoMotor+0x80c>
 8000ccc:	221e      	movs	r2, #30
 8000cce:	e000      	b.n	8000cd2 <UartAction_ServoMotor+0x80e>
 8000cd0:	221c      	movs	r2, #28
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            } break;
 8000cd8:	e005      	b.n	8000ce6 <UartAction_ServoMotor+0x822>
            } break;
 8000cda:	bf00      	nop
 8000cdc:	e007      	b.n	8000cee <UartAction_ServoMotor+0x82a>
            } break;
 8000cde:	bf00      	nop
 8000ce0:	e005      	b.n	8000cee <UartAction_ServoMotor+0x82a>
            } break;
 8000ce2:	bf00      	nop
 8000ce4:	e003      	b.n	8000cee <UartAction_ServoMotor+0x82a>
            } break;
 8000ce6:	bf00      	nop
        } break;
 8000ce8:	e001      	b.n	8000cee <UartAction_ServoMotor+0x82a>
        } break;
 8000cea:	bf00      	nop
 8000cec:	e01f      	b.n	8000d2e <UartAction_ServoMotor+0x86a>
        } break;
 8000cee:	bf00      	nop
    } break;
 8000cf0:	e01d      	b.n	8000d2e <UartAction_ServoMotor+0x86a>
    case Cmd_Write_Multi_Func_ServoMotor: {
      switch (ServoMotor.UartCurrentCmd[1]) {  // 读取寄存器
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000cf4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000cf6:	f5b3 7fac 	cmp.w	r3, #344	@ 0x158
 8000cfa:	d11a      	bne.n	8000d32 <UartAction_ServoMotor+0x86e>
        case GearRatioRegister_Numerator: {    // 电子齿轮比分子分母寄存器，需要设置分子160，分母94
          switch (ServoMotor.UartCurrentCmd[2]) {
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000cfe:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d10e      	bne.n	8000d22 <UartAction_ServoMotor+0x85e>
            case 4: {
              if (uartbuf[5] == ServoMotor.UartCurrentCmd[2]) ServoMotor.Flag_Event[1] = 14;  // 重新电子齿轮比分子分母寄存器
 8000d04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000d0c:	795b      	ldrb	r3, [r3, #5]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000d12:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d103      	bne.n	8000d20 <UartAction_ServoMotor+0x85c>
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <UartAction_ServoMotor+0x878>)
 8000d1a:	220e      	movs	r2, #14
 8000d1c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            } break;
 8000d20:	bf00      	nop
          }
        } break;
 8000d22:	bf00      	nop
      }
    } break;
 8000d24:	e005      	b.n	8000d32 <UartAction_ServoMotor+0x86e>
    return;
 8000d26:	bf00      	nop
 8000d28:	e004      	b.n	8000d34 <UartAction_ServoMotor+0x870>
    } break;
 8000d2a:	bf00      	nop
 8000d2c:	e002      	b.n	8000d34 <UartAction_ServoMotor+0x870>
    } break;
 8000d2e:	bf00      	nop
 8000d30:	e000      	b.n	8000d34 <UartAction_ServoMotor+0x870>
    } break;
 8000d32:	bf00      	nop
  }
}
 8000d34:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	20000090 	.word	0x20000090

08000d40 <Event_Movement_ServoMotor>:
void Event_Movement_ServoMotor(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  // LOGI("STATE : %d", ServoMotor.Flag_Event[2]);
  switch (ServoMotor.Flag_Event[2]) {
 8000d44:	4b96      	ldr	r3, [pc, #600]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d4a:	2b1c      	cmp	r3, #28
 8000d4c:	f200 8125 	bhi.w	8000f9a <Event_Movement_ServoMotor+0x25a>
 8000d50:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <Event_Movement_ServoMotor+0x18>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000dcd 	.word	0x08000dcd
 8000d5c:	08000de1 	.word	0x08000de1
 8000d60:	08000e03 	.word	0x08000e03
 8000d64:	08000f9b 	.word	0x08000f9b
 8000d68:	08000e1b 	.word	0x08000e1b
 8000d6c:	08000f9b 	.word	0x08000f9b
 8000d70:	08000e33 	.word	0x08000e33
 8000d74:	08000f9b 	.word	0x08000f9b
 8000d78:	08000e4b 	.word	0x08000e4b
 8000d7c:	08000f9b 	.word	0x08000f9b
 8000d80:	08000e87 	.word	0x08000e87
 8000d84:	08000f9b 	.word	0x08000f9b
 8000d88:	08000ead 	.word	0x08000ead
 8000d8c:	08000f9b 	.word	0x08000f9b
 8000d90:	08000ee9 	.word	0x08000ee9
 8000d94:	08000f9b 	.word	0x08000f9b
 8000d98:	08000f0f 	.word	0x08000f0f
 8000d9c:	08000f9b 	.word	0x08000f9b
 8000da0:	08000f9b 	.word	0x08000f9b
 8000da4:	08000f9b 	.word	0x08000f9b
 8000da8:	08000f27 	.word	0x08000f27
 8000dac:	08000f9b 	.word	0x08000f9b
 8000db0:	08000f41 	.word	0x08000f41
 8000db4:	08000f51 	.word	0x08000f51
 8000db8:	08000f61 	.word	0x08000f61
 8000dbc:	08000f9b 	.word	0x08000f9b
 8000dc0:	08000f71 	.word	0x08000f71
 8000dc4:	08000f9b 	.word	0x08000f9b
 8000dc8:	08000f81 	.word	0x08000f81
    case 0: {                     // 判断是否校准
      if (!ServoMotor.IsReset) {  // 没有校准
 8000dcc:	4b74      	ldr	r3, [pc, #464]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f040 80dd 	bne.w	8000f90 <Event_Movement_ServoMotor+0x250>
        ServoMotor.Flag_Event[2] = 1;
 8000dd6:	4b72      	ldr	r3, [pc, #456]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    } break;
 8000dde:	e0d7      	b.n	8000f90 <Event_Movement_ServoMotor+0x250>
    case 1: {                                                                                                            // 没有校准的时候
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 一开始就有传感器触发的情况
 8000de0:	2102      	movs	r1, #2
 8000de2:	4870      	ldr	r0, [pc, #448]	@ (8000fa4 <Event_Movement_ServoMotor+0x264>)
 8000de4:	f003 fa9c 	bl	8004320 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d104      	bne.n	8000df8 <Event_Movement_ServoMotor+0xb8>
        ServoMotor.Flag_Event[2] = 2;
 8000dee:	4b6c      	ldr	r3, [pc, #432]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000df0:	2202      	movs	r2, #2
 8000df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      } else {
        ServoMotor.Flag_Event[2] = 2;
      }
    } break;
 8000df6:	e0d0      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
        ServoMotor.Flag_Event[2] = 2;
 8000df8:	4b69      	ldr	r3, [pc, #420]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e00:	e0cb      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 2: {  // 设备最低速度缓慢运动然后当刚离开传感器范围，随后又返回至刚触发瞬间
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e02:	4869      	ldr	r0, [pc, #420]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000e04:	f000 f94c 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，如果一开始不设置速度0的话，可能会冲出去
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 f954 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 3;                 // 等待串口返回，赋值4，超时赋值2
 8000e10:	4b63      	ldr	r3, [pc, #396]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e12:	2203      	movs	r2, #3
 8000e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e18:	e0bf      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 4: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e1a:	4863      	ldr	r0, [pc, #396]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000e1c:	f000 f940 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(1, DI1_Data_ServoON);  // 打开伺服控制Servo ON
 8000e20:	2101      	movs	r1, #1
 8000e22:	2001      	movs	r0, #1
 8000e24:	f000 f948 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 5;                                // 等待串口返回，赋值6，超时赋值4
 8000e28:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e30:	e0b3      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 6: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e32:	485d      	ldr	r0, [pc, #372]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000e34:	f000 f934 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(3, 20);  // 设置速度1
 8000e38:	2114      	movs	r1, #20
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f000 f93c 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>

      ServoMotor.Flag_Event[2] = 7;  // 等待串口返回，赋值8，超时赋值6
 8000e40:	4b57      	ldr	r3, [pc, #348]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e42:	2207      	movs	r2, #7
 8000e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e48:	e0a7      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 8: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e4a:	4857      	ldr	r0, [pc, #348]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000e4c:	f000 f928 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往左动，在左则往右动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000e50:	4b53      	ldr	r3, [pc, #332]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e52:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d105      	bne.n	8000e66 <Event_Movement_ServoMotor+0x126>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // CCW往左动JOGmode_Data_CCW
 8000e5a:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000e5e:	2003      	movs	r0, #3
 8000e60:	f000 f92a 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 8000e64:	e00a      	b.n	8000e7c <Event_Movement_ServoMotor+0x13c>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000e66:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e68:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d104      	bne.n	8000e7c <Event_Movement_ServoMotor+0x13c>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CW往右动
 8000e72:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000e76:	2003      	movs	r0, #3
 8000e78:	f000 f91e 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      }
      ServoMotor.Flag_Event[2] = 9;  // 等待串口返回，赋值10，超时赋值8
 8000e7c:	4b48      	ldr	r3, [pc, #288]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000e7e:	2209      	movs	r2, #9
 8000e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000e84:	e089      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 10: {
      if (LimitSensorOFF_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 刚好离开，马上停止
 8000e86:	2102      	movs	r1, #2
 8000e88:	4846      	ldr	r0, [pc, #280]	@ (8000fa4 <Event_Movement_ServoMotor+0x264>)
 8000e8a:	f003 fa49 	bl	8004320 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d17f      	bne.n	8000f94 <Event_Movement_ServoMotor+0x254>
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000e94:	4844      	ldr	r0, [pc, #272]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000e96:	f000 f903 	bl	80010a0 <ResetTimerFlag_ServoMotor>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，停止
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f90b 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 11;                // 等待串口返回，赋值12，超时赋值10
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000ea4:	220b      	movs	r2, #11
 8000ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    } break;
 8000eaa:	e073      	b.n	8000f94 <Event_Movement_ServoMotor+0x254>
    case 12: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000eac:	483e      	ldr	r0, [pc, #248]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000eae:	f000 f8f7 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      // 判断电机方向 ServoMotor.MotorPosition，在右则往右动，在左则往左动
      if (ServoMotor.MotorPosition == Right_Position_ServoMotor) {        // 右
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000eb4:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d105      	bne.n	8000ec8 <Event_Movement_ServoMotor+0x188>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);        // CW往右动
 8000ebc:	f241 3187 	movw	r1, #4999	@ 0x1387
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f8f9 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 8000ec6:	e00a      	b.n	8000ede <Event_Movement_ServoMotor+0x19e>
      } else if (ServoMotor.MotorPosition == Left_Position_ServoMotor) {  // 左
 8000ec8:	4b35      	ldr	r3, [pc, #212]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000eca:	f993 3025 	ldrsb.w	r3, [r3, #37]	@ 0x25
 8000ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed2:	d104      	bne.n	8000ede <Event_Movement_ServoMotor+0x19e>
        Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);       // CCW往左动
 8000ed4:	f241 3186 	movw	r1, #4998	@ 0x1386
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f8ed 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      }
      ServoMotor.Flag_Event[2] = 13;  // 等待串口返回，赋值14，超时赋值12
 8000ede:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000ee0:	220d      	movs	r2, #13
 8000ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000ee6:	e058      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 14: {
      if (LimitSensorON_ServoMotor == HAL_GPIO_ReadPin(LimitSensor_ServoMotor_GPIO_Port, LimitSensor_ServoMotor_Pin)) {  // 刚好回去
 8000ee8:	2102      	movs	r1, #2
 8000eea:	482e      	ldr	r0, [pc, #184]	@ (8000fa4 <Event_Movement_ServoMotor+0x264>)
 8000eec:	f003 fa18 	bl	8004320 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d150      	bne.n	8000f98 <Event_Movement_ServoMotor+0x258>
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000ef6:	482c      	ldr	r0, [pc, #176]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000ef8:	f000 f8d2 	bl	80010a0 <ResetTimerFlag_ServoMotor>
        Uart_Send_MovementRegister_ServoMotor(3, 0);  // 设置速度0，停止
 8000efc:	2100      	movs	r1, #0
 8000efe:	2003      	movs	r0, #3
 8000f00:	f000 f8da 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
        ServoMotor.Flag_Event[2] = 15;                // 等待串口返回，赋值16，超时赋值14
 8000f04:	4b26      	ldr	r3, [pc, #152]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f06:	220f      	movs	r2, #15
 8000f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      if (0) {  // 扭矩过大要停下来
        ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
        Uart_Send_MovementRegister_ServoMotor(3, 0);
        ServoMotor.Flag_Event[2] = 0;
      }
    } break;
 8000f0c:	e044      	b.n	8000f98 <Event_Movement_ServoMotor+0x258>
    // 缺一个开始信号
    case 16: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f0e:	4826      	ldr	r0, [pc, #152]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f10:	f000 f8c6 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_Start_Data_P2_11);
 8000f14:	2104      	movs	r1, #4
 8000f16:	2004      	movs	r0, #4
 8000f18:	f000 f8ce 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 19;  // 等待串口返回，赋值18，超时赋值16
 8000f1c:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f1e:	2213      	movs	r2, #19
 8000f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    } break;
 8000f24:	e039      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 20: {  // 设置了PT模式，发送清除脉冲的指令，设置DI2
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f26:	4820      	ldr	r0, [pc, #128]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f28:	f000 f8ba 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_End_Data_P2_11);
 8000f2c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000f30:	2004      	movs	r0, #4
 8000f32:	f000 f8c1 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      ServoMotor.Flag_Event[2] = 21;  // 等待串口返回，赋值20，超时赋值18
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f38:	2215      	movs	r2, #21
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f3e:	e02c      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 22: {  // 设置了PT模式，发送清除脉冲的指令，复位DI2
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f40:	4819      	ldr	r0, [pc, #100]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f42:	f000 f8ad 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      ServoMotor.Flag_Event[2] = 22;
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f48:	2216      	movs	r2, #22
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      // Uart_Send_MovementRegister_ServoMotor(4, DI2_PulseClear_End_Data_P2_11); // 已经归位，重置脉冲计数,写入PT模式
      // ServoMotor.Flag_Event[2] = 21; // 等待串口返回，赋值22，超时赋值20
    } break;
 8000f4e:	e024      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 23: {  // 脉冲已经重置了，设置成Sz模式
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f50:	4815      	ldr	r0, [pc, #84]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f52:	f000 f8a5 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(4, Szmode_Data_P1_01); // 已经归位，重置脉冲计数,写入PT模式
      ServoMotor.Flag_Event[2] = 22;  // 等待串口返回，赋值24，超时赋值22
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f58:	2216      	movs	r2, #22
 8000f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f5e:	e01c      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 24: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f60:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f62:	f000 f89d 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(1, DI1_Data_ServoON); // 打开伺服控制Servo ON
      ServoMotor.Flag_Event[2] = 25;  // 等待串口返回，赋值6，超时赋值4
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f68:	2219      	movs	r2, #25
 8000f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f6e:	e014      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 26: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f72:	f000 f895 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      // Uart_Send_MovementRegister_ServoMotor(3, 1); // 设置速度1
      ServoMotor.Flag_Event[2] = 27;  // 等待串口返回，赋值26，超时赋值24
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f78:	221b      	movs	r2, #27
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f7e:	e00c      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    case 28: {
      ResetTimerFlag_ServoMotor(&ServoMotor.TimerFlag[1]);
 8000f80:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <Event_Movement_ServoMotor+0x268>)
 8000f82:	f000 f88d 	bl	80010a0 <ResetTimerFlag_ServoMotor>
      ServoMotor.Flag_Event[2] = 29;  // 等待串口返回，赋值28，超时赋值26
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <Event_Movement_ServoMotor+0x260>)
 8000f88:	221d      	movs	r2, #29
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    } break;
 8000f8e:	e004      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    } break;
 8000f90:	bf00      	nop
 8000f92:	e002      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    } break;
 8000f94:	bf00      	nop
 8000f96:	e000      	b.n	8000f9a <Event_Movement_ServoMotor+0x25a>
    } break;
 8000f98:	bf00      	nop
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000090 	.word	0x20000090
 8000fa4:	40011000 	.word	0x40011000
 8000fa8:	200000c4 	.word	0x200000c4

08000fac <TimerTasks_ServoMotor>:
void TimerTasks_ServoMotor(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  UartRxdMonitor_ServoMotor(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 fd91 	bl	8001ad8 <UartRxdMonitor_ServoMotor>
  if (ServoMotor.Flag_Event[1] == 1) {  // 初始化上电延迟
 8000fb6:	4b39      	ldr	r3, [pc, #228]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fb8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d113      	bne.n	8000fe8 <TimerTasks_ServoMotor+0x3c>
    ServoMotor.TimerFlag[0]++;
 8000fc0:	4b36      	ldr	r3, [pc, #216]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b34      	ldr	r3, [pc, #208]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fca:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ServoMotor.TimerFlag[0] >= 5000) {
 8000fcc:	4b33      	ldr	r3, [pc, #204]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000fd0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d95e      	bls.n	8001096 <TimerTasks_ServoMotor+0xea>
      ServoMotor.TimerFlag[0]  = 0;
 8000fd8:	4b30      	ldr	r3, [pc, #192]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	865a      	strh	r2, [r3, #50]	@ 0x32
      ServoMotor.Flag_Event[1] = 2;  // 检查状态监控寄存器1-5状态
 8000fde:	4b2f      	ldr	r3, [pc, #188]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    if (ServoMotor.TimerFlag[0] >= 1000) {
      ServoMotor.TimerFlag[0]  = 0;
      ServoMotor.Flag_Event[1] = ServoMotor.Flag_Event[1] - 1;  // 超时没反应，返回上一次发送
    }
  }
}
 8000fe6:	e056      	b.n	8001096 <TimerTasks_ServoMotor+0xea>
  } else if (ServoMotor.Flag_Event[1] == 3 ||   //
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000fea:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d03b      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 5 ||   //
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000ff4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
  } else if (ServoMotor.Flag_Event[1] == 3 ||   //
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d036      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 7 ||   //
 8000ffc:	4b27      	ldr	r3, [pc, #156]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8000ffe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 5 ||   //
 8001002:	2b07      	cmp	r3, #7
 8001004:	d031      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 9 ||   //
 8001006:	4b25      	ldr	r3, [pc, #148]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001008:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 7 ||   //
 800100c:	2b09      	cmp	r3, #9
 800100e:	d02c      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 11 ||  //
 8001010:	4b22      	ldr	r3, [pc, #136]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001012:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 9 ||   //
 8001016:	2b0b      	cmp	r3, #11
 8001018:	d027      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 13 ||  //
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 800101c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 11 ||  //
 8001020:	2b0d      	cmp	r3, #13
 8001022:	d022      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 15 ||  //
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001026:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 13 ||  //
 800102a:	2b0f      	cmp	r3, #15
 800102c:	d01d      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 17 ||  //
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001030:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 15 ||  //
 8001034:	2b11      	cmp	r3, #17
 8001036:	d018      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 19 ||  //
 8001038:	4b18      	ldr	r3, [pc, #96]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 800103a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 17 ||  //
 800103e:	2b13      	cmp	r3, #19
 8001040:	d013      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 21 ||  //
 8001042:	4b16      	ldr	r3, [pc, #88]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001044:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 19 ||  //
 8001048:	2b15      	cmp	r3, #21
 800104a:	d00e      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 23 ||  //
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 800104e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 21 ||  //
 8001052:	2b17      	cmp	r3, #23
 8001054:	d009      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 25 ||  //
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001058:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 23 ||  //
 800105c:	2b19      	cmp	r3, #25
 800105e:	d004      	beq.n	800106a <TimerTasks_ServoMotor+0xbe>
             ServoMotor.Flag_Event[1] == 27) {  // 初始化检查指令，必须设置正确
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001062:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
             ServoMotor.Flag_Event[1] == 25 ||  //
 8001066:	2b1b      	cmp	r3, #27
 8001068:	d115      	bne.n	8001096 <TimerTasks_ServoMotor+0xea>
    ServoMotor.TimerFlag[0]++;
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 800106c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800106e:	3301      	adds	r3, #1
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001074:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (ServoMotor.TimerFlag[0] >= 1000) {
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001078:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800107a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800107e:	d30a      	bcc.n	8001096 <TimerTasks_ServoMotor+0xea>
      ServoMotor.TimerFlag[0]  = 0;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001082:	2200      	movs	r2, #0
 8001084:	865a      	strh	r2, [r3, #50]	@ 0x32
      ServoMotor.Flag_Event[1] = ServoMotor.Flag_Event[1] - 1;  // 超时没反应，返回上一次发送
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001088:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800108c:	3b01      	subs	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b02      	ldr	r3, [pc, #8]	@ (800109c <TimerTasks_ServoMotor+0xf0>)
 8001092:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000090 	.word	0x20000090

080010a0 <ResetTimerFlag_ServoMotor>:
void ResetTimerFlag_ServoMotor(uint16_t *TimerFlag) { *TimerFlag = 0; }
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	801a      	strh	r2, [r3, #0]
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <Uart_Send_MovementRegister_ServoMotor>:
void Uart_Send_MovementRegister_ServoMotor(uint8_t mode, uint16_t Data) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af02      	add	r7, sp, #8
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	80bb      	strh	r3, [r7, #4]
  // LOGI("Send mov massage");
  switch (mode) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d83d      	bhi.n	800114a <Uart_Send_MovementRegister_ServoMotor+0x92>
 80010ce:	a201      	add	r2, pc, #4	@ (adr r2, 80010d4 <Uart_Send_MovementRegister_ServoMotor+0x1c>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	080010e9 	.word	0x080010e9
 80010d8:	080010fb 	.word	0x080010fb
 80010dc:	0800110f 	.word	0x0800110f
 80010e0:	08001123 	.word	0x08001123
 80010e4:	08001137 	.word	0x08001137
    case 0: {  // 查询监视器1-5内容
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 10, MonitorRegister_1_Data, 0, Set_null_ServoMotor);
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	2212      	movs	r2, #18
 80010f0:	210a      	movs	r1, #10
 80010f2:	2003      	movs	r0, #3
 80010f4:	f000 fa2e 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80010f8:	e027      	b.n	800114a <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 1: {  // 开启 或 关闭伺服控制
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, DI1_Register_P2_10, Data, Set_null_ServoMotor);
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	4a15      	ldr	r2, [pc, #84]	@ (8001154 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8001104:	2100      	movs	r1, #0
 8001106:	2006      	movs	r0, #6
 8001108:	f000 fa24 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800110c:	e01d      	b.n	800114a <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 2: {  // 写入PT或Sz模式,写入4，设置速度模式，写入0，设置位置模式
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, PT_Szmode_Register_P1_01, Data, Set_null_ServoMotor);
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8001118:	2100      	movs	r1, #0
 800111a:	2006      	movs	r0, #6
 800111c:	f000 fa1a 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001120:	e013      	b.n	800114a <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 3: {  // 速度控制
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, JOGmode_Register_P4_05, Data, Set_null_ServoMotor);
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	f240 420a 	movw	r2, #1034	@ 0x40a
 800112c:	2100      	movs	r1, #0
 800112e:	2006      	movs	r0, #6
 8001130:	f000 fa10 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001134:	e009      	b.n	800114a <Uart_Send_MovementRegister_ServoMotor+0x92>
    case 4: {  // DI2设置0x0004-脉冲清除,0x0104	//脉冲恢复计数
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, DI2_PulseClear_Register_P2_11, Data, Set_null_ServoMotor);
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <Uart_Send_MovementRegister_ServoMotor+0x9c>)
 800113a:	9200      	str	r2, [sp, #0]
 800113c:	f240 2216 	movw	r2, #534	@ 0x216
 8001140:	2100      	movs	r1, #0
 8001142:	2006      	movs	r0, #6
 8001144:	f000 fa06 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001148:	bf00      	nop
  }
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000d0 	.word	0x200000d0

08001158 <UartSend_MonitorRegister_ServoMotor>:
void UartSend_MonitorRegister_ServoMotor(uint8_t mode) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af02      	add	r7, sp, #8
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  switch (mode) {
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b0b      	cmp	r3, #11
 8001166:	f200 8095 	bhi.w	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
 800116a:	a201      	add	r2, pc, #4	@ (adr r2, 8001170 <UartSend_MonitorRegister_ServoMotor+0x18>)
 800116c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001170:	080011a1 	.word	0x080011a1
 8001174:	080011b3 	.word	0x080011b3
 8001178:	080011c5 	.word	0x080011c5
 800117c:	080011d7 	.word	0x080011d7
 8001180:	080011e9 	.word	0x080011e9
 8001184:	080011fb 	.word	0x080011fb
 8001188:	0800120d 	.word	0x0800120d
 800118c:	08001221 	.word	0x08001221
 8001190:	08001245 	.word	0x08001245
 8001194:	08001259 	.word	0x08001259
 8001198:	0800126d 	.word	0x0800126d
 800119c:	08001281 	.word	0x08001281
    case 0: {  // 问询监视器1-5寄存器配置是否正确
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 10, MonitorRegister_1_Set, 0, Set_null_ServoMotor);
 80011a0:	4b3e      	ldr	r3, [pc, #248]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2300      	movs	r3, #0
 80011a6:	2222      	movs	r2, #34	@ 0x22
 80011a8:	210a      	movs	r1, #10
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 f9d2 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011b0:	e070      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 1: {  // 写入正确的监视器1寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_1_Set, PulseMonitor_0022H, Set_null_ServoMotor);
 80011b2:	4b3a      	ldr	r3, [pc, #232]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2300      	movs	r3, #0
 80011b8:	2222      	movs	r2, #34	@ 0x22
 80011ba:	2100      	movs	r1, #0
 80011bc:	2006      	movs	r0, #6
 80011be:	f000 f9c9 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011c2:	e067      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 2: {  // 写入正确的监视器2寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_2_Set, TorqueMonitor_0024H, Set_null_ServoMotor);
 80011c4:	4b35      	ldr	r3, [pc, #212]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	230b      	movs	r3, #11
 80011ca:	2224      	movs	r2, #36	@ 0x24
 80011cc:	2100      	movs	r1, #0
 80011ce:	2006      	movs	r0, #6
 80011d0:	f000 f9c0 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011d4:	e05e      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 3: {  // 写入正确的监视器3寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_3_Set, SpeedMonitor_0026H, Set_null_ServoMotor);
 80011d6:	4b31      	ldr	r3, [pc, #196]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2307      	movs	r3, #7
 80011dc:	2226      	movs	r2, #38	@ 0x26
 80011de:	2100      	movs	r1, #0
 80011e0:	2006      	movs	r0, #6
 80011e2:	f000 f9b7 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011e6:	e055      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 4: {  // 写入正确的监视器4寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_4_Set, Monitor_0028H, Set_null_ServoMotor);
 80011e8:	4b2c      	ldr	r3, [pc, #176]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2303      	movs	r3, #3
 80011ee:	2228      	movs	r2, #40	@ 0x28
 80011f0:	2100      	movs	r1, #0
 80011f2:	2006      	movs	r0, #6
 80011f4:	f000 f9ae 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 80011f8:	e04c      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 5: {  // 写入正确的监视器5寄存器
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, MonitorRegister_5_Set, Monitor_002AH, Set_null_ServoMotor);
 80011fa:	4b28      	ldr	r3, [pc, #160]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2300      	movs	r3, #0
 8001200:	222a      	movs	r2, #42	@ 0x2a
 8001202:	2100      	movs	r1, #0
 8001204:	2006      	movs	r0, #6
 8001206:	f000 f9a5 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800120a:	e043      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 6: {  // 查询电子齿轮比分子分母的设置
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 4, GearRatioRegister_Numerator, 0, Set_null_ServoMotor);
 800120c:	4b23      	ldr	r3, [pc, #140]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8001216:	2104      	movs	r1, #4
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f99b 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800121e:	e039      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 7: {  // 写入正确的电子齿轮比分子分母的设置，分子160，分母94，对应的皮带94mm一圈，计算得出1000脉冲/mm
      uint8_t uartsendbuf[8] = {0x00, 0xA0, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00};
 8001220:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <UartSend_MonitorRegister_ServoMotor+0x148>)
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800122a:	e883 0003 	stmia.w	r3, {r0, r1}
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Multi_Func_ServoMotor, 4, GearRatioRegister_Numerator, 0, uartsendbuf);
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800123a:	2104      	movs	r1, #4
 800123c:	2010      	movs	r0, #16
 800123e:	f000 f989 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001242:	e027      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 8: {  // 读一次脉冲清除模式，需要设置为0x11;
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 1, PulseReset_Register_P2_50, 0, Set_null_ServoMotor);
 8001244:	4b15      	ldr	r3, [pc, #84]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	f44f 7219 	mov.w	r2, #612	@ 0x264
 800124e:	2101      	movs	r1, #1
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f97f 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001256:	e01d      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 9: {  // 设置脉冲清除模式，需要设置为0x11;
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, PulseReset_Register_P2_50, PulseReset_Data_P2_50, Set_null_ServoMotor);
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2311      	movs	r3, #17
 800125e:	f44f 7219 	mov.w	r2, #612	@ 0x264
 8001262:	2100      	movs	r1, #0
 8001264:	2006      	movs	r0, #6
 8001266:	f000 f975 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800126a:	e013      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 10: {  // 读一次EEPROM的设置，0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
      Uart_ReadWriteRegister_ServoMotor(Cmd_Read_Func_ServoMotor, 1, AuxrFuncRegister_P2_30, 0, Set_null_ServoMotor);
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2300      	movs	r3, #0
 8001272:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 8001276:	2101      	movs	r1, #1
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f96b 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 800127e:	e009      	b.n	8001294 <UartSend_MonitorRegister_ServoMotor+0x13c>
    case 11: {  // 设置EEPROM的为不保存模式，0:关闭所有下述功能;1：强制软件 Servo On。5：设定可防止连续写入EEPROM,若使用通讯控制时必需将此参数设定。
      Uart_ReadWriteRegister_ServoMotor(Cmd_Write_Once_Func_ServoMotor, 0, AuxrFuncRegister_P2_30, EEPROM_Disable_P2_30, Set_null_ServoMotor);
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <UartSend_MonitorRegister_ServoMotor+0x144>)
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2305      	movs	r3, #5
 8001286:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 800128a:	2100      	movs	r1, #0
 800128c:	2006      	movs	r0, #6
 800128e:	f000 f961 	bl	8001554 <Uart_ReadWriteRegister_ServoMotor>
    } break;
 8001292:	bf00      	nop
  }
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000d0 	.word	0x200000d0
 80012a0:	08009bc0 	.word	0x08009bc0

080012a4 <Get_LRC_ServoMotor>:

uint16_t Get_LRC_ServoMotor(uint8_t *buf, uint8_t len) {
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
  uint16_t sumbuf = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	81fb      	strh	r3, [r7, #14]
  uint8_t  result = 0, result_h, result_l;
 80012b4:	2300      	movs	r3, #0
 80012b6:	72bb      	strb	r3, [r7, #10]
  uint16_t LRCbuf = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	81bb      	strh	r3, [r7, #12]
  for (uint8_t i = 0; i < len; i++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	72fb      	strb	r3, [r7, #11]
 80012c0:	e00a      	b.n	80012d8 <Get_LRC_ServoMotor+0x34>
    sumbuf += buf[i];
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	4413      	add	r3, r2
 80012d0:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i < len; i++) {
 80012d2:	7afb      	ldrb	r3, [r7, #11]
 80012d4:	3301      	adds	r3, #1
 80012d6:	72fb      	strb	r3, [r7, #11]
 80012d8:	7afa      	ldrb	r2, [r7, #11]
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d3f0      	bcc.n	80012c2 <Get_LRC_ServoMotor+0x1e>
  }
  result   = ~(sumbuf & 0xFF) + 1;
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	425b      	negs	r3, r3
 80012e6:	72bb      	strb	r3, [r7, #10]
  result_h = result / 0x10;
 80012e8:	7abb      	ldrb	r3, [r7, #10]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	727b      	strb	r3, [r7, #9]
  result_l = result % 0x10;
 80012ee:	7abb      	ldrb	r3, [r7, #10]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	723b      	strb	r3, [r7, #8]
  if (0x00 <= result_h && result_h <= 0x09) {
 80012f6:	7a7b      	ldrb	r3, [r7, #9]
 80012f8:	2b09      	cmp	r3, #9
 80012fa:	d80c      	bhi.n	8001316 <Get_LRC_ServoMotor+0x72>
    LRCbuf |= (uint16_t)(result_h + '0') << 8;
 80012fc:	7a7b      	ldrb	r3, [r7, #9]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3330      	adds	r3, #48	@ 0x30
 8001302:	b29b      	uxth	r3, r3
 8001304:	b21b      	sxth	r3, r3
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	b21b      	sxth	r3, r3
 8001312:	81bb      	strh	r3, [r7, #12]
 8001314:	e011      	b.n	800133a <Get_LRC_ServoMotor+0x96>
  } else if (0x0A <= result_h && result_h <= 0x0F) {
 8001316:	7a7b      	ldrb	r3, [r7, #9]
 8001318:	2b09      	cmp	r3, #9
 800131a:	d90e      	bls.n	800133a <Get_LRC_ServoMotor+0x96>
 800131c:	7a7b      	ldrb	r3, [r7, #9]
 800131e:	2b0f      	cmp	r3, #15
 8001320:	d80b      	bhi.n	800133a <Get_LRC_ServoMotor+0x96>
    LRCbuf |= (uint16_t)(result_h - 0x0A + 'A') << 8;
 8001322:	7a7b      	ldrb	r3, [r7, #9]
 8001324:	b29b      	uxth	r3, r3
 8001326:	3337      	adds	r3, #55	@ 0x37
 8001328:	b29b      	uxth	r3, r3
 800132a:	b21b      	sxth	r3, r3
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	81bb      	strh	r3, [r7, #12]
  }
  if (0x00 <= result_l && result_l <= 0x09) {
 800133a:	7a3b      	ldrb	r3, [r7, #8]
 800133c:	2b09      	cmp	r3, #9
 800133e:	d80a      	bhi.n	8001356 <Get_LRC_ServoMotor+0xb2>
    LRCbuf |= result_l + '0';
 8001340:	7a3b      	ldrb	r3, [r7, #8]
 8001342:	b29b      	uxth	r3, r3
 8001344:	3330      	adds	r3, #48	@ 0x30
 8001346:	b29b      	uxth	r3, r3
 8001348:	b21a      	sxth	r2, r3
 800134a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	b21b      	sxth	r3, r3
 8001352:	81bb      	strh	r3, [r7, #12]
 8001354:	e00f      	b.n	8001376 <Get_LRC_ServoMotor+0xd2>
  } else if (0x0A <= result_l && result_l <= 0x0F) {
 8001356:	7a3b      	ldrb	r3, [r7, #8]
 8001358:	2b09      	cmp	r3, #9
 800135a:	d90c      	bls.n	8001376 <Get_LRC_ServoMotor+0xd2>
 800135c:	7a3b      	ldrb	r3, [r7, #8]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	d809      	bhi.n	8001376 <Get_LRC_ServoMotor+0xd2>
    LRCbuf |= result_l - 0x0A + 'A';
 8001362:	7a3b      	ldrb	r3, [r7, #8]
 8001364:	b29b      	uxth	r3, r3
 8001366:	3337      	adds	r3, #55	@ 0x37
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21a      	sxth	r2, r3
 800136c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	b21b      	sxth	r3, r3
 8001374:	81bb      	strh	r3, [r7, #12]
  }
  return LRCbuf;
 8001376:	89bb      	ldrh	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <UartWrite_HexToAscii_AddLRC_ServoMotor>:
void UartWrite_HexToAscii_AddLRC_ServoMotor(uint8_t *buf, uint8_t len) {
 8001382:	b580      	push	{r7, lr}
 8001384:	b0c4      	sub	sp, #272	@ 0x110
 8001386:	af00      	add	r7, sp, #0
 8001388:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800138c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001390:	6018      	str	r0, [r3, #0]
 8001392:	460a      	mov	r2, r1
 8001394:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001398:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800139c:	701a      	strb	r2, [r3, #0]
  uint8_t  Sendbuf[255] = {0};
 800139e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013a6:	4618      	mov	r0, r3
 80013a8:	23ff      	movs	r3, #255	@ 0xff
 80013aa:	461a      	mov	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	f007 fdcc 	bl	8008f4a <memset>
  uint8_t  lenbuf       = 2 * len + 5;
 80013b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013b6:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	3305      	adds	r3, #5
 80013c2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  uint16_t LRCbuf       = Get_LRC_ServoMotor(buf, len);
 80013c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ca:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013d8:	4611      	mov	r1, r2
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	f7ff ff62 	bl	80012a4 <Get_LRC_ServoMotor>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
  uint8_t  buf_h, buf_l;
  Sendbuf[0]          = ':';
 80013e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013ee:	223a      	movs	r2, #58	@ 0x3a
 80013f0:	701a      	strb	r2, [r3, #0]
  Sendbuf[lenbuf - 4] = LRCbuf >> 8;
 80013f2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80013f6:	0a1b      	lsrs	r3, r3, #8
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80013fe:	3b04      	subs	r3, #4
 8001400:	b2d1      	uxtb	r1, r2
 8001402:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001406:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800140a:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 3] = LRCbuf & 0xFF;
 800140c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001410:	3b03      	subs	r3, #3
 8001412:	f8b7 210c 	ldrh.w	r2, [r7, #268]	@ 0x10c
 8001416:	b2d1      	uxtb	r1, r2
 8001418:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800141c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001420:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 2] = 0x0D;
 8001422:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001426:	3b02      	subs	r3, #2
 8001428:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800142c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001430:	210d      	movs	r1, #13
 8001432:	54d1      	strb	r1, [r2, r3]
  Sendbuf[lenbuf - 1] = 0x0A;
 8001434:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001438:	3b01      	subs	r3, #1
 800143a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800143e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001442:	210a      	movs	r1, #10
 8001444:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < len; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800144c:	e06b      	b.n	8001526 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x1a4>
    buf_h = buf[i] / 0x10;
 800144e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001452:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001456:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    buf_l = buf[i] % 0x10;
 8001466:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800146a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800146e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    if (0x00 <= buf_h && buf_h <= 0x09) {
 8001480:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001484:	2b09      	cmp	r3, #9
 8001486:	d80d      	bhi.n	80014a4 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x122>
      Sendbuf[2 * i + 1] = buf_h + '0';
 8001488:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	3301      	adds	r3, #1
 8001490:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 8001494:	3230      	adds	r2, #48	@ 0x30
 8001496:	b2d1      	uxtb	r1, r2
 8001498:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800149c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014a0:	54d1      	strb	r1, [r2, r3]
 80014a2:	e014      	b.n	80014ce <UartWrite_HexToAscii_AddLRC_ServoMotor+0x14c>
    } else if (0x0A <= buf_h && buf_h <= 0x0F) {
 80014a4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80014a8:	2b09      	cmp	r3, #9
 80014aa:	d910      	bls.n	80014ce <UartWrite_HexToAscii_AddLRC_ServoMotor+0x14c>
 80014ac:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d80c      	bhi.n	80014ce <UartWrite_HexToAscii_AddLRC_ServoMotor+0x14c>
      Sendbuf[2 * i + 1] = buf_h - 0x0A + 'A';
 80014b4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	3301      	adds	r3, #1
 80014bc:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 80014c0:	3237      	adds	r2, #55	@ 0x37
 80014c2:	b2d1      	uxtb	r1, r2
 80014c4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014c8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014cc:	54d1      	strb	r1, [r2, r3]
    }
    if (0x00 <= buf_l && buf_l <= 0x09) {
 80014ce:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 80014d2:	2b09      	cmp	r3, #9
 80014d4:	d80d      	bhi.n	80014f2 <UartWrite_HexToAscii_AddLRC_ServoMotor+0x170>
      Sendbuf[2 * i + 2] = buf_l + '0';
 80014d6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80014da:	3301      	adds	r3, #1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 80014e2:	3230      	adds	r2, #48	@ 0x30
 80014e4:	b2d1      	uxtb	r1, r2
 80014e6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014ea:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014ee:	54d1      	strb	r1, [r2, r3]
 80014f0:	e014      	b.n	800151c <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19a>
    } else if (0x0A <= buf_l && buf_l <= 0x0F) {
 80014f2:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 80014f6:	2b09      	cmp	r3, #9
 80014f8:	d910      	bls.n	800151c <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19a>
 80014fa:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	d80c      	bhi.n	800151c <UartWrite_HexToAscii_AddLRC_ServoMotor+0x19a>
      Sendbuf[2 * i + 2] = buf_l - 0x0A + 'A';
 8001502:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001506:	3301      	adds	r3, #1
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 800150e:	3237      	adds	r2, #55	@ 0x37
 8001510:	b2d1      	uxtb	r1, r2
 8001512:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001516:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800151a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < len; i++) {
 800151c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001520:	3301      	adds	r3, #1
 8001522:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800152a:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800152e:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d38a      	bcc.n	800144e <UartWrite_HexToAscii_AddLRC_ServoMotor+0xcc>
    }
  }
  // UartWrite_WirelessModule(Sendbuf, lenbuf);

  UartWrite_ServoMotor(Sendbuf, lenbuf);
 8001538:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800153c:	b29a      	uxth	r2, r3
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fa81 	bl	8001a4c <UartWrite_ServoMotor>
}
 800154a:	bf00      	nop
 800154c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <Uart_ReadWriteRegister_ServoMotor>:

void Uart_ReadWriteRegister_ServoMotor(uint8_t Read_WriteFunc, uint8_t WordsNum, uint16_t Register, uint16_t Write_Once_ByteData, uint8_t *Write_Multi_Bytes) {
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	b0c4      	sub	sp, #272	@ 0x110
 8001558:	af00      	add	r7, sp, #0
 800155a:	4605      	mov	r5, r0
 800155c:	460c      	mov	r4, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001566:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800156a:	462a      	mov	r2, r5
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001572:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001576:	4622      	mov	r2, r4
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800157e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001582:	4602      	mov	r2, r0
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800158a:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800158e:	460a      	mov	r2, r1
 8001590:	801a      	strh	r2, [r3, #0]
  uint8_t UartSendbuf[255] = {0};
 8001592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001596:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800159a:	4618      	mov	r0, r3
 800159c:	23ff      	movs	r3, #255	@ 0xff
 800159e:	461a      	mov	r2, r3
 80015a0:	2100      	movs	r1, #0
 80015a2:	f007 fcd2 	bl	8008f4a <memset>
  uint8_t lenbuf           = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
  UartSendbuf[0]           = ServoMotor.address;
 80015ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001758 <Uart_ReadWriteRegister_ServoMotor+0x204>)
 80015ae:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80015b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015ba:	701a      	strb	r2, [r3, #0]
  UartSendbuf[1]           = Read_WriteFunc;
 80015bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015c4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015c8:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	705a      	strb	r2, [r3, #1]
  UartSendbuf[2]           = Register >> 8;
 80015d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015e8:	709a      	strb	r2, [r3, #2]
  UartSendbuf[3]           = Register & 0xFF;
 80015ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015fe:	70da      	strb	r2, [r3, #3]
  switch (Read_WriteFunc) {
 8001600:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001604:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b10      	cmp	r3, #16
 800160c:	d037      	beq.n	800167e <Uart_ReadWriteRegister_ServoMotor+0x12a>
 800160e:	2b10      	cmp	r3, #16
 8001610:	f300 809d 	bgt.w	800174e <Uart_ReadWriteRegister_ServoMotor+0x1fa>
 8001614:	2b03      	cmp	r3, #3
 8001616:	d002      	beq.n	800161e <Uart_ReadWriteRegister_ServoMotor+0xca>
 8001618:	2b06      	cmp	r3, #6
 800161a:	d014      	beq.n	8001646 <Uart_ReadWriteRegister_ServoMotor+0xf2>
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
        UartSendbuf[7 + i] = Write_Multi_Bytes[i];
      }
    } break;
    default:
      return;
 800161c:	e097      	b.n	800174e <Uart_ReadWriteRegister_ServoMotor+0x1fa>
      lenbuf         = 6;
 800161e:	2306      	movs	r3, #6
 8001620:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = 0x00;
 8001624:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800162c:	2200      	movs	r2, #0
 800162e:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = WordsNum;
 8001630:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001638:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800163c:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	715a      	strb	r2, [r3, #5]
    } break;
 8001644:	e063      	b.n	800170e <Uart_ReadWriteRegister_ServoMotor+0x1ba>
      lenbuf         = 6;
 8001646:	2306      	movs	r3, #6
 8001648:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = Write_Once_ByteData >> 8;
 800164c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001650:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	b29b      	uxth	r3, r3
 800165a:	b2da      	uxtb	r2, r3
 800165c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001664:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = Write_Once_ByteData & 0xFF;
 8001666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800166a:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800167a:	715a      	strb	r2, [r3, #5]
    } break;
 800167c:	e047      	b.n	800170e <Uart_ReadWriteRegister_ServoMotor+0x1ba>
      lenbuf         = 7 + 2 * WordsNum;
 800167e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001682:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	3307      	adds	r3, #7
 800168e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
      UartSendbuf[4] = 0x00;
 8001692:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800169a:	2200      	movs	r2, #0
 800169c:	711a      	strb	r2, [r3, #4]
      UartSendbuf[5] = WordsNum;
 800169e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016a6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016aa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	715a      	strb	r2, [r3, #5]
      UartSendbuf[6] = 2 * WordsNum;
 80016b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016b6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016c8:	719a      	strb	r2, [r3, #6]
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80016d0:	e012      	b.n	80016f8 <Uart_ReadWriteRegister_ServoMotor+0x1a4>
        UartSendbuf[7 + i] = Write_Multi_Bytes[i];
 80016d2:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80016d6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80016da:	441a      	add	r2, r3
 80016dc:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80016e0:	3307      	adds	r3, #7
 80016e2:	7811      	ldrb	r1, [r2, #0]
 80016e4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016e8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016ec:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < 2 * WordsNum; i++) {
 80016ee:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80016f2:	3301      	adds	r3, #1
 80016f4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80016f8:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80016fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001700:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	429a      	cmp	r2, r3
 800170a:	dbe2      	blt.n	80016d2 <Uart_ReadWriteRegister_ServoMotor+0x17e>
    } break;
 800170c:	bf00      	nop
  }
  ServoMotor.UartCurrentCmd[0] = Read_WriteFunc;
 800170e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001712:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <Uart_ReadWriteRegister_ServoMotor+0x204>)
 800171c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  ServoMotor.UartCurrentCmd[1] = Register;
 800171e:	4a0e      	ldr	r2, [pc, #56]	@ (8001758 <Uart_ReadWriteRegister_ServoMotor+0x204>)
 8001720:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001724:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	85d3      	strh	r3, [r2, #46]	@ 0x2e
  ServoMotor.UartCurrentCmd[2] = WordsNum;
 800172c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001730:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <Uart_ReadWriteRegister_ServoMotor+0x204>)
 800173a:	861a      	strh	r2, [r3, #48]	@ 0x30
  UartWrite_HexToAscii_AddLRC_ServoMotor(UartSendbuf, lenbuf);
 800173c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fe1b 	bl	8001382 <UartWrite_HexToAscii_AddLRC_ServoMotor>
 800174c:	e000      	b.n	8001750 <Uart_ReadWriteRegister_ServoMotor+0x1fc>
      return;
 800174e:	bf00      	nop
}
 8001750:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	20000090 	.word	0x20000090

0800175c <SetStatus_Power_ServoMotor>:

void SetStatus_Power_ServoMotor(uint8_t status) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(Power_ServoMotor_GPIO_Port, Power_ServoMotor_Pin, status);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	461a      	mov	r2, r3
 800176a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <SetStatus_Power_ServoMotor+0x28>)
 8001770:	f002 fded 	bl	800434e <HAL_GPIO_WritePin>
  ServoMotor.IsPowerOn = Power_ServoMotor_Pin == PowerON_ServoMotor ? 1 : 0;
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <SetStatus_Power_ServoMotor+0x2c>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40010800 	.word	0x40010800
 8001788:	20000090 	.word	0x20000090

0800178c <UartReceiveIT_ServoMotor>:
uint8_t GetStatus_Power_ServoMotor(void) { return ServoMotor.IsPowerOn; }

void UartReceiveIT_ServoMotor(void) {                                       // 读写器串口接收
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart_ServoMotor, (uint8_t *)Rxdbuf_ServoMotor, 1);  // 重新启动接收中断
 8001790:	2201      	movs	r2, #1
 8001792:	4903      	ldr	r1, [pc, #12]	@ (80017a0 <UartReceiveIT_ServoMotor+0x14>)
 8001794:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <UartReceiveIT_ServoMotor+0x18>)
 8001796:	f004 ff5e 	bl	8006656 <HAL_UART_Receive_IT>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000d4 	.word	0x200000d4
 80017a4:	20000424 	.word	0x20000424

080017a8 <UartGetData_ServoMotor>:
void UartGetData_ServoMotor(void) {  // 处理接收到的数据到新的数组，并重新接收
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  UartRegroup_ASCII_ServoMotor();
 80017ac:	f000 f8e6 	bl	800197c <UartRegroup_ASCII_ServoMotor>

  UartReceiveIT_ServoMotor();
 80017b0:	f7ff ffec 	bl	800178c <UartReceiveIT_ServoMotor>
  //	UartRxd_ServoMotor[CntRxd_ServoMotor] = Rxdbuf_ServoMotor[0];
  //	CntRxd_ServoMotor++;
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <Get_Regroup_ASCII>:

uint8_t Get_Regroup_ASCII(uint8_t data, uint8_t H_L) {
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
  uint8_t databuf;
  if ('0' <= data && data <= '9') {
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80017cc:	d906      	bls.n	80017dc <Get_Regroup_ASCII+0x24>
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b39      	cmp	r3, #57	@ 0x39
 80017d2:	d803      	bhi.n	80017dc <Get_Regroup_ASCII+0x24>
    databuf = data - '0';
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	3b30      	subs	r3, #48	@ 0x30
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e008      	b.n	80017ee <Get_Regroup_ASCII+0x36>
  } else if ('A' <= data && data <= 'F') {
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b40      	cmp	r3, #64	@ 0x40
 80017e0:	d905      	bls.n	80017ee <Get_Regroup_ASCII+0x36>
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b46      	cmp	r3, #70	@ 0x46
 80017e6:	d802      	bhi.n	80017ee <Get_Regroup_ASCII+0x36>
    databuf = data - 'A' + 0x0A;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	3b37      	subs	r3, #55	@ 0x37
 80017ec:	73fb      	strb	r3, [r7, #15]
  }
  if (H_L == 0) {
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <Get_Regroup_ASCII+0x44>
    return databuf << 4;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	e005      	b.n	8001808 <Get_Regroup_ASCII+0x50>
  } else if (H_L == 1) {
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <Get_Regroup_ASCII+0x4e>
    return databuf;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	e000      	b.n	8001808 <Get_Regroup_ASCII+0x50>
  }
  return 0;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
	...

08001814 <moteruart_receive>:
/****************************自己的***************************************/
void moteruart_receive(void) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 800181a:	af00      	add	r7, sp, #0
  uint8_t  len    = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
  uint8_t  lenbuf = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
  uint8_t  buf[255];
  uint8_t  uartbuf[255];
  uint32_t mm;
  // LOGI("SUCESS UART MOTOR");

  len    = UartRead_ServoMotor(buf, sizeof(buf));
 8001828:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800182c:	21ff      	movs	r1, #255	@ 0xff
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f920 	bl	8001a74 <UartRead_ServoMotor>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3206 	strb.w	r3, [r7, #518]	@ 0x206
  lenbuf = len / 2;
 800183a:	f897 3206 	ldrb.w	r3, [r7, #518]	@ 0x206
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
  for (uint8_t i = 0; i < lenbuf; i++) {
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
 800184a:	e02a      	b.n	80018a2 <moteruart_receive+0x8e>
    uartbuf[i] = Get_Regroup_ASCII(buf[2 * i], 0) | Get_Regroup_ASCII(buf[2 * i + 1], 1);
 800184c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001856:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ffaa 	bl	80017b8 <Get_Regroup_ASCII>
 8001864:	4603      	mov	r3, r0
 8001866:	461c      	mov	r4, r3
 8001868:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	3301      	adds	r3, #1
 8001870:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001874:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	2101      	movs	r1, #1
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff9b 	bl	80017b8 <Get_Regroup_ASCII>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800188a:	4322      	orrs	r2, r4
 800188c:	b2d1      	uxtb	r1, r2
 800188e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001892:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8001896:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < lenbuf; i++) {
 8001898:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800189c:	3301      	adds	r3, #1
 800189e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
 80018a2:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 80018a6:	f897 3205 	ldrb.w	r3, [r7, #517]	@ 0x205
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d3ce      	bcc.n	800184c <moteruart_receive+0x38>
  }

  if (uartbuf[0] != ServoMotor.address && uartbuf[1] != (uint8_t)(ServoMotor.UartCurrentCmd[0] & 0xFF)) {
 80018ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <moteruart_receive+0x154>)
 80018ba:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80018be:	429a      	cmp	r2, r3
 80018c0:	d012      	beq.n	80018e8 <moteruart_receive+0xd4>
 80018c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ca:	785a      	ldrb	r2, [r3, #1]
 80018cc:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <moteruart_receive+0x154>)
 80018ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d008      	beq.n	80018e8 <moteruart_receive+0xd4>
    LOGI("address error ");
 80018d6:	f001 fbcf 	bl	8003078 <HAL_GetTick>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a23      	ldr	r2, [pc, #140]	@ (800196c <moteruart_receive+0x158>)
 80018de:	4619      	mov	r1, r3
 80018e0:	4823      	ldr	r0, [pc, #140]	@ (8001970 <moteruart_receive+0x15c>)
 80018e2:	f007 fadd 	bl	8008ea0 <iprintf>
 80018e6:	e03a      	b.n	800195e <moteruart_receive+0x14a>
    return;
  }

  switch (uartbuf[1]) {
 80018e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018f0:	785b      	ldrb	r3, [r3, #1]
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d032      	beq.n	800195c <moteruart_receive+0x148>
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	dc31      	bgt.n	800195e <moteruart_receive+0x14a>
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d002      	beq.n	8001904 <moteruart_receive+0xf0>
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d01d      	beq.n	800193e <moteruart_receive+0x12a>
 8001902:	e02c      	b.n	800195e <moteruart_receive+0x14a>
    case Cmd_Read_Func_ServoMotor:
      motor_state_reg[0] = uartbuf[3];
 8001904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001908:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800190c:	78da      	ldrb	r2, [r3, #3]
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <moteruart_receive+0x160>)
 8001910:	701a      	strb	r2, [r3, #0]
      motor_state_reg[1] = uartbuf[4];
 8001912:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001916:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800191a:	791a      	ldrb	r2, [r3, #4]
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <moteruart_receive+0x160>)
 800191e:	705a      	strb	r2, [r3, #1]
      motor_state_reg[2] = uartbuf[5];
 8001920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001924:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001928:	795a      	ldrb	r2, [r3, #5]
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <moteruart_receive+0x160>)
 800192c:	709a      	strb	r2, [r3, #2]
      motor_state_reg[3] = uartbuf[6];
 800192e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001932:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001936:	799a      	ldrb	r2, [r3, #6]
 8001938:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <moteruart_receive+0x160>)
 800193a:	70da      	strb	r2, [r3, #3]

      break;
 800193c:	e00f      	b.n	800195e <moteruart_receive+0x14a>
    case Cmd_Write_Once_Func_ServoMotor:
      motor_ack[0] = uartbuf[4];
 800193e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001942:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001946:	791a      	ldrb	r2, [r3, #4]
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <moteruart_receive+0x164>)
 800194a:	701a      	strb	r2, [r3, #0]
      motor_ack[1] = uartbuf[5];
 800194c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001950:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001954:	795a      	ldrb	r2, [r3, #5]
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <moteruart_receive+0x164>)
 8001958:	705a      	strb	r2, [r3, #1]
      break;
 800195a:	e000      	b.n	800195e <moteruart_receive+0x14a>
    case Cmd_Write_Multi_Func_ServoMotor:
      break;
 800195c:	bf00      	nop

  // for (int i = 0; i < 8; i++)  //
  //   LOGI("data is %02x", uartbuf[i]);
  // mm = get_Position_mm(motor_state_reg, 4);
  // LOGI("distance is %d", mm);
}
 800195e:	f507 7703 	add.w	r7, r7, #524	@ 0x20c
 8001962:	46bd      	mov	sp, r7
 8001964:	bd90      	pop	{r4, r7, pc}
 8001966:	bf00      	nop
 8001968:	20000090 	.word	0x20000090
 800196c:	0800a494 	.word	0x0800a494
 8001970:	08009bc8 	.word	0x08009bc8
 8001974:	200001e0 	.word	0x200001e0
 8001978:	200001dc 	.word	0x200001dc

0800197c <UartRegroup_ASCII_ServoMotor>:

/*******************************************************************/

void UartRegroup_ASCII_ServoMotor(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  // static bool clear_falg;
  if (Flag_UartRegroup_ASCII_ServoMotor == 2) {
 8001980:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d108      	bne.n	800199a <UartRegroup_ASCII_ServoMotor+0x1e>
    Flag_UartRegroup_ASCII_ServoMotor = Rxdbuf_ServoMotor[0] == 0x0D ? 3 : 1;
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <UartRegroup_ASCII_ServoMotor+0xb8>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b0d      	cmp	r3, #13
 800198e:	d101      	bne.n	8001994 <UartRegroup_ASCII_ServoMotor+0x18>
 8001990:	2203      	movs	r2, #3
 8001992:	e000      	b.n	8001996 <UartRegroup_ASCII_ServoMotor+0x1a>
 8001994:	2201      	movs	r2, #1
 8001996:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 8001998:	701a      	strb	r2, [r3, #0]
  }
  switch (Flag_UartRegroup_ASCII_ServoMotor) {
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d844      	bhi.n	8001a2c <UartRegroup_ASCII_ServoMotor+0xb0>
 80019a2:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <UartRegroup_ASCII_ServoMotor+0x2c>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019bd 	.word	0x080019bd
 80019ac:	080019cd 	.word	0x080019cd
 80019b0:	080019eb 	.word	0x080019eb
 80019b4:	08001a03 	.word	0x08001a03
 80019b8:	08001a1f 	.word	0x08001a1f
    case 0: {  // 帧头必须是':'(0x3A)
      if (Rxdbuf_ServoMotor[0] == ':') Flag_UartRegroup_ASCII_ServoMotor = 1;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <UartRegroup_ASCII_ServoMotor+0xb8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80019c2:	d130      	bne.n	8001a26 <UartRegroup_ASCII_ServoMotor+0xaa>
 80019c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
    } break;
 80019ca:	e02c      	b.n	8001a26 <UartRegroup_ASCII_ServoMotor+0xaa>
    case 1: {  // 高字节
      UartRxd_ServoMotor[CntRxd_ServoMotor++] = Rxdbuf_ServoMotor[0];
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <UartRegroup_ASCII_ServoMotor+0xbc>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	b2d1      	uxtb	r1, r2
 80019d4:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <UartRegroup_ASCII_ServoMotor+0xbc>)
 80019d6:	7011      	strb	r1, [r2, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <UartRegroup_ASCII_ServoMotor+0xb8>)
 80019dc:	7819      	ldrb	r1, [r3, #0]
 80019de:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <UartRegroup_ASCII_ServoMotor+0xc0>)
 80019e0:	5499      	strb	r1, [r3, r2]
      Flag_UartRegroup_ASCII_ServoMotor       = 2;
 80019e2:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	701a      	strb	r2, [r3, #0]
    } break;
 80019e8:	e020      	b.n	8001a2c <UartRegroup_ASCII_ServoMotor+0xb0>
    case 2: {  // 低字节
      UartRxd_ServoMotor[CntRxd_ServoMotor++] = Rxdbuf_ServoMotor[0];
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <UartRegroup_ASCII_ServoMotor+0xbc>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	b2d1      	uxtb	r1, r2
 80019f2:	4a11      	ldr	r2, [pc, #68]	@ (8001a38 <UartRegroup_ASCII_ServoMotor+0xbc>)
 80019f4:	7011      	strb	r1, [r2, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <UartRegroup_ASCII_ServoMotor+0xb8>)
 80019fa:	7819      	ldrb	r1, [r3, #0]
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <UartRegroup_ASCII_ServoMotor+0xc0>)
 80019fe:	5499      	strb	r1, [r3, r2]
    } break;
 8001a00:	e014      	b.n	8001a2c <UartRegroup_ASCII_ServoMotor+0xb0>
    case 3: {  // 0x0D
      Flag_UartRegroup_ASCII_ServoMotor = 4;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <UartRegroup_ASCII_ServoMotor+0xb4>)
 8001a04:	2204      	movs	r2, #4
 8001a06:	701a      	strb	r2, [r3, #0]
      if (ServoMotor.Flag_Event[2] >= 22) {
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <UartRegroup_ASCII_ServoMotor+0xc4>)
 8001a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a0e:	2b15      	cmp	r3, #21
 8001a10:	d90b      	bls.n	8001a2a <UartRegroup_ASCII_ServoMotor+0xae>
        // if (!clear_falg) {
        //   memset(UartRxd_ServoMotor, 0, 255);
        //   clear_falg = true;
        // }
        moteruart_receive();
 8001a12:	f7ff feff 	bl	8001814 <moteruart_receive>
        // enterQueueEvent(EVENT_MotorUart);
        Servo.uart_recv_state = true;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <UartRegroup_ASCII_ServoMotor+0xc8>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	725a      	strb	r2, [r3, #9]
        // LOGI("EVENT MOTOR");
      }
    } break;
 8001a1c:	e005      	b.n	8001a2a <UartRegroup_ASCII_ServoMotor+0xae>
    case 4: {  // 0x0A
      Flag_UartRxdMonitor_ServoMotor = 1;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <UartRegroup_ASCII_ServoMotor+0xcc>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
    } break;
 8001a24:	e002      	b.n	8001a2c <UartRegroup_ASCII_ServoMotor+0xb0>
    } break;
 8001a26:	bf00      	nop
 8001a28:	e000      	b.n	8001a2c <UartRegroup_ASCII_ServoMotor+0xb0>
    } break;
 8001a2a:	bf00      	nop
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200001d8 	.word	0x200001d8
 8001a34:	200000d4 	.word	0x200000d4
 8001a38:	200000d5 	.word	0x200000d5
 8001a3c:	200000d8 	.word	0x200000d8
 8001a40:	20000090 	.word	0x20000090
 8001a44:	200009ac 	.word	0x200009ac
 8001a48:	200001d7 	.word	0x200001d7

08001a4c <UartWrite_ServoMotor>:

void UartWrite_ServoMotor(uint8_t *pData, uint16_t Size) {  // 发送给读写器
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart_ServoMotor, pData, Size, 1000);
 8001a58:	887a      	ldrh	r2, [r7, #2]
 8001a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <UartWrite_ServoMotor+0x24>)
 8001a62:	f004 fd75 	bl	8006550 <HAL_UART_Transmit>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000424 	.word	0x20000424

08001a74 <UartRead_ServoMotor>:
uint8_t UartRead_ServoMotor(uint8_t *buf, uint8_t len) {
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  if (len > CntRxd_ServoMotor) {
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <UartRead_ServoMotor+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d902      	bls.n	8001a90 <UartRead_ServoMotor+0x1c>
    len = CntRxd_ServoMotor;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <UartRead_ServoMotor+0x58>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	70fb      	strb	r3, [r7, #3]
  }
  for (i = 0; i < len; i++) {
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e009      	b.n	8001aaa <UartRead_ServoMotor+0x36>
    buf[i] = UartRxd_ServoMotor[i];
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	440b      	add	r3, r1
 8001a9e:	490c      	ldr	r1, [pc, #48]	@ (8001ad0 <UartRead_ServoMotor+0x5c>)
 8001aa0:	5c8a      	ldrb	r2, [r1, r2]
 8001aa2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d3f1      	bcc.n	8001a96 <UartRead_ServoMotor+0x22>
  }
  CntRxd_ServoMotor                 = 0;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <UartRead_ServoMotor+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
  Flag_UartRegroup_ASCII_ServoMotor = 0;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <UartRead_ServoMotor+0x60>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
  return len;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200000d5 	.word	0x200000d5
 8001ad0:	200000d8 	.word	0x200000d8
 8001ad4:	200001d8 	.word	0x200001d8

08001ad8 <UartRxdMonitor_ServoMotor>:
void UartRxdMonitor_ServoMotor(uint8_t time_ms) {
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  static uint8_t cnt_bkp    = 0;
  static uint8_t idle_timer = 0;
  if (CntRxd_ServoMotor > 0) {
 8001ae2:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <UartRxdMonitor_ServoMotor+0x70>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d026      	beq.n	8001b38 <UartRxdMonitor_ServoMotor+0x60>
    if (cnt_bkp != CntRxd_ServoMotor) {
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <UartRxdMonitor_ServoMotor+0x74>)
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <UartRxdMonitor_ServoMotor+0x70>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d007      	beq.n	8001b06 <UartRxdMonitor_ServoMotor+0x2e>
      cnt_bkp    = CntRxd_ServoMotor;
 8001af6:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <UartRxdMonitor_ServoMotor+0x70>)
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <UartRxdMonitor_ServoMotor+0x74>)
 8001afc:	701a      	strb	r2, [r3, #0]
      idle_timer = 0;
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <UartRxdMonitor_ServoMotor+0x78>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
      }
    }
  } else {
    cnt_bkp = 0;
  }
}
 8001b04:	e01b      	b.n	8001b3e <UartRxdMonitor_ServoMotor+0x66>
      if (idle_timer < 10) {
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <UartRxdMonitor_ServoMotor+0x78>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b09      	cmp	r3, #9
 8001b0c:	d817      	bhi.n	8001b3e <UartRxdMonitor_ServoMotor+0x66>
        idle_timer += time_ms;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <UartRxdMonitor_ServoMotor+0x78>)
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4413      	add	r3, r2
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <UartRxdMonitor_ServoMotor+0x78>)
 8001b1a:	701a      	strb	r2, [r3, #0]
        if (idle_timer >= 10) {
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <UartRxdMonitor_ServoMotor+0x78>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	d90c      	bls.n	8001b3e <UartRxdMonitor_ServoMotor+0x66>
          CntRxd_ServoMotor                 = 0;
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <UartRxdMonitor_ServoMotor+0x70>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
          Flag_UartRegroup_ASCII_ServoMotor = 0;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <UartRxdMonitor_ServoMotor+0x7c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
          Flag_UartRxdMonitor_ServoMotor    = 1;
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <UartRxdMonitor_ServoMotor+0x80>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
}
 8001b36:	e002      	b.n	8001b3e <UartRxdMonitor_ServoMotor+0x66>
    cnt_bkp = 0;
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <UartRxdMonitor_ServoMotor+0x74>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	200000d5 	.word	0x200000d5
 8001b4c:	200001e4 	.word	0x200001e4
 8001b50:	200001e5 	.word	0x200001e5
 8001b54:	200001d8 	.word	0x200001d8
 8001b58:	200001d7 	.word	0x200001d7

08001b5c <UartDriver_ServoMotor>:
void UartDriver_ServoMotor(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0c0      	sub	sp, #256	@ 0x100
 8001b60:	af00      	add	r7, sp, #0
  uint8_t len;
  uint8_t buf[255] = {0};
 8001b62:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001b66:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	23ff      	movs	r3, #255	@ 0xff
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2100      	movs	r1, #0
 8001b72:	f007 f9ea 	bl	8008f4a <memset>
  if (Flag_UartRxdMonitor_ServoMotor) {
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <UartDriver_ServoMotor+0x50>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d011      	beq.n	8001ba2 <UartDriver_ServoMotor+0x46>
    Flag_UartRxdMonitor_ServoMotor = 0;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <UartDriver_ServoMotor+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
    len                            = UartRead_ServoMotor(buf, sizeof(buf));
 8001b84:	463b      	mov	r3, r7
 8001b86:	21ff      	movs	r1, #255	@ 0xff
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff73 	bl	8001a74 <UartRead_ServoMotor>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
    UartAction_ServoMotor(buf, len);
 8001b94:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc91 	bl	80004c4 <UartAction_ServoMotor>
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200001d7 	.word	0x200001d7

08001bb0 <HAL_UART_RxCpltCallback>:

#include "SystemTasks.h"

#include "module_driver/driver_upper.h"
#include "module_driver/driver_wireless.h"
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  // }
  // if (huart->Instance == UartX_WirelessModule)
  // {
  // 	UartGetData_WirelessModule(); // 处理接收到的数据
  // }
  if (huart->Instance == UartX_ServoMotor) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_UART_RxCpltCallback+0x20>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_RxCpltCallback+0x16>
    UartGetData_ServoMotor();  // 处理接收到的数据
 8001bc2:	f7ff fdf1 	bl	80017a8 <UartGetData_ServoMotor>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  if (huart == GetWireLessHandle()) {
 8001be0:	f006 fee4 	bl	80089ac <GetWireLessHandle>
 8001be4:	4602      	mov	r2, r0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d102      	bne.n	8001bf2 <HAL_UARTEx_RxEventCallback+0x1e>
    receive_rx_data();
 8001bec:	f006 ffac 	bl	8008b48 <receive_rx_data>
  } else if (huart == GetUpperUartHandle()) {
    upper_receive_rx_data();
  }
}
 8001bf0:	e007      	b.n	8001c02 <HAL_UARTEx_RxEventCallback+0x2e>
  } else if (huart == GetUpperUartHandle()) {
 8001bf2:	f006 fda1 	bl	8008738 <GetUpperUartHandle>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_UARTEx_RxEventCallback+0x2e>
    upper_receive_rx_data();
 8001bfe:	f006 fe63 	bl	80088c8 <upper_receive_rx_data>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)  // 1ms
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    // TimerTasks_WirelessModule();
    // TimerTasks_Reader15693();
    TimerTasks_ServoMotor();
 8001c1e:	f7ff f9c5 	bl	8000fac <TimerTasks_ServoMotor>
  }
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40012c00 	.word	0x40012c00

08001c30 <UartWrite_WirelessModule>:
	UartRxd_WirelessModule[CntRxd_WirelessModule] = Rxdbuf_WirelessModule[0];
	CntRxd_WirelessModule++;
	UartReceiveIT_WirelessModule();
}
void UartWrite_WirelessModule(uint8_t *pData, uint16_t Size)
{//发送给读写器
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart_WirelessModule,pData,Size,1000);
 8001c3c:	887a      	ldrh	r2, [r7, #2]
 8001c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4803      	ldr	r0, [pc, #12]	@ (8001c54 <UartWrite_WirelessModule+0x24>)
 8001c46:	f004 fc83 	bl	8006550 <HAL_UART_Transmit>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000034c 	.word	0x2000034c

08001c58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c6a:	4a19      	ldr	r2, [pc, #100]	@ (8001cd0 <MX_ADC1_Init+0x78>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c82:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001c86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c94:	480d      	ldr	r0, [pc, #52]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001c96:	f001 f9f9 	bl	800308c <HAL_ADC_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ca0:	f000 fb13 	bl	80022ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <MX_ADC1_Init+0x74>)
 8001cb6:	f001 fad3 	bl	8003260 <HAL_ADC_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001cc0:	f000 fb03 	bl	80022ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200001e8 	.word	0x200001e8
 8001cd0:	40012400 	.word	0x40012400

08001cd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a14      	ldr	r2, [pc, #80]	@ (8001d40 <HAL_ADC_MspInit+0x6c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d121      	bne.n	8001d38 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_ADC_MspInit+0x70>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_ContactPoint_Pin|ADC_BAT_Pin|ADC_CurrentDetection_Pin;
 8001d24:	23b0      	movs	r3, #176	@ 0xb0
 8001d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <HAL_ADC_MspInit+0x74>)
 8001d34:	f002 f960 	bl	8003ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40012400 	.word	0x40012400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800

08001d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d52:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	4a19      	ldr	r2, [pc, #100]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6153      	str	r3, [r2, #20]
 8001d5e:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d6a:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6153      	str	r3, [r2, #20]
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <MX_DMA_Init+0x70>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	200f      	movs	r0, #15
 8001d88:	f001 fc7b 	bl	8003682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d8c:	200f      	movs	r0, #15
 8001d8e:	f001 fc94 	bl	80036ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	2010      	movs	r0, #16
 8001d98:	f001 fc73 	bl	8003682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d9c:	2010      	movs	r0, #16
 8001d9e:	f001 fc8c 	bl	80036ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	203a      	movs	r0, #58	@ 0x3a
 8001da8:	f001 fc6b 	bl	8003682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001dac:	203a      	movs	r0, #58	@ 0x3a
 8001dae:	f001 fc84 	bl	80036ba <HAL_NVIC_EnableIRQ>

}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd4:	4b44      	ldr	r3, [pc, #272]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a43      	ldr	r2, [pc, #268]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001dda:	f043 0310 	orr.w	r3, r3, #16
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b41      	ldr	r3, [pc, #260]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dec:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001df2:	f043 0320 	orr.w	r3, r3, #32
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	4b38      	ldr	r3, [pc, #224]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a37      	ldr	r2, [pc, #220]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b35      	ldr	r3, [pc, #212]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a31      	ldr	r2, [pc, #196]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <MX_GPIO_Init+0x128>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Power_EStopLED_Pin|Power_Host_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8001e3a:	482c      	ldr	r0, [pc, #176]	@ (8001eec <MX_GPIO_Init+0x12c>)
 8001e3c:	f002 fa87 	bl	800434e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power_Sensor_GPIO_Port, Power_Sensor_Pin, GPIO_PIN_SET);
 8001e40:	2201      	movs	r2, #1
 8001e42:	2101      	movs	r1, #1
 8001e44:	4829      	ldr	r0, [pc, #164]	@ (8001eec <MX_GPIO_Init+0x12c>)
 8001e46:	f002 fa82 	bl	800434e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_DetectionSwitch_Pin|Power_BLDCMotor_Pin|Power_WirelessModule_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 6114 	mov.w	r1, #2368	@ 0x940
 8001e50:	4827      	ldr	r0, [pc, #156]	@ (8001ef0 <MX_GPIO_Init+0x130>)
 8001e52:	f002 fa7c 	bl	800434e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Power_Reader15693_Pin|Power_Lidar2_Pin, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001e5c:	4824      	ldr	r0, [pc, #144]	@ (8001ef0 <MX_GPIO_Init+0x130>)
 8001e5e:	f002 fa76 	bl	800434e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Power_Lidar1_Pin|Direction_Ctl_BLDCMotor_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2118      	movs	r1, #24
 8001e66:	4823      	ldr	r0, [pc, #140]	@ (8001ef4 <MX_GPIO_Init+0x134>)
 8001e68:	f002 fa71 	bl	800434e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Power_EStopLED_Pin|Power_Sensor_Pin|Power_Host_Pin;
 8001e6c:	f242 2301 	movw	r3, #8705	@ 0x2201
 8001e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	4819      	ldr	r0, [pc, #100]	@ (8001eec <MX_GPIO_Init+0x12c>)
 8001e86:	f002 f8b7 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Input_Sensor3_Pin|Input_Sensor1_Pin|Input_Sensor2_Pin|Input_EmergencyStopButton_Pin;
 8001e8a:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4813      	ldr	r0, [pc, #76]	@ (8001eec <MX_GPIO_Init+0x12c>)
 8001ea0:	f002 f8aa 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ADC_DetectionSwitch_Pin|Power_BLDCMotor_Pin|Power_WirelessModule_Pin|Power_Reader15693_Pin
 8001ea4:	f649 1340 	movw	r3, #39232	@ 0x9940
 8001ea8:	613b      	str	r3, [r7, #16]
                          |Power_Lidar2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480c      	ldr	r0, [pc, #48]	@ (8001ef0 <MX_GPIO_Init+0x130>)
 8001ebe:	f002 f89b 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Power_Lidar1_Pin|Direction_Ctl_BLDCMotor_Pin;
 8001ec2:	2318      	movs	r3, #24
 8001ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4806      	ldr	r0, [pc, #24]	@ (8001ef4 <MX_GPIO_Init+0x134>)
 8001eda:	f002 f88d 	bl	8003ff8 <HAL_GPIO_Init>

}
 8001ede:	bf00      	nop
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40011000 	.word	0x40011000
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	40010c00 	.word	0x40010c00

08001ef8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001efe:	4a13      	ldr	r2, [pc, #76]	@ (8001f4c <MX_I2C1_Init+0x54>)
 8001f00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f04:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <MX_I2C1_Init+0x58>)
 8001f06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	@ (8001f48 <MX_I2C1_Init+0x50>)
 8001f36:	f002 fa23 	bl	8004380 <HAL_I2C_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f40:	f000 f9c3 	bl	80022ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000218 	.word	0x20000218
 8001f4c:	40005400 	.word	0x40005400
 8001f50:	000186a0 	.word	0x000186a0

08001f54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_I2C_MspInit+0x90>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d132      	bne.n	8001fda <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 8001f8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f92:	2312      	movs	r3, #18
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4812      	ldr	r0, [pc, #72]	@ (8001fec <HAL_I2C_MspInit+0x98>)
 8001fa2:	f002 f829 	bl	8003ff8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <HAL_I2C_MspInit+0x9c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff0 <HAL_I2C_MspInit+0x9c>)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001fc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fcc:	61d3      	str	r3, [r2, #28]
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	@ 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010c00 	.word	0x40010c00
 8001ff0:	40010000 	.word	0x40010000

08001ff4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ffa:	f000 ffe5 	bl	8002fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ffe:	f000 f907 	bl	8002210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002002:	f7ff fedd 	bl	8001dc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002006:	f7ff fea1 	bl	8001d4c <MX_DMA_Init>
  MX_UART4_Init();
 800200a:	f000 fcf7 	bl	80029fc <MX_UART4_Init>
  MX_UART5_Init();
 800200e:	f000 fd1f 	bl	8002a50 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8002012:	f000 fd47 	bl	8002aa4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002016:	f000 fd6f 	bl	8002af8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800201a:	f000 fd97 	bl	8002b4c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800201e:	f7ff fe1b 	bl	8001c58 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002022:	f7ff ff69 	bl	8001ef8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002026:	f000 fbab 	bl	8002780 <MX_TIM4_Init>
  MX_TIM1_Init();
 800202a:	f000 faff 	bl	800262c <MX_TIM1_Init>
  MX_TIM3_Init();
 800202e:	f000 fb4d 	bl	80026cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  wireless_reg_handle(&huart1, &hdma_usart1_rx);
 8002032:	496a      	ldr	r1, [pc, #424]	@ (80021dc <main+0x1e8>)
 8002034:	486a      	ldr	r0, [pc, #424]	@ (80021e0 <main+0x1ec>)
 8002036:	f006 fc83 	bl	8008940 <wireless_reg_handle>
  wireless_init();
 800203a:	f006 fc95 	bl	8008968 <wireless_init>

  upper_uart_reg_handle(&huart4, &hdma_uart4_rx);
 800203e:	4969      	ldr	r1, [pc, #420]	@ (80021e4 <main+0x1f0>)
 8002040:	4869      	ldr	r0, [pc, #420]	@ (80021e8 <main+0x1f4>)
 8002042:	f006 fb43 	bl	80086cc <upper_uart_reg_handle>
  upper_uart_init();
 8002046:	f006 fb55 	bl	80086f4 <upper_uart_init>

  motor_uart_init();
 800204a:	f7fe f90b 	bl	8000264 <motor_uart_init>
  /* USER CODE END 2 */
  // CRC16_Calculate(crc_cal, sizeof(crc_cal));
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    process_event();
 800204e:	f006 fe1b 	bl	8008c88 <process_event>
    Events_MainLogic();
 8002052:	f7fe f8e7 	bl	8000224 <Events_MainLogic>
    // send_lower(kInit, 0x05);
    // LOGI("TEST");
    // if (get_transmit_state()) {  // 接收到数据开始转移
    // transfer_process();
    //}
    if (GetMoterFlag() >= 22) {
 8002056:	f7fe f92f 	bl	80002b8 <GetMoterFlag>
 800205a:	4603      	mov	r3, r0
 800205c:	2b15      	cmp	r3, #21
 800205e:	ddf6      	ble.n	800204e <main+0x5a>
      transfer_process();
 8002060:	f005 fea0 	bl	8007da4 <transfer_process>

      if (get_action_mode() == 0x01 && !pandian_flag) {
 8002064:	f006 f898 	bl	8008198 <get_action_mode>
 8002068:	4603      	mov	r3, r0
 800206a:	2b01      	cmp	r3, #1
 800206c:	d11c      	bne.n	80020a8 <main+0xb4>
 800206e:	4b5f      	ldr	r3, [pc, #380]	@ (80021ec <main+0x1f8>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d118      	bne.n	80020a8 <main+0xb4>
        switch (move_state) {
 8002076:	4b5e      	ldr	r3, [pc, #376]	@ (80021f0 <main+0x1fc>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <main+0x96>
 800207e:	2bff      	cmp	r3, #255	@ 0xff
 8002080:	d112      	bne.n	80020a8 <main+0xb4>
          case kWirelessIdle:
            move_state = kWirelessStart;
 8002082:	4b5b      	ldr	r3, [pc, #364]	@ (80021f0 <main+0x1fc>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
            break;
 8002088:	e00e      	b.n	80020a8 <main+0xb4>
          case kWirelessStart:
            if (motor_move(30, KGoRight)) {
 800208a:	210c      	movs	r1, #12
 800208c:	201e      	movs	r0, #30
 800208e:	f006 f96b 	bl	8008368 <motor_move>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <main+0xb2>
              servo_info_updata(KGoRight, 30);
 8002098:	211e      	movs	r1, #30
 800209a:	200c      	movs	r0, #12
 800209c:	f006 f898 	bl	80081d0 <servo_info_updata>
              pandian_flag = 1;
 80020a0:	4b52      	ldr	r3, [pc, #328]	@ (80021ec <main+0x1f8>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80020a6:	bf00      	nop
        }
      }

      switch (pandian_flag) {
 80020a8:	4b50      	ldr	r3, [pc, #320]	@ (80021ec <main+0x1f8>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	f200 8087 	bhi.w	80021c2 <main+0x1ce>
 80020b4:	a201      	add	r2, pc, #4	@ (adr r2, 80020bc <main+0xc8>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020d1 	.word	0x080020d1
 80020c0:	0800210d 	.word	0x0800210d
 80020c4:	08002131 	.word	0x08002131
 80020c8:	08002161 	.word	0x08002161
 80020cc:	0800219f 	.word	0x0800219f
        case 1:
          uint16_t pos1 = get_Position_mm(GetMoterStateReg(), 4);
 80020d0:	f7fe f8dc 	bl	800028c <GetMoterStateReg>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2104      	movs	r1, #4
 80020d8:	4618      	mov	r0, r3
 80020da:	f006 f8b1 	bl	8008240 <get_Position_mm>
 80020de:	4603      	mov	r3, r0
 80020e0:	80bb      	strh	r3, [r7, #4]
          if (pos1 >= distance_target && pos1 != 0xff) {
 80020e2:	88ba      	ldrh	r2, [r7, #4]
 80020e4:	4b43      	ldr	r3, [pc, #268]	@ (80021f4 <main+0x200>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d36c      	bcc.n	80021c6 <main+0x1d2>
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	2bff      	cmp	r3, #255	@ 0xff
 80020f0:	d069      	beq.n	80021c6 <main+0x1d2>
            pandian_flag = 2;
 80020f2:	4b3e      	ldr	r3, [pc, #248]	@ (80021ec <main+0x1f8>)
 80020f4:	2202      	movs	r2, #2
 80020f6:	701a      	strb	r2, [r3, #0]
            LOGI("check finish %d", pandian_flag);
 80020f8:	f000 ffbe 	bl	8003078 <HAL_GetTick>
 80020fc:	4601      	mov	r1, r0
 80020fe:	4b3b      	ldr	r3, [pc, #236]	@ (80021ec <main+0x1f8>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4a3d      	ldr	r2, [pc, #244]	@ (80021f8 <main+0x204>)
 8002104:	483d      	ldr	r0, [pc, #244]	@ (80021fc <main+0x208>)
 8002106:	f006 fecb 	bl	8008ea0 <iprintf>
          }
          break;
 800210a:	e05c      	b.n	80021c6 <main+0x1d2>
        case 2:
          if (motor_stop()) {
 800210c:	f006 f97e 	bl	800840c <motor_stop>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d059      	beq.n	80021ca <main+0x1d6>
            pandian_flag = 3;
 8002116:	4b35      	ldr	r3, [pc, #212]	@ (80021ec <main+0x1f8>)
 8002118:	2203      	movs	r2, #3
 800211a:	701a      	strb	r2, [r3, #0]
            LOGI("Back %d ", pandian_flag);
 800211c:	f000 ffac 	bl	8003078 <HAL_GetTick>
 8002120:	4601      	mov	r1, r0
 8002122:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <main+0x1f8>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4a34      	ldr	r2, [pc, #208]	@ (80021f8 <main+0x204>)
 8002128:	4835      	ldr	r0, [pc, #212]	@ (8002200 <main+0x20c>)
 800212a:	f006 feb9 	bl	8008ea0 <iprintf>
          }

          break;
 800212e:	e04c      	b.n	80021ca <main+0x1d6>
        case 3:
          if (motor_move(30, KGoLeft)) {
 8002130:	21cc      	movs	r1, #204	@ 0xcc
 8002132:	201e      	movs	r0, #30
 8002134:	f006 f918 	bl	8008368 <motor_move>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d047      	beq.n	80021ce <main+0x1da>
            servo_info_updata(KGoLeft, 30);
 800213e:	211e      	movs	r1, #30
 8002140:	20cc      	movs	r0, #204	@ 0xcc
 8002142:	f006 f845 	bl	80081d0 <servo_info_updata>
            pandian_flag = 4;
 8002146:	4b29      	ldr	r3, [pc, #164]	@ (80021ec <main+0x1f8>)
 8002148:	2204      	movs	r2, #4
 800214a:	701a      	strb	r2, [r3, #0]

            LOGI("Back move %d", pandian_flag);
 800214c:	f000 ff94 	bl	8003078 <HAL_GetTick>
 8002150:	4601      	mov	r1, r0
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <main+0x1f8>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4a28      	ldr	r2, [pc, #160]	@ (80021f8 <main+0x204>)
 8002158:	482a      	ldr	r0, [pc, #168]	@ (8002204 <main+0x210>)
 800215a:	f006 fea1 	bl	8008ea0 <iprintf>
          }

          break;
 800215e:	e036      	b.n	80021ce <main+0x1da>
        case 4:
          uint16_t pos = get_Position_mm(GetMoterStateReg(), 4);
 8002160:	f7fe f894 	bl	800028c <GetMoterStateReg>
 8002164:	4603      	mov	r3, r0
 8002166:	2104      	movs	r1, #4
 8002168:	4618      	mov	r0, r3
 800216a:	f006 f869 	bl	8008240 <get_Position_mm>
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
          if (pos <= distance_target - 100 && pos != 0) {
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <main+0x200>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3b64      	subs	r3, #100	@ 0x64
 800217a:	429a      	cmp	r2, r3
 800217c:	d829      	bhi.n	80021d2 <main+0x1de>
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d026      	beq.n	80021d2 <main+0x1de>
            pandian_flag = 5;
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <main+0x1f8>)
 8002186:	2205      	movs	r2, #5
 8002188:	701a      	strb	r2, [r3, #0]
            LOGI("back finish %d", pandian_flag);
 800218a:	f000 ff75 	bl	8003078 <HAL_GetTick>
 800218e:	4601      	mov	r1, r0
 8002190:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <main+0x1f8>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <main+0x204>)
 8002196:	481c      	ldr	r0, [pc, #112]	@ (8002208 <main+0x214>)
 8002198:	f006 fe82 	bl	8008ea0 <iprintf>
          }
          break;
 800219c:	e019      	b.n	80021d2 <main+0x1de>
        case 5:
          if (motor_stop()) {
 800219e:	f006 f935 	bl	800840c <motor_stop>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d016      	beq.n	80021d6 <main+0x1e2>
            pandian_flag = 6;
 80021a8:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <main+0x1f8>)
 80021aa:	2206      	movs	r2, #6
 80021ac:	701a      	strb	r2, [r3, #0]
            LOGI("OK %d ", pandian_flag);
 80021ae:	f000 ff63 	bl	8003078 <HAL_GetTick>
 80021b2:	4601      	mov	r1, r0
 80021b4:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <main+0x1f8>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4a0f      	ldr	r2, [pc, #60]	@ (80021f8 <main+0x204>)
 80021ba:	4814      	ldr	r0, [pc, #80]	@ (800220c <main+0x218>)
 80021bc:	f006 fe70 	bl	8008ea0 <iprintf>
          }

          break;
 80021c0:	e009      	b.n	80021d6 <main+0x1e2>
        default:

          break;
 80021c2:	bf00      	nop
 80021c4:	e743      	b.n	800204e <main+0x5a>
          break;
 80021c6:	bf00      	nop
 80021c8:	e741      	b.n	800204e <main+0x5a>
          break;
 80021ca:	bf00      	nop
 80021cc:	e73f      	b.n	800204e <main+0x5a>
          break;
 80021ce:	bf00      	nop
 80021d0:	e73d      	b.n	800204e <main+0x5a>
          break;
 80021d2:	bf00      	nop
 80021d4:	e73b      	b.n	800204e <main+0x5a>
          break;
 80021d6:	bf00      	nop
    process_event();
 80021d8:	e739      	b.n	800204e <main+0x5a>
 80021da:	bf00      	nop
 80021dc:	200004f8 	.word	0x200004f8
 80021e0:	200003dc 	.word	0x200003dc
 80021e4:	200004b4 	.word	0x200004b4
 80021e8:	2000034c 	.word	0x2000034c
 80021ec:	2000026c 	.word	0x2000026c
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000004 	.word	0x20000004
 80021f8:	0800a4a8 	.word	0x0800a4a8
 80021fc:	08009c1c 	.word	0x08009c1c
 8002200:	08009c48 	.word	0x08009c48
 8002204:	08009c6c 	.word	0x08009c6c
 8002208:	08009c94 	.word	0x08009c94
 800220c:	08009cc0 	.word	0x08009cc0

08002210 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b096      	sub	sp, #88	@ 0x58
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef       RCC_OscInitStruct = {0};
 8002216:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800221a:	2228      	movs	r2, #40	@ 0x28
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f006 fe93 	bl	8008f4a <memset>
  RCC_ClkInitTypeDef       RCC_ClkInitStruct = {0};
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit     = {0};
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]
 8002242:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002244:	2301      	movs	r3, #1
 8002246:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8002248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800224c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 8002252:	2301      	movs	r3, #1
 8002254:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8002256:	2302      	movs	r3, #2
 8002258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 800225a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800225e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL6;
 8002260:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002264:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002266:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800226a:	4618      	mov	r0, r3
 800226c:	f002 f9cc 	bl	8004608 <HAL_RCC_OscConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0x6a>
    Error_Handler();
 8002276:	f000 f828 	bl	80022ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800227a:	230f      	movs	r3, #15
 800227c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800227e:	2302      	movs	r3, #2
 8002280:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800228a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	2102      	movs	r1, #2
 8002296:	4618      	mov	r0, r3
 8002298:	f002 fc38 	bl	8004b0c <HAL_RCC_ClockConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <SystemClock_Config+0x96>
    Error_Handler();
 80022a2:	f000 f812 	bl	80022ca <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022a6:	2302      	movs	r3, #2
 80022a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection    = RCC_ADCPCLK2_DIV6;
 80022aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022ae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 fdba 	bl	8004e2c <HAL_RCCEx_PeriphCLKConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <SystemClock_Config+0xb2>
    Error_Handler();
 80022be:	f000 f804 	bl	80022ca <Error_Handler>
  }
}
 80022c2:	bf00      	nop
 80022c4:	3758      	adds	r7, #88	@ 0x58
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ce:	b672      	cpsid	i
}
 80022d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80022d2:	bf00      	nop
 80022d4:	e7fd      	b.n	80022d2 <Error_Handler+0x8>
	...

080022d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <HAL_MspInit+0x5c>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	4a14      	ldr	r2, [pc, #80]	@ (8002334 <HAL_MspInit+0x5c>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6193      	str	r3, [r2, #24]
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_MspInit+0x5c>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <HAL_MspInit+0x5c>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002334 <HAL_MspInit+0x5c>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002300:	61d3      	str	r3, [r2, #28]
 8002302:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <HAL_MspInit+0x5c>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_MspInit+0x60>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <HAL_MspInit+0x60>)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40021000 	.word	0x40021000
 8002338:	40010000 	.word	0x40010000

0800233c <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <NMI_Handler+0x4>

08002344 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    LOGE("hard fault");
 8002348:	f000 fe96 	bl	8003078 <HAL_GetTick>
 800234c:	4603      	mov	r3, r0
 800234e:	4a03      	ldr	r2, [pc, #12]	@ (800235c <HardFault_Handler+0x18>)
 8002350:	4619      	mov	r1, r3
 8002352:	4803      	ldr	r0, [pc, #12]	@ (8002360 <HardFault_Handler+0x1c>)
 8002354:	f006 fda4 	bl	8008ea0 <iprintf>
  while (1) {
 8002358:	bf00      	nop
 800235a:	e7f5      	b.n	8002348 <HardFault_Handler+0x4>
 800235c:	0800a4b0 	.word	0x0800a4b0
 8002360:	08009ce4 	.word	0x08009ce4

08002364 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1) {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    LOGE("mem fault");
 8002368:	f000 fe86 	bl	8003078 <HAL_GetTick>
 800236c:	4603      	mov	r3, r0
 800236e:	4a03      	ldr	r2, [pc, #12]	@ (800237c <MemManage_Handler+0x18>)
 8002370:	4619      	mov	r1, r3
 8002372:	4803      	ldr	r0, [pc, #12]	@ (8002380 <MemManage_Handler+0x1c>)
 8002374:	f006 fd94 	bl	8008ea0 <iprintf>
  while (1) {
 8002378:	bf00      	nop
 800237a:	e7f5      	b.n	8002368 <MemManage_Handler+0x4>
 800237c:	0800a4c4 	.word	0x0800a4c4
 8002380:	08009d0c 	.word	0x08009d0c

08002384 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1) {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    LOGE("bus fault");
 8002388:	f000 fe76 	bl	8003078 <HAL_GetTick>
 800238c:	4603      	mov	r3, r0
 800238e:	4a03      	ldr	r2, [pc, #12]	@ (800239c <BusFault_Handler+0x18>)
 8002390:	4619      	mov	r1, r3
 8002392:	4803      	ldr	r0, [pc, #12]	@ (80023a0 <BusFault_Handler+0x1c>)
 8002394:	f006 fd84 	bl	8008ea0 <iprintf>
  while (1) {
 8002398:	bf00      	nop
 800239a:	e7f5      	b.n	8002388 <BusFault_Handler+0x4>
 800239c:	0800a4d8 	.word	0x0800a4d8
 80023a0:	08009d34 	.word	0x08009d34

080023a4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1) {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    LOGE("usage fault");
 80023a8:	f000 fe66 	bl	8003078 <HAL_GetTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a03      	ldr	r2, [pc, #12]	@ (80023bc <UsageFault_Handler+0x18>)
 80023b0:	4619      	mov	r1, r3
 80023b2:	4803      	ldr	r0, [pc, #12]	@ (80023c0 <UsageFault_Handler+0x1c>)
 80023b4:	f006 fd74 	bl	8008ea0 <iprintf>
  while (1) {
 80023b8:	bf00      	nop
 80023ba:	e7f5      	b.n	80023a8 <UsageFault_Handler+0x4>
 80023bc:	0800a4ec 	.word	0x0800a4ec
 80023c0:	08009d5c 	.word	0x08009d5c

080023c4 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ec:	f000 fe32 	bl	8003054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <DMA1_Channel5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023f8:	4802      	ldr	r0, [pc, #8]	@ (8002404 <DMA1_Channel5_IRQHandler+0x10>)
 80023fa:	f001 fb93 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200004f8 	.word	0x200004f8

08002408 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void) {
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800240c:	4802      	ldr	r0, [pc, #8]	@ (8002418 <DMA1_Channel6_IRQHandler+0x10>)
 800240e:	f001 fb89 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000053c 	.word	0x2000053c

0800241c <TIM1_UP_TIM10_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002420:	4802      	ldr	r0, [pc, #8]	@ (800242c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002422:	f003 f847 	bl	80054b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000274 	.word	0x20000274

08002430 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002434:	4802      	ldr	r0, [pc, #8]	@ (8002440 <TIM3_IRQHandler+0x10>)
 8002436:	f003 f83d 	bl	80054b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200002bc 	.word	0x200002bc

08002444 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002448:	4802      	ldr	r0, [pc, #8]	@ (8002454 <TIM4_IRQHandler+0x10>)
 800244a:	f003 f833 	bl	80054b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000304 	.word	0x20000304

08002458 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800245c:	4802      	ldr	r0, [pc, #8]	@ (8002468 <USART1_IRQHandler+0x10>)
 800245e:	f004 f97d 	bl	800675c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200003dc 	.word	0x200003dc

0800246c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <USART2_IRQHandler+0x10>)
 8002472:	f004 f973 	bl	800675c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000424 	.word	0x20000424

08002480 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002484:	4802      	ldr	r0, [pc, #8]	@ (8002490 <USART3_IRQHandler+0x10>)
 8002486:	f004 f969 	bl	800675c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000046c 	.word	0x2000046c

08002494 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002498:	4802      	ldr	r0, [pc, #8]	@ (80024a4 <UART4_IRQHandler+0x10>)
 800249a:	f004 f95f 	bl	800675c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000034c 	.word	0x2000034c

080024a8 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80024ac:	4802      	ldr	r0, [pc, #8]	@ (80024b8 <UART5_IRQHandler+0x10>)
 80024ae:	f004 f955 	bl	800675c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000394 	.word	0x20000394

080024bc <DMA2_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA2 channel3 global interrupt.
 */
void DMA2_Channel3_IRQHandler(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <DMA2_Channel3_IRQHandler+0x10>)
 80024c2:	f001 fb2f 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200004b4 	.word	0x200004b4

080024d0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
  }
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e00a      	b.n	800250a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024f4:	f3af 8000 	nop.w
 80024f8:	4601      	mov	r1, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	60ba      	str	r2, [r7, #8]
 8002500:	b2ca      	uxtb	r2, r1
 8002502:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3301      	adds	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	dbf0      	blt.n	80024f4 <_read+0x12>
  }

  return len;
 8002512:	687b      	ldr	r3, [r7, #4]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e009      	b.n	8002542 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	60ba      	str	r2, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f005 fe38 	bl	80081ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3301      	adds	r3, #1
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	dbf1      	blt.n	800252e <_write+0x12>
  }
  return len;
 800254a:	687b      	ldr	r3, [r7, #4]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_close>:

int _close(int file)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800257a:	605a      	str	r2, [r3, #4]
  return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <_isatty>:

int _isatty(int file)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002590:	2301      	movs	r3, #1
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  extern uint8_t  _end;            /* Symbol defined in the linker script */
  extern uint8_t  _estack;         /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t  stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <_sbrk+0x5c>)
 80025be:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <_sbrk+0x60>)
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	617b      	str	r3, [r7, #20]
  const uint8_t  *max_heap    = (uint8_t *)stack_limit;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	613b      	str	r3, [r7, #16]
  uint8_t        *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <_sbrk+0x64>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 80025d0:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <_sbrk+0x64>)
 80025d2:	4a12      	ldr	r2, [pc, #72]	@ (800261c <_sbrk+0x68>)
 80025d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 80025d6:	4b10      	ldr	r3, [pc, #64]	@ (8002618 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d207      	bcs.n	80025f4 <_sbrk+0x40>
    errno = ENOMEM;
 80025e4:	f006 fd00 	bl	8008fe8 <__errno>
 80025e8:	4603      	mov	r3, r0
 80025ea:	220c      	movs	r2, #12
 80025ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	e009      	b.n	8002608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f4:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <_sbrk+0x64>)
 8002604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002606:	68fb      	ldr	r3, [r7, #12]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20018000 	.word	0x20018000
 8002614:	00000400 	.word	0x00000400
 8002618:	20000270 	.word	0x20000270
 800261c:	20000e30 	.word	0x20000e30

08002620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002640:	463b      	mov	r3, r7
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002648:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <MX_TIM1_Init+0x98>)
 800264a:	4a1f      	ldr	r2, [pc, #124]	@ (80026c8 <MX_TIM1_Init+0x9c>)
 800264c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800264e:	4b1d      	ldr	r3, [pc, #116]	@ (80026c4 <MX_TIM1_Init+0x98>)
 8002650:	2247      	movs	r2, #71	@ 0x47
 8002652:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002654:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <MX_TIM1_Init+0x98>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <MX_TIM1_Init+0x98>)
 800265c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002660:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002662:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <MX_TIM1_Init+0x98>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002668:	4b16      	ldr	r3, [pc, #88]	@ (80026c4 <MX_TIM1_Init+0x98>)
 800266a:	2200      	movs	r2, #0
 800266c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800266e:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <MX_TIM1_Init+0x98>)
 8002670:	2280      	movs	r2, #128	@ 0x80
 8002672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002674:	4813      	ldr	r0, [pc, #76]	@ (80026c4 <MX_TIM1_Init+0x98>)
 8002676:	f002 fc8f 	bl	8004f98 <HAL_TIM_Base_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002680:	f7ff fe23 	bl	80022ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	4619      	mov	r1, r3
 8002690:	480c      	ldr	r0, [pc, #48]	@ (80026c4 <MX_TIM1_Init+0x98>)
 8002692:	f003 f975 	bl	8005980 <HAL_TIM_ConfigClockSource>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800269c:	f7ff fe15 	bl	80022ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026a8:	463b      	mov	r3, r7
 80026aa:	4619      	mov	r1, r3
 80026ac:	4805      	ldr	r0, [pc, #20]	@ (80026c4 <MX_TIM1_Init+0x98>)
 80026ae:	f003 fe73 	bl	8006398 <HAL_TIMEx_MasterConfigSynchronization>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026b8:	f7ff fe07 	bl	80022ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000274 	.word	0x20000274
 80026c8:	40012c00 	.word	0x40012c00

080026cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	@ 0x28
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d2:	f107 0320 	add.w	r3, r7, #32
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	615a      	str	r2, [r3, #20]
 80026ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026ee:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <MX_TIM3_Init+0xac>)
 80026f0:	4a22      	ldr	r2, [pc, #136]	@ (800277c <MX_TIM3_Init+0xb0>)
 80026f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80026f4:	4b20      	ldr	r3, [pc, #128]	@ (8002778 <MX_TIM3_Init+0xac>)
 80026f6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80026fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002778 <MX_TIM3_Init+0xac>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8002702:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <MX_TIM3_Init+0xac>)
 8002704:	2209      	movs	r2, #9
 8002706:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <MX_TIM3_Init+0xac>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270e:	4b1a      	ldr	r3, [pc, #104]	@ (8002778 <MX_TIM3_Init+0xac>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002714:	4818      	ldr	r0, [pc, #96]	@ (8002778 <MX_TIM3_Init+0xac>)
 8002716:	f002 fcfd 	bl	8005114 <HAL_TIM_PWM_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002720:	f7ff fdd3 	bl	80022ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800272c:	f107 0320 	add.w	r3, r7, #32
 8002730:	4619      	mov	r1, r3
 8002732:	4811      	ldr	r0, [pc, #68]	@ (8002778 <MX_TIM3_Init+0xac>)
 8002734:	f003 fe30 	bl	8006398 <HAL_TIMEx_MasterConfigSynchronization>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800273e:	f7ff fdc4 	bl	80022ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002742:	2360      	movs	r3, #96	@ 0x60
 8002744:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	2204      	movs	r2, #4
 8002756:	4619      	mov	r1, r3
 8002758:	4807      	ldr	r0, [pc, #28]	@ (8002778 <MX_TIM3_Init+0xac>)
 800275a:	f003 f84f 	bl	80057fc <HAL_TIM_PWM_ConfigChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002764:	f7ff fdb1 	bl	80022ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002768:	4803      	ldr	r0, [pc, #12]	@ (8002778 <MX_TIM3_Init+0xac>)
 800276a:	f000 f901 	bl	8002970 <HAL_TIM_MspPostInit>

}
 800276e:	bf00      	nop
 8002770:	3728      	adds	r7, #40	@ 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200002bc 	.word	0x200002bc
 800277c:	40000400 	.word	0x40000400

08002780 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	@ 0x28
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002786:	f107 0318 	add.w	r3, r7, #24
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800279e:	463b      	mov	r3, r7
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002858 <MX_TIM4_Init+0xd8>)
 80027ac:	4a2b      	ldr	r2, [pc, #172]	@ (800285c <MX_TIM4_Init+0xdc>)
 80027ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80027b0:	4b29      	ldr	r3, [pc, #164]	@ (8002858 <MX_TIM4_Init+0xd8>)
 80027b2:	2247      	movs	r2, #71	@ 0x47
 80027b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b6:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <MX_TIM4_Init+0xd8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80027bc:	4b26      	ldr	r3, [pc, #152]	@ (8002858 <MX_TIM4_Init+0xd8>)
 80027be:	f242 720f 	movw	r2, #9999	@ 0x270f
 80027c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c4:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <MX_TIM4_Init+0xd8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027ca:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <MX_TIM4_Init+0xd8>)
 80027cc:	2280      	movs	r2, #128	@ 0x80
 80027ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027d0:	4821      	ldr	r0, [pc, #132]	@ (8002858 <MX_TIM4_Init+0xd8>)
 80027d2:	f002 fbe1 	bl	8004f98 <HAL_TIM_Base_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80027dc:	f7ff fd75 	bl	80022ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027e6:	f107 0318 	add.w	r3, r7, #24
 80027ea:	4619      	mov	r1, r3
 80027ec:	481a      	ldr	r0, [pc, #104]	@ (8002858 <MX_TIM4_Init+0xd8>)
 80027ee:	f003 f8c7 	bl	8005980 <HAL_TIM_ConfigClockSource>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80027f8:	f7ff fd67 	bl	80022ca <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80027fc:	4816      	ldr	r0, [pc, #88]	@ (8002858 <MX_TIM4_Init+0xd8>)
 80027fe:	f002 fcd8 	bl	80051b2 <HAL_TIM_IC_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002808:	f7ff fd5f 	bl	80022ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	4619      	mov	r1, r3
 800281a:	480f      	ldr	r0, [pc, #60]	@ (8002858 <MX_TIM4_Init+0xd8>)
 800281c:	f003 fdbc 	bl	8006398 <HAL_TIMEx_MasterConfigSynchronization>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002826:	f7ff fd50 	bl	80022ca <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800282a:	2300      	movs	r3, #0
 800282c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800282e:	2301      	movs	r3, #1
 8002830:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800283a:	463b      	mov	r3, r7
 800283c:	2200      	movs	r2, #0
 800283e:	4619      	mov	r1, r3
 8002840:	4805      	ldr	r0, [pc, #20]	@ (8002858 <MX_TIM4_Init+0xd8>)
 8002842:	f002 ff3f 	bl	80056c4 <HAL_TIM_IC_ConfigChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800284c:	f7ff fd3d 	bl	80022ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	@ 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000304 	.word	0x20000304
 800285c:	40000800 	.word	0x40000800

08002860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	@ 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0318 	add.w	r3, r7, #24
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a26      	ldr	r2, [pc, #152]	@ (8002914 <HAL_TIM_Base_MspInit+0xb4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d114      	bne.n	80028aa <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002880:	4b25      	ldr	r3, [pc, #148]	@ (8002918 <HAL_TIM_Base_MspInit+0xb8>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a24      	ldr	r2, [pc, #144]	@ (8002918 <HAL_TIM_Base_MspInit+0xb8>)
 8002886:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b22      	ldr	r3, [pc, #136]	@ (8002918 <HAL_TIM_Base_MspInit+0xb8>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2101      	movs	r1, #1
 800289c:	2019      	movs	r0, #25
 800289e:	f000 fef0 	bl	8003682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028a2:	2019      	movs	r0, #25
 80028a4:	f000 ff09 	bl	80036ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80028a8:	e030      	b.n	800290c <HAL_TIM_Base_MspInit+0xac>
  else if(tim_baseHandle->Instance==TIM4)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1b      	ldr	r2, [pc, #108]	@ (800291c <HAL_TIM_Base_MspInit+0xbc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d12b      	bne.n	800290c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028b4:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <HAL_TIM_Base_MspInit+0xb8>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <HAL_TIM_Base_MspInit+0xb8>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	61d3      	str	r3, [r2, #28]
 80028c0:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_TIM_Base_MspInit+0xb8>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028cc:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <HAL_TIM_Base_MspInit+0xb8>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a11      	ldr	r2, [pc, #68]	@ (8002918 <HAL_TIM_Base_MspInit+0xb8>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <HAL_TIM_Base_MspInit+0xb8>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HallCount_BLDCMotor_Pin;
 80028e4:	2340      	movs	r3, #64	@ 0x40
 80028e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HallCount_BLDCMotor_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 0318 	add.w	r3, r7, #24
 80028f4:	4619      	mov	r1, r3
 80028f6:	480a      	ldr	r0, [pc, #40]	@ (8002920 <HAL_TIM_Base_MspInit+0xc0>)
 80028f8:	f001 fb7e 	bl	8003ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2100      	movs	r1, #0
 8002900:	201e      	movs	r0, #30
 8002902:	f000 febe 	bl	8003682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002906:	201e      	movs	r0, #30
 8002908:	f000 fed7 	bl	80036ba <HAL_NVIC_EnableIRQ>
}
 800290c:	bf00      	nop
 800290e:	3728      	adds	r7, #40	@ 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40021000 	.word	0x40021000
 800291c:	40000800 	.word	0x40000800
 8002920:	40010c00 	.word	0x40010c00

08002924 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0d      	ldr	r2, [pc, #52]	@ (8002968 <HAL_TIM_PWM_MspInit+0x44>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d113      	bne.n	800295e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002936:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <HAL_TIM_PWM_MspInit+0x48>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	4a0c      	ldr	r2, [pc, #48]	@ (800296c <HAL_TIM_PWM_MspInit+0x48>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	61d3      	str	r3, [r2, #28]
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_TIM_PWM_MspInit+0x48>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	201d      	movs	r0, #29
 8002954:	f000 fe95 	bl	8003682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002958:	201d      	movs	r0, #29
 800295a:	f000 feae 	bl	80036ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40000400 	.word	0x40000400
 800296c:	40021000 	.word	0x40021000

08002970 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a18      	ldr	r2, [pc, #96]	@ (80029ec <HAL_TIM_MspPostInit+0x7c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d129      	bne.n	80029e4 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <HAL_TIM_MspPostInit+0x80>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a16      	ldr	r2, [pc, #88]	@ (80029f0 <HAL_TIM_MspPostInit+0x80>)
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <HAL_TIM_MspPostInit+0x80>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Speed_PWMCtl_BLDCMotor_Pin;
 80029a8:	2320      	movs	r3, #32
 80029aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Speed_PWMCtl_BLDCMotor_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	4619      	mov	r1, r3
 80029ba:	480e      	ldr	r0, [pc, #56]	@ (80029f4 <HAL_TIM_MspPostInit+0x84>)
 80029bc:	f001 fb1c 	bl	8003ff8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80029c0:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <HAL_TIM_MspPostInit+0x88>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	4a06      	ldr	r2, [pc, #24]	@ (80029f8 <HAL_TIM_MspPostInit+0x88>)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010c00 	.word	0x40010c00
 80029f8:	40010000 	.word	0x40010000

080029fc <MX_UART4_Init>:
DMA_HandleTypeDef  hdma_uart4_rx;
DMA_HandleTypeDef  hdma_usart1_rx;
DMA_HandleTypeDef  hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance          = UART4;
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <MX_UART4_Init+0x4c>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	@ (8002a4c <MX_UART4_Init+0x50>)
 8002a04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate     = 230400;
 8002a06:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <MX_UART4_Init+0x4c>)
 8002a08:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002a0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength   = UART_WORDLENGTH_8B;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <MX_UART4_Init+0x4c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits     = UART_STOPBITS_1;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <MX_UART4_Init+0x4c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity       = UART_PARITY_NONE;
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <MX_UART4_Init+0x4c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode         = UART_MODE_TX_RX;
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <MX_UART4_Init+0x4c>)
 8002a22:	220c      	movs	r2, #12
 8002a24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002a26:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <MX_UART4_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <MX_UART4_Init+0x4c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002a32:	4805      	ldr	r0, [pc, #20]	@ (8002a48 <MX_UART4_Init+0x4c>)
 8002a34:	f003 fd3c 	bl	80064b0 <HAL_UART_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_UART4_Init+0x46>
    Error_Handler();
 8002a3e:	f7ff fc44 	bl	80022ca <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000034c 	.word	0x2000034c
 8002a4c:	40004c00 	.word	0x40004c00

08002a50 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance          = UART5;
 8002a54:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <MX_UART5_Init+0x4c>)
 8002a56:	4a12      	ldr	r2, [pc, #72]	@ (8002aa0 <MX_UART5_Init+0x50>)
 8002a58:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate     = 230400;
 8002a5a:	4b10      	ldr	r3, [pc, #64]	@ (8002a9c <MX_UART5_Init+0x4c>)
 8002a5c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002a60:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength   = UART_WORDLENGTH_8B;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <MX_UART5_Init+0x4c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits     = UART_STOPBITS_1;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <MX_UART5_Init+0x4c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity       = UART_PARITY_NONE;
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <MX_UART5_Init+0x4c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode         = UART_MODE_TX_RX;
 8002a74:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <MX_UART5_Init+0x4c>)
 8002a76:	220c      	movs	r2, #12
 8002a78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <MX_UART5_Init+0x4c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <MX_UART5_Init+0x4c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002a86:	4805      	ldr	r0, [pc, #20]	@ (8002a9c <MX_UART5_Init+0x4c>)
 8002a88:	f003 fd12 	bl	80064b0 <HAL_UART_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_UART5_Init+0x46>
    Error_Handler();
 8002a92:	f7ff fc1a 	bl	80022ca <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000394 	.word	0x20000394
 8002aa0:	40005000 	.word	0x40005000

08002aa4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance          = USART1;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002aaa:	4a12      	ldr	r2, [pc, #72]	@ (8002af4 <MX_USART1_UART_Init+0x50>)
 8002aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 9600;
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002ab0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 8002ac8:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002aca:	220c      	movs	r2, #12
 8002acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002ace:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002ada:	4805      	ldr	r0, [pc, #20]	@ (8002af0 <MX_USART1_UART_Init+0x4c>)
 8002adc:	f003 fce8 	bl	80064b0 <HAL_UART_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_USART1_UART_Init+0x46>
    Error_Handler();
 8002ae6:	f7ff fbf0 	bl	80022ca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200003dc 	.word	0x200003dc
 8002af4:	40013800 	.word	0x40013800

08002af8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance          = USART2;
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002afe:	4a12      	ldr	r2, [pc, #72]	@ (8002b48 <MX_USART2_UART_Init+0x50>)
 8002b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 38400;
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b04:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8002b16:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b1e:	220c      	movs	r2, #12
 8002b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002b2e:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b30:	f003 fcbe 	bl	80064b0 <HAL_UART_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8002b3a:	f7ff fbc6 	bl	80022ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000424 	.word	0x20000424
 8002b48:	40004400 	.word	0x40004400

08002b4c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance          = USART3;
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <MX_USART3_UART_Init+0x4c>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <MX_USART3_UART_Init+0x50>)
 8002b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate     = 115200;
 8002b56:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <MX_USART3_UART_Init+0x4c>)
 8002b58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <MX_USART3_UART_Init+0x4c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits     = UART_STOPBITS_1;
 8002b64:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <MX_USART3_UART_Init+0x4c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity       = UART_PARITY_NONE;
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <MX_USART3_UART_Init+0x4c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode         = UART_MODE_TX_RX;
 8002b70:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <MX_USART3_UART_Init+0x4c>)
 8002b72:	220c      	movs	r2, #12
 8002b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8002b76:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <MX_USART3_UART_Init+0x4c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <MX_USART3_UART_Init+0x4c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002b82:	4805      	ldr	r0, [pc, #20]	@ (8002b98 <MX_USART3_UART_Init+0x4c>)
 8002b84:	f003 fc94 	bl	80064b0 <HAL_UART_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8002b8e:	f7ff fb9c 	bl	80022ca <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000046c 	.word	0x2000046c
 8002b9c:	40004800 	.word	0x40004800

08002ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b092      	sub	sp, #72	@ 0x48
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
  if (uartHandle->Instance == UART4) {
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a8a      	ldr	r2, [pc, #552]	@ (8002de4 <HAL_UART_MspInit+0x244>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d160      	bne.n	8002c82 <HAL_UART_MspInit+0xe2>
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002bc0:	4b89      	ldr	r3, [pc, #548]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	4a88      	ldr	r2, [pc, #544]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002bc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002bca:	61d3      	str	r3, [r2, #28]
 8002bcc:	4b86      	ldr	r3, [pc, #536]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd8:	4b83      	ldr	r3, [pc, #524]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	4a82      	ldr	r2, [pc, #520]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002bde:	f043 0310 	orr.w	r3, r3, #16
 8002be2:	6193      	str	r3, [r2, #24]
 8002be4:	4b80      	ldr	r3, [pc, #512]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin   = GPIO_PIN_10;
 8002bf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c02:	4619      	mov	r1, r3
 8002c04:	4879      	ldr	r0, [pc, #484]	@ (8002dec <HAL_UART_MspInit+0x24c>)
 8002c06:	f001 f9f7 	bl	8003ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 8002c0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c10:	2300      	movs	r3, #0
 8002c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4873      	ldr	r0, [pc, #460]	@ (8002dec <HAL_UART_MspInit+0x24c>)
 8002c20:	f001 f9ea 	bl	8003ff8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance                 = DMA2_Channel3;
 8002c24:	4b72      	ldr	r3, [pc, #456]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c26:	4a73      	ldr	r2, [pc, #460]	@ (8002df4 <HAL_UART_MspInit+0x254>)
 8002c28:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002c2a:	4b71      	ldr	r3, [pc, #452]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002c30:	4b6f      	ldr	r3, [pc, #444]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002c36:	4b6e      	ldr	r3, [pc, #440]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c38:	2280      	movs	r2, #128	@ 0x80
 8002c3a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002c42:	4b6b      	ldr	r3, [pc, #428]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode                = DMA_NORMAL;
 8002c48:	4b69      	ldr	r3, [pc, #420]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8002c4e:	4b68      	ldr	r3, [pc, #416]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK) {
 8002c54:	4866      	ldr	r0, [pc, #408]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c56:	f000 fd4b 	bl	80036f0 <HAL_DMA_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002c60:	f7ff fb33 	bl	80022ca <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a62      	ldr	r2, [pc, #392]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c6a:	4a61      	ldr	r2, [pc, #388]	@ (8002df0 <HAL_UART_MspInit+0x250>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002c70:	2200      	movs	r2, #0
 8002c72:	2100      	movs	r1, #0
 8002c74:	2034      	movs	r0, #52	@ 0x34
 8002c76:	f000 fd04 	bl	8003682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c7a:	2034      	movs	r0, #52	@ 0x34
 8002c7c:	f000 fd1d 	bl	80036ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c80:	e169      	b.n	8002f56 <HAL_UART_MspInit+0x3b6>
  } else if (uartHandle->Instance == UART5) {
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5c      	ldr	r2, [pc, #368]	@ (8002df8 <HAL_UART_MspInit+0x258>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d145      	bne.n	8002d18 <HAL_UART_MspInit+0x178>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c8c:	4b56      	ldr	r3, [pc, #344]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a55      	ldr	r2, [pc, #340]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c96:	61d3      	str	r3, [r2, #28]
 8002c98:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca4:	4b50      	ldr	r3, [pc, #320]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002caa:	f043 0310 	orr.w	r3, r3, #16
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002cc2:	f043 0320 	orr.w	r3, r3, #32
 8002cc6:	6193      	str	r3, [r2, #24]
 8002cc8:	4b47      	ldr	r3, [pc, #284]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin   = GPIO_PIN_12;
 8002cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4840      	ldr	r0, [pc, #256]	@ (8002dec <HAL_UART_MspInit+0x24c>)
 8002cea:	f001 f985 	bl	8003ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = GPIO_PIN_2;
 8002cee:	2304      	movs	r3, #4
 8002cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cfa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cfe:	4619      	mov	r1, r3
 8002d00:	483e      	ldr	r0, [pc, #248]	@ (8002dfc <HAL_UART_MspInit+0x25c>)
 8002d02:	f001 f979 	bl	8003ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	2035      	movs	r0, #53	@ 0x35
 8002d0c:	f000 fcb9 	bl	8003682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002d10:	2035      	movs	r0, #53	@ 0x35
 8002d12:	f000 fcd2 	bl	80036ba <HAL_NVIC_EnableIRQ>
}
 8002d16:	e11e      	b.n	8002f56 <HAL_UART_MspInit+0x3b6>
  } else if (uartHandle->Instance == USART1) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a38      	ldr	r2, [pc, #224]	@ (8002e00 <HAL_UART_MspInit+0x260>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d176      	bne.n	8002e10 <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d22:	4b31      	ldr	r3, [pc, #196]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	4a30      	ldr	r2, [pc, #192]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d2c:	6193      	str	r3, [r2, #24]
 8002d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	6193      	str	r3, [r2, #24]
 8002d46:	4b28      	ldr	r3, [pc, #160]	@ (8002de8 <HAL_UART_MspInit+0x248>)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin   = AndroidSerial_TX_Pin;
 8002d52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d56:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(AndroidSerial_TX_GPIO_Port, &GPIO_InitStruct);
 8002d60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d64:	4619      	mov	r1, r3
 8002d66:	4827      	ldr	r0, [pc, #156]	@ (8002e04 <HAL_UART_MspInit+0x264>)
 8002d68:	f001 f946 	bl	8003ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = AndroidSerial_RX_Pin;
 8002d6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d70:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d72:	2300      	movs	r3, #0
 8002d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(AndroidSerial_RX_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4820      	ldr	r0, [pc, #128]	@ (8002e04 <HAL_UART_MspInit+0x264>)
 8002d82:	f001 f939 	bl	8003ff8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8002d86:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002d88:	4a20      	ldr	r2, [pc, #128]	@ (8002e0c <HAL_UART_MspInit+0x26c>)
 8002d8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002d92:	4b1d      	ldr	r3, [pc, #116]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002d9a:	2280      	movs	r2, #128	@ 0x80
 8002d9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002da4:	4b18      	ldr	r3, [pc, #96]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode                = DMA_NORMAL;
 8002daa:	4b17      	ldr	r3, [pc, #92]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8002db0:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK) {
 8002db6:	4814      	ldr	r0, [pc, #80]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002db8:	f000 fc9a 	bl	80036f0 <HAL_DMA_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8002dc2:	f7ff fa82 	bl	80022ca <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002dca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e08 <HAL_UART_MspInit+0x268>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2025      	movs	r0, #37	@ 0x25
 8002dd8:	f000 fc53 	bl	8003682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ddc:	2025      	movs	r0, #37	@ 0x25
 8002dde:	f000 fc6c 	bl	80036ba <HAL_NVIC_EnableIRQ>
}
 8002de2:	e0b8      	b.n	8002f56 <HAL_UART_MspInit+0x3b6>
 8002de4:	40004c00 	.word	0x40004c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40011000 	.word	0x40011000
 8002df0:	200004b4 	.word	0x200004b4
 8002df4:	40020430 	.word	0x40020430
 8002df8:	40005000 	.word	0x40005000
 8002dfc:	40011400 	.word	0x40011400
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40010800 	.word	0x40010800
 8002e08:	200004f8 	.word	0x200004f8
 8002e0c:	40020058 	.word	0x40020058
  } else if (uartHandle->Instance == USART2) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a52      	ldr	r2, [pc, #328]	@ (8002f60 <HAL_UART_MspInit+0x3c0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d15e      	bne.n	8002ed8 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e1a:	4b52      	ldr	r3, [pc, #328]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a51      	ldr	r2, [pc, #324]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b4f      	ldr	r3, [pc, #316]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	4b4c      	ldr	r3, [pc, #304]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	4a4b      	ldr	r2, [pc, #300]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6193      	str	r3, [r2, #24]
 8002e3e:	4b49      	ldr	r3, [pc, #292]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin   = DebugSerial_TX_Pin;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e52:	2303      	movs	r3, #3
 8002e54:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(DebugSerial_TX_GPIO_Port, &GPIO_InitStruct);
 8002e56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4842      	ldr	r0, [pc, #264]	@ (8002f68 <HAL_UART_MspInit+0x3c8>)
 8002e5e:	f001 f8cb 	bl	8003ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = DebugSerial_RX_Pin;
 8002e62:	2308      	movs	r3, #8
 8002e64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e66:	2300      	movs	r3, #0
 8002e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(DebugSerial_RX_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e72:	4619      	mov	r1, r3
 8002e74:	483c      	ldr	r0, [pc, #240]	@ (8002f68 <HAL_UART_MspInit+0x3c8>)
 8002e76:	f001 f8bf 	bl	8003ff8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance                 = DMA1_Channel6;
 8002e7a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f70 <HAL_UART_MspInit+0x3d0>)
 8002e7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002e80:	4b3a      	ldr	r3, [pc, #232]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002e86:	4b39      	ldr	r3, [pc, #228]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002e8c:	4b37      	ldr	r3, [pc, #220]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002e8e:	2280      	movs	r2, #128	@ 0x80
 8002e90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e92:	4b36      	ldr	r3, [pc, #216]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002e98:	4b34      	ldr	r3, [pc, #208]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode                = DMA_NORMAL;
 8002e9e:	4b33      	ldr	r3, [pc, #204]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8002ea4:	4b31      	ldr	r3, [pc, #196]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8002eaa:	4830      	ldr	r0, [pc, #192]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002eac:	f000 fc20 	bl	80036f0 <HAL_DMA_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8002eb6:	f7ff fa08 	bl	80022ca <Error_Handler>
    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart2_rx);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f6c <HAL_UART_MspInit+0x3cc>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2026      	movs	r0, #38	@ 0x26
 8002ecc:	f000 fbd9 	bl	8003682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ed0:	2026      	movs	r0, #38	@ 0x26
 8002ed2:	f000 fbf2 	bl	80036ba <HAL_NVIC_EnableIRQ>
}
 8002ed6:	e03e      	b.n	8002f56 <HAL_UART_MspInit+0x3b6>
  } else if (uartHandle->Instance == USART3) {
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a25      	ldr	r2, [pc, #148]	@ (8002f74 <HAL_UART_MspInit+0x3d4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d139      	bne.n	8002f56 <HAL_UART_MspInit+0x3b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ee2:	4b20      	ldr	r3, [pc, #128]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eec:	61d3      	str	r3, [r2, #28]
 8002eee:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efa:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	4a19      	ldr	r2, [pc, #100]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	6193      	str	r3, [r2, #24]
 8002f06:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <HAL_UART_MspInit+0x3c4>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin   = GPIO_PIN_10;
 8002f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f16:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f24:	4619      	mov	r1, r3
 8002f26:	4814      	ldr	r0, [pc, #80]	@ (8002f78 <HAL_UART_MspInit+0x3d8>)
 8002f28:	f001 f866 	bl	8003ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin  = GPIO_PIN_11;
 8002f2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f32:	2300      	movs	r3, #0
 8002f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f3e:	4619      	mov	r1, r3
 8002f40:	480d      	ldr	r0, [pc, #52]	@ (8002f78 <HAL_UART_MspInit+0x3d8>)
 8002f42:	f001 f859 	bl	8003ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2027      	movs	r0, #39	@ 0x27
 8002f4c:	f000 fb99 	bl	8003682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f50:	2027      	movs	r0, #39	@ 0x27
 8002f52:	f000 fbb2 	bl	80036ba <HAL_NVIC_EnableIRQ>
}
 8002f56:	bf00      	nop
 8002f58:	3748      	adds	r7, #72	@ 0x48
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40004400 	.word	0x40004400
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40010800 	.word	0x40010800
 8002f6c:	2000053c 	.word	0x2000053c
 8002f70:	4002006c 	.word	0x4002006c
 8002f74:	40004800 	.word	0x40004800
 8002f78:	40010c00 	.word	0x40010c00

08002f7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f7c:	f7ff fb50 	bl	8002620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f80:	480b      	ldr	r0, [pc, #44]	@ (8002fb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002f82:	490c      	ldr	r1, [pc, #48]	@ (8002fb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002f84:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f88:	e002      	b.n	8002f90 <LoopCopyDataInit>

08002f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f8e:	3304      	adds	r3, #4

08002f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f94:	d3f9      	bcc.n	8002f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f96:	4a09      	ldr	r2, [pc, #36]	@ (8002fbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002f98:	4c09      	ldr	r4, [pc, #36]	@ (8002fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f9c:	e001      	b.n	8002fa2 <LoopFillZerobss>

08002f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fa0:	3204      	adds	r2, #4

08002fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa4:	d3fb      	bcc.n	8002f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fa6:	f006 f825 	bl	8008ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002faa:	f7ff f823 	bl	8001ff4 <main>
  bx lr
 8002fae:	4770      	bx	lr
  ldr r0, =_sdata
 8002fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002fb8:	0800a704 	.word	0x0800a704
  ldr r2, =_sbss
 8002fbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002fc0:	20000e2c 	.word	0x20000e2c

08002fc4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC1_2_IRQHandler>
	...

08002fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fcc:	4b08      	ldr	r3, [pc, #32]	@ (8002ff0 <HAL_Init+0x28>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a07      	ldr	r2, [pc, #28]	@ (8002ff0 <HAL_Init+0x28>)
 8002fd2:	f043 0310 	orr.w	r3, r3, #16
 8002fd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd8:	2003      	movs	r0, #3
 8002fda:	f000 fb47 	bl	800366c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fde:	200f      	movs	r0, #15
 8002fe0:	f000 f808 	bl	8002ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe4:	f7ff f978 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000

08002ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ffc:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <HAL_InitTick+0x54>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_InitTick+0x58>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4619      	mov	r1, r3
 8003006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800300a:	fbb3 f3f1 	udiv	r3, r3, r1
 800300e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fb5f 	bl	80036d6 <HAL_SYSTICK_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e00e      	b.n	8003040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b0f      	cmp	r3, #15
 8003026:	d80a      	bhi.n	800303e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003028:	2200      	movs	r2, #0
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	f000 fb27 	bl	8003682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003034:	4a06      	ldr	r2, [pc, #24]	@ (8003050 <HAL_InitTick+0x5c>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e000      	b.n	8003040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000008 	.word	0x20000008
 800304c:	20000010 	.word	0x20000010
 8003050:	2000000c 	.word	0x2000000c

08003054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_IncTick+0x1c>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_IncTick+0x20>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4413      	add	r3, r2
 8003064:	4a03      	ldr	r2, [pc, #12]	@ (8003074 <HAL_IncTick+0x20>)
 8003066:	6013      	str	r3, [r2, #0]
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	20000010 	.word	0x20000010
 8003074:	20000580 	.word	0x20000580

08003078 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return uwTick;
 800307c:	4b02      	ldr	r3, [pc, #8]	@ (8003088 <HAL_GetTick+0x10>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	20000580 	.word	0x20000580

0800308c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0ce      	b.n	800324c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fe fe02 	bl	8001cd4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f9bd 	bl	8003450 <ADC_ConversionStop_Disable>
 80030d6:	4603      	mov	r3, r0
 80030d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 80a9 	bne.w	800323a <HAL_ADC_Init+0x1ae>
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 80a5 	bne.w	800323a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030f8:	f023 0302 	bic.w	r3, r3, #2
 80030fc:	f043 0202 	orr.w	r2, r3, #2
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4951      	ldr	r1, [pc, #324]	@ (8003254 <HAL_ADC_Init+0x1c8>)
 800310e:	428b      	cmp	r3, r1
 8003110:	d10a      	bne.n	8003128 <HAL_ADC_Init+0x9c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800311a:	d002      	beq.n	8003122 <HAL_ADC_Init+0x96>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	e004      	b.n	800312c <HAL_ADC_Init+0xa0>
 8003122:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003126:	e001      	b.n	800312c <HAL_ADC_Init+0xa0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800312c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	7b1b      	ldrb	r3, [r3, #12]
 8003132:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003134:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4313      	orrs	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003144:	d003      	beq.n	800314e <HAL_ADC_Init+0xc2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d102      	bne.n	8003154 <HAL_ADC_Init+0xc8>
 800314e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003152:	e000      	b.n	8003156 <HAL_ADC_Init+0xca>
 8003154:	2300      	movs	r3, #0
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7d1b      	ldrb	r3, [r3, #20]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d119      	bne.n	8003198 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7b1b      	ldrb	r3, [r3, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	3b01      	subs	r3, #1
 8003172:	035a      	lsls	r2, r3, #13
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	e00b      	b.n	8003198 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003190:	f043 0201 	orr.w	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b29      	ldr	r3, [pc, #164]	@ (8003258 <HAL_ADC_Init+0x1cc>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	430b      	orrs	r3, r1
 80031be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c8:	d003      	beq.n	80031d2 <HAL_ADC_Init+0x146>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d104      	bne.n	80031dc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	051b      	lsls	r3, r3, #20
 80031da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	4b19      	ldr	r3, [pc, #100]	@ (800325c <HAL_ADC_Init+0x1d0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d10b      	bne.n	8003218 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	f043 0201 	orr.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003216:	e018      	b.n	800324a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	f023 0312 	bic.w	r3, r3, #18
 8003220:	f043 0210 	orr.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003238:	e007      	b.n	800324a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	f043 0210 	orr.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800324a:	7dfb      	ldrb	r3, [r7, #23]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40013c00 	.word	0x40013c00
 8003258:	ffe1f7fd 	.word	0xffe1f7fd
 800325c:	ff1f0efe 	.word	0xff1f0efe

08003260 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x20>
 800327c:	2302      	movs	r3, #2
 800327e:	e0dc      	b.n	800343a <HAL_ADC_ConfigChannel+0x1da>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b06      	cmp	r3, #6
 800328e:	d81c      	bhi.n	80032ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	3b05      	subs	r3, #5
 80032a2:	221f      	movs	r2, #31
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	4019      	ands	r1, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	3b05      	subs	r3, #5
 80032bc:	fa00 f203 	lsl.w	r2, r0, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80032c8:	e03c      	b.n	8003344 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b0c      	cmp	r3, #12
 80032d0:	d81c      	bhi.n	800330c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	3b23      	subs	r3, #35	@ 0x23
 80032e4:	221f      	movs	r2, #31
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	4019      	ands	r1, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	3b23      	subs	r3, #35	@ 0x23
 80032fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	631a      	str	r2, [r3, #48]	@ 0x30
 800330a:	e01b      	b.n	8003344 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	3b41      	subs	r3, #65	@ 0x41
 800331e:	221f      	movs	r2, #31
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	4019      	ands	r1, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	3b41      	subs	r3, #65	@ 0x41
 8003338:	fa00 f203 	lsl.w	r2, r0, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b09      	cmp	r3, #9
 800334a:	d91c      	bls.n	8003386 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68d9      	ldr	r1, [r3, #12]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	3b1e      	subs	r3, #30
 800335e:	2207      	movs	r2, #7
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	4019      	ands	r1, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	6898      	ldr	r0, [r3, #8]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	3b1e      	subs	r3, #30
 8003378:	fa00 f203 	lsl.w	r2, r0, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]
 8003384:	e019      	b.n	80033ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6919      	ldr	r1, [r3, #16]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	2207      	movs	r2, #7
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	4019      	ands	r1, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6898      	ldr	r0, [r3, #8]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	fa00 f203 	lsl.w	r2, r0, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d003      	beq.n	80033ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033c6:	2b11      	cmp	r3, #17
 80033c8:	d132      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003444 <HAL_ADC_ConfigChannel+0x1e4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d125      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d126      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80033f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d11a      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033fa:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <HAL_ADC_ConfigChannel+0x1e8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a13      	ldr	r2, [pc, #76]	@ (800344c <HAL_ADC_ConfigChannel+0x1ec>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	0c9a      	lsrs	r2, r3, #18
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003410:	e002      	b.n	8003418 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3b01      	subs	r3, #1
 8003416:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f9      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x1b2>
 800341e:	e007      	b.n	8003430 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	40012400 	.word	0x40012400
 8003448:	20000008 	.word	0x20000008
 800344c:	431bde83 	.word	0x431bde83

08003450 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d12e      	bne.n	80034c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800347a:	f7ff fdfd 	bl	8003078 <HAL_GetTick>
 800347e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003480:	e01b      	b.n	80034ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003482:	f7ff fdf9 	bl	8003078 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d914      	bls.n	80034ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d10d      	bne.n	80034ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a2:	f043 0210 	orr.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e007      	b.n	80034ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d0dc      	beq.n	8003482 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003506:	4a04      	ldr	r2, [pc, #16]	@ (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	60d3      	str	r3, [r2, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003520:	4b04      	ldr	r3, [pc, #16]	@ (8003534 <__NVIC_GetPriorityGrouping+0x18>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f003 0307 	and.w	r3, r3, #7
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	2b00      	cmp	r3, #0
 8003548:	db0b      	blt.n	8003562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	f003 021f 	and.w	r2, r3, #31
 8003550:	4906      	ldr	r1, [pc, #24]	@ (800356c <__NVIC_EnableIRQ+0x34>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2001      	movs	r0, #1
 800355a:	fa00 f202 	lsl.w	r2, r0, r2
 800355e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	e000e100 	.word	0xe000e100

08003570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	2b00      	cmp	r3, #0
 8003582:	db0a      	blt.n	800359a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	490c      	ldr	r1, [pc, #48]	@ (80035bc <__NVIC_SetPriority+0x4c>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	0112      	lsls	r2, r2, #4
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	440b      	add	r3, r1
 8003594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003598:	e00a      	b.n	80035b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4908      	ldr	r1, [pc, #32]	@ (80035c0 <__NVIC_SetPriority+0x50>)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	3b04      	subs	r3, #4
 80035a8:	0112      	lsls	r2, r2, #4
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	440b      	add	r3, r1
 80035ae:	761a      	strb	r2, [r3, #24]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000e100 	.word	0xe000e100
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	@ 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f1c3 0307 	rsb	r3, r3, #7
 80035de:	2b04      	cmp	r3, #4
 80035e0:	bf28      	it	cs
 80035e2:	2304      	movcs	r3, #4
 80035e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d902      	bls.n	80035f4 <NVIC_EncodePriority+0x30>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3b03      	subs	r3, #3
 80035f2:	e000      	b.n	80035f6 <NVIC_EncodePriority+0x32>
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	401a      	ands	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800360c:	f04f 31ff 	mov.w	r1, #4294967295
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	43d9      	mvns	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	4313      	orrs	r3, r2
         );
}
 800361e:	4618      	mov	r0, r3
 8003620:	3724      	adds	r7, #36	@ 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003638:	d301      	bcc.n	800363e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800363a:	2301      	movs	r3, #1
 800363c:	e00f      	b.n	800365e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800363e:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <SysTick_Config+0x40>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003646:	210f      	movs	r1, #15
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	f7ff ff90 	bl	8003570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003650:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <SysTick_Config+0x40>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003656:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <SysTick_Config+0x40>)
 8003658:	2207      	movs	r2, #7
 800365a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	e000e010 	.word	0xe000e010

0800366c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ff2d 	bl	80034d4 <__NVIC_SetPriorityGrouping>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af00      	add	r7, sp, #0
 8003688:	4603      	mov	r3, r0
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003694:	f7ff ff42 	bl	800351c <__NVIC_GetPriorityGrouping>
 8003698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	f7ff ff90 	bl	80035c4 <NVIC_EncodePriority>
 80036a4:	4602      	mov	r2, r0
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff5f 	bl	8003570 <__NVIC_SetPriority>
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff35 	bl	8003538 <__NVIC_EnableIRQ>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ffa2 	bl	8003628 <SysTick_Config>
 80036e4:	4603      	mov	r3, r0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e059      	b.n	80037ba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <HAL_DMA_Init+0xd4>)
 800370e:	429a      	cmp	r2, r3
 8003710:	d80f      	bhi.n	8003732 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	4b2b      	ldr	r3, [pc, #172]	@ (80037c8 <HAL_DMA_Init+0xd8>)
 800371a:	4413      	add	r3, r2
 800371c:	4a2b      	ldr	r2, [pc, #172]	@ (80037cc <HAL_DMA_Init+0xdc>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	009a      	lsls	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a28      	ldr	r2, [pc, #160]	@ (80037d0 <HAL_DMA_Init+0xe0>)
 800372e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003730:	e00e      	b.n	8003750 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	4b26      	ldr	r3, [pc, #152]	@ (80037d4 <HAL_DMA_Init+0xe4>)
 800373a:	4413      	add	r3, r2
 800373c:	4a23      	ldr	r2, [pc, #140]	@ (80037cc <HAL_DMA_Init+0xdc>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	009a      	lsls	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a22      	ldr	r2, [pc, #136]	@ (80037d8 <HAL_DMA_Init+0xe8>)
 800374e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003766:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800376a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	40020407 	.word	0x40020407
 80037c8:	bffdfff8 	.word	0xbffdfff8
 80037cc:	cccccccd 	.word	0xcccccccd
 80037d0:	40020000 	.word	0x40020000
 80037d4:	bffdfbf8 	.word	0xbffdfbf8
 80037d8:	40020400 	.word	0x40020400

080037dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_DMA_Start_IT+0x20>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e04b      	b.n	8003894 <HAL_DMA_Start_IT+0xb8>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d13a      	bne.n	8003886 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fbb1 	bl	8003f9c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 020e 	orr.w	r2, r2, #14
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e00f      	b.n	8003874 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0204 	bic.w	r2, r2, #4
 8003862:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 020a 	orr.w	r2, r2, #10
 8003872:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e005      	b.n	8003892 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800388e:	2302      	movs	r3, #2
 8003890:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d008      	beq.n	80038c6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2204      	movs	r2, #4
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e020      	b.n	8003908 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 020e 	bic.w	r2, r2, #14
 80038d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003906:	7bfb      	ldrb	r3, [r7, #15]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr
	...

08003914 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d005      	beq.n	8003938 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2204      	movs	r2, #4
 8003930:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	e0d6      	b.n	8003ae6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 020e 	bic.w	r2, r2, #14
 8003946:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b64      	ldr	r3, [pc, #400]	@ (8003af0 <HAL_DMA_Abort_IT+0x1dc>)
 8003960:	429a      	cmp	r2, r3
 8003962:	d958      	bls.n	8003a16 <HAL_DMA_Abort_IT+0x102>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a62      	ldr	r2, [pc, #392]	@ (8003af4 <HAL_DMA_Abort_IT+0x1e0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d04f      	beq.n	8003a0e <HAL_DMA_Abort_IT+0xfa>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a61      	ldr	r2, [pc, #388]	@ (8003af8 <HAL_DMA_Abort_IT+0x1e4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d048      	beq.n	8003a0a <HAL_DMA_Abort_IT+0xf6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a5f      	ldr	r2, [pc, #380]	@ (8003afc <HAL_DMA_Abort_IT+0x1e8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d040      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xf0>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a5e      	ldr	r2, [pc, #376]	@ (8003b00 <HAL_DMA_Abort_IT+0x1ec>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d038      	beq.n	80039fe <HAL_DMA_Abort_IT+0xea>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a5c      	ldr	r2, [pc, #368]	@ (8003b04 <HAL_DMA_Abort_IT+0x1f0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d030      	beq.n	80039f8 <HAL_DMA_Abort_IT+0xe4>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a5b      	ldr	r2, [pc, #364]	@ (8003b08 <HAL_DMA_Abort_IT+0x1f4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d028      	beq.n	80039f2 <HAL_DMA_Abort_IT+0xde>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a52      	ldr	r2, [pc, #328]	@ (8003af0 <HAL_DMA_Abort_IT+0x1dc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d020      	beq.n	80039ec <HAL_DMA_Abort_IT+0xd8>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a57      	ldr	r2, [pc, #348]	@ (8003b0c <HAL_DMA_Abort_IT+0x1f8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d019      	beq.n	80039e8 <HAL_DMA_Abort_IT+0xd4>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a55      	ldr	r2, [pc, #340]	@ (8003b10 <HAL_DMA_Abort_IT+0x1fc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d012      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xd0>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a54      	ldr	r2, [pc, #336]	@ (8003b14 <HAL_DMA_Abort_IT+0x200>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00a      	beq.n	80039de <HAL_DMA_Abort_IT+0xca>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a52      	ldr	r2, [pc, #328]	@ (8003b18 <HAL_DMA_Abort_IT+0x204>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d102      	bne.n	80039d8 <HAL_DMA_Abort_IT+0xc4>
 80039d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039d6:	e01b      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 80039d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039dc:	e018      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 80039de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039e2:	e015      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 80039e4:	2310      	movs	r3, #16
 80039e6:	e013      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e011      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 80039ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039f0:	e00e      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 80039f2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039f6:	e00b      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 80039f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039fc:	e008      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 80039fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a02:	e005      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 8003a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a08:	e002      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 8003a0a:	2310      	movs	r3, #16
 8003a0c:	e000      	b.n	8003a10 <HAL_DMA_Abort_IT+0xfc>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	4a42      	ldr	r2, [pc, #264]	@ (8003b1c <HAL_DMA_Abort_IT+0x208>)
 8003a12:	6053      	str	r3, [r2, #4]
 8003a14:	e057      	b.n	8003ac6 <HAL_DMA_Abort_IT+0x1b2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a36      	ldr	r2, [pc, #216]	@ (8003af4 <HAL_DMA_Abort_IT+0x1e0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d04f      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x1ac>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a34      	ldr	r2, [pc, #208]	@ (8003af8 <HAL_DMA_Abort_IT+0x1e4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d048      	beq.n	8003abc <HAL_DMA_Abort_IT+0x1a8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a33      	ldr	r2, [pc, #204]	@ (8003afc <HAL_DMA_Abort_IT+0x1e8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d040      	beq.n	8003ab6 <HAL_DMA_Abort_IT+0x1a2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a31      	ldr	r2, [pc, #196]	@ (8003b00 <HAL_DMA_Abort_IT+0x1ec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d038      	beq.n	8003ab0 <HAL_DMA_Abort_IT+0x19c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a30      	ldr	r2, [pc, #192]	@ (8003b04 <HAL_DMA_Abort_IT+0x1f0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d030      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x196>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b08 <HAL_DMA_Abort_IT+0x1f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d028      	beq.n	8003aa4 <HAL_DMA_Abort_IT+0x190>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a26      	ldr	r2, [pc, #152]	@ (8003af0 <HAL_DMA_Abort_IT+0x1dc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d020      	beq.n	8003a9e <HAL_DMA_Abort_IT+0x18a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a2a      	ldr	r2, [pc, #168]	@ (8003b0c <HAL_DMA_Abort_IT+0x1f8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d019      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x186>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a29      	ldr	r2, [pc, #164]	@ (8003b10 <HAL_DMA_Abort_IT+0x1fc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d012      	beq.n	8003a96 <HAL_DMA_Abort_IT+0x182>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a27      	ldr	r2, [pc, #156]	@ (8003b14 <HAL_DMA_Abort_IT+0x200>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00a      	beq.n	8003a90 <HAL_DMA_Abort_IT+0x17c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a26      	ldr	r2, [pc, #152]	@ (8003b18 <HAL_DMA_Abort_IT+0x204>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d102      	bne.n	8003a8a <HAL_DMA_Abort_IT+0x176>
 8003a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a88:	e01b      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003a8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a8e:	e018      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a94:	e015      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003a96:	2310      	movs	r3, #16
 8003a98:	e013      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e011      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003a9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003aa2:	e00e      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003aa4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003aa8:	e00b      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003aaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003aae:	e008      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ab4:	e005      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003aba:	e002      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003abc:	2310      	movs	r3, #16
 8003abe:	e000      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1ae>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	4a17      	ldr	r2, [pc, #92]	@ (8003b20 <HAL_DMA_Abort_IT+0x20c>)
 8003ac4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
    } 
  }
  return status;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40020080 	.word	0x40020080
 8003af4:	40020008 	.word	0x40020008
 8003af8:	4002001c 	.word	0x4002001c
 8003afc:	40020030 	.word	0x40020030
 8003b00:	40020044 	.word	0x40020044
 8003b04:	40020058 	.word	0x40020058
 8003b08:	4002006c 	.word	0x4002006c
 8003b0c:	40020408 	.word	0x40020408
 8003b10:	4002041c 	.word	0x4002041c
 8003b14:	40020430 	.word	0x40020430
 8003b18:	40020444 	.word	0x40020444
 8003b1c:	40020400 	.word	0x40020400
 8003b20:	40020000 	.word	0x40020000

08003b24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	2204      	movs	r2, #4
 8003b42:	409a      	lsls	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80f1 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x20c>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80eb 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003cfc <HAL_DMA_IRQHandler+0x1d8>)
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d958      	bls.n	8003c36 <HAL_DMA_IRQHandler+0x112>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a5d      	ldr	r2, [pc, #372]	@ (8003d00 <HAL_DMA_IRQHandler+0x1dc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d04f      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x10a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a5c      	ldr	r2, [pc, #368]	@ (8003d04 <HAL_DMA_IRQHandler+0x1e0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d048      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x106>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003d08 <HAL_DMA_IRQHandler+0x1e4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d040      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x100>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a59      	ldr	r2, [pc, #356]	@ (8003d0c <HAL_DMA_IRQHandler+0x1e8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d038      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xfa>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a57      	ldr	r2, [pc, #348]	@ (8003d10 <HAL_DMA_IRQHandler+0x1ec>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d030      	beq.n	8003c18 <HAL_DMA_IRQHandler+0xf4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a56      	ldr	r2, [pc, #344]	@ (8003d14 <HAL_DMA_IRQHandler+0x1f0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d028      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xee>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a4d      	ldr	r2, [pc, #308]	@ (8003cfc <HAL_DMA_IRQHandler+0x1d8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d020      	beq.n	8003c0c <HAL_DMA_IRQHandler+0xe8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a52      	ldr	r2, [pc, #328]	@ (8003d18 <HAL_DMA_IRQHandler+0x1f4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d019      	beq.n	8003c08 <HAL_DMA_IRQHandler+0xe4>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a50      	ldr	r2, [pc, #320]	@ (8003d1c <HAL_DMA_IRQHandler+0x1f8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d012      	beq.n	8003c04 <HAL_DMA_IRQHandler+0xe0>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a4f      	ldr	r2, [pc, #316]	@ (8003d20 <HAL_DMA_IRQHandler+0x1fc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00a      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xda>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a4d      	ldr	r2, [pc, #308]	@ (8003d24 <HAL_DMA_IRQHandler+0x200>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d102      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0xd4>
 8003bf2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bf6:	e01b      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003bf8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003bfc:	e018      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003bfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c02:	e015      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003c04:	2340      	movs	r3, #64	@ 0x40
 8003c06:	e013      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	e011      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003c0c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c10:	e00e      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003c12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003c16:	e00b      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003c18:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003c1c:	e008      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003c1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c22:	e005      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003c24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c28:	e002      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003c2a:	2340      	movs	r3, #64	@ 0x40
 8003c2c:	e000      	b.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003c2e:	2304      	movs	r3, #4
 8003c30:	4a3d      	ldr	r2, [pc, #244]	@ (8003d28 <HAL_DMA_IRQHandler+0x204>)
 8003c32:	6053      	str	r3, [r2, #4]
 8003c34:	e057      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x1c2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a31      	ldr	r2, [pc, #196]	@ (8003d00 <HAL_DMA_IRQHandler+0x1dc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d04f      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x1bc>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2f      	ldr	r2, [pc, #188]	@ (8003d04 <HAL_DMA_IRQHandler+0x1e0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d048      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x1b8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8003d08 <HAL_DMA_IRQHandler+0x1e4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d040      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x1b2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2c      	ldr	r2, [pc, #176]	@ (8003d0c <HAL_DMA_IRQHandler+0x1e8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d038      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x1ac>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2b      	ldr	r2, [pc, #172]	@ (8003d10 <HAL_DMA_IRQHandler+0x1ec>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d030      	beq.n	8003cca <HAL_DMA_IRQHandler+0x1a6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a29      	ldr	r2, [pc, #164]	@ (8003d14 <HAL_DMA_IRQHandler+0x1f0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d028      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x1a0>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a21      	ldr	r2, [pc, #132]	@ (8003cfc <HAL_DMA_IRQHandler+0x1d8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d020      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x19a>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a25      	ldr	r2, [pc, #148]	@ (8003d18 <HAL_DMA_IRQHandler+0x1f4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d019      	beq.n	8003cba <HAL_DMA_IRQHandler+0x196>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a24      	ldr	r2, [pc, #144]	@ (8003d1c <HAL_DMA_IRQHandler+0x1f8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d012      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x192>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a22      	ldr	r2, [pc, #136]	@ (8003d20 <HAL_DMA_IRQHandler+0x1fc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00a      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x18c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a21      	ldr	r2, [pc, #132]	@ (8003d24 <HAL_DMA_IRQHandler+0x200>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d102      	bne.n	8003caa <HAL_DMA_IRQHandler+0x186>
 8003ca4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ca8:	e01b      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003caa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003cae:	e018      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003cb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cb4:	e015      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003cb6:	2340      	movs	r3, #64	@ 0x40
 8003cb8:	e013      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003cba:	2304      	movs	r3, #4
 8003cbc:	e011      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003cbe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003cc2:	e00e      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003cc4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003cc8:	e00b      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003cca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003cce:	e008      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003cd0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003cd4:	e005      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cda:	e002      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003cdc:	2340      	movs	r3, #64	@ 0x40
 8003cde:	e000      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1be>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	4a12      	ldr	r2, [pc, #72]	@ (8003d2c <HAL_DMA_IRQHandler+0x208>)
 8003ce4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8136 	beq.w	8003f5c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003cf8:	e130      	b.n	8003f5c <HAL_DMA_IRQHandler+0x438>
 8003cfa:	bf00      	nop
 8003cfc:	40020080 	.word	0x40020080
 8003d00:	40020008 	.word	0x40020008
 8003d04:	4002001c 	.word	0x4002001c
 8003d08:	40020030 	.word	0x40020030
 8003d0c:	40020044 	.word	0x40020044
 8003d10:	40020058 	.word	0x40020058
 8003d14:	4002006c 	.word	0x4002006c
 8003d18:	40020408 	.word	0x40020408
 8003d1c:	4002041c 	.word	0x4002041c
 8003d20:	40020430 	.word	0x40020430
 8003d24:	40020444 	.word	0x40020444
 8003d28:	40020400 	.word	0x40020400
 8003d2c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	2202      	movs	r2, #2
 8003d36:	409a      	lsls	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80dd 	beq.w	8003efc <HAL_DMA_IRQHandler+0x3d8>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80d7 	beq.w	8003efc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 020a 	bic.w	r2, r2, #10
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f68 <HAL_DMA_IRQHandler+0x444>)
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d958      	bls.n	8003e32 <HAL_DMA_IRQHandler+0x30e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a79      	ldr	r2, [pc, #484]	@ (8003f6c <HAL_DMA_IRQHandler+0x448>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d04f      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x306>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a78      	ldr	r2, [pc, #480]	@ (8003f70 <HAL_DMA_IRQHandler+0x44c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d048      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x302>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a76      	ldr	r2, [pc, #472]	@ (8003f74 <HAL_DMA_IRQHandler+0x450>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d040      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x2fc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a75      	ldr	r2, [pc, #468]	@ (8003f78 <HAL_DMA_IRQHandler+0x454>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d038      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2f6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a73      	ldr	r2, [pc, #460]	@ (8003f7c <HAL_DMA_IRQHandler+0x458>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d030      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x2f0>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a72      	ldr	r2, [pc, #456]	@ (8003f80 <HAL_DMA_IRQHandler+0x45c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d028      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x2ea>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a69      	ldr	r2, [pc, #420]	@ (8003f68 <HAL_DMA_IRQHandler+0x444>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d020      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x2e4>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6e      	ldr	r2, [pc, #440]	@ (8003f84 <HAL_DMA_IRQHandler+0x460>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d019      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x2e0>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6c      	ldr	r2, [pc, #432]	@ (8003f88 <HAL_DMA_IRQHandler+0x464>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d012      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x2dc>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a6b      	ldr	r2, [pc, #428]	@ (8003f8c <HAL_DMA_IRQHandler+0x468>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00a      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x2d6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a69      	ldr	r2, [pc, #420]	@ (8003f90 <HAL_DMA_IRQHandler+0x46c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d102      	bne.n	8003df4 <HAL_DMA_IRQHandler+0x2d0>
 8003dee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003df2:	e01b      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003df4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003df8:	e018      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003dfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dfe:	e015      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003e00:	2320      	movs	r3, #32
 8003e02:	e013      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e011      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003e08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e0c:	e00e      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003e0e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003e12:	e00b      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003e14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e18:	e008      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003e1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e1e:	e005      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003e20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e24:	e002      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003e26:	2320      	movs	r3, #32
 8003e28:	e000      	b.n	8003e2c <HAL_DMA_IRQHandler+0x308>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	4a59      	ldr	r2, [pc, #356]	@ (8003f94 <HAL_DMA_IRQHandler+0x470>)
 8003e2e:	6053      	str	r3, [r2, #4]
 8003e30:	e057      	b.n	8003ee2 <HAL_DMA_IRQHandler+0x3be>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a4d      	ldr	r2, [pc, #308]	@ (8003f6c <HAL_DMA_IRQHandler+0x448>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04f      	beq.n	8003edc <HAL_DMA_IRQHandler+0x3b8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a4b      	ldr	r2, [pc, #300]	@ (8003f70 <HAL_DMA_IRQHandler+0x44c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d048      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0x3b4>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003f74 <HAL_DMA_IRQHandler+0x450>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d040      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x3ae>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a48      	ldr	r2, [pc, #288]	@ (8003f78 <HAL_DMA_IRQHandler+0x454>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d038      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x3a8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a47      	ldr	r2, [pc, #284]	@ (8003f7c <HAL_DMA_IRQHandler+0x458>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d030      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3a2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a45      	ldr	r2, [pc, #276]	@ (8003f80 <HAL_DMA_IRQHandler+0x45c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d028      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x39c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a3d      	ldr	r2, [pc, #244]	@ (8003f68 <HAL_DMA_IRQHandler+0x444>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d020      	beq.n	8003eba <HAL_DMA_IRQHandler+0x396>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a41      	ldr	r2, [pc, #260]	@ (8003f84 <HAL_DMA_IRQHandler+0x460>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d019      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x392>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a40      	ldr	r2, [pc, #256]	@ (8003f88 <HAL_DMA_IRQHandler+0x464>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d012      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x38e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a3e      	ldr	r2, [pc, #248]	@ (8003f8c <HAL_DMA_IRQHandler+0x468>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00a      	beq.n	8003eac <HAL_DMA_IRQHandler+0x388>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003f90 <HAL_DMA_IRQHandler+0x46c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d102      	bne.n	8003ea6 <HAL_DMA_IRQHandler+0x382>
 8003ea0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ea4:	e01b      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003ea6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003eaa:	e018      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003eb0:	e015      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	e013      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e011      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003eba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ebe:	e00e      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003ec0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003ec4:	e00b      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003ec6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003eca:	e008      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003ecc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ed0:	e005      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ed6:	e002      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003ed8:	2320      	movs	r3, #32
 8003eda:	e000      	b.n	8003ede <HAL_DMA_IRQHandler+0x3ba>
 8003edc:	2302      	movs	r3, #2
 8003ede:	4a2e      	ldr	r2, [pc, #184]	@ (8003f98 <HAL_DMA_IRQHandler+0x474>)
 8003ee0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d034      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003efa:	e02f      	b.n	8003f5c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	2208      	movs	r2, #8
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d028      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x43a>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d023      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 020e 	bic.w	r2, r2, #14
 8003f24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2e:	2101      	movs	r1, #1
 8003f30:	fa01 f202 	lsl.w	r2, r1, r2
 8003f34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
    }
  }
  return;
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
}
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40020080 	.word	0x40020080
 8003f6c:	40020008 	.word	0x40020008
 8003f70:	4002001c 	.word	0x4002001c
 8003f74:	40020030 	.word	0x40020030
 8003f78:	40020044 	.word	0x40020044
 8003f7c:	40020058 	.word	0x40020058
 8003f80:	4002006c 	.word	0x4002006c
 8003f84:	40020408 	.word	0x40020408
 8003f88:	4002041c 	.word	0x4002041c
 8003f8c:	40020430 	.word	0x40020430
 8003f90:	40020444 	.word	0x40020444
 8003f94:	40020400 	.word	0x40020400
 8003f98:	40020000 	.word	0x40020000

08003f9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d108      	bne.n	8003fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fda:	e007      	b.n	8003fec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b08b      	sub	sp, #44	@ 0x2c
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004006:	2300      	movs	r3, #0
 8004008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400a:	e179      	b.n	8004300 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800400c:	2201      	movs	r2, #1
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	429a      	cmp	r2, r3
 8004026:	f040 8168 	bne.w	80042fa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4a96      	ldr	r2, [pc, #600]	@ (8004288 <HAL_GPIO_Init+0x290>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d05e      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
 8004034:	4a94      	ldr	r2, [pc, #592]	@ (8004288 <HAL_GPIO_Init+0x290>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d875      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 800403a:	4a94      	ldr	r2, [pc, #592]	@ (800428c <HAL_GPIO_Init+0x294>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d058      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
 8004040:	4a92      	ldr	r2, [pc, #584]	@ (800428c <HAL_GPIO_Init+0x294>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d86f      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 8004046:	4a92      	ldr	r2, [pc, #584]	@ (8004290 <HAL_GPIO_Init+0x298>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d052      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
 800404c:	4a90      	ldr	r2, [pc, #576]	@ (8004290 <HAL_GPIO_Init+0x298>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d869      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 8004052:	4a90      	ldr	r2, [pc, #576]	@ (8004294 <HAL_GPIO_Init+0x29c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d04c      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
 8004058:	4a8e      	ldr	r2, [pc, #568]	@ (8004294 <HAL_GPIO_Init+0x29c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d863      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 800405e:	4a8e      	ldr	r2, [pc, #568]	@ (8004298 <HAL_GPIO_Init+0x2a0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d046      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
 8004064:	4a8c      	ldr	r2, [pc, #560]	@ (8004298 <HAL_GPIO_Init+0x2a0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d85d      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 800406a:	2b12      	cmp	r3, #18
 800406c:	d82a      	bhi.n	80040c4 <HAL_GPIO_Init+0xcc>
 800406e:	2b12      	cmp	r3, #18
 8004070:	d859      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 8004072:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <HAL_GPIO_Init+0x80>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	080040f3 	.word	0x080040f3
 800407c:	080040cd 	.word	0x080040cd
 8004080:	080040df 	.word	0x080040df
 8004084:	08004121 	.word	0x08004121
 8004088:	08004127 	.word	0x08004127
 800408c:	08004127 	.word	0x08004127
 8004090:	08004127 	.word	0x08004127
 8004094:	08004127 	.word	0x08004127
 8004098:	08004127 	.word	0x08004127
 800409c:	08004127 	.word	0x08004127
 80040a0:	08004127 	.word	0x08004127
 80040a4:	08004127 	.word	0x08004127
 80040a8:	08004127 	.word	0x08004127
 80040ac:	08004127 	.word	0x08004127
 80040b0:	08004127 	.word	0x08004127
 80040b4:	08004127 	.word	0x08004127
 80040b8:	08004127 	.word	0x08004127
 80040bc:	080040d5 	.word	0x080040d5
 80040c0:	080040e9 	.word	0x080040e9
 80040c4:	4a75      	ldr	r2, [pc, #468]	@ (800429c <HAL_GPIO_Init+0x2a4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80040ca:	e02c      	b.n	8004126 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	623b      	str	r3, [r7, #32]
          break;
 80040d2:	e029      	b.n	8004128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	3304      	adds	r3, #4
 80040da:	623b      	str	r3, [r7, #32]
          break;
 80040dc:	e024      	b.n	8004128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	3308      	adds	r3, #8
 80040e4:	623b      	str	r3, [r7, #32]
          break;
 80040e6:	e01f      	b.n	8004128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	330c      	adds	r3, #12
 80040ee:	623b      	str	r3, [r7, #32]
          break;
 80040f0:	e01a      	b.n	8004128 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80040fa:	2304      	movs	r3, #4
 80040fc:	623b      	str	r3, [r7, #32]
          break;
 80040fe:	e013      	b.n	8004128 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d105      	bne.n	8004114 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004108:	2308      	movs	r3, #8
 800410a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	611a      	str	r2, [r3, #16]
          break;
 8004112:	e009      	b.n	8004128 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004114:	2308      	movs	r3, #8
 8004116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	615a      	str	r2, [r3, #20]
          break;
 800411e:	e003      	b.n	8004128 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004120:	2300      	movs	r3, #0
 8004122:	623b      	str	r3, [r7, #32]
          break;
 8004124:	e000      	b.n	8004128 <HAL_GPIO_Init+0x130>
          break;
 8004126:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2bff      	cmp	r3, #255	@ 0xff
 800412c:	d801      	bhi.n	8004132 <HAL_GPIO_Init+0x13a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	e001      	b.n	8004136 <HAL_GPIO_Init+0x13e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3304      	adds	r3, #4
 8004136:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2bff      	cmp	r3, #255	@ 0xff
 800413c:	d802      	bhi.n	8004144 <HAL_GPIO_Init+0x14c>
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	e002      	b.n	800414a <HAL_GPIO_Init+0x152>
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	3b08      	subs	r3, #8
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	210f      	movs	r1, #15
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	401a      	ands	r2, r3
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80c1 	beq.w	80042fa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004178:	4b49      	ldr	r3, [pc, #292]	@ (80042a0 <HAL_GPIO_Init+0x2a8>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	4a48      	ldr	r2, [pc, #288]	@ (80042a0 <HAL_GPIO_Init+0x2a8>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6193      	str	r3, [r2, #24]
 8004184:	4b46      	ldr	r3, [pc, #280]	@ (80042a0 <HAL_GPIO_Init+0x2a8>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004190:	4a44      	ldr	r2, [pc, #272]	@ (80042a4 <HAL_GPIO_Init+0x2ac>)
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3302      	adds	r3, #2
 8004198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	220f      	movs	r2, #15
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a3c      	ldr	r2, [pc, #240]	@ (80042a8 <HAL_GPIO_Init+0x2b0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d01f      	beq.n	80041fc <HAL_GPIO_Init+0x204>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a3b      	ldr	r2, [pc, #236]	@ (80042ac <HAL_GPIO_Init+0x2b4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d019      	beq.n	80041f8 <HAL_GPIO_Init+0x200>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3a      	ldr	r2, [pc, #232]	@ (80042b0 <HAL_GPIO_Init+0x2b8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <HAL_GPIO_Init+0x1fc>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a39      	ldr	r2, [pc, #228]	@ (80042b4 <HAL_GPIO_Init+0x2bc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00d      	beq.n	80041f0 <HAL_GPIO_Init+0x1f8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a38      	ldr	r2, [pc, #224]	@ (80042b8 <HAL_GPIO_Init+0x2c0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <HAL_GPIO_Init+0x1f4>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a37      	ldr	r2, [pc, #220]	@ (80042bc <HAL_GPIO_Init+0x2c4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d101      	bne.n	80041e8 <HAL_GPIO_Init+0x1f0>
 80041e4:	2305      	movs	r3, #5
 80041e6:	e00a      	b.n	80041fe <HAL_GPIO_Init+0x206>
 80041e8:	2306      	movs	r3, #6
 80041ea:	e008      	b.n	80041fe <HAL_GPIO_Init+0x206>
 80041ec:	2304      	movs	r3, #4
 80041ee:	e006      	b.n	80041fe <HAL_GPIO_Init+0x206>
 80041f0:	2303      	movs	r3, #3
 80041f2:	e004      	b.n	80041fe <HAL_GPIO_Init+0x206>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e002      	b.n	80041fe <HAL_GPIO_Init+0x206>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_GPIO_Init+0x206>
 80041fc:	2300      	movs	r3, #0
 80041fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004200:	f002 0203 	and.w	r2, r2, #3
 8004204:	0092      	lsls	r2, r2, #2
 8004206:	4093      	lsls	r3, r2
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800420e:	4925      	ldr	r1, [pc, #148]	@ (80042a4 <HAL_GPIO_Init+0x2ac>)
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	3302      	adds	r3, #2
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d006      	beq.n	8004236 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004228:	4b25      	ldr	r3, [pc, #148]	@ (80042c0 <HAL_GPIO_Init+0x2c8>)
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	4924      	ldr	r1, [pc, #144]	@ (80042c0 <HAL_GPIO_Init+0x2c8>)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]
 8004234:	e006      	b.n	8004244 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004236:	4b22      	ldr	r3, [pc, #136]	@ (80042c0 <HAL_GPIO_Init+0x2c8>)
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	43db      	mvns	r3, r3
 800423e:	4920      	ldr	r1, [pc, #128]	@ (80042c0 <HAL_GPIO_Init+0x2c8>)
 8004240:	4013      	ands	r3, r2
 8004242:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d006      	beq.n	800425e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004250:	4b1b      	ldr	r3, [pc, #108]	@ (80042c0 <HAL_GPIO_Init+0x2c8>)
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	491a      	ldr	r1, [pc, #104]	@ (80042c0 <HAL_GPIO_Init+0x2c8>)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	4313      	orrs	r3, r2
 800425a:	60cb      	str	r3, [r1, #12]
 800425c:	e006      	b.n	800426c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800425e:	4b18      	ldr	r3, [pc, #96]	@ (80042c0 <HAL_GPIO_Init+0x2c8>)
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	43db      	mvns	r3, r3
 8004266:	4916      	ldr	r1, [pc, #88]	@ (80042c0 <HAL_GPIO_Init+0x2c8>)
 8004268:	4013      	ands	r3, r2
 800426a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d025      	beq.n	80042c4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004278:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <HAL_GPIO_Init+0x2c8>)
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	4910      	ldr	r1, [pc, #64]	@ (80042c0 <HAL_GPIO_Init+0x2c8>)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
 8004284:	e025      	b.n	80042d2 <HAL_GPIO_Init+0x2da>
 8004286:	bf00      	nop
 8004288:	10320000 	.word	0x10320000
 800428c:	10310000 	.word	0x10310000
 8004290:	10220000 	.word	0x10220000
 8004294:	10210000 	.word	0x10210000
 8004298:	10120000 	.word	0x10120000
 800429c:	10110000 	.word	0x10110000
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40010000 	.word	0x40010000
 80042a8:	40010800 	.word	0x40010800
 80042ac:	40010c00 	.word	0x40010c00
 80042b0:	40011000 	.word	0x40011000
 80042b4:	40011400 	.word	0x40011400
 80042b8:	40011800 	.word	0x40011800
 80042bc:	40011c00 	.word	0x40011c00
 80042c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042c4:	4b15      	ldr	r3, [pc, #84]	@ (800431c <HAL_GPIO_Init+0x324>)
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	4913      	ldr	r1, [pc, #76]	@ (800431c <HAL_GPIO_Init+0x324>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d006      	beq.n	80042ec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80042de:	4b0f      	ldr	r3, [pc, #60]	@ (800431c <HAL_GPIO_Init+0x324>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	490e      	ldr	r1, [pc, #56]	@ (800431c <HAL_GPIO_Init+0x324>)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
 80042ea:	e006      	b.n	80042fa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_GPIO_Init+0x324>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	4909      	ldr	r1, [pc, #36]	@ (800431c <HAL_GPIO_Init+0x324>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	3301      	adds	r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	f47f ae7e 	bne.w	800400c <HAL_GPIO_Init+0x14>
  }
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	372c      	adds	r7, #44	@ 0x2c
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	40010400 	.word	0x40010400

08004320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	887b      	ldrh	r3, [r7, #2]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	e001      	b.n	8004342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004342:	7bfb      	ldrb	r3, [r7, #15]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	460b      	mov	r3, r1
 8004358:	807b      	strh	r3, [r7, #2]
 800435a:	4613      	mov	r3, r2
 800435c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800435e:	787b      	ldrb	r3, [r7, #1]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004364:	887a      	ldrh	r2, [r7, #2]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800436a:	e003      	b.n	8004374 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800436c:	887b      	ldrh	r3, [r7, #2]
 800436e:	041a      	lsls	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	611a      	str	r2, [r3, #16]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
	...

08004380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e12b      	b.n	80045ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd fdd4 	bl	8001f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2224      	movs	r2, #36	@ 0x24
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043e4:	f000 fcdc 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 80043e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4a81      	ldr	r2, [pc, #516]	@ (80045f4 <HAL_I2C_Init+0x274>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d807      	bhi.n	8004404 <HAL_I2C_Init+0x84>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a80      	ldr	r2, [pc, #512]	@ (80045f8 <HAL_I2C_Init+0x278>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	bf94      	ite	ls
 80043fc:	2301      	movls	r3, #1
 80043fe:	2300      	movhi	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e006      	b.n	8004412 <HAL_I2C_Init+0x92>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a7d      	ldr	r2, [pc, #500]	@ (80045fc <HAL_I2C_Init+0x27c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	bf94      	ite	ls
 800440c:	2301      	movls	r3, #1
 800440e:	2300      	movhi	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e0e7      	b.n	80045ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a78      	ldr	r2, [pc, #480]	@ (8004600 <HAL_I2C_Init+0x280>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	0c9b      	lsrs	r3, r3, #18
 8004424:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a6a      	ldr	r2, [pc, #424]	@ (80045f4 <HAL_I2C_Init+0x274>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d802      	bhi.n	8004454 <HAL_I2C_Init+0xd4>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3301      	adds	r3, #1
 8004452:	e009      	b.n	8004468 <HAL_I2C_Init+0xe8>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	4a69      	ldr	r2, [pc, #420]	@ (8004604 <HAL_I2C_Init+0x284>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	099b      	lsrs	r3, r3, #6
 8004466:	3301      	adds	r3, #1
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	430b      	orrs	r3, r1
 800446e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800447a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	495c      	ldr	r1, [pc, #368]	@ (80045f4 <HAL_I2C_Init+0x274>)
 8004484:	428b      	cmp	r3, r1
 8004486:	d819      	bhi.n	80044bc <HAL_I2C_Init+0x13c>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1e59      	subs	r1, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	fbb1 f3f3 	udiv	r3, r1, r3
 8004496:	1c59      	adds	r1, r3, #1
 8004498:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800449c:	400b      	ands	r3, r1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_I2C_Init+0x138>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1e59      	subs	r1, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b0:	3301      	adds	r3, #1
 80044b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b6:	e051      	b.n	800455c <HAL_I2C_Init+0x1dc>
 80044b8:	2304      	movs	r3, #4
 80044ba:	e04f      	b.n	800455c <HAL_I2C_Init+0x1dc>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d111      	bne.n	80044e8 <HAL_I2C_Init+0x168>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	1e58      	subs	r0, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	440b      	add	r3, r1
 80044d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d6:	3301      	adds	r3, #1
 80044d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044dc:	2b00      	cmp	r3, #0
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	e012      	b.n	800450e <HAL_I2C_Init+0x18e>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1e58      	subs	r0, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	0099      	lsls	r1, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fe:	3301      	adds	r3, #1
 8004500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf0c      	ite	eq
 8004508:	2301      	moveq	r3, #1
 800450a:	2300      	movne	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_I2C_Init+0x196>
 8004512:	2301      	movs	r3, #1
 8004514:	e022      	b.n	800455c <HAL_I2C_Init+0x1dc>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10e      	bne.n	800453c <HAL_I2C_Init+0x1bc>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1e58      	subs	r0, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6859      	ldr	r1, [r3, #4]
 8004526:	460b      	mov	r3, r1
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	440b      	add	r3, r1
 800452c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004530:	3301      	adds	r3, #1
 8004532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800453a:	e00f      	b.n	800455c <HAL_I2C_Init+0x1dc>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1e58      	subs	r0, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6859      	ldr	r1, [r3, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	0099      	lsls	r1, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004552:	3301      	adds	r3, #1
 8004554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004558:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	6809      	ldr	r1, [r1, #0]
 8004560:	4313      	orrs	r3, r2
 8004562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800458a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6911      	ldr	r1, [r2, #16]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68d2      	ldr	r2, [r2, #12]
 8004596:	4311      	orrs	r1, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	430b      	orrs	r3, r1
 800459e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	000186a0 	.word	0x000186a0
 80045f8:	001e847f 	.word	0x001e847f
 80045fc:	003d08ff 	.word	0x003d08ff
 8004600:	431bde83 	.word	0x431bde83
 8004604:	10624dd3 	.word	0x10624dd3

08004608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e272      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8087 	beq.w	8004736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004628:	4b92      	ldr	r3, [pc, #584]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b04      	cmp	r3, #4
 8004632:	d00c      	beq.n	800464e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004634:	4b8f      	ldr	r3, [pc, #572]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b08      	cmp	r3, #8
 800463e:	d112      	bne.n	8004666 <HAL_RCC_OscConfig+0x5e>
 8004640:	4b8c      	ldr	r3, [pc, #560]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800464c:	d10b      	bne.n	8004666 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464e:	4b89      	ldr	r3, [pc, #548]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d06c      	beq.n	8004734 <HAL_RCC_OscConfig+0x12c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d168      	bne.n	8004734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e24c      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800466e:	d106      	bne.n	800467e <HAL_RCC_OscConfig+0x76>
 8004670:	4b80      	ldr	r3, [pc, #512]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a7f      	ldr	r2, [pc, #508]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e02e      	b.n	80046dc <HAL_RCC_OscConfig+0xd4>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x98>
 8004686:	4b7b      	ldr	r3, [pc, #492]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a7a      	ldr	r2, [pc, #488]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 800468c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	4b78      	ldr	r3, [pc, #480]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a77      	ldr	r2, [pc, #476]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004698:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e01d      	b.n	80046dc <HAL_RCC_OscConfig+0xd4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0xbc>
 80046aa:	4b72      	ldr	r3, [pc, #456]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a71      	ldr	r2, [pc, #452]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xd4>
 80046c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b68      	ldr	r3, [pc, #416]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a67      	ldr	r2, [pc, #412]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80046d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fe fcc8 	bl	8003078 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ec:	f7fe fcc4 	bl	8003078 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	@ 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e200      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0xe4>
 800470a:	e014      	b.n	8004736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fe fcb4 	bl	8003078 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004714:	f7fe fcb0 	bl	8003078 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	@ 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e1ec      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	4b53      	ldr	r3, [pc, #332]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x10c>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d063      	beq.n	800480a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004742:	4b4c      	ldr	r3, [pc, #304]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800474e:	4b49      	ldr	r3, [pc, #292]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b08      	cmp	r3, #8
 8004758:	d11c      	bne.n	8004794 <HAL_RCC_OscConfig+0x18c>
 800475a:	4b46      	ldr	r3, [pc, #280]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d116      	bne.n	8004794 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004766:	4b43      	ldr	r3, [pc, #268]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_RCC_OscConfig+0x176>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e1c0      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b3d      	ldr	r3, [pc, #244]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4939      	ldr	r1, [pc, #228]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	e03a      	b.n	800480a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479c:	4b36      	ldr	r3, [pc, #216]	@ (8004878 <HAL_RCC_OscConfig+0x270>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fe fc69 	bl	8003078 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047aa:	f7fe fc65 	bl	8003078 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e1a1      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4927      	ldr	r1, [pc, #156]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]
 80047dc:	e015      	b.n	800480a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047de:	4b26      	ldr	r3, [pc, #152]	@ (8004878 <HAL_RCC_OscConfig+0x270>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fe fc48 	bl	8003078 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ec:	f7fe fc44 	bl	8003078 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e180      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d03a      	beq.n	800488c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d019      	beq.n	8004852 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481e:	4b17      	ldr	r3, [pc, #92]	@ (800487c <HAL_RCC_OscConfig+0x274>)
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004824:	f7fe fc28 	bl	8003078 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482c:	f7fe fc24 	bl	8003078 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e160      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	4b0d      	ldr	r3, [pc, #52]	@ (8004874 <HAL_RCC_OscConfig+0x26c>)
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800484a:	2001      	movs	r0, #1
 800484c:	f000 fad0 	bl	8004df0 <RCC_Delay>
 8004850:	e01c      	b.n	800488c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004852:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <HAL_RCC_OscConfig+0x274>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004858:	f7fe fc0e 	bl	8003078 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485e:	e00f      	b.n	8004880 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004860:	f7fe fc0a 	bl	8003078 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d908      	bls.n	8004880 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e146      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000
 8004878:	42420000 	.word	0x42420000
 800487c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004880:	4b92      	ldr	r3, [pc, #584]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e9      	bne.n	8004860 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80a6 	beq.w	80049e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489e:	4b8b      	ldr	r3, [pc, #556]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10d      	bne.n	80048c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	4b88      	ldr	r3, [pc, #544]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	4a87      	ldr	r2, [pc, #540]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b4:	61d3      	str	r3, [r2, #28]
 80048b6:	4b85      	ldr	r3, [pc, #532]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c6:	4b82      	ldr	r3, [pc, #520]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d118      	bne.n	8004904 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c8>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048de:	f7fe fbcb 	bl	8003078 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e6:	f7fe fbc7 	bl	8003078 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b64      	cmp	r3, #100	@ 0x64
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e103      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f8:	4b75      	ldr	r3, [pc, #468]	@ (8004ad0 <HAL_RCC_OscConfig+0x4c8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d106      	bne.n	800491a <HAL_RCC_OscConfig+0x312>
 800490c:	4b6f      	ldr	r3, [pc, #444]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	4a6e      	ldr	r2, [pc, #440]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6213      	str	r3, [r2, #32]
 8004918:	e02d      	b.n	8004976 <HAL_RCC_OscConfig+0x36e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0x334>
 8004922:	4b6a      	ldr	r3, [pc, #424]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	4a69      	ldr	r2, [pc, #420]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	6213      	str	r3, [r2, #32]
 800492e:	4b67      	ldr	r3, [pc, #412]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	4a66      	ldr	r2, [pc, #408]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004934:	f023 0304 	bic.w	r3, r3, #4
 8004938:	6213      	str	r3, [r2, #32]
 800493a:	e01c      	b.n	8004976 <HAL_RCC_OscConfig+0x36e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x356>
 8004944:	4b61      	ldr	r3, [pc, #388]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4a60      	ldr	r2, [pc, #384]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	6213      	str	r3, [r2, #32]
 8004950:	4b5e      	ldr	r3, [pc, #376]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	4a5d      	ldr	r2, [pc, #372]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	6213      	str	r3, [r2, #32]
 800495c:	e00b      	b.n	8004976 <HAL_RCC_OscConfig+0x36e>
 800495e:	4b5b      	ldr	r3, [pc, #364]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	4a5a      	ldr	r2, [pc, #360]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	6213      	str	r3, [r2, #32]
 800496a:	4b58      	ldr	r3, [pc, #352]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	4a57      	ldr	r2, [pc, #348]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497e:	f7fe fb7b 	bl	8003078 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fe fb77 	bl	8003078 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0b1      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b4b      	ldr	r3, [pc, #300]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ee      	beq.n	8004986 <HAL_RCC_OscConfig+0x37e>
 80049a8:	e014      	b.n	80049d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7fe fb65 	bl	8003078 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fe fb61 	bl	8003078 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e09b      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	4b40      	ldr	r3, [pc, #256]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049da:	4b3c      	ldr	r3, [pc, #240]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	4a3b      	ldr	r2, [pc, #236]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8087 	beq.w	8004afe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f0:	4b36      	ldr	r3, [pc, #216]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d061      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d146      	bne.n	8004a92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a04:	4b33      	ldr	r3, [pc, #204]	@ (8004ad4 <HAL_RCC_OscConfig+0x4cc>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fe fb35 	bl	8003078 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fe fb31 	bl	8003078 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e06d      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a24:	4b29      	ldr	r3, [pc, #164]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a38:	d108      	bne.n	8004a4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a3a:	4b24      	ldr	r3, [pc, #144]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	4921      	ldr	r1, [pc, #132]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a19      	ldr	r1, [r3, #32]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	491b      	ldr	r1, [pc, #108]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad4 <HAL_RCC_OscConfig+0x4cc>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6a:	f7fe fb05 	bl	8003078 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a72:	f7fe fb01 	bl	8003078 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e03d      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a84:	4b11      	ldr	r3, [pc, #68]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x46a>
 8004a90:	e035      	b.n	8004afe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a92:	4b10      	ldr	r3, [pc, #64]	@ (8004ad4 <HAL_RCC_OscConfig+0x4cc>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fe faee 	bl	8003078 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fe faea 	bl	8003078 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e026      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab2:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <HAL_RCC_OscConfig+0x4c4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x498>
 8004abe:	e01e      	b.n	8004afe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e019      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40007000 	.word	0x40007000
 8004ad4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_RCC_OscConfig+0x500>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d106      	bne.n	8004afa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d001      	beq.n	8004afe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40021000 	.word	0x40021000

08004b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0d0      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b6a      	ldr	r3, [pc, #424]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d910      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b67      	ldr	r3, [pc, #412]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 0207 	bic.w	r2, r3, #7
 8004b36:	4965      	ldr	r1, [pc, #404]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b63      	ldr	r3, [pc, #396]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0b8      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b68:	4b59      	ldr	r3, [pc, #356]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a58      	ldr	r2, [pc, #352]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b80:	4b53      	ldr	r3, [pc, #332]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4a52      	ldr	r2, [pc, #328]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8c:	4b50      	ldr	r3, [pc, #320]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	494d      	ldr	r1, [pc, #308]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d040      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	4b47      	ldr	r3, [pc, #284]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d115      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e07f      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bca:	4b41      	ldr	r3, [pc, #260]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e073      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bda:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e06b      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bea:	4b39      	ldr	r3, [pc, #228]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f023 0203 	bic.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4936      	ldr	r1, [pc, #216]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bfc:	f7fe fa3c 	bl	8003078 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	e00a      	b.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c04:	f7fe fa38 	bl	8003078 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e053      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 020c 	and.w	r2, r3, #12
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d1eb      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b27      	ldr	r3, [pc, #156]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d210      	bcs.n	8004c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b24      	ldr	r3, [pc, #144]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 0207 	bic.w	r2, r3, #7
 8004c42:	4922      	ldr	r1, [pc, #136]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b20      	ldr	r3, [pc, #128]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e032      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c68:	4b19      	ldr	r3, [pc, #100]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4916      	ldr	r1, [pc, #88]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c86:	4b12      	ldr	r3, [pc, #72]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	490e      	ldr	r1, [pc, #56]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c9a:	f000 f821 	bl	8004ce0 <HAL_RCC_GetSysClockFreq>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	490a      	ldr	r1, [pc, #40]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cac:	5ccb      	ldrb	r3, [r1, r3]
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a09      	ldr	r2, [pc, #36]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cb6:	4b09      	ldr	r3, [pc, #36]	@ (8004cdc <HAL_RCC_ClockConfig+0x1d0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe f99a 	bl	8002ff4 <HAL_InitTick>

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40022000 	.word	0x40022000
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	0800a500 	.word	0x0800a500
 8004cd8:	20000008 	.word	0x20000008
 8004cdc:	2000000c 	.word	0x2000000c

08004ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	2300      	movs	r3, #0
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d002      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x30>
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d003      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x36>
 8004d0e:	e027      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d10:	4b19      	ldr	r3, [pc, #100]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d12:	613b      	str	r3, [r7, #16]
      break;
 8004d14:	e027      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	0c9b      	lsrs	r3, r3, #18
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	4a17      	ldr	r2, [pc, #92]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d20:	5cd3      	ldrb	r3, [r2, r3]
 8004d22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d2e:	4b11      	ldr	r3, [pc, #68]	@ (8004d74 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	0c5b      	lsrs	r3, r3, #17
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	4a11      	ldr	r2, [pc, #68]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d3a:	5cd3      	ldrb	r3, [r2, r3]
 8004d3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a0d      	ldr	r2, [pc, #52]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d42:	fb03 f202 	mul.w	r2, r3, r2
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e004      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0c      	ldr	r2, [pc, #48]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d54:	fb02 f303 	mul.w	r3, r2, r3
 8004d58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	613b      	str	r3, [r7, #16]
      break;
 8004d5e:	e002      	b.n	8004d66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d60:	4b09      	ldr	r3, [pc, #36]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d62:	613b      	str	r3, [r7, #16]
      break;
 8004d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d66:	693b      	ldr	r3, [r7, #16]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
 8004d78:	00b71b00 	.word	0x00b71b00
 8004d7c:	0800a518 	.word	0x0800a518
 8004d80:	0800a528 	.word	0x0800a528
 8004d84:	003d0900 	.word	0x003d0900
 8004d88:	007a1200 	.word	0x007a1200

08004d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d90:	4b02      	ldr	r3, [pc, #8]	@ (8004d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	20000008 	.word	0x20000008

08004da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004da4:	f7ff fff2 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4903      	ldr	r1, [pc, #12]	@ (8004dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	0800a510 	.word	0x0800a510

08004dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dcc:	f7ff ffde 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	0adb      	lsrs	r3, r3, #11
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	4903      	ldr	r1, [pc, #12]	@ (8004dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40021000 	.word	0x40021000
 8004dec:	0800a510 	.word	0x0800a510

08004df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004df8:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <RCC_Delay+0x34>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8004e28 <RCC_Delay+0x38>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	0a5b      	lsrs	r3, r3, #9
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	fb02 f303 	mul.w	r3, r2, r3
 8004e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e0c:	bf00      	nop
  }
  while (Delay --);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1e5a      	subs	r2, r3, #1
 8004e12:	60fa      	str	r2, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f9      	bne.n	8004e0c <RCC_Delay+0x1c>
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr
 8004e24:	20000008 	.word	0x20000008
 8004e28:	10624dd3 	.word	0x10624dd3

08004e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d07d      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10d      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e58:	4b4c      	ldr	r3, [pc, #304]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e62:	61d3      	str	r3, [r2, #28]
 8004e64:	4b49      	ldr	r3, [pc, #292]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e70:	2301      	movs	r3, #1
 8004e72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e74:	4b46      	ldr	r3, [pc, #280]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d118      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e80:	4b43      	ldr	r3, [pc, #268]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a42      	ldr	r2, [pc, #264]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8c:	f7fe f8f4 	bl	8003078 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e92:	e008      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e94:	f7fe f8f0 	bl	8003078 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e06d      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eb2:	4b36      	ldr	r3, [pc, #216]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d02e      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d027      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eda:	4b2e      	ldr	r3, [pc, #184]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ee6:	4a29      	ldr	r2, [pc, #164]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d014      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef6:	f7fe f8bf 	bl	8003078 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fe f8bb 	bl	8003078 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e036      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f14:	4b1d      	ldr	r3, [pc, #116]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0ee      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f20:	4b1a      	ldr	r3, [pc, #104]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4917      	ldr	r1, [pc, #92]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d105      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f38:	4b14      	ldr	r3, [pc, #80]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	4a13      	ldr	r2, [pc, #76]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f50:	4b0e      	ldr	r3, [pc, #56]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	490b      	ldr	r1, [pc, #44]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f6e:	4b07      	ldr	r3, [pc, #28]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4904      	ldr	r1, [pc, #16]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40007000 	.word	0x40007000
 8004f94:	42420440 	.word	0x42420440

08004f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e041      	b.n	800502e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fd fc4e 	bl	8002860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f000 fdb4 	bl	8005b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d001      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e04e      	b.n	80050ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a22      	ldr	r2, [pc, #136]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xc0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d022      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a21      	ldr	r2, [pc, #132]	@ (80050fc <HAL_TIM_Base_Start_IT+0xc4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d01d      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005084:	d018      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1d      	ldr	r2, [pc, #116]	@ (8005100 <HAL_TIM_Base_Start_IT+0xc8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1b      	ldr	r2, [pc, #108]	@ (8005104 <HAL_TIM_Base_Start_IT+0xcc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00e      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1a      	ldr	r2, [pc, #104]	@ (8005108 <HAL_TIM_Base_Start_IT+0xd0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a18      	ldr	r2, [pc, #96]	@ (800510c <HAL_TIM_Base_Start_IT+0xd4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a17      	ldr	r2, [pc, #92]	@ (8005110 <HAL_TIM_Base_Start_IT+0xd8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d111      	bne.n	80050dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	d010      	beq.n	80050ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050da:	e007      	b.n	80050ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr
 80050f8:	40012c00 	.word	0x40012c00
 80050fc:	40013400 	.word	0x40013400
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800
 8005108:	40000c00 	.word	0x40000c00
 800510c:	40014c00 	.word	0x40014c00
 8005110:	40001800 	.word	0x40001800

08005114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e041      	b.n	80051aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fd fbf2 	bl	8002924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f000 fcf6 	bl	8005b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e041      	b.n	8005248 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f839 	bl	8005250 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4619      	mov	r1, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	f000 fca7 	bl	8005b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
	...

08005264 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_TIM_IC_Start_IT+0x1e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800527e:	b2db      	uxtb	r3, r3
 8005280:	e013      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x46>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d104      	bne.n	8005292 <HAL_TIM_IC_Start_IT+0x2e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800528e:	b2db      	uxtb	r3, r3
 8005290:	e00b      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x46>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_IC_Start_IT+0x3e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	e003      	b.n	80052aa <HAL_TIM_IC_Start_IT+0x46>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d104      	bne.n	80052bc <HAL_TIM_IC_Start_IT+0x58>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e013      	b.n	80052e4 <HAL_TIM_IC_Start_IT+0x80>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d104      	bne.n	80052cc <HAL_TIM_IC_Start_IT+0x68>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e00b      	b.n	80052e4 <HAL_TIM_IC_Start_IT+0x80>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d104      	bne.n	80052dc <HAL_TIM_IC_Start_IT+0x78>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	e003      	b.n	80052e4 <HAL_TIM_IC_Start_IT+0x80>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052e6:	7bbb      	ldrb	r3, [r7, #14]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d102      	bne.n	80052f2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052ec:	7b7b      	ldrb	r3, [r7, #13]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d001      	beq.n	80052f6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e0cc      	b.n	8005490 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_IC_Start_IT+0xa2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005304:	e013      	b.n	800532e <HAL_TIM_IC_Start_IT+0xca>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d104      	bne.n	8005316 <HAL_TIM_IC_Start_IT+0xb2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005314:	e00b      	b.n	800532e <HAL_TIM_IC_Start_IT+0xca>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d104      	bne.n	8005326 <HAL_TIM_IC_Start_IT+0xc2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005324:	e003      	b.n	800532e <HAL_TIM_IC_Start_IT+0xca>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_TIM_IC_Start_IT+0xda>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800533c:	e013      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x102>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d104      	bne.n	800534e <HAL_TIM_IC_Start_IT+0xea>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800534c:	e00b      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x102>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d104      	bne.n	800535e <HAL_TIM_IC_Start_IT+0xfa>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800535c:	e003      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x102>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d841      	bhi.n	80053f0 <HAL_TIM_IC_Start_IT+0x18c>
 800536c:	a201      	add	r2, pc, #4	@ (adr r2, 8005374 <HAL_TIM_IC_Start_IT+0x110>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	080053a9 	.word	0x080053a9
 8005378:	080053f1 	.word	0x080053f1
 800537c:	080053f1 	.word	0x080053f1
 8005380:	080053f1 	.word	0x080053f1
 8005384:	080053bb 	.word	0x080053bb
 8005388:	080053f1 	.word	0x080053f1
 800538c:	080053f1 	.word	0x080053f1
 8005390:	080053f1 	.word	0x080053f1
 8005394:	080053cd 	.word	0x080053cd
 8005398:	080053f1 	.word	0x080053f1
 800539c:	080053f1 	.word	0x080053f1
 80053a0:	080053f1 	.word	0x080053f1
 80053a4:	080053df 	.word	0x080053df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0202 	orr.w	r2, r2, #2
 80053b6:	60da      	str	r2, [r3, #12]
      break;
 80053b8:	e01d      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0204 	orr.w	r2, r2, #4
 80053c8:	60da      	str	r2, [r3, #12]
      break;
 80053ca:	e014      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0208 	orr.w	r2, r2, #8
 80053da:	60da      	str	r2, [r3, #12]
      break;
 80053dc:	e00b      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0210 	orr.w	r2, r2, #16
 80053ec:	60da      	str	r2, [r3, #12]
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
      break;
 80053f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d148      	bne.n	800548e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f000 ffa2 	bl	800634e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a22      	ldr	r2, [pc, #136]	@ (8005498 <HAL_TIM_IC_Start_IT+0x234>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d022      	beq.n	800545a <HAL_TIM_IC_Start_IT+0x1f6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a20      	ldr	r2, [pc, #128]	@ (800549c <HAL_TIM_IC_Start_IT+0x238>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01d      	beq.n	800545a <HAL_TIM_IC_Start_IT+0x1f6>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005426:	d018      	beq.n	800545a <HAL_TIM_IC_Start_IT+0x1f6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1c      	ldr	r2, [pc, #112]	@ (80054a0 <HAL_TIM_IC_Start_IT+0x23c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <HAL_TIM_IC_Start_IT+0x1f6>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1b      	ldr	r2, [pc, #108]	@ (80054a4 <HAL_TIM_IC_Start_IT+0x240>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIM_IC_Start_IT+0x1f6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a19      	ldr	r2, [pc, #100]	@ (80054a8 <HAL_TIM_IC_Start_IT+0x244>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIM_IC_Start_IT+0x1f6>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a18      	ldr	r2, [pc, #96]	@ (80054ac <HAL_TIM_IC_Start_IT+0x248>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIM_IC_Start_IT+0x1f6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a16      	ldr	r2, [pc, #88]	@ (80054b0 <HAL_TIM_IC_Start_IT+0x24c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d111      	bne.n	800547e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d010      	beq.n	800548e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	e007      	b.n	800548e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800548e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40013400 	.word	0x40013400
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40014c00 	.word	0x40014c00
 80054b0:	40001800 	.word	0x40001800

080054b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d122      	bne.n	8005510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d11b      	bne.n	8005510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0202 	mvn.w	r2, #2
 80054e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fc ffea 	bl	80024d0 <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fb05 	bl	8005b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fb0b 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b04      	cmp	r3, #4
 800551c:	d122      	bne.n	8005564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b04      	cmp	r3, #4
 800552a:	d11b      	bne.n	8005564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0204 	mvn.w	r2, #4
 8005534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc ffc0 	bl	80024d0 <HAL_TIM_IC_CaptureCallback>
 8005550:	e005      	b.n	800555e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fadb 	bl	8005b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fae1 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b08      	cmp	r3, #8
 8005570:	d122      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b08      	cmp	r3, #8
 800557e:	d11b      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0208 	mvn.w	r2, #8
 8005588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2204      	movs	r2, #4
 800558e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fc ff96 	bl	80024d0 <HAL_TIM_IC_CaptureCallback>
 80055a4:	e005      	b.n	80055b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fab1 	bl	8005b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fab7 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d122      	bne.n	800560c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d11b      	bne.n	800560c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0210 	mvn.w	r2, #16
 80055dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2208      	movs	r2, #8
 80055e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc ff6c 	bl	80024d0 <HAL_TIM_IC_CaptureCallback>
 80055f8:	e005      	b.n	8005606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fa87 	bl	8005b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fa8d 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d10e      	bne.n	8005638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b01      	cmp	r3, #1
 8005626:	d107      	bne.n	8005638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0201 	mvn.w	r2, #1
 8005630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fc faea 	bl	8001c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005642:	2b80      	cmp	r3, #128	@ 0x80
 8005644:	d10e      	bne.n	8005664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005650:	2b80      	cmp	r3, #128	@ 0x80
 8005652:	d107      	bne.n	8005664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800565c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 ff1d 	bl	800649e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800566e:	2b40      	cmp	r3, #64	@ 0x40
 8005670:	d10e      	bne.n	8005690 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567c:	2b40      	cmp	r3, #64	@ 0x40
 800567e:	d107      	bne.n	8005690 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa51 	bl	8005b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b20      	cmp	r3, #32
 800569c:	d10e      	bne.n	80056bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d107      	bne.n	80056bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0220 	mvn.w	r2, #32
 80056b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fee8 	bl	800648c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056bc:	bf00      	nop
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80056de:	2302      	movs	r3, #2
 80056e0:	e088      	b.n	80057f4 <HAL_TIM_IC_ConfigChannel+0x130>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11b      	bne.n	8005728 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005700:	f000 fc6a 	bl	8005fd8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 020c 	bic.w	r2, r2, #12
 8005712:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6999      	ldr	r1, [r3, #24]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	619a      	str	r2, [r3, #24]
 8005726:	e060      	b.n	80057ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d11c      	bne.n	8005768 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800573e:	f000 fceb 	bl	8006118 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005750:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6999      	ldr	r1, [r3, #24]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	021a      	lsls	r2, r3, #8
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	619a      	str	r2, [r3, #24]
 8005766:	e040      	b.n	80057ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b08      	cmp	r3, #8
 800576c:	d11b      	bne.n	80057a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800577e:	f000 fd36 	bl	80061ee <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69da      	ldr	r2, [r3, #28]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 020c 	bic.w	r2, r2, #12
 8005790:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69d9      	ldr	r1, [r3, #28]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	61da      	str	r2, [r3, #28]
 80057a4:	e021      	b.n	80057ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	d11c      	bne.n	80057e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80057bc:	f000 fd52 	bl	8006264 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69d9      	ldr	r1, [r3, #28]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	021a      	lsls	r2, r3, #8
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	61da      	str	r2, [r3, #28]
 80057e4:	e001      	b.n	80057ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005816:	2302      	movs	r3, #2
 8005818:	e0ae      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b0c      	cmp	r3, #12
 8005826:	f200 809f 	bhi.w	8005968 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800582a:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005865 	.word	0x08005865
 8005834:	08005969 	.word	0x08005969
 8005838:	08005969 	.word	0x08005969
 800583c:	08005969 	.word	0x08005969
 8005840:	080058a5 	.word	0x080058a5
 8005844:	08005969 	.word	0x08005969
 8005848:	08005969 	.word	0x08005969
 800584c:	08005969 	.word	0x08005969
 8005850:	080058e7 	.word	0x080058e7
 8005854:	08005969 	.word	0x08005969
 8005858:	08005969 	.word	0x08005969
 800585c:	08005969 	.word	0x08005969
 8005860:	08005927 	.word	0x08005927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fa08 	bl	8005c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0208 	orr.w	r2, r2, #8
 800587e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0204 	bic.w	r2, r2, #4
 800588e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6999      	ldr	r1, [r3, #24]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	619a      	str	r2, [r3, #24]
      break;
 80058a2:	e064      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fa58 	bl	8005d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6999      	ldr	r1, [r3, #24]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	619a      	str	r2, [r3, #24]
      break;
 80058e4:	e043      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 faab 	bl	8005e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0208 	orr.w	r2, r2, #8
 8005900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0204 	bic.w	r2, r2, #4
 8005910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69d9      	ldr	r1, [r3, #28]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	61da      	str	r2, [r3, #28]
      break;
 8005924:	e023      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 faff 	bl	8005f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69d9      	ldr	r1, [r3, #28]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	021a      	lsls	r2, r3, #8
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	61da      	str	r2, [r3, #28]
      break;
 8005966:	e002      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_TIM_ConfigClockSource+0x1c>
 8005998:	2302      	movs	r3, #2
 800599a:	e0b4      	b.n	8005b06 <HAL_TIM_ConfigClockSource+0x186>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059d4:	d03e      	beq.n	8005a54 <HAL_TIM_ConfigClockSource+0xd4>
 80059d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059da:	f200 8087 	bhi.w	8005aec <HAL_TIM_ConfigClockSource+0x16c>
 80059de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e2:	f000 8086 	beq.w	8005af2 <HAL_TIM_ConfigClockSource+0x172>
 80059e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ea:	d87f      	bhi.n	8005aec <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b70      	cmp	r3, #112	@ 0x70
 80059ee:	d01a      	beq.n	8005a26 <HAL_TIM_ConfigClockSource+0xa6>
 80059f0:	2b70      	cmp	r3, #112	@ 0x70
 80059f2:	d87b      	bhi.n	8005aec <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b60      	cmp	r3, #96	@ 0x60
 80059f6:	d050      	beq.n	8005a9a <HAL_TIM_ConfigClockSource+0x11a>
 80059f8:	2b60      	cmp	r3, #96	@ 0x60
 80059fa:	d877      	bhi.n	8005aec <HAL_TIM_ConfigClockSource+0x16c>
 80059fc:	2b50      	cmp	r3, #80	@ 0x50
 80059fe:	d03c      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0xfa>
 8005a00:	2b50      	cmp	r3, #80	@ 0x50
 8005a02:	d873      	bhi.n	8005aec <HAL_TIM_ConfigClockSource+0x16c>
 8005a04:	2b40      	cmp	r3, #64	@ 0x40
 8005a06:	d058      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x13a>
 8005a08:	2b40      	cmp	r3, #64	@ 0x40
 8005a0a:	d86f      	bhi.n	8005aec <HAL_TIM_ConfigClockSource+0x16c>
 8005a0c:	2b30      	cmp	r3, #48	@ 0x30
 8005a0e:	d064      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0x15a>
 8005a10:	2b30      	cmp	r3, #48	@ 0x30
 8005a12:	d86b      	bhi.n	8005aec <HAL_TIM_ConfigClockSource+0x16c>
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d060      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0x15a>
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d867      	bhi.n	8005aec <HAL_TIM_ConfigClockSource+0x16c>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d05c      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0x15a>
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d05a      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0x15a>
 8005a24:	e062      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a36:	f000 fc6b 	bl	8006310 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	609a      	str	r2, [r3, #8]
      break;
 8005a52:	e04f      	b.n	8005af4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a64:	f000 fc54 	bl	8006310 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a76:	609a      	str	r2, [r3, #8]
      break;
 8005a78:	e03c      	b.n	8005af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a86:	461a      	mov	r2, r3
 8005a88:	f000 fb18 	bl	80060bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2150      	movs	r1, #80	@ 0x50
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fc22 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 8005a98:	e02c      	b.n	8005af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f000 fb72 	bl	8006190 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2160      	movs	r1, #96	@ 0x60
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fc12 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 8005ab8:	e01c      	b.n	8005af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f000 faf8 	bl	80060bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2140      	movs	r1, #64	@ 0x40
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fc02 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 8005ad8:	e00c      	b.n	8005af4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	f000 fbf9 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 8005aea:	e003      	b.n	8005af4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
      break;
 8005af0:	e000      	b.n	8005af4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr

08005b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a3f      	ldr	r2, [pc, #252]	@ (8005c54 <TIM_Base_SetConfig+0x110>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8005c58 <TIM_Base_SetConfig+0x114>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00f      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b6a:	d00b      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8005c5c <TIM_Base_SetConfig+0x118>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3a      	ldr	r2, [pc, #232]	@ (8005c60 <TIM_Base_SetConfig+0x11c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a39      	ldr	r2, [pc, #228]	@ (8005c64 <TIM_Base_SetConfig+0x120>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d108      	bne.n	8005b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2e      	ldr	r2, [pc, #184]	@ (8005c54 <TIM_Base_SetConfig+0x110>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d02b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c58 <TIM_Base_SetConfig+0x114>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d027      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bac:	d023      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c5c <TIM_Base_SetConfig+0x118>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01f      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a29      	ldr	r2, [pc, #164]	@ (8005c60 <TIM_Base_SetConfig+0x11c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a28      	ldr	r2, [pc, #160]	@ (8005c64 <TIM_Base_SetConfig+0x120>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d017      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a27      	ldr	r2, [pc, #156]	@ (8005c68 <TIM_Base_SetConfig+0x124>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a26      	ldr	r2, [pc, #152]	@ (8005c6c <TIM_Base_SetConfig+0x128>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a25      	ldr	r2, [pc, #148]	@ (8005c70 <TIM_Base_SetConfig+0x12c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a24      	ldr	r2, [pc, #144]	@ (8005c74 <TIM_Base_SetConfig+0x130>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a23      	ldr	r2, [pc, #140]	@ (8005c78 <TIM_Base_SetConfig+0x134>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a22      	ldr	r2, [pc, #136]	@ (8005c7c <TIM_Base_SetConfig+0x138>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d108      	bne.n	8005c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a09      	ldr	r2, [pc, #36]	@ (8005c54 <TIM_Base_SetConfig+0x110>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_Base_SetConfig+0xf8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a08      	ldr	r2, [pc, #32]	@ (8005c58 <TIM_Base_SetConfig+0x114>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d103      	bne.n	8005c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	615a      	str	r2, [r3, #20]
}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr
 8005c54:	40012c00 	.word	0x40012c00
 8005c58:	40013400 	.word	0x40013400
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	40014c00 	.word	0x40014c00
 8005c6c:	40015000 	.word	0x40015000
 8005c70:	40015400 	.word	0x40015400
 8005c74:	40001800 	.word	0x40001800
 8005c78:	40001c00 	.word	0x40001c00
 8005c7c:	40002000 	.word	0x40002000

08005c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f023 0201 	bic.w	r2, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0303 	bic.w	r3, r3, #3
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 0302 	bic.w	r3, r3, #2
 8005cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a20      	ldr	r2, [pc, #128]	@ (8005d58 <TIM_OC1_SetConfig+0xd8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC1_SetConfig+0x64>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a1f      	ldr	r2, [pc, #124]	@ (8005d5c <TIM_OC1_SetConfig+0xdc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d10c      	bne.n	8005cfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0308 	bic.w	r3, r3, #8
 8005cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f023 0304 	bic.w	r3, r3, #4
 8005cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a15      	ldr	r2, [pc, #84]	@ (8005d58 <TIM_OC1_SetConfig+0xd8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_OC1_SetConfig+0x8e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a14      	ldr	r2, [pc, #80]	@ (8005d5c <TIM_OC1_SetConfig+0xdc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d111      	bne.n	8005d32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	621a      	str	r2, [r3, #32]
}
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40012c00 	.word	0x40012c00
 8005d5c:	40013400 	.word	0x40013400

08005d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f023 0210 	bic.w	r2, r3, #16
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0320 	bic.w	r3, r3, #32
 8005daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a21      	ldr	r2, [pc, #132]	@ (8005e40 <TIM_OC2_SetConfig+0xe0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC2_SetConfig+0x68>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a20      	ldr	r2, [pc, #128]	@ (8005e44 <TIM_OC2_SetConfig+0xe4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10d      	bne.n	8005de4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005de2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a16      	ldr	r2, [pc, #88]	@ (8005e40 <TIM_OC2_SetConfig+0xe0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_OC2_SetConfig+0x94>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a15      	ldr	r2, [pc, #84]	@ (8005e44 <TIM_OC2_SetConfig+0xe4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d113      	bne.n	8005e1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	621a      	str	r2, [r3, #32]
}
 8005e36:	bf00      	nop
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40013400 	.word	0x40013400

08005e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a21      	ldr	r2, [pc, #132]	@ (8005f28 <TIM_OC3_SetConfig+0xe0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_OC3_SetConfig+0x66>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a20      	ldr	r2, [pc, #128]	@ (8005f2c <TIM_OC3_SetConfig+0xe4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10d      	bne.n	8005eca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a16      	ldr	r2, [pc, #88]	@ (8005f28 <TIM_OC3_SetConfig+0xe0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d003      	beq.n	8005eda <TIM_OC3_SetConfig+0x92>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a15      	ldr	r2, [pc, #84]	@ (8005f2c <TIM_OC3_SetConfig+0xe4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d113      	bne.n	8005f02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	621a      	str	r2, [r3, #32]
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	40013400 	.word	0x40013400

08005f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	031b      	lsls	r3, r3, #12
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a11      	ldr	r2, [pc, #68]	@ (8005fd0 <TIM_OC4_SetConfig+0xa0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_OC4_SetConfig+0x68>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a10      	ldr	r2, [pc, #64]	@ (8005fd4 <TIM_OC4_SetConfig+0xa4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d109      	bne.n	8005fac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	019b      	lsls	r3, r3, #6
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	40013400 	.word	0x40013400

08005fd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f023 0201 	bic.w	r2, r3, #1
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4a27      	ldr	r2, [pc, #156]	@ (80060a0 <TIM_TI1_SetConfig+0xc8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01b      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4a26      	ldr	r2, [pc, #152]	@ (80060a4 <TIM_TI1_SetConfig+0xcc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d017      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006014:	d013      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a23      	ldr	r2, [pc, #140]	@ (80060a8 <TIM_TI1_SetConfig+0xd0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00f      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a22      	ldr	r2, [pc, #136]	@ (80060ac <TIM_TI1_SetConfig+0xd4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00b      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a21      	ldr	r2, [pc, #132]	@ (80060b0 <TIM_TI1_SetConfig+0xd8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d007      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4a20      	ldr	r2, [pc, #128]	@ (80060b4 <TIM_TI1_SetConfig+0xdc>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d003      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a1f      	ldr	r2, [pc, #124]	@ (80060b8 <TIM_TI1_SetConfig+0xe0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d101      	bne.n	8006042 <TIM_TI1_SetConfig+0x6a>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <TIM_TI1_SetConfig+0x6c>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f023 0303 	bic.w	r3, r3, #3
 800604e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	e003      	b.n	8006062 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	b2db      	uxtb	r3, r3
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f023 030a 	bic.w	r3, r3, #10
 800607c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f003 030a 	and.w	r3, r3, #10
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40013400 	.word	0x40013400
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40000c00 	.word	0x40000c00
 80060b4:	40014c00 	.word	0x40014c00
 80060b8:	40001800 	.word	0x40001800

080060bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0201 	bic.w	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f023 030a 	bic.w	r3, r3, #10
 80060f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f023 0210 	bic.w	r2, r3, #16
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	031b      	lsls	r3, r3, #12
 800615c:	b29b      	uxth	r3, r3
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800616a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr

08006190 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f023 0210 	bic.w	r2, r3, #16
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	031b      	lsls	r3, r3, #12
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b087      	sub	sp, #28
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f023 0303 	bic.w	r3, r3, #3
 800621a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800622a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	b2db      	uxtb	r3, r3
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800623e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006290:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	031b      	lsls	r3, r3, #12
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	031b      	lsls	r3, r3, #12
 80062bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f043 0307 	orr.w	r3, r3, #7
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	609a      	str	r2, [r3, #8]
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800632a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	021a      	lsls	r2, r3, #8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	431a      	orrs	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4313      	orrs	r3, r2
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	609a      	str	r2, [r3, #8]
}
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr

0800634e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800634e:	b480      	push	{r7}
 8006350:	b087      	sub	sp, #28
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	2201      	movs	r2, #1
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a1a      	ldr	r2, [r3, #32]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	43db      	mvns	r3, r3
 8006370:	401a      	ands	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1a      	ldr	r2, [r3, #32]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	fa01 f303 	lsl.w	r3, r1, r3
 8006386:	431a      	orrs	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	621a      	str	r2, [r3, #32]
}
 800638c:	bf00      	nop
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr
	...

08006398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e05a      	b.n	8006466 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a20      	ldr	r2, [pc, #128]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d022      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d01d      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006406:	d018      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1a      	ldr	r2, [pc, #104]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a19      	ldr	r2, [pc, #100]	@ (800647c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00e      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a17      	ldr	r2, [pc, #92]	@ (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d009      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a16      	ldr	r2, [pc, #88]	@ (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a14      	ldr	r2, [pc, #80]	@ (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d10c      	bne.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	4313      	orrs	r3, r2
 800644a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	bc80      	pop	{r7}
 800646e:	4770      	bx	lr
 8006470:	40012c00 	.word	0x40012c00
 8006474:	40013400 	.word	0x40013400
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40014c00 	.word	0x40014c00
 8006488:	40001800 	.word	0x40001800

0800648c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	4770      	bx	lr

0800649e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e042      	b.n	8006548 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fc fb62 	bl	8002ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2224      	movs	r2, #36	@ 0x24
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 ffdf 	bl	80074b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695a      	ldr	r2, [r3, #20]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	@ 0x28
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	4613      	mov	r3, r2
 800655e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b20      	cmp	r3, #32
 800656e:	d16d      	bne.n	800664c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <HAL_UART_Transmit+0x2c>
 8006576:	88fb      	ldrh	r3, [r7, #6]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e066      	b.n	800664e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2221      	movs	r2, #33	@ 0x21
 800658a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800658e:	f7fc fd73 	bl	8003078 <HAL_GetTick>
 8006592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	88fa      	ldrh	r2, [r7, #6]
 8006598:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	88fa      	ldrh	r2, [r7, #6]
 800659e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065a8:	d108      	bne.n	80065bc <HAL_UART_Transmit+0x6c>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	e003      	b.n	80065c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065c4:	e02a      	b.n	800661c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2200      	movs	r2, #0
 80065ce:	2180      	movs	r1, #128	@ 0x80
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fc6e 	bl	8006eb2 <UART_WaitOnFlagUntilTimeout>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e036      	b.n	800664e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10b      	bne.n	80065fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	3302      	adds	r3, #2
 80065fa:	61bb      	str	r3, [r7, #24]
 80065fc:	e007      	b.n	800660e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	3301      	adds	r3, #1
 800660c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006612:	b29b      	uxth	r3, r3
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1cf      	bne.n	80065c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2200      	movs	r2, #0
 800662e:	2140      	movs	r1, #64	@ 0x40
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fc3e 	bl	8006eb2 <UART_WaitOnFlagUntilTimeout>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e006      	b.n	800664e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	e000      	b.n	800664e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800664c:	2302      	movs	r3, #2
  }
}
 800664e:	4618      	mov	r0, r3
 8006650:	3720      	adds	r7, #32
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	4613      	mov	r3, r2
 8006662:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b20      	cmp	r3, #32
 800666e:	d112      	bne.n	8006696 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_UART_Receive_IT+0x26>
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e00b      	b.n	8006698 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	461a      	mov	r2, r3
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 fc7e 	bl	8006f8e <UART_Start_Receive_IT>
 8006692:	4603      	mov	r3, r0
 8006694:	e000      	b.n	8006698 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006696:	2302      	movs	r3, #2
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08c      	sub	sp, #48	@ 0x30
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	d14a      	bne.n	8006750 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e043      	b.n	8006752 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	461a      	mov	r2, r3
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fc8f 	bl	8007000 <UART_Start_Receive_DMA>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80066e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d12c      	bne.n	800674a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d125      	bne.n	8006744 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066f8:	2300      	movs	r3, #0
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	613b      	str	r3, [r7, #16]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	617b      	str	r3, [r7, #20]
   return(result);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f043 0310 	orr.w	r3, r3, #16
 8006724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800672e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006730:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6a39      	ldr	r1, [r7, #32]
 8006734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	61fb      	str	r3, [r7, #28]
   return(result);
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e5      	bne.n	800670e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006742:	e002      	b.n	800674a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800674a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800674e:	e000      	b.n	8006752 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006750:	2302      	movs	r3, #2
  }
}
 8006752:	4618      	mov	r0, r3
 8006754:	3730      	adds	r7, #48	@ 0x30
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b0ba      	sub	sp, #232	@ 0xe8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006782:	2300      	movs	r3, #0
 8006784:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006788:	2300      	movs	r3, #0
 800678a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800678e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800679a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10f      	bne.n	80067c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_UART_IRQHandler+0x66>
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fdbe 	bl	800733c <UART_Receive_IT>
      return;
 80067c0:	e25b      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80de 	beq.w	8006988 <HAL_UART_IRQHandler+0x22c>
 80067cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 80d1 	beq.w	8006988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <HAL_UART_IRQHandler+0xae>
 80067f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006802:	f043 0201 	orr.w	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <HAL_UART_IRQHandler+0xd2>
 8006816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006826:	f043 0202 	orr.w	r2, r3, #2
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <HAL_UART_IRQHandler+0xf6>
 800683a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684a:	f043 0204 	orr.w	r2, r3, #4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d011      	beq.n	8006882 <HAL_UART_IRQHandler+0x126>
 800685e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	f043 0208 	orr.w	r2, r3, #8
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 81f2 	beq.w	8006c70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d008      	beq.n	80068aa <HAL_UART_IRQHandler+0x14e>
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fd49 	bl	800733c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <HAL_UART_IRQHandler+0x17a>
 80068ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04f      	beq.n	8006976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fc53 	bl	8007182 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d041      	beq.n	800696e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3314      	adds	r3, #20
 80068f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006916:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800691a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800692e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1d9      	bne.n	80068ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d013      	beq.n	8006966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006942:	4a7e      	ldr	r2, [pc, #504]	@ (8006b3c <HAL_UART_IRQHandler+0x3e0>)
 8006944:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694a:	4618      	mov	r0, r3
 800694c:	f7fc ffe2 	bl	8003914 <HAL_DMA_Abort_IT>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800695a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006960:	4610      	mov	r0, r2
 8006962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	e00e      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f99c 	bl	8006ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	e00a      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f998 	bl	8006ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006974:	e006      	b.n	8006984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f994 	bl	8006ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006982:	e175      	b.n	8006c70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	bf00      	nop
    return;
 8006986:	e173      	b.n	8006c70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698c:	2b01      	cmp	r3, #1
 800698e:	f040 814f 	bne.w	8006c30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006996:	f003 0310 	and.w	r3, r3, #16
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8148 	beq.w	8006c30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8141 	beq.w	8006c30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069ae:	2300      	movs	r3, #0
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	60bb      	str	r3, [r7, #8]
 80069c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 80b6 	beq.w	8006b40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8145 	beq.w	8006c74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069f2:	429a      	cmp	r2, r3
 80069f4:	f080 813e 	bcs.w	8006c74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	f000 8088 	beq.w	8006b1c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a44:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1d9      	bne.n	8006a0c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3314      	adds	r3, #20
 8006a78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a7c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a84:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e1      	bne.n	8006a58 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3314      	adds	r3, #20
 8006a9a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ab8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006aba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006abe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ac6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e3      	bne.n	8006a94 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aec:	f023 0310 	bic.w	r3, r3, #16
 8006af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006afe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b00:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e3      	bne.n	8006ada <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fc fec0 	bl	800389c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fb f84e 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b38:	e09c      	b.n	8006c74 <HAL_UART_IRQHandler+0x518>
 8006b3a:	bf00      	nop
 8006b3c:	08007247 	.word	0x08007247
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 808e 	beq.w	8006c78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8089 	beq.w	8006c78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e3      	bne.n	8006b66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3314      	adds	r3, #20
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	623b      	str	r3, [r7, #32]
   return(result);
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e3      	bne.n	8006b9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	330c      	adds	r3, #12
 8006bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0310 	bic.w	r3, r3, #16
 8006bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	330c      	adds	r3, #12
 8006c04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c08:	61fa      	str	r2, [r7, #28]
 8006c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	69b9      	ldr	r1, [r7, #24]
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	617b      	str	r3, [r7, #20]
   return(result);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e3      	bne.n	8006be4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7fa ffd3 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c2e:	e023      	b.n	8006c78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <HAL_UART_IRQHandler+0x4f4>
 8006c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fb10 	bl	800726e <UART_Transmit_IT>
    return;
 8006c4e:	e014      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00e      	beq.n	8006c7a <HAL_UART_IRQHandler+0x51e>
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fb4f 	bl	800730c <UART_EndTransmit_IT>
    return;
 8006c6e:	e004      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
    return;
 8006c70:	bf00      	nop
 8006c72:	e002      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c74:	bf00      	nop
 8006c76:	e000      	b.n	8006c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c78:	bf00      	nop
  }
}
 8006c7a:	37e8      	adds	r7, #232	@ 0xe8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr

08006c92 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b09c      	sub	sp, #112	@ 0x70
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d172      	bne.n	8006db8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006cf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e5      	bne.n	8006cd8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3314      	adds	r3, #20
 8006d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1e:	f023 0301 	bic.w	r3, r3, #1
 8006d22:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3314      	adds	r3, #20
 8006d2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d2c:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d2e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e5      	bne.n	8006d0c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3314      	adds	r3, #20
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d56:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d60:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e5      	bne.n	8006d40 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d119      	bne.n	8006db8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0310 	bic.w	r3, r3, #16
 8006d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	330c      	adds	r3, #12
 8006da2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006da4:	61fa      	str	r2, [r7, #28]
 8006da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	69b9      	ldr	r1, [r7, #24]
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	617b      	str	r3, [r7, #20]
   return(result);
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e5      	bne.n	8006d84 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dba:	2200      	movs	r2, #0
 8006dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d106      	bne.n	8006dd4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006dce:	f7fa ff01 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dd2:	e002      	b.n	8006dda <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006dd4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006dd6:	f7fa feeb 	bl	8001bb0 <HAL_UART_RxCpltCallback>
}
 8006dda:	bf00      	nop
 8006ddc:	3770      	adds	r7, #112	@ 0x70
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2201      	movs	r2, #1
 8006df4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d108      	bne.n	8006e10 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e02:	085b      	lsrs	r3, r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	4619      	mov	r1, r3
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7fa fee3 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e0e:	e002      	b.n	8006e16 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f7ff ff3e 	bl	8006c92 <HAL_UART_RxHalfCpltCallback>
}
 8006e16:	bf00      	nop
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bf14      	ite	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	2300      	moveq	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b21      	cmp	r3, #33	@ 0x21
 8006e50:	d108      	bne.n	8006e64 <UART_DMAError+0x46>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006e5e:	68b8      	ldr	r0, [r7, #8]
 8006e60:	f000 f968 	bl	8007134 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bf14      	ite	ne
 8006e72:	2301      	movne	r3, #1
 8006e74:	2300      	moveq	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b22      	cmp	r3, #34	@ 0x22
 8006e84:	d108      	bne.n	8006e98 <UART_DMAError+0x7a>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006e92:	68b8      	ldr	r0, [r7, #8]
 8006e94:	f000 f975 	bl	8007182 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9c:	f043 0210 	orr.w	r2, r3, #16
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ea4:	68b8      	ldr	r0, [r7, #8]
 8006ea6:	f7ff fefd 	bl	8006ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b090      	sub	sp, #64	@ 0x40
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec2:	e050      	b.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eca:	d04c      	beq.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d007      	beq.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ed2:	f7fc f8d1 	bl	8003078 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d241      	bcs.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	330c      	adds	r3, #12
 8006ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	330c      	adds	r3, #12
 8006f00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006f02:	637a      	str	r2, [r7, #52]	@ 0x34
 8006f04:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e5      	bne.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3314      	adds	r3, #20
 8006f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	613b      	str	r3, [r7, #16]
   return(result);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3314      	adds	r3, #20
 8006f34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f36:	623a      	str	r2, [r7, #32]
 8006f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	69f9      	ldr	r1, [r7, #28]
 8006f3c:	6a3a      	ldr	r2, [r7, #32]
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e5      	bne.n	8006f16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e00f      	b.n	8006f86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	bf0c      	ite	eq
 8006f76:	2301      	moveq	r3, #1
 8006f78:	2300      	movne	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d09f      	beq.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3740      	adds	r7, #64	@ 0x40
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	88fa      	ldrh	r2, [r7, #6]
 8006fa6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2222      	movs	r2, #34	@ 0x22
 8006fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fd2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695a      	ldr	r2, [r3, #20]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0220 	orr.w	r2, r2, #32
 8006ff2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b098      	sub	sp, #96	@ 0x60
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2222      	movs	r2, #34	@ 0x22
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702c:	4a3e      	ldr	r2, [pc, #248]	@ (8007128 <UART_Start_Receive_DMA+0x128>)
 800702e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007034:	4a3d      	ldr	r2, [pc, #244]	@ (800712c <UART_Start_Receive_DMA+0x12c>)
 8007036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703c:	4a3c      	ldr	r2, [pc, #240]	@ (8007130 <UART_Start_Receive_DMA+0x130>)
 800703e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007044:	2200      	movs	r2, #0
 8007046:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007048:	f107 0308 	add.w	r3, r7, #8
 800704c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3304      	adds	r3, #4
 8007058:	4619      	mov	r1, r3
 800705a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	f7fc fbbc 	bl	80037dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007064:	2300      	movs	r3, #0
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	613b      	str	r3, [r7, #16]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d019      	beq.n	80070b6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	330c      	adds	r3, #12
 8007088:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007098:	65bb      	str	r3, [r7, #88]	@ 0x58
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070a2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80070a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80070a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e5      	bne.n	8007082 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3314      	adds	r3, #20
 80070bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3314      	adds	r3, #20
 80070d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80070d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80070dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e5      	bne.n	80070b6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3314      	adds	r3, #20
 80070f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	617b      	str	r3, [r7, #20]
   return(result);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007100:	653b      	str	r3, [r7, #80]	@ 0x50
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3314      	adds	r3, #20
 8007108:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800710a:	627a      	str	r2, [r7, #36]	@ 0x24
 800710c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6a39      	ldr	r1, [r7, #32]
 8007110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	61fb      	str	r3, [r7, #28]
   return(result);
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e5      	bne.n	80070ea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3760      	adds	r7, #96	@ 0x60
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	08006cb7 	.word	0x08006cb7
 800712c:	08006de3 	.word	0x08006de3
 8007130:	08006e1f 	.word	0x08006e1f

08007134 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b089      	sub	sp, #36	@ 0x24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	330c      	adds	r3, #12
 8007142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	60bb      	str	r3, [r7, #8]
   return(result);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007152:	61fb      	str	r3, [r7, #28]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	61ba      	str	r2, [r7, #24]
 800715e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6979      	ldr	r1, [r7, #20]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	613b      	str	r3, [r7, #16]
   return(result);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e5      	bne.n	800713c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007178:	bf00      	nop
 800717a:	3724      	adds	r7, #36	@ 0x24
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr

08007182 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007182:	b480      	push	{r7}
 8007184:	b095      	sub	sp, #84	@ 0x54
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	330c      	adds	r3, #12
 8007190:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	330c      	adds	r3, #12
 80071a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e5      	bne.n	800718a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3314      	adds	r3, #20
 80071c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f023 0301 	bic.w	r3, r3, #1
 80071d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3314      	adds	r3, #20
 80071dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e5      	bne.n	80071be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d119      	bne.n	800722e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	330c      	adds	r3, #12
 8007200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	60bb      	str	r3, [r7, #8]
   return(result);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f023 0310 	bic.w	r3, r3, #16
 8007210:	647b      	str	r3, [r7, #68]	@ 0x44
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	330c      	adds	r3, #12
 8007218:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800721a:	61ba      	str	r2, [r7, #24]
 800721c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6979      	ldr	r1, [r7, #20]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	613b      	str	r3, [r7, #16]
   return(result);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e5      	bne.n	80071fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800723c:	bf00      	nop
 800723e:	3754      	adds	r7, #84	@ 0x54
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr

08007246 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007252:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff fd1f 	bl	8006ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b21      	cmp	r3, #33	@ 0x21
 8007280:	d13e      	bne.n	8007300 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728a:	d114      	bne.n	80072b6 <UART_Transmit_IT+0x48>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d110      	bne.n	80072b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	1c9a      	adds	r2, r3, #2
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	621a      	str	r2, [r3, #32]
 80072b4:	e008      	b.n	80072c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	1c59      	adds	r1, r3, #1
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6211      	str	r1, [r2, #32]
 80072c0:	781a      	ldrb	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	4619      	mov	r1, r3
 80072d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10f      	bne.n	80072fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e000      	b.n	8007302 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007300:	2302      	movs	r3, #2
  }
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr

0800730c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007322:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff fca7 	bl	8006c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08c      	sub	sp, #48	@ 0x30
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b22      	cmp	r3, #34	@ 0x22
 800734e:	f040 80ae 	bne.w	80074ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800735a:	d117      	bne.n	800738c <UART_Receive_IT+0x50>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d113      	bne.n	800738c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	b29b      	uxth	r3, r3
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	b29a      	uxth	r2, r3
 800737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007384:	1c9a      	adds	r2, r3, #2
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	629a      	str	r2, [r3, #40]	@ 0x28
 800738a:	e026      	b.n	80073da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007390:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800739e:	d007      	beq.n	80073b0 <UART_Receive_IT+0x74>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <UART_Receive_IT+0x82>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d106      	bne.n	80073be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ba:	701a      	strb	r2, [r3, #0]
 80073bc:	e008      	b.n	80073d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	4619      	mov	r1, r3
 80073e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d15d      	bne.n	80074aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0220 	bic.w	r2, r2, #32
 80073fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800740c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	695a      	ldr	r2, [r3, #20]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0201 	bic.w	r2, r2, #1
 800741c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007430:	2b01      	cmp	r3, #1
 8007432:	d135      	bne.n	80074a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	330c      	adds	r3, #12
 8007440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	613b      	str	r3, [r7, #16]
   return(result);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f023 0310 	bic.w	r3, r3, #16
 8007450:	627b      	str	r3, [r7, #36]	@ 0x24
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800745a:	623a      	str	r2, [r7, #32]
 800745c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	69f9      	ldr	r1, [r7, #28]
 8007460:	6a3a      	ldr	r2, [r7, #32]
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	61bb      	str	r3, [r7, #24]
   return(result);
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e5      	bne.n	800743a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0310 	and.w	r3, r3, #16
 8007478:	2b10      	cmp	r3, #16
 800747a:	d10a      	bne.n	8007492 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7fa fb9b 	bl	8001bd4 <HAL_UARTEx_RxEventCallback>
 800749e:	e002      	b.n	80074a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7fa fb85 	bl	8001bb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	e002      	b.n	80074b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e000      	b.n	80074b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80074ae:	2302      	movs	r3, #2
  }
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3730      	adds	r7, #48	@ 0x30
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80074f2:	f023 030c 	bic.w	r3, r3, #12
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6812      	ldr	r2, [r2, #0]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	430b      	orrs	r3, r1
 80074fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699a      	ldr	r2, [r3, #24]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a2c      	ldr	r2, [pc, #176]	@ (80075cc <UART_SetConfig+0x114>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d103      	bne.n	8007528 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007520:	f7fd fc52 	bl	8004dc8 <HAL_RCC_GetPCLK2Freq>
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	e002      	b.n	800752e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007528:	f7fd fc3a 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 800752c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	009a      	lsls	r2, r3, #2
 8007538:	441a      	add	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	fbb2 f3f3 	udiv	r3, r2, r3
 8007544:	4a22      	ldr	r2, [pc, #136]	@ (80075d0 <UART_SetConfig+0x118>)
 8007546:	fba2 2303 	umull	r2, r3, r2, r3
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	0119      	lsls	r1, r3, #4
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009a      	lsls	r2, r3, #2
 8007558:	441a      	add	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	fbb2 f2f3 	udiv	r2, r2, r3
 8007564:	4b1a      	ldr	r3, [pc, #104]	@ (80075d0 <UART_SetConfig+0x118>)
 8007566:	fba3 0302 	umull	r0, r3, r3, r2
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	2064      	movs	r0, #100	@ 0x64
 800756e:	fb00 f303 	mul.w	r3, r0, r3
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	3332      	adds	r3, #50	@ 0x32
 8007578:	4a15      	ldr	r2, [pc, #84]	@ (80075d0 <UART_SetConfig+0x118>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007584:	4419      	add	r1, r3
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009a      	lsls	r2, r3, #2
 8007590:	441a      	add	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	fbb2 f2f3 	udiv	r2, r2, r3
 800759c:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <UART_SetConfig+0x118>)
 800759e:	fba3 0302 	umull	r0, r3, r3, r2
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	2064      	movs	r0, #100	@ 0x64
 80075a6:	fb00 f303 	mul.w	r3, r0, r3
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	3332      	adds	r3, #50	@ 0x32
 80075b0:	4a07      	ldr	r2, [pc, #28]	@ (80075d0 <UART_SetConfig+0x118>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	f003 020f 	and.w	r2, r3, #15
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	440a      	add	r2, r1
 80075c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80075c4:	bf00      	nop
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40013800 	.word	0x40013800
 80075d0:	51eb851f 	.word	0x51eb851f

080075d4 <CRC16_Calculate>:

static uint8_t action_mode;

static uint8_t data_pack(ENUM_CMD_UPPER_t type, uint8_t* data_region);

static uint16_t CRC16_Calculate(uint8_t* data, uint8_t len) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 80075e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075e4:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 80075ea:	2300      	movs	r3, #0
 80075ec:	613b      	str	r3, [r7, #16]
 80075ee:	e022      	b.n	8007636 <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	4413      	add	r3, r2
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	8afb      	ldrh	r3, [r7, #22]
 80075fc:	4053      	eors	r3, r2
 80075fe:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	e011      	b.n	800762a <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 8007606:	8afb      	ldrh	r3, [r7, #22]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d006      	beq.n	800761e <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 8007610:	8afb      	ldrh	r3, [r7, #22]
 8007612:	085b      	lsrs	r3, r3, #1
 8007614:	b29a      	uxth	r2, r3
 8007616:	4b10      	ldr	r3, [pc, #64]	@ (8007658 <CRC16_Calculate+0x84>)
 8007618:	4053      	eors	r3, r2
 800761a:	82fb      	strh	r3, [r7, #22]
 800761c:	e002      	b.n	8007624 <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 800761e:	8afb      	ldrh	r3, [r7, #22]
 8007620:	085b      	lsrs	r3, r3, #1
 8007622:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3301      	adds	r3, #1
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b07      	cmp	r3, #7
 800762e:	ddea      	ble.n	8007606 <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	3301      	adds	r3, #1
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	78fb      	ldrb	r3, [r7, #3]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	429a      	cmp	r2, r3
 800763c:	dbd8      	blt.n	80075f0 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 800763e:	f7fb fd1b 	bl	8003078 <HAL_GetTick>
 8007642:	4601      	mov	r1, r0
 8007644:	8afb      	ldrh	r3, [r7, #22]
 8007646:	4a05      	ldr	r2, [pc, #20]	@ (800765c <CRC16_Calculate+0x88>)
 8007648:	4805      	ldr	r0, [pc, #20]	@ (8007660 <CRC16_Calculate+0x8c>)
 800764a:	f001 fc29 	bl	8008ea0 <iprintf>
  return crc16;
 800764e:	8afb      	ldrh	r3, [r7, #22]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	ffffa001 	.word	0xffffa001
 800765c:	0800a52c 	.word	0x0800a52c
 8007660:	08009d84 	.word	0x08009d84

08007664 <send_lower>:
    case kInquire:
      break;
  }
}

void send_lower(ENUM_CMD_UPPER_t cmd, uint8_t tail_len) {
 8007664:	b580      	push	{r7, lr}
 8007666:	b0a4      	sub	sp, #144	@ 0x90
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	460a      	mov	r2, r1
 800766e:	71fb      	strb	r3, [r7, #7]
 8007670:	4613      	mov	r3, r2
 8007672:	71bb      	strb	r3, [r7, #6]
  uint8_t data_len;
  uint8_t data_temp[DATA_REGION_SIZE];
  // memcpy(data_temp, up_recv_buf + sizeof(CMD_HEAD_t), up_recv_len - 6 - 3);
  memcpy(data_temp, up_recv_buf + sizeof(CMD_HEAD_t), up_recv_len - sizeof(CMD_HEAD_t) - 3);
 8007674:	490f      	ldr	r1, [pc, #60]	@ (80076b4 <send_lower+0x50>)
 8007676:	4b10      	ldr	r3, [pc, #64]	@ (80076b8 <send_lower+0x54>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f1a3 0209 	sub.w	r2, r3, #9
 800767e:	f107 030c 	add.w	r3, r7, #12
 8007682:	4618      	mov	r0, r3
 8007684:	f001 fcdd 	bl	8009042 <memcpy>
  data_len = data_pack(cmd, data_temp);
 8007688:	f107 020c 	add.w	r2, r7, #12
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	4611      	mov	r1, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f000 f94b 	bl	800792c <data_pack>
 8007696:	4603      	mov	r3, r0
 8007698:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  _send_lower(cmd, tail_len, data_temp, data_len);
 800769c:	79f8      	ldrb	r0, [r7, #7]
 800769e:	79b9      	ldrb	r1, [r7, #6]
 80076a0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80076a4:	f107 020c 	add.w	r2, r7, #12
 80076a8:	f000 f834 	bl	8007714 <_send_lower>
}
 80076ac:	bf00      	nop
 80076ae:	3790      	adds	r7, #144	@ 0x90
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20000792 	.word	0x20000792
 80076b8:	2000088c 	.word	0x2000088c

080076bc <send_upper>:

void send_upper(ENUM_CMD_UPPER_t cmd, uint8_t tail_len) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	b0a4      	sub	sp, #144	@ 0x90
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	460a      	mov	r2, r1
 80076c6:	71fb      	strb	r3, [r7, #7]
 80076c8:	4613      	mov	r3, r2
 80076ca:	71bb      	strb	r3, [r7, #6]
  uint8_t data_len;
  uint8_t data_temp[DATA_REGION_SIZE];
  memcpy(data_temp, up_recv_buf + sizeof(CMD_HEAD_t), up_recv_len - 6 - 3);
 80076cc:	490f      	ldr	r1, [pc, #60]	@ (800770c <send_upper+0x50>)
 80076ce:	4b10      	ldr	r3, [pc, #64]	@ (8007710 <send_upper+0x54>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	3b09      	subs	r3, #9
 80076d4:	461a      	mov	r2, r3
 80076d6:	f107 030c 	add.w	r3, r7, #12
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fcb1 	bl	8009042 <memcpy>
  data_len = data_pack(cmd, data_temp);
 80076e0:	f107 020c 	add.w	r2, r7, #12
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	4611      	mov	r1, r2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 f91f 	bl	800792c <data_pack>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  _send_upper(cmd, tail_len, data_temp, data_len);
 80076f4:	79f8      	ldrb	r0, [r7, #7]
 80076f6:	79b9      	ldrb	r1, [r7, #6]
 80076f8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80076fc:	f107 020c 	add.w	r2, r7, #12
 8007700:	f000 f896 	bl	8007830 <_send_upper>
}
 8007704:	bf00      	nop
 8007706:	3790      	adds	r7, #144	@ 0x90
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000792 	.word	0x20000792
 8007710:	2000088c 	.word	0x2000088c

08007714 <_send_lower>:
/// @brief send to lower computer message
/// @param cmd
/// @param tail_len  message length = head_len + tail_len
/// @param data     data region
/// @param data_len data region size
void _send_lower(ENUM_CMD_UPPER_t cmd, uint8_t tail_len, void* data, uint8_t data_size) {
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	603a      	str	r2, [r7, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	4603      	mov	r3, r0
 8007720:	71fb      	strb	r3, [r7, #7]
 8007722:	460b      	mov	r3, r1
 8007724:	71bb      	strb	r3, [r7, #6]
 8007726:	4613      	mov	r3, r2
 8007728:	717b      	strb	r3, [r7, #5]
  CMD_HEAD_t* p_head   = (CMD_HEAD_t*)send_buf;
 800772a:	4b3d      	ldr	r3, [pc, #244]	@ (8007820 <_send_lower+0x10c>)
 800772c:	60fb      	str	r3, [r7, #12]
  uint8_t     head_len = sizeof(CMD_HEAD_t);
 800772e:	2306      	movs	r3, #6
 8007730:	72fb      	strb	r3, [r7, #11]
  uint16_t    crc16;
  p_head->head   = 0xd0;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	22d0      	movs	r2, #208	@ 0xd0
 8007736:	701a      	strb	r2, [r3, #0]
  p_head->cmd    = (uint8_t)cmd;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	79fa      	ldrb	r2, [r7, #7]
 800773c:	705a      	strb	r2, [r3, #1]
  p_head->encord = 0x01;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	709a      	strb	r2, [r3, #2]
  p_head->addr   = 0x0b;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	220b      	movs	r2, #11
 8007748:	70da      	strb	r2, [r3, #3]
  p_head->len    = tail_len;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	79ba      	ldrb	r2, [r7, #6]
 800774e:	711a      	strb	r2, [r3, #4]
  p_head->empty  = 0x00;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	715a      	strb	r2, [r3, #5]

  // data region copy
  for (int i = 0; i < data_size; i++) {
 8007756:	2300      	movs	r3, #0
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e00d      	b.n	8007778 <_send_lower+0x64>
    LOGI("%02x", ((uint8_t*)data)[i]);
 800775c:	f7fb fc8c 	bl	8003078 <HAL_GetTick>
 8007760:	4601      	mov	r1, r0
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	4413      	add	r3, r2
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	4a2e      	ldr	r2, [pc, #184]	@ (8007824 <_send_lower+0x110>)
 800776c:	482e      	ldr	r0, [pc, #184]	@ (8007828 <_send_lower+0x114>)
 800776e:	f001 fb97 	bl	8008ea0 <iprintf>
  for (int i = 0; i < data_size; i++) {
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	3301      	adds	r3, #1
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	797b      	ldrb	r3, [r7, #5]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	429a      	cmp	r2, r3
 800777e:	dbed      	blt.n	800775c <_send_lower+0x48>
  }
  memcpy(&send_buf[head_len], (uint8_t*)data, data_size);
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	4a27      	ldr	r2, [pc, #156]	@ (8007820 <_send_lower+0x10c>)
 8007784:	4413      	add	r3, r2
 8007786:	797a      	ldrb	r2, [r7, #5]
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f001 fc59 	bl	8009042 <memcpy>
  send_len           = head_len + data_size;
 8007790:	7afa      	ldrb	r2, [r7, #11]
 8007792:	797b      	ldrb	r3, [r7, #5]
 8007794:	4413      	add	r3, r2
 8007796:	b2da      	uxtb	r2, r3
 8007798:	4b24      	ldr	r3, [pc, #144]	@ (800782c <_send_lower+0x118>)
 800779a:	701a      	strb	r2, [r3, #0]
  send_buf[send_len] = 0xd1;
 800779c:	4b23      	ldr	r3, [pc, #140]	@ (800782c <_send_lower+0x118>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007820 <_send_lower+0x10c>)
 80077a4:	21d1      	movs	r1, #209	@ 0xd1
 80077a6:	5499      	strb	r1, [r3, r2]
  send_len += 1;
 80077a8:	4b20      	ldr	r3, [pc, #128]	@ (800782c <_send_lower+0x118>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	3301      	adds	r3, #1
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	4b1e      	ldr	r3, [pc, #120]	@ (800782c <_send_lower+0x118>)
 80077b2:	701a      	strb	r2, [r3, #0]

  crc16 = CRC16_Calculate(send_buf, send_len);
 80077b4:	4b1d      	ldr	r3, [pc, #116]	@ (800782c <_send_lower+0x118>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	4619      	mov	r1, r3
 80077ba:	4819      	ldr	r0, [pc, #100]	@ (8007820 <_send_lower+0x10c>)
 80077bc:	f7ff ff0a 	bl	80075d4 <CRC16_Calculate>
 80077c0:	4603      	mov	r3, r0
 80077c2:	813b      	strh	r3, [r7, #8]
  memcpy(&send_buf[send_len], &crc16, sizeof(uint16_t));
 80077c4:	4b19      	ldr	r3, [pc, #100]	@ (800782c <_send_lower+0x118>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	4b15      	ldr	r3, [pc, #84]	@ (8007820 <_send_lower+0x10c>)
 80077cc:	4413      	add	r3, r2
 80077ce:	893a      	ldrh	r2, [r7, #8]
 80077d0:	801a      	strh	r2, [r3, #0]
  send_len += 2;
 80077d2:	4b16      	ldr	r3, [pc, #88]	@ (800782c <_send_lower+0x118>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	3302      	adds	r3, #2
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	4b14      	ldr	r3, [pc, #80]	@ (800782c <_send_lower+0x118>)
 80077dc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < send_len; i++)  //
 80077de:	2300      	movs	r3, #0
 80077e0:	613b      	str	r3, [r7, #16]
 80077e2:	e00d      	b.n	8007800 <_send_lower+0xec>
    LOGI("%02x", send_buf[i]);
 80077e4:	f7fb fc48 	bl	8003078 <HAL_GetTick>
 80077e8:	4601      	mov	r1, r0
 80077ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007820 <_send_lower+0x10c>)
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4413      	add	r3, r2
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	4a0c      	ldr	r2, [pc, #48]	@ (8007824 <_send_lower+0x110>)
 80077f4:	480c      	ldr	r0, [pc, #48]	@ (8007828 <_send_lower+0x114>)
 80077f6:	f001 fb53 	bl	8008ea0 <iprintf>
  for (int i = 0; i < send_len; i++)  //
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	3301      	adds	r3, #1
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	4b0a      	ldr	r3, [pc, #40]	@ (800782c <_send_lower+0x118>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	4293      	cmp	r3, r2
 800780a:	dbeb      	blt.n	80077e4 <_send_lower+0xd0>
  wireless_send(send_buf, send_len);
 800780c:	4b07      	ldr	r3, [pc, #28]	@ (800782c <_send_lower+0x118>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	4619      	mov	r1, r3
 8007812:	4803      	ldr	r0, [pc, #12]	@ (8007820 <_send_lower+0x10c>)
 8007814:	f001 f8e2 	bl	80089dc <wireless_send>
}
 8007818:	bf00      	nop
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20000584 	.word	0x20000584
 8007824:	0800a53c 	.word	0x0800a53c
 8007828:	08009de0 	.word	0x08009de0
 800782c:	20000684 	.word	0x20000684

08007830 <_send_upper>:
/// @brief send to upper computer message
/// @param cmd
/// @param tail_len  message length = head_len + tail_len
/// @param data     data region
/// @param data_len data region size
void _send_upper(ENUM_CMD_UPPER_t cmd, uint8_t tail_len, void* data, uint8_t data_size) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	603a      	str	r2, [r7, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	4603      	mov	r3, r0
 800783c:	71fb      	strb	r3, [r7, #7]
 800783e:	460b      	mov	r3, r1
 8007840:	71bb      	strb	r3, [r7, #6]
 8007842:	4613      	mov	r3, r2
 8007844:	717b      	strb	r3, [r7, #5]
  CMD_HEAD_t* p_head   = (CMD_HEAD_t*)send_buf;
 8007846:	4b34      	ldr	r3, [pc, #208]	@ (8007918 <_send_upper+0xe8>)
 8007848:	613b      	str	r3, [r7, #16]
  uint8_t     head_len = sizeof(CMD_HEAD_t);
 800784a:	2306      	movs	r3, #6
 800784c:	73fb      	strb	r3, [r7, #15]
  uint16_t    crc16;
  p_head->head   = 0xd0;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	22d0      	movs	r2, #208	@ 0xd0
 8007852:	701a      	strb	r2, [r3, #0]
  p_head->cmd    = (uint8_t)cmd;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	79fa      	ldrb	r2, [r7, #7]
 8007858:	705a      	strb	r2, [r3, #1]
  p_head->encord = 0x01;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2201      	movs	r2, #1
 800785e:	709a      	strb	r2, [r3, #2]
  p_head->addr   = 0x0a;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	220a      	movs	r2, #10
 8007864:	70da      	strb	r2, [r3, #3]
  p_head->len    = tail_len;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	79ba      	ldrb	r2, [r7, #6]
 800786a:	711a      	strb	r2, [r3, #4]
  p_head->empty  = 0x00;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2200      	movs	r2, #0
 8007870:	715a      	strb	r2, [r3, #5]

  LOGI("tail_len is %02x", tail_len);
 8007872:	f7fb fc01 	bl	8003078 <HAL_GetTick>
 8007876:	4601      	mov	r1, r0
 8007878:	79bb      	ldrb	r3, [r7, #6]
 800787a:	4a28      	ldr	r2, [pc, #160]	@ (800791c <_send_upper+0xec>)
 800787c:	4828      	ldr	r0, [pc, #160]	@ (8007920 <_send_upper+0xf0>)
 800787e:	f001 fb0f 	bl	8008ea0 <iprintf>
  // data region copy
  memcpy(&send_buf[head_len], (uint8_t*)data, data_size);
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	4a24      	ldr	r2, [pc, #144]	@ (8007918 <_send_upper+0xe8>)
 8007886:	4413      	add	r3, r2
 8007888:	797a      	ldrb	r2, [r7, #5]
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	4618      	mov	r0, r3
 800788e:	f001 fbd8 	bl	8009042 <memcpy>
  send_len = head_len + data_size;
 8007892:	7bfa      	ldrb	r2, [r7, #15]
 8007894:	797b      	ldrb	r3, [r7, #5]
 8007896:	4413      	add	r3, r2
 8007898:	b2da      	uxtb	r2, r3
 800789a:	4b22      	ldr	r3, [pc, #136]	@ (8007924 <_send_upper+0xf4>)
 800789c:	701a      	strb	r2, [r3, #0]

  send_buf[send_len] = 0x71;
 800789e:	4b21      	ldr	r3, [pc, #132]	@ (8007924 <_send_upper+0xf4>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007918 <_send_upper+0xe8>)
 80078a6:	2171      	movs	r1, #113	@ 0x71
 80078a8:	5499      	strb	r1, [r3, r2]
  send_len += 1;
 80078aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007924 <_send_upper+0xf4>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	3301      	adds	r3, #1
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007924 <_send_upper+0xf4>)
 80078b4:	701a      	strb	r2, [r3, #0]

  crc16 = CRC16_Calculate(send_buf, send_len);
 80078b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007924 <_send_upper+0xf4>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	4619      	mov	r1, r3
 80078bc:	4816      	ldr	r0, [pc, #88]	@ (8007918 <_send_upper+0xe8>)
 80078be:	f7ff fe89 	bl	80075d4 <CRC16_Calculate>
 80078c2:	4603      	mov	r3, r0
 80078c4:	81bb      	strh	r3, [r7, #12]
  memcpy(&send_buf[send_len], &crc16, sizeof(uint16_t));
 80078c6:	4b17      	ldr	r3, [pc, #92]	@ (8007924 <_send_upper+0xf4>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	4b12      	ldr	r3, [pc, #72]	@ (8007918 <_send_upper+0xe8>)
 80078ce:	4413      	add	r3, r2
 80078d0:	89ba      	ldrh	r2, [r7, #12]
 80078d2:	801a      	strh	r2, [r3, #0]
  send_len += 2;
 80078d4:	4b13      	ldr	r3, [pc, #76]	@ (8007924 <_send_upper+0xf4>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	3302      	adds	r3, #2
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	4b11      	ldr	r3, [pc, #68]	@ (8007924 <_send_upper+0xf4>)
 80078de:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < send_len; i++)  //
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	e00d      	b.n	8007902 <_send_upper+0xd2>
    LOGI("%02x", send_buf[i]);
 80078e6:	f7fb fbc7 	bl	8003078 <HAL_GetTick>
 80078ea:	4601      	mov	r1, r0
 80078ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007918 <_send_upper+0xe8>)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	4413      	add	r3, r2
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	4a09      	ldr	r2, [pc, #36]	@ (800791c <_send_upper+0xec>)
 80078f6:	480c      	ldr	r0, [pc, #48]	@ (8007928 <_send_upper+0xf8>)
 80078f8:	f001 fad2 	bl	8008ea0 <iprintf>
  for (int i = 0; i < send_len; i++)  //
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	3301      	adds	r3, #1
 8007900:	617b      	str	r3, [r7, #20]
 8007902:	4b08      	ldr	r3, [pc, #32]	@ (8007924 <_send_upper+0xf4>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	4293      	cmp	r3, r2
 800790c:	dbeb      	blt.n	80078e6 <_send_upper+0xb6>
  // wireless_send(send_buf, send_len);
}
 800790e:	bf00      	nop
 8007910:	bf00      	nop
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000584 	.word	0x20000584
 800791c:	0800a548 	.word	0x0800a548
 8007920:	08009e00 	.word	0x08009e00
 8007924:	20000684 	.word	0x20000684
 8007928:	08009de0 	.word	0x08009de0

0800792c <data_pack>:

uint8_t data_pack(ENUM_CMD_UPPER_t type, uint8_t* data_region) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	6039      	str	r1, [r7, #0]
 8007936:	71fb      	strb	r3, [r7, #7]
  uint8_t data_size;
  if (data_region == NULL) {
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d109      	bne.n	8007952 <data_pack+0x26>
    LOGE("data_region is null");
 800793e:	f7fb fb9b 	bl	8003078 <HAL_GetTick>
 8007942:	4603      	mov	r3, r0
 8007944:	4a34      	ldr	r2, [pc, #208]	@ (8007a18 <data_pack+0xec>)
 8007946:	4619      	mov	r1, r3
 8007948:	4834      	ldr	r0, [pc, #208]	@ (8007a1c <data_pack+0xf0>)
 800794a:	f001 faa9 	bl	8008ea0 <iprintf>
    return;
 800794e:	bf00      	nop
 8007950:	e05d      	b.n	8007a0e <data_pack+0xe2>
  }
  switch (type) {
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d04d      	beq.n	80079f4 <data_pack+0xc8>
 8007958:	2b00      	cmp	r3, #0
 800795a:	db57      	blt.n	8007a0c <data_pack+0xe0>
 800795c:	2b30      	cmp	r3, #48	@ 0x30
 800795e:	dc55      	bgt.n	8007a0c <data_pack+0xe0>
 8007960:	2b10      	cmp	r3, #16
 8007962:	db53      	blt.n	8007a0c <data_pack+0xe0>
 8007964:	3b10      	subs	r3, #16
 8007966:	2b20      	cmp	r3, #32
 8007968:	d850      	bhi.n	8007a0c <data_pack+0xe0>
 800796a:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <data_pack+0x44>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	08007a0d 	.word	0x08007a0d
 8007974:	08007a0d 	.word	0x08007a0d
 8007978:	08007a0d 	.word	0x08007a0d
 800797c:	08007a0d 	.word	0x08007a0d
 8007980:	08007a0d 	.word	0x08007a0d
 8007984:	08007a0d 	.word	0x08007a0d
 8007988:	08007a0d 	.word	0x08007a0d
 800798c:	08007a0d 	.word	0x08007a0d
 8007990:	08007a0d 	.word	0x08007a0d
 8007994:	08007a0d 	.word	0x08007a0d
 8007998:	08007a0d 	.word	0x08007a0d
 800799c:	08007a0d 	.word	0x08007a0d
 80079a0:	08007a0d 	.word	0x08007a0d
 80079a4:	08007a0d 	.word	0x08007a0d
 80079a8:	08007a0d 	.word	0x08007a0d
 80079ac:	08007a0d 	.word	0x08007a0d
 80079b0:	08007a01 	.word	0x08007a01
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	08007a0d 	.word	0x08007a0d
 80079bc:	08007a0d 	.word	0x08007a0d
 80079c0:	08007a0d 	.word	0x08007a0d
 80079c4:	08007a0d 	.word	0x08007a0d
 80079c8:	08007a0d 	.word	0x08007a0d
 80079cc:	08007a0d 	.word	0x08007a0d
 80079d0:	08007a0d 	.word	0x08007a0d
 80079d4:	08007a0d 	.word	0x08007a0d
 80079d8:	08007a0d 	.word	0x08007a0d
 80079dc:	08007a0d 	.word	0x08007a0d
 80079e0:	08007a0d 	.word	0x08007a0d
 80079e4:	08007a0d 	.word	0x08007a0d
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a0d 	.word	0x08007a0d
 80079f0:	08007a0d 	.word	0x08007a0d
    case kInit:
      data_size = sizeof(Upper_Init_t);
 80079f4:	2307      	movs	r3, #7
 80079f6:	73fb      	strb	r3, [r7, #15]
      init_data_pack(data_region);
 80079f8:	6838      	ldr	r0, [r7, #0]
 80079fa:	f000 f853 	bl	8007aa4 <init_data_pack>
      break;
 80079fe:	e005      	b.n	8007a0c <data_pack+0xe0>
      break;
    case kInquireBookInfo:

      break;
    case kMoveAction:
      data_size = sizeof(Move_Action_t);
 8007a00:	230b      	movs	r3, #11
 8007a02:	73fb      	strb	r3, [r7, #15]
      move_data_pack(data_region);
 8007a04:	6838      	ldr	r0, [r7, #0]
 8007a06:	f000 f80b 	bl	8007a20 <move_data_pack>

      break;
 8007a0a:	bf00      	nop
      break;
    case kSynClock:
      break;
  }

  return data_size;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	0800a554 	.word	0x0800a554
 8007a1c:	08009e2c 	.word	0x08009e2c

08007a20 <move_data_pack>:

void move_data_pack(uint8_t* data_region) {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b088      	sub	sp, #32
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  Motor_t        servo_info = get_servo_info();
 8007a28:	f107 030c 	add.w	r3, r7, #12
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fbf3 	bl	8008218 <get_servo_info>
  Move_Action_t* p_action   = (Move_Action_t*)data_region;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	61bb      	str	r3, [r7, #24]

  // memcpy(data_region, up_recv_buf + sizeof(CMD_HEAD_t), up_recv_len - 6 - 3);
  p_action->x_pos       = get_Position_mm(GetMoterStateReg(), 4);
 8007a36:	f7f8 fc29 	bl	800028c <GetMoterStateReg>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2104      	movs	r1, #4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fbfe 	bl	8008240 <get_Position_mm>
 8007a44:	4603      	mov	r3, r0
 8007a46:	461a      	mov	r2, r3
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	801a      	strh	r2, [r3, #0]
  p_action->x_speed     = servo_info.speed;
 8007a4c:	8a7a      	ldrh	r2, [r7, #18]
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	805a      	strh	r2, [r3, #2]
  p_action->motor_state = 0x01;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2201      	movs	r2, #1
 8007a56:	729a      	strb	r2, [r3, #10]
  p_action->direct      = servo_info.diretion;
 8007a58:	7d3a      	ldrb	r2, [r7, #20]
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	725a      	strb	r2, [r3, #9]
  // p_action->y_pos           = 0x0001;
  // p_action->y_speed         = 0x0001;
  // p_action->action_state    = 0x01;

  action_mode = p_action->action_state;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	7a1a      	ldrb	r2, [r3, #8]
 8007a62:	4b0d      	ldr	r3, [pc, #52]	@ (8007a98 <move_data_pack+0x78>)
 8007a64:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(Move_Action_t); i++) {
 8007a66:	2300      	movs	r3, #0
 8007a68:	61fb      	str	r3, [r7, #28]
 8007a6a:	e00d      	b.n	8007a88 <move_data_pack+0x68>
    LOGI("%02x", data_region[i]);
 8007a6c:	f7fb fb04 	bl	8003078 <HAL_GetTick>
 8007a70:	4601      	mov	r1, r0
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	4413      	add	r3, r2
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	4a08      	ldr	r2, [pc, #32]	@ (8007a9c <move_data_pack+0x7c>)
 8007a7c:	4808      	ldr	r0, [pc, #32]	@ (8007aa0 <move_data_pack+0x80>)
 8007a7e:	f001 fa0f 	bl	8008ea0 <iprintf>
  for (int i = 0; i < sizeof(Move_Action_t); i++) {
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	3301      	adds	r3, #1
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	2b0a      	cmp	r3, #10
 8007a8c:	d9ee      	bls.n	8007a6c <move_data_pack+0x4c>
  }
}
 8007a8e:	bf00      	nop
 8007a90:	bf00      	nop
 8007a92:	3720      	adds	r7, #32
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	20000999 	.word	0x20000999
 8007a9c:	0800a560 	.word	0x0800a560
 8007aa0:	08009de0 	.word	0x08009de0

08007aa4 <init_data_pack>:

void init_data_pack(uint8_t* data_region) {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  Motor_t       servo_info  = get_servo_info();
 8007aac:	f107 0308 	add.w	r3, r7, #8
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fbb1 	bl	8008218 <get_servo_info>
  Upper_Init_t* p_init      = (Upper_Init_t*)data_region;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	617b      	str	r3, [r7, #20]
  p_init->servo_conect      = servo_info.connect;
 8007aba:	897b      	ldrh	r3, [r7, #10]
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	701a      	strb	r2, [r3, #0]
  p_init->servo_reset_state = servo_info.state;
 8007ac2:	893b      	ldrh	r3, [r7, #8]
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	705a      	strb	r2, [r3, #1]
}
 8007aca:	bf00      	nop
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <init_upper>:

FSM_STATE_t init_upper(uint8_t* data, uint8_t len) {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
    SEND_UP,
    WAITE_LOW,
  } s_State = START;

  static uint32_t up_flow;
  switch (s_State) {
 8007ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8007b8c <init_upper+0xb8>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d84c      	bhi.n	8007b82 <init_upper+0xae>
 8007ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8007af0 <init_upper+0x1c>)
 8007aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007b01 	.word	0x08007b01
 8007af4:	08007b09 	.word	0x08007b09
 8007af8:	08007b35 	.word	0x08007b35
 8007afc:	08007b53 	.word	0x08007b53
    case START:
      s_State = SEND_INIT_LOW;
 8007b00:	4b22      	ldr	r3, [pc, #136]	@ (8007b8c <init_upper+0xb8>)
 8007b02:	2201      	movs	r2, #1
 8007b04:	701a      	strb	r2, [r3, #0]
      break;
 8007b06:	e03c      	b.n	8007b82 <init_upper+0xae>
    case SEND_INIT_LOW:
      send_lower(kInit, 4);
 8007b08:	2104      	movs	r1, #4
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	f7ff fdaa 	bl	8007664 <send_lower>

      low_state = false;
 8007b10:	4b1f      	ldr	r3, [pc, #124]	@ (8007b90 <init_upper+0xbc>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_INIT_LOW;
 8007b16:	4b1f      	ldr	r3, [pc, #124]	@ (8007b94 <init_upper+0xc0>)
 8007b18:	2201      	movs	r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]
      s_State   = WAITE_LOW;
 8007b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8007b8c <init_upper+0xb8>)
 8007b1e:	2203      	movs	r2, #3
 8007b20:	701a      	strb	r2, [r3, #0]
      LOGE("LOW FALSE");
 8007b22:	f7fb faa9 	bl	8003078 <HAL_GetTick>
 8007b26:	4603      	mov	r3, r0
 8007b28:	4a1b      	ldr	r2, [pc, #108]	@ (8007b98 <init_upper+0xc4>)
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	481b      	ldr	r0, [pc, #108]	@ (8007b9c <init_upper+0xc8>)
 8007b2e:	f001 f9b7 	bl	8008ea0 <iprintf>
      break;
 8007b32:	e026      	b.n	8007b82 <init_upper+0xae>
    case SEND_UP:
      send_upper(kInit, sizeof(Upper_Init_t) + 3);
 8007b34:	210a      	movs	r1, #10
 8007b36:	2000      	movs	r0, #0
 8007b38:	f7ff fdc0 	bl	80076bc <send_upper>
      low_state = false;
 8007b3c:	4b14      	ldr	r3, [pc, #80]	@ (8007b90 <init_upper+0xbc>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
      up_flow   = START;
 8007b42:	4b14      	ldr	r3, [pc, #80]	@ (8007b94 <init_upper+0xc0>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]
      s_State   = WAITE_LOW;
 8007b48:	4b10      	ldr	r3, [pc, #64]	@ (8007b8c <init_upper+0xb8>)
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e018      	b.n	8007b84 <init_upper+0xb0>
      break;
    case WAITE_LOW:
      if (true == low_state) {
 8007b52:	4b0f      	ldr	r3, [pc, #60]	@ (8007b90 <init_upper+0xbc>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00f      	beq.n	8007b7a <init_upper+0xa6>
        LOGE("LOW TRUE");
 8007b5a:	f7fb fa8d 	bl	8003078 <HAL_GetTick>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4a0d      	ldr	r2, [pc, #52]	@ (8007b98 <init_upper+0xc4>)
 8007b62:	4619      	mov	r1, r3
 8007b64:	480e      	ldr	r0, [pc, #56]	@ (8007ba0 <init_upper+0xcc>)
 8007b66:	f001 f99b 	bl	8008ea0 <iprintf>
        switch (up_flow) {
 8007b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b94 <init_upper+0xc0>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d106      	bne.n	8007b80 <init_upper+0xac>
          case SEND_INIT_LOW:
            s_State = SEND_UP;
 8007b72:	4b06      	ldr	r3, [pc, #24]	@ (8007b8c <init_upper+0xb8>)
 8007b74:	2202      	movs	r2, #2
 8007b76:	701a      	strb	r2, [r3, #0]
        }
      } else
        s_State = WAITE_LOW;
      break;
 8007b78:	e002      	b.n	8007b80 <init_upper+0xac>
        s_State = WAITE_LOW;
 8007b7a:	4b04      	ldr	r3, [pc, #16]	@ (8007b8c <init_upper+0xb8>)
 8007b7c:	2203      	movs	r2, #3
 8007b7e:	701a      	strb	r2, [r3, #0]
      break;
 8007b80:	bf00      	nop
  }

  return fsm_onging;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	2000099a 	.word	0x2000099a
 8007b90:	20000992 	.word	0x20000992
 8007b94:	2000099c 	.word	0x2000099c
 8007b98:	0800a570 	.word	0x0800a570
 8007b9c:	08009e5c 	.word	0x08009e5c
 8007ba0:	08009e84 	.word	0x08009e84

08007ba4 <move_action_upper>:

FSM_STATE_t move_action_upper(void) {  // uint8_t* data, uint8_t len) {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
    SEND_UP,
    WAITE_LOW,
  } s_State = START;

  static uint32_t up_flow;
  switch (s_State) {
 8007ba8:	4b29      	ldr	r3, [pc, #164]	@ (8007c50 <move_action_upper+0xac>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d84c      	bhi.n	8007c4a <move_action_upper+0xa6>
 8007bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <move_action_upper+0x14>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bc9 	.word	0x08007bc9
 8007bbc:	08007bcf 	.word	0x08007bcf
 8007bc0:	08007bfb 	.word	0x08007bfb
 8007bc4:	08007c29 	.word	0x08007c29
    case START:
      s_State = SEND_START_LOW;
 8007bc8:	4b21      	ldr	r3, [pc, #132]	@ (8007c50 <move_action_upper+0xac>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	701a      	strb	r2, [r3, #0]
    //   low_state = false;
    //   up_flow   = SEND_SYN_CLOCK_LOW;
    //   s_State   = WAITE_LOW;
    //   break;
    case SEND_START_LOW:
      LOGE("send start");
 8007bce:	f7fb fa53 	bl	8003078 <HAL_GetTick>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8007c54 <move_action_upper+0xb0>)
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	481f      	ldr	r0, [pc, #124]	@ (8007c58 <move_action_upper+0xb4>)
 8007bda:	f001 f961 	bl	8008ea0 <iprintf>
      send_lower(kMoveAction, sizeof(Move_Action_t) + 3);
 8007bde:	210e      	movs	r1, #14
 8007be0:	2020      	movs	r0, #32
 8007be2:	f7ff fd3f 	bl	8007664 <send_lower>

      low_state = false;
 8007be6:	4b1d      	ldr	r3, [pc, #116]	@ (8007c5c <move_action_upper+0xb8>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_START_LOW;
 8007bec:	4b1c      	ldr	r3, [pc, #112]	@ (8007c60 <move_action_upper+0xbc>)
 8007bee:	2201      	movs	r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]
      s_State   = WAITE_LOW;
 8007bf2:	4b17      	ldr	r3, [pc, #92]	@ (8007c50 <move_action_upper+0xac>)
 8007bf4:	2203      	movs	r2, #3
 8007bf6:	701a      	strb	r2, [r3, #0]
      break;
 8007bf8:	e027      	b.n	8007c4a <move_action_upper+0xa6>
    case SEND_UP:
      LOGE("send up");
 8007bfa:	f7fb fa3d 	bl	8003078 <HAL_GetTick>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4a14      	ldr	r2, [pc, #80]	@ (8007c54 <move_action_upper+0xb0>)
 8007c02:	4619      	mov	r1, r3
 8007c04:	4817      	ldr	r0, [pc, #92]	@ (8007c64 <move_action_upper+0xc0>)
 8007c06:	f001 f94b 	bl	8008ea0 <iprintf>
      send_upper(kMoveAction, sizeof(Move_Action_t) + 3);
 8007c0a:	210e      	movs	r1, #14
 8007c0c:	2020      	movs	r0, #32
 8007c0e:	f7ff fd55 	bl	80076bc <send_upper>

      low_state = false;
 8007c12:	4b12      	ldr	r3, [pc, #72]	@ (8007c5c <move_action_upper+0xb8>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
      up_flow   = SEND_UP;
 8007c18:	4b11      	ldr	r3, [pc, #68]	@ (8007c60 <move_action_upper+0xbc>)
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	601a      	str	r2, [r3, #0]
      s_State   = WAITE_LOW;
 8007c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c50 <move_action_upper+0xac>)
 8007c20:	2203      	movs	r2, #3
 8007c22:	701a      	strb	r2, [r3, #0]

      return fsm_cpl;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e011      	b.n	8007c4c <move_action_upper+0xa8>
      break;
    case WAITE_LOW:
      // LOGE("wAIT");
      if (true == low_state) {
 8007c28:	4b0c      	ldr	r3, [pc, #48]	@ (8007c5c <move_action_upper+0xb8>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d008      	beq.n	8007c42 <move_action_upper+0x9e>
        switch (up_flow) {
 8007c30:	4b0b      	ldr	r3, [pc, #44]	@ (8007c60 <move_action_upper+0xbc>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d107      	bne.n	8007c48 <move_action_upper+0xa4>
          // case SEND_SYN_CLOCK_LOW:
          //   s_State = SEND_START_LOW;
          //   break;
          case SEND_START_LOW:
            s_State = SEND_UP;
 8007c38:	4b05      	ldr	r3, [pc, #20]	@ (8007c50 <move_action_upper+0xac>)
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	701a      	strb	r2, [r3, #0]
            break;
 8007c3e:	bf00      	nop
        }
      } else
        s_State = WAITE_LOW;
      break;
 8007c40:	e002      	b.n	8007c48 <move_action_upper+0xa4>
        s_State = WAITE_LOW;
 8007c42:	4b03      	ldr	r3, [pc, #12]	@ (8007c50 <move_action_upper+0xac>)
 8007c44:	2203      	movs	r2, #3
 8007c46:	701a      	strb	r2, [r3, #0]
      break;
 8007c48:	bf00      	nop
  }

  return fsm_onging;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	200009a0 	.word	0x200009a0
 8007c54:	0800a57c 	.word	0x0800a57c
 8007c58:	08009ea8 	.word	0x08009ea8
 8007c5c:	20000992 	.word	0x20000992
 8007c60:	200009a4 	.word	0x200009a4
 8007c64:	08009ed0 	.word	0x08009ed0

08007c68 <init_low>:

FSM_STATE_t init_low(uint8_t* data, uint8_t len) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]

  static enum {
    START,
    RECV_INIT,
  } s_State = START;
  switch (s_State) {
 8007c74:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce0 <init_low+0x78>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <init_low+0x1a>
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d003      	beq.n	8007c88 <init_low+0x20>
 8007c80:	e029      	b.n	8007cd6 <init_low+0x6e>
    case START:
      s_State = RECV_INIT;
 8007c82:	4b17      	ldr	r3, [pc, #92]	@ (8007ce0 <init_low+0x78>)
 8007c84:	2201      	movs	r2, #1
 8007c86:	701a      	strb	r2, [r3, #0]
    case RECV_INIT:
      memcpy(up_recv_buf, low_recv_buf, low_recv_len);
 8007c88:	4b16      	ldr	r3, [pc, #88]	@ (8007ce4 <init_low+0x7c>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	4916      	ldr	r1, [pc, #88]	@ (8007ce8 <init_low+0x80>)
 8007c90:	4816      	ldr	r0, [pc, #88]	@ (8007cec <init_low+0x84>)
 8007c92:	f001 f9d6 	bl	8009042 <memcpy>
      up_recv_len = low_recv_len;
 8007c96:	4b13      	ldr	r3, [pc, #76]	@ (8007ce4 <init_low+0x7c>)
 8007c98:	781a      	ldrb	r2, [r3, #0]
 8007c9a:	4b15      	ldr	r3, [pc, #84]	@ (8007cf0 <init_low+0x88>)
 8007c9c:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < up_recv_len; i++)  //
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	e00d      	b.n	8007cc0 <init_low+0x58>
        LOGI("%02x", up_recv_buf[i]);
 8007ca4:	f7fb f9e8 	bl	8003078 <HAL_GetTick>
 8007ca8:	4601      	mov	r1, r0
 8007caa:	4a10      	ldr	r2, [pc, #64]	@ (8007cec <init_low+0x84>)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	4a10      	ldr	r2, [pc, #64]	@ (8007cf4 <init_low+0x8c>)
 8007cb4:	4810      	ldr	r0, [pc, #64]	@ (8007cf8 <init_low+0x90>)
 8007cb6:	f001 f8f3 	bl	8008ea0 <iprintf>
      for (int i = 0; i < up_recv_len; i++)  //
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf0 <init_low+0x88>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	dbeb      	blt.n	8007ca4 <init_low+0x3c>
      s_State = START;
 8007ccc:	4b04      	ldr	r3, [pc, #16]	@ (8007ce0 <init_low+0x78>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <init_low+0x70>
      break;
  }

  return fsm_onging;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	200009a8 	.word	0x200009a8
 8007ce4:	20000990 	.word	0x20000990
 8007ce8:	20000890 	.word	0x20000890
 8007cec:	2000078c 	.word	0x2000078c
 8007cf0:	2000088c 	.word	0x2000088c
 8007cf4:	0800a590 	.word	0x0800a590
 8007cf8:	08009de0 	.word	0x08009de0

08007cfc <move_action_low>:

FSM_STATE_t move_action_low(void* data, uint8_t len) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
    // RECV_SYN_CLOCK,
    RECV_START,
    WAITE,
  } s_State = START;

  switch (s_State) {
 8007d08:	4b1e      	ldr	r3, [pc, #120]	@ (8007d84 <move_action_low+0x88>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <move_action_low+0x1a>
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d003      	beq.n	8007d1c <move_action_low+0x20>
 8007d14:	e031      	b.n	8007d7a <move_action_low+0x7e>
    case START:
      s_State = RECV_START;
 8007d16:	4b1b      	ldr	r3, [pc, #108]	@ (8007d84 <move_action_low+0x88>)
 8007d18:	2201      	movs	r2, #1
 8007d1a:	701a      	strb	r2, [r3, #0]
      //   s_State   = RECV_START;
      //   return fsm_cpl;

      // break;
    case RECV_START:
      LOGI("RECV START");
 8007d1c:	f7fb f9ac 	bl	8003078 <HAL_GetTick>
 8007d20:	4603      	mov	r3, r0
 8007d22:	4a19      	ldr	r2, [pc, #100]	@ (8007d88 <move_action_low+0x8c>)
 8007d24:	4619      	mov	r1, r3
 8007d26:	4819      	ldr	r0, [pc, #100]	@ (8007d8c <move_action_low+0x90>)
 8007d28:	f001 f8ba 	bl	8008ea0 <iprintf>
      memcpy(up_recv_buf, low_recv_buf, low_recv_len);
 8007d2c:	4b18      	ldr	r3, [pc, #96]	@ (8007d90 <move_action_low+0x94>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	4918      	ldr	r1, [pc, #96]	@ (8007d94 <move_action_low+0x98>)
 8007d34:	4818      	ldr	r0, [pc, #96]	@ (8007d98 <move_action_low+0x9c>)
 8007d36:	f001 f984 	bl	8009042 <memcpy>
      up_recv_len = low_recv_len;
 8007d3a:	4b15      	ldr	r3, [pc, #84]	@ (8007d90 <move_action_low+0x94>)
 8007d3c:	781a      	ldrb	r2, [r3, #0]
 8007d3e:	4b17      	ldr	r3, [pc, #92]	@ (8007d9c <move_action_low+0xa0>)
 8007d40:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < up_recv_len; i++)  //
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	e00d      	b.n	8007d64 <move_action_low+0x68>
        LOGI("%02x", up_recv_buf[i]);
 8007d48:	f7fb f996 	bl	8003078 <HAL_GetTick>
 8007d4c:	4601      	mov	r1, r0
 8007d4e:	4a12      	ldr	r2, [pc, #72]	@ (8007d98 <move_action_low+0x9c>)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4413      	add	r3, r2
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	4a0c      	ldr	r2, [pc, #48]	@ (8007d88 <move_action_low+0x8c>)
 8007d58:	4811      	ldr	r0, [pc, #68]	@ (8007da0 <move_action_low+0xa4>)
 8007d5a:	f001 f8a1 	bl	8008ea0 <iprintf>
      for (int i = 0; i < up_recv_len; i++)  //
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	4b0d      	ldr	r3, [pc, #52]	@ (8007d9c <move_action_low+0xa0>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	dbeb      	blt.n	8007d48 <move_action_low+0x4c>
      s_State = START;
 8007d70:	4b04      	ldr	r3, [pc, #16]	@ (8007d84 <move_action_low+0x88>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e000      	b.n	8007d7c <move_action_low+0x80>

      break;
  }

  return fsm_onging;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	200009a9 	.word	0x200009a9
 8007d88:	0800a59c 	.word	0x0800a59c
 8007d8c:	08009ef4 	.word	0x08009ef4
 8007d90:	20000990 	.word	0x20000990
 8007d94:	20000890 	.word	0x20000890
 8007d98:	2000078c 	.word	0x2000078c
 8007d9c:	2000088c 	.word	0x2000088c
 8007da0:	08009de0 	.word	0x08009de0

08007da4 <transfer_process>:

// 先一条龙服务。上位机 -> 中 -> 下位机
void transfer_process(void) {
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
  CMD_HEAD_t* p_head_recv = (CMD_HEAD_t*)recv_buf;
 8007daa:	4b2e      	ldr	r3, [pc, #184]	@ (8007e64 <transfer_process+0xc0>)
 8007dac:	607b      	str	r3, [r7, #4]

  if (0x0B == p_head_recv->addr) {  // 下位机
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	78db      	ldrb	r3, [r3, #3]
 8007db2:	2b0b      	cmp	r3, #11
 8007db4:	d116      	bne.n	8007de4 <transfer_process+0x40>
    LOGI("RECV lower");
 8007db6:	f7fb f95f 	bl	8003078 <HAL_GetTick>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8007e68 <transfer_process+0xc4>)
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	482a      	ldr	r0, [pc, #168]	@ (8007e6c <transfer_process+0xc8>)
 8007dc2:	f001 f86d 	bl	8008ea0 <iprintf>
    memcpy(low_recv_buf, recv_buf, recv_len);
 8007dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8007e70 <transfer_process+0xcc>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4925      	ldr	r1, [pc, #148]	@ (8007e64 <transfer_process+0xc0>)
 8007dce:	4829      	ldr	r0, [pc, #164]	@ (8007e74 <transfer_process+0xd0>)
 8007dd0:	f001 f937 	bl	8009042 <memcpy>
    low_recv_len = recv_len;
 8007dd4:	4b26      	ldr	r3, [pc, #152]	@ (8007e70 <transfer_process+0xcc>)
 8007dd6:	781a      	ldrb	r2, [r3, #0]
 8007dd8:	4b27      	ldr	r3, [pc, #156]	@ (8007e78 <transfer_process+0xd4>)
 8007dda:	701a      	strb	r2, [r3, #0]
    low_start    = true;
 8007ddc:	4b27      	ldr	r3, [pc, #156]	@ (8007e7c <transfer_process+0xd8>)
 8007dde:	2201      	movs	r2, #1
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e019      	b.n	8007e18 <transfer_process+0x74>
    // send_lower(kInit, 0x05);
  } else if (0x0A == p_head_recv->addr) {  // 上位机
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	78db      	ldrb	r3, [r3, #3]
 8007de8:	2b0a      	cmp	r3, #10
 8007dea:	d115      	bne.n	8007e18 <transfer_process+0x74>
    LOGI("RECV upper");
 8007dec:	f7fb f944 	bl	8003078 <HAL_GetTick>
 8007df0:	4603      	mov	r3, r0
 8007df2:	4a1d      	ldr	r2, [pc, #116]	@ (8007e68 <transfer_process+0xc4>)
 8007df4:	4619      	mov	r1, r3
 8007df6:	4822      	ldr	r0, [pc, #136]	@ (8007e80 <transfer_process+0xdc>)
 8007df8:	f001 f852 	bl	8008ea0 <iprintf>
    memcpy(up_recv_buf, recv_buf, recv_len);
 8007dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8007e70 <transfer_process+0xcc>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	4918      	ldr	r1, [pc, #96]	@ (8007e64 <transfer_process+0xc0>)
 8007e04:	481f      	ldr	r0, [pc, #124]	@ (8007e84 <transfer_process+0xe0>)
 8007e06:	f001 f91c 	bl	8009042 <memcpy>
    up_recv_len = recv_len;
 8007e0a:	4b19      	ldr	r3, [pc, #100]	@ (8007e70 <transfer_process+0xcc>)
 8007e0c:	781a      	ldrb	r2, [r3, #0]
 8007e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007e88 <transfer_process+0xe4>)
 8007e10:	701a      	strb	r2, [r3, #0]
    upper_start = true;
 8007e12:	4b1e      	ldr	r3, [pc, #120]	@ (8007e8c <transfer_process+0xe8>)
 8007e14:	2201      	movs	r2, #1
 8007e16:	701a      	strb	r2, [r3, #0]

    // for (int i = 0; i < up_recv_len; i++)  //
    //   LOGI("%02x", up_recv_buf[i]);
  }

  if (upper_start) {
 8007e18:	4b1c      	ldr	r3, [pc, #112]	@ (8007e8c <transfer_process+0xe8>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <transfer_process+0x88>
    upper_process(up_recv_buf, up_recv_len);
 8007e20:	4b19      	ldr	r3, [pc, #100]	@ (8007e88 <transfer_process+0xe4>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	4619      	mov	r1, r3
 8007e26:	4817      	ldr	r0, [pc, #92]	@ (8007e84 <transfer_process+0xe0>)
 8007e28:	f000 f832 	bl	8007e90 <upper_process>
  }
  if (low_start) {
 8007e2c:	4b13      	ldr	r3, [pc, #76]	@ (8007e7c <transfer_process+0xd8>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <transfer_process+0x9c>
    lower_process(low_recv_buf, low_recv_len);
 8007e34:	4b10      	ldr	r3, [pc, #64]	@ (8007e78 <transfer_process+0xd4>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	480e      	ldr	r0, [pc, #56]	@ (8007e74 <transfer_process+0xd0>)
 8007e3c:	f000 f8ba 	bl	8007fb4 <lower_process>
  }

  //_send_upper(p_head_recv->cmd, p_head_recv->len, data_region, data_size);
  //}
  memset(recv_buf, 0, recv_len);
 8007e40:	4b0b      	ldr	r3, [pc, #44]	@ (8007e70 <transfer_process+0xcc>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	2100      	movs	r1, #0
 8007e48:	4806      	ldr	r0, [pc, #24]	@ (8007e64 <transfer_process+0xc0>)
 8007e4a:	f001 f87e 	bl	8008f4a <memset>
  recv_len = 0;
 8007e4e:	4b08      	ldr	r3, [pc, #32]	@ (8007e70 <transfer_process+0xcc>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
  transmit_using(false);
 8007e54:	2000      	movs	r0, #0
 8007e56:	f000 f985 	bl	8008164 <transmit_using>
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000688 	.word	0x20000688
 8007e68:	0800a5ac 	.word	0x0800a5ac
 8007e6c:	08009f1c 	.word	0x08009f1c
 8007e70:	20000788 	.word	0x20000788
 8007e74:	20000890 	.word	0x20000890
 8007e78:	20000990 	.word	0x20000990
 8007e7c:	20000991 	.word	0x20000991
 8007e80:	08009f44 	.word	0x08009f44
 8007e84:	2000078c 	.word	0x2000078c
 8007e88:	2000088c 	.word	0x2000088c
 8007e8c:	2000088d 	.word	0x2000088d

08007e90 <upper_process>:

void upper_process(uint8_t* packet, uint8_t len) {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  CMD_HEAD_t* p_head_recv = (CMD_HEAD_t*)packet;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]
  // uint8_t     data_size   = len - sizeof(CMD_HEAD_t) - 2;  // 2 = crc16
  // for (int i = 0; i < data_size; i++) {
  //   LOGI("%02x", data_region[i]);
  // }

  switch (p_head_recv->cmd) {
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d04d      	beq.n	8007f44 <upper_process+0xb4>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	db78      	blt.n	8007f9e <upper_process+0x10e>
 8007eac:	2b30      	cmp	r3, #48	@ 0x30
 8007eae:	dc76      	bgt.n	8007f9e <upper_process+0x10e>
 8007eb0:	2b10      	cmp	r3, #16
 8007eb2:	db74      	blt.n	8007f9e <upper_process+0x10e>
 8007eb4:	3b10      	subs	r3, #16
 8007eb6:	2b20      	cmp	r3, #32
 8007eb8:	d871      	bhi.n	8007f9e <upper_process+0x10e>
 8007eba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec0 <upper_process+0x30>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007f9f 	.word	0x08007f9f
 8007ec4:	08007f9f 	.word	0x08007f9f
 8007ec8:	08007f9f 	.word	0x08007f9f
 8007ecc:	08007f9f 	.word	0x08007f9f
 8007ed0:	08007f9f 	.word	0x08007f9f
 8007ed4:	08007f9f 	.word	0x08007f9f
 8007ed8:	08007f9f 	.word	0x08007f9f
 8007edc:	08007f9f 	.word	0x08007f9f
 8007ee0:	08007f9f 	.word	0x08007f9f
 8007ee4:	08007f9f 	.word	0x08007f9f
 8007ee8:	08007f9f 	.word	0x08007f9f
 8007eec:	08007f9f 	.word	0x08007f9f
 8007ef0:	08007f9f 	.word	0x08007f9f
 8007ef4:	08007f9f 	.word	0x08007f9f
 8007ef8:	08007f9f 	.word	0x08007f9f
 8007efc:	08007f9f 	.word	0x08007f9f
 8007f00:	08007f6d 	.word	0x08007f6d
 8007f04:	08007f9f 	.word	0x08007f9f
 8007f08:	08007f9f 	.word	0x08007f9f
 8007f0c:	08007f9f 	.word	0x08007f9f
 8007f10:	08007f9f 	.word	0x08007f9f
 8007f14:	08007f9f 	.word	0x08007f9f
 8007f18:	08007f9f 	.word	0x08007f9f
 8007f1c:	08007f9f 	.word	0x08007f9f
 8007f20:	08007f9f 	.word	0x08007f9f
 8007f24:	08007f9f 	.word	0x08007f9f
 8007f28:	08007f9f 	.word	0x08007f9f
 8007f2c:	08007f9f 	.word	0x08007f9f
 8007f30:	08007f9f 	.word	0x08007f9f
 8007f34:	08007f9f 	.word	0x08007f9f
 8007f38:	08007f9f 	.word	0x08007f9f
 8007f3c:	08007f9f 	.word	0x08007f9f
 8007f40:	08007f8f 	.word	0x08007f8f
    case kInit:
      // data_regiom[0] = 伺服电机连接
      // data_region[1] = 伺服电机复位
      //
      if (!init_upper(packet, len)) {
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff fdc3 	bl	8007ad4 <init_upper>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d021      	beq.n	8007f98 <upper_process+0x108>
        return;
      }

      LOGI("Init CPL");
 8007f54:	f7fb f890 	bl	8003078 <HAL_GetTick>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	4a12      	ldr	r2, [pc, #72]	@ (8007fa4 <upper_process+0x114>)
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4812      	ldr	r0, [pc, #72]	@ (8007fa8 <upper_process+0x118>)
 8007f60:	f000 ff9e 	bl	8008ea0 <iprintf>
      upper_start = false;
 8007f64:	4b11      	ldr	r3, [pc, #68]	@ (8007fac <upper_process+0x11c>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
      break;
 8007f6a:	e018      	b.n	8007f9e <upper_process+0x10e>
    case kMoveAction:

      if (!move_action_upper()) {
 8007f6c:	f7ff fe1a 	bl	8007ba4 <move_action_upper>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d012      	beq.n	8007f9c <upper_process+0x10c>
        return;
      }
      LOGI("MOVE ACTION CPL");
 8007f76:	f7fb f87f 	bl	8003078 <HAL_GetTick>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	4a09      	ldr	r2, [pc, #36]	@ (8007fa4 <upper_process+0x114>)
 8007f7e:	4619      	mov	r1, r3
 8007f80:	480b      	ldr	r0, [pc, #44]	@ (8007fb0 <upper_process+0x120>)
 8007f82:	f000 ff8d 	bl	8008ea0 <iprintf>
      upper_start = false;
 8007f86:	4b09      	ldr	r3, [pc, #36]	@ (8007fac <upper_process+0x11c>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	701a      	strb	r2, [r3, #0]

      // x坐标，速度
      // y坐标，速度
      break;
 8007f8c:	e007      	b.n	8007f9e <upper_process+0x10e>
      break;

    case kInquire:
      break;
    case kSynClock:
      send_lower(kSynClock, 4);
 8007f8e:	2104      	movs	r1, #4
 8007f90:	2030      	movs	r0, #48	@ 0x30
 8007f92:	f7ff fb67 	bl	8007664 <send_lower>
      break;
 8007f96:	e002      	b.n	8007f9e <upper_process+0x10e>
        return;
 8007f98:	bf00      	nop
 8007f9a:	e000      	b.n	8007f9e <upper_process+0x10e>
        return;
 8007f9c:	bf00      	nop
  }
}
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	0800a5c0 	.word	0x0800a5c0
 8007fa8:	08009f6c 	.word	0x08009f6c
 8007fac:	2000088d 	.word	0x2000088d
 8007fb0:	08009f90 	.word	0x08009f90

08007fb4 <lower_process>:
void lower_process(uint8_t* pack_data, uint8_t len) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  CMD_HEAD_t* p_head_recv = (CMD_HEAD_t*)pack_data;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	617b      	str	r3, [r7, #20]
  uint8_t*    data_region = (pack_data + sizeof(CMD_HEAD_t));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3306      	adds	r3, #6
 8007fc8:	613b      	str	r3, [r7, #16]
  uint8_t     data_size   = len - sizeof(CMD_HEAD_t) - 2 - 1;  // 1 = 帧尾，1 = size pack，2 = crc16
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	3b09      	subs	r3, #9
 8007fce:	73fb      	strb	r3, [r7, #15]
  // for (int i = 0; i < len; i++) {
  //   LOGI("%02x", pack_data[i]);
  // }

  switch (p_head_recv->cmd) {
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d051      	beq.n	800807c <lower_process+0xc8>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f2c0 8094 	blt.w	8008106 <lower_process+0x152>
 8007fde:	2b30      	cmp	r3, #48	@ 0x30
 8007fe0:	f300 8091 	bgt.w	8008106 <lower_process+0x152>
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	f2c0 808e 	blt.w	8008106 <lower_process+0x152>
 8007fea:	3b10      	subs	r3, #16
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	f200 808a 	bhi.w	8008106 <lower_process+0x152>
 8007ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff8 <lower_process+0x44>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008105 	.word	0x08008105
 8007ffc:	08008105 	.word	0x08008105
 8008000:	08008107 	.word	0x08008107
 8008004:	08008107 	.word	0x08008107
 8008008:	08008107 	.word	0x08008107
 800800c:	08008107 	.word	0x08008107
 8008010:	08008107 	.word	0x08008107
 8008014:	08008107 	.word	0x08008107
 8008018:	08008107 	.word	0x08008107
 800801c:	08008107 	.word	0x08008107
 8008020:	08008107 	.word	0x08008107
 8008024:	08008107 	.word	0x08008107
 8008028:	08008107 	.word	0x08008107
 800802c:	08008107 	.word	0x08008107
 8008030:	08008107 	.word	0x08008107
 8008034:	08008107 	.word	0x08008107
 8008038:	080080a9 	.word	0x080080a9
 800803c:	08008105 	.word	0x08008105
 8008040:	08008107 	.word	0x08008107
 8008044:	08008107 	.word	0x08008107
 8008048:	08008107 	.word	0x08008107
 800804c:	08008107 	.word	0x08008107
 8008050:	08008107 	.word	0x08008107
 8008054:	08008107 	.word	0x08008107
 8008058:	08008107 	.word	0x08008107
 800805c:	08008107 	.word	0x08008107
 8008060:	08008107 	.word	0x08008107
 8008064:	08008107 	.word	0x08008107
 8008068:	08008107 	.word	0x08008107
 800806c:	08008107 	.word	0x08008107
 8008070:	08008107 	.word	0x08008107
 8008074:	08008107 	.word	0x08008107
 8008078:	080080d5 	.word	0x080080d5
    case kInit:
      // data_regiom[0] = 伺服电机连接
      // data_region[1] = 伺服电机复位
      //
      if (init_low(pack_data, len)) {
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff fdf1 	bl	8007c68 <init_low>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <lower_process+0xe4>
        low_start = false;
 800808c:	4b20      	ldr	r3, [pc, #128]	@ (8008110 <lower_process+0x15c>)
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
        low_state = true;
 8008092:	4b20      	ldr	r3, [pc, #128]	@ (8008114 <lower_process+0x160>)
 8008094:	2201      	movs	r2, #1
 8008096:	701a      	strb	r2, [r3, #0]
      }
      memset(low_recv_buf, 0, low_recv_len);
 8008098:	4b1f      	ldr	r3, [pc, #124]	@ (8008118 <lower_process+0x164>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	2100      	movs	r1, #0
 80080a0:	481e      	ldr	r0, [pc, #120]	@ (800811c <lower_process+0x168>)
 80080a2:	f000 ff52 	bl	8008f4a <memset>
      break;
 80080a6:	e02e      	b.n	8008106 <lower_process+0x152>
      3.接收下位机回复开始盘点
      4.
      5.
      */

      if (move_action_low(data_region, data_size)) {
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6938      	ldr	r0, [r7, #16]
 80080ae:	f7ff fe25 	bl	8007cfc <move_action_low>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <lower_process+0x110>
        // LOGE("LOW ACTION TURE");

        low_start = false;
 80080b8:	4b15      	ldr	r3, [pc, #84]	@ (8008110 <lower_process+0x15c>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
        low_state = true;
 80080be:	4b15      	ldr	r3, [pc, #84]	@ (8008114 <lower_process+0x160>)
 80080c0:	2201      	movs	r2, #1
 80080c2:	701a      	strb	r2, [r3, #0]
      }
      memset(low_recv_buf, 0, low_recv_len);
 80080c4:	4b14      	ldr	r3, [pc, #80]	@ (8008118 <lower_process+0x164>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	461a      	mov	r2, r3
 80080ca:	2100      	movs	r1, #0
 80080cc:	4813      	ldr	r0, [pc, #76]	@ (800811c <lower_process+0x168>)
 80080ce:	f000 ff3c 	bl	8008f4a <memset>
      //   low_state = false;
      // }
      // x坐标，速度
      // y坐标，速度

      break;
 80080d2:	e018      	b.n	8008106 <lower_process+0x152>
      break;

    case kInquire:
      break;
    case kSynClock:
      if (data_size != 4) {
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d008      	beq.n	80080ec <lower_process+0x138>
        LOGE("low recv clock error %d", data_size);
 80080da:	f7fa ffcd 	bl	8003078 <HAL_GetTick>
 80080de:	4601      	mov	r1, r0
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	4a0f      	ldr	r2, [pc, #60]	@ (8008120 <lower_process+0x16c>)
 80080e4:	480f      	ldr	r0, [pc, #60]	@ (8008124 <lower_process+0x170>)
 80080e6:	f000 fedb 	bl	8008ea0 <iprintf>
        break;
 80080ea:	e00c      	b.n	8008106 <lower_process+0x152>
      }
      LOGI("RECV CLOCK");
 80080ec:	f7fa ffc4 	bl	8003078 <HAL_GetTick>
 80080f0:	4603      	mov	r3, r0
 80080f2:	4a0b      	ldr	r2, [pc, #44]	@ (8008120 <lower_process+0x16c>)
 80080f4:	4619      	mov	r1, r3
 80080f6:	480c      	ldr	r0, [pc, #48]	@ (8008128 <lower_process+0x174>)
 80080f8:	f000 fed2 	bl	8008ea0 <iprintf>
      low_clock = (uint32_t*)data_region;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	4a0b      	ldr	r2, [pc, #44]	@ (800812c <lower_process+0x178>)
 8008100:	6013      	str	r3, [r2, #0]
      break;
 8008102:	e000      	b.n	8008106 <lower_process+0x152>
      break;
 8008104:	bf00      	nop
  }
}
 8008106:	bf00      	nop
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000991 	.word	0x20000991
 8008114:	20000992 	.word	0x20000992
 8008118:	20000990 	.word	0x20000990
 800811c:	20000890 	.word	0x20000890
 8008120:	0800a5d0 	.word	0x0800a5d0
 8008124:	08009fbc 	.word	0x08009fbc
 8008128:	08009ff0 	.word	0x08009ff0
 800812c:	20000994 	.word	0x20000994

08008130 <get_cmd_cache>:

uint8_t* get_cmd_cache(void) { return recv_buf; }
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
 8008134:	4b02      	ldr	r3, [pc, #8]	@ (8008140 <get_cmd_cache+0x10>)
 8008136:	4618      	mov	r0, r3
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20000688 	.word	0x20000688

08008144 <set_cmd_recv_len>:
void     set_cmd_recv_len(uint8_t len) { recv_len = len; }
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	71fb      	strb	r3, [r7, #7]
 800814e:	4a04      	ldr	r2, [pc, #16]	@ (8008160 <set_cmd_recv_len+0x1c>)
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	7013      	strb	r3, [r2, #0]
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	20000788 	.word	0x20000788

08008164 <transmit_using>:
void     transmit_using(bool state) { user_power = state; }
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	71fb      	strb	r3, [r7, #7]
 800816e:	4a04      	ldr	r2, [pc, #16]	@ (8008180 <transmit_using+0x1c>)
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	7013      	strb	r3, [r2, #0]
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	bc80      	pop	{r7}
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	20000998 	.word	0x20000998

08008184 <get_transmit_state>:
bool     get_transmit_state(void) { return user_power; }
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
 8008188:	4b02      	ldr	r3, [pc, #8]	@ (8008194 <get_transmit_state+0x10>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	4618      	mov	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr
 8008194:	20000998 	.word	0x20000998

08008198 <get_action_mode>:

 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
 800819c:	4b02      	ldr	r3, [pc, #8]	@ (80081a8 <get_action_mode+0x10>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	4618      	mov	r0, r3
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bc80      	pop	{r7}
 80081a6:	4770      	bx	lr
 80081a8:	20000999 	.word	0x20000999

080081ac <__io_putchar>:
//   return ch;
// }

// �ض��� printf
int __io_putchar(int ch)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, 0xffff);
 80081b4:	1d39      	adds	r1, r7, #4
 80081b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80081ba:	2201      	movs	r2, #1
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <__io_putchar+0x20>)
 80081be:	f7fe f9c7 	bl	8006550 <HAL_UART_Transmit>
  return ch;
 80081c2:	687b      	ldr	r3, [r7, #4]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000394 	.word	0x20000394

080081d0 <servo_info_updata>:
static uint16_t    get_servo_pos(void);
// void motor_move(void) {
//   Uart_Send_MovementRegister_ServoMotor(3, 1);  // 设置速度1，
// }

void servo_info_updata(uint8_t direct, uint8_t speed) {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	460a      	mov	r2, r1
 80081da:	71fb      	strb	r3, [r7, #7]
 80081dc:	4613      	mov	r3, r2
 80081de:	71bb      	strb	r3, [r7, #6]
  Servo.connect  = 1;
 80081e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008214 <servo_info_updata+0x44>)
 80081e2:	2201      	movs	r2, #1
 80081e4:	805a      	strh	r2, [r3, #2]
  Servo.pos      = get_Position_mm(GetMoterStateReg(), 4);
 80081e6:	f7f8 f851 	bl	800028c <GetMoterStateReg>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2104      	movs	r1, #4
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 f826 	bl	8008240 <get_Position_mm>
 80081f4:	4603      	mov	r3, r0
 80081f6:	461a      	mov	r2, r3
 80081f8:	4b06      	ldr	r3, [pc, #24]	@ (8008214 <servo_info_updata+0x44>)
 80081fa:	809a      	strh	r2, [r3, #4]
  Servo.speed    = speed;
 80081fc:	79bb      	ldrb	r3, [r7, #6]
 80081fe:	b29a      	uxth	r2, r3
 8008200:	4b04      	ldr	r3, [pc, #16]	@ (8008214 <servo_info_updata+0x44>)
 8008202:	80da      	strh	r2, [r3, #6]
  Servo.diretion = direct;
 8008204:	4a03      	ldr	r2, [pc, #12]	@ (8008214 <servo_info_updata+0x44>)
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	7213      	strb	r3, [r2, #8]
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	200009ac 	.word	0x200009ac

08008218 <get_servo_info>:

Motor_t get_servo_info(void) { return Servo; }
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4906      	ldr	r1, [pc, #24]	@ (800823c <get_servo_info+0x24>)
 8008224:	461a      	mov	r2, r3
 8008226:	460b      	mov	r3, r1
 8008228:	cb03      	ldmia	r3!, {r0, r1}
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	6051      	str	r1, [r2, #4]
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	8113      	strh	r3, [r2, #8]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr
 800823c:	200009ac 	.word	0x200009ac

08008240 <get_Position_mm>:

uint16_t get_Position_mm(uint8_t* buf, uint8_t len) {  // 计算获取当前距离
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  uint16_t       Position_mm_buf;
  uint32_t       Position_um;
  uint32_t       time = HAL_GetTick();
 800824c:	f7fa ff14 	bl	8003078 <HAL_GetTick>
 8008250:	6138      	str	r0, [r7, #16]
  static uint8_t num;

  while (!Servo.uart_recv_state) {
 8008252:	e01c      	b.n	800828e <get_Position_mm+0x4e>
    if (has_pass_time(time) > 50) {
 8008254:	6938      	ldr	r0, [r7, #16]
 8008256:	f000 fd49 	bl	8008cec <has_pass_time>
 800825a:	4603      	mov	r3, r0
 800825c:	2b32      	cmp	r3, #50	@ 0x32
 800825e:	d904      	bls.n	800826a <get_Position_mm+0x2a>
      Uart_Send_MovementRegister_ServoMotor(0, 0);
 8008260:	2100      	movs	r1, #0
 8008262:	2000      	movs	r0, #0
 8008264:	f7f8 ff28 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 8008268:	e011      	b.n	800828e <get_Position_mm+0x4e>

    } else if (has_pass_time(time) > 500) {
 800826a:	6938      	ldr	r0, [r7, #16]
 800826c:	f000 fd3e 	bl	8008cec <has_pass_time>
 8008270:	4603      	mov	r3, r0
 8008272:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008276:	d90a      	bls.n	800828e <get_Position_mm+0x4e>
      LOGW("time out");
 8008278:	f7fa fefe 	bl	8003078 <HAL_GetTick>
 800827c:	4603      	mov	r3, r0
 800827e:	4a34      	ldr	r2, [pc, #208]	@ (8008350 <get_Position_mm+0x110>)
 8008280:	4619      	mov	r1, r3
 8008282:	4834      	ldr	r0, [pc, #208]	@ (8008354 <get_Position_mm+0x114>)
 8008284:	f000 fe0c 	bl	8008ea0 <iprintf>
      return 0xffff;
 8008288:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800828c:	e05c      	b.n	8008348 <get_Position_mm+0x108>
  while (!Servo.uart_recv_state) {
 800828e:	4b32      	ldr	r3, [pc, #200]	@ (8008358 <get_Position_mm+0x118>)
 8008290:	7a5b      	ldrb	r3, [r3, #9]
 8008292:	f083 0301 	eor.w	r3, r3, #1
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1db      	bne.n	8008254 <get_Position_mm+0x14>
    }
  }
  Servo.uart_recv_state = false;
 800829c:	4b2e      	ldr	r3, [pc, #184]	@ (8008358 <get_Position_mm+0x118>)
 800829e:	2200      	movs	r2, #0
 80082a0:	725a      	strb	r2, [r3, #9]
  // for (int i = 0; i < 4; i++) {
  //   LOGI("%02x", buf[i]);
  // }

  if (0x80 == (buf[2] & 0x80)) {  // 负方向，向右
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3302      	adds	r3, #2
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	b25b      	sxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	da1e      	bge.n	80082ec <get_Position_mm+0xac>
    Position_um = 0xFFFFFFFF - (((uint32_t)buf[2] << 24) + ((uint32_t)buf[3] << 16) + ((uint32_t)buf[0] << 8) + ((uint32_t)buf[1] << 0));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3302      	adds	r3, #2
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	061a      	lsls	r2, r3, #24
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3303      	adds	r3, #3
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	041b      	lsls	r3, r3, #16
 80082be:	441a      	add	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	4413      	add	r3, r2
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	3201      	adds	r2, #1
 80082cc:	7812      	ldrb	r2, [r2, #0]
 80082ce:	4413      	add	r3, r2
 80082d0:	43db      	mvns	r3, r3
 80082d2:	617b      	str	r3, [r7, #20]
    Position_um = Position_um + 1;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	3301      	adds	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
    LOGI("right");
 80082da:	f7fa fecd 	bl	8003078 <HAL_GetTick>
 80082de:	4603      	mov	r3, r0
 80082e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008350 <get_Position_mm+0x110>)
 80082e2:	4619      	mov	r1, r3
 80082e4:	481d      	ldr	r0, [pc, #116]	@ (800835c <get_Position_mm+0x11c>)
 80082e6:	f000 fddb 	bl	8008ea0 <iprintf>
 80082ea:	e01f      	b.n	800832c <get_Position_mm+0xec>
    // Direction_of_position = MINUS_Right;
  } else if (0x00 == (buf[2] & 0x80)) {  // 正方向，向左
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3302      	adds	r3, #2
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	b25b      	sxtb	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	db19      	blt.n	800832c <get_Position_mm+0xec>
    Position_um = ((uint32_t)buf[2] << 24) + ((uint32_t)buf[3] << 16) + ((uint32_t)buf[0] << 8) + ((uint32_t)buf[1] << 0);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3302      	adds	r3, #2
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	061a      	lsls	r2, r3, #24
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3303      	adds	r3, #3
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	041b      	lsls	r3, r3, #16
 8008308:	441a      	add	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	4413      	add	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	3201      	adds	r2, #1
 8008316:	7812      	ldrb	r2, [r2, #0]
 8008318:	4413      	add	r3, r2
 800831a:	617b      	str	r3, [r7, #20]
    LOGI("left");
 800831c:	f7fa feac 	bl	8003078 <HAL_GetTick>
 8008320:	4603      	mov	r3, r0
 8008322:	4a0b      	ldr	r2, [pc, #44]	@ (8008350 <get_Position_mm+0x110>)
 8008324:	4619      	mov	r1, r3
 8008326:	480e      	ldr	r0, [pc, #56]	@ (8008360 <get_Position_mm+0x120>)
 8008328:	f000 fdba 	bl	8008ea0 <iprintf>
    // Direction_of_position = PLUS_Left;
  }
  Position_mm_buf = (uint16_t)(Position_um / 1000);
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	4a0d      	ldr	r2, [pc, #52]	@ (8008364 <get_Position_mm+0x124>)
 8008330:	fba2 2303 	umull	r2, r3, r2, r3
 8008334:	099b      	lsrs	r3, r3, #6
 8008336:	81fb      	strh	r3, [r7, #14]

  if (Position_mm_buf > 5000) {
 8008338:	89fb      	ldrh	r3, [r7, #14]
 800833a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800833e:	4293      	cmp	r3, r2
 8008340:	d901      	bls.n	8008346 <get_Position_mm+0x106>
    return 0;
 8008342:	2300      	movs	r3, #0
 8008344:	e000      	b.n	8008348 <get_Position_mm+0x108>
  }

  // LOGI("DIS %d", Position_mm_buf);
  return Position_mm_buf;
 8008346:	89fb      	ldrh	r3, [r7, #14]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	0800a5e0 	.word	0x0800a5e0
 8008354:	0800a018 	.word	0x0800a018
 8008358:	200009ac 	.word	0x200009ac
 800835c:	0800a03c 	.word	0x0800a03c
 8008360:	0800a060 	.word	0x0800a060
 8008364:	10624dd3 	.word	0x10624dd3

08008368 <motor_move>:
    return 0;
  }
  return pos;
}

FSM_STATE_t motor_move(uint16_t speed, ENUM_MOTOR_MOTION go_direction) {
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	460a      	mov	r2, r1
 8008372:	80fb      	strh	r3, [r7, #6]
 8008374:	4613      	mov	r3, r2
 8008376:	717b      	strb	r3, [r7, #5]
    START = 0,
    SET_SPEED,
    SET_MOVE,
  } s_State = {START};

  switch (s_State) {
 8008378:	4b20      	ldr	r3, [pc, #128]	@ (80083fc <motor_move+0x94>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b02      	cmp	r3, #2
 800837e:	d01f      	beq.n	80083c0 <motor_move+0x58>
 8008380:	2b02      	cmp	r3, #2
 8008382:	dc35      	bgt.n	80083f0 <motor_move+0x88>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <motor_move+0x26>
 8008388:	2b01      	cmp	r3, #1
 800838a:	d003      	beq.n	8008394 <motor_move+0x2c>
 800838c:	e030      	b.n	80083f0 <motor_move+0x88>
    case START:
      s_State = SET_SPEED;
 800838e:	4b1b      	ldr	r3, [pc, #108]	@ (80083fc <motor_move+0x94>)
 8008390:	2201      	movs	r2, #1
 8008392:	701a      	strb	r2, [r3, #0]
    case SET_SPEED:
      if (!moter_speed_set(speed)) {
 8008394:	88fb      	ldrh	r3, [r7, #6]
 8008396:	4618      	mov	r0, r3
 8008398:	f000 f840 	bl	800841c <moter_speed_set>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10b      	bne.n	80083ba <motor_move+0x52>
        // SET_SPEED_RESET();
        LOGE("wait speed set");
 80083a2:	f7fa fe69 	bl	8003078 <HAL_GetTick>
 80083a6:	4603      	mov	r3, r0
 80083a8:	4a15      	ldr	r2, [pc, #84]	@ (8008400 <motor_move+0x98>)
 80083aa:	4619      	mov	r1, r3
 80083ac:	4815      	ldr	r0, [pc, #84]	@ (8008404 <motor_move+0x9c>)
 80083ae:	f000 fd77 	bl	8008ea0 <iprintf>
        s_State = SET_SPEED;
 80083b2:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <motor_move+0x94>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	701a      	strb	r2, [r3, #0]
        break;
 80083b8:	e01a      	b.n	80083f0 <motor_move+0x88>
      }
      s_State = SET_MOVE;
 80083ba:	4b10      	ldr	r3, [pc, #64]	@ (80083fc <motor_move+0x94>)
 80083bc:	2202      	movs	r2, #2
 80083be:	701a      	strb	r2, [r3, #0]
    case SET_MOVE:
      if (!moter_set_move(go_direction)) {
 80083c0:	797b      	ldrb	r3, [r7, #5]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f8b0 	bl	8008528 <moter_set_move>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10b      	bne.n	80083e6 <motor_move+0x7e>
        LOGE("wait move set");
 80083ce:	f7fa fe53 	bl	8003078 <HAL_GetTick>
 80083d2:	4603      	mov	r3, r0
 80083d4:	4a0a      	ldr	r2, [pc, #40]	@ (8008400 <motor_move+0x98>)
 80083d6:	4619      	mov	r1, r3
 80083d8:	480b      	ldr	r0, [pc, #44]	@ (8008408 <motor_move+0xa0>)
 80083da:	f000 fd61 	bl	8008ea0 <iprintf>
        s_State = SET_MOVE;
 80083de:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <motor_move+0x94>)
 80083e0:	2202      	movs	r2, #2
 80083e2:	701a      	strb	r2, [r3, #0]
        break;
 80083e4:	e004      	b.n	80083f0 <motor_move+0x88>
      }
      s_State = START;
 80083e6:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <motor_move+0x94>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	701a      	strb	r2, [r3, #0]
      return fsm_cpl;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <motor_move+0x8a>
  }

  return fsm_onging;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	200009b6 	.word	0x200009b6
 8008400:	0800a5f0 	.word	0x0800a5f0
 8008404:	0800a0ac 	.word	0x0800a0ac
 8008408:	0800a0d8 	.word	0x0800a0d8

0800840c <motor_stop>:

FSM_STATE_t motor_stop(void) { return moter_speed_set(0); }
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
 8008410:	2000      	movs	r0, #0
 8008412:	f000 f803 	bl	800841c <moter_speed_set>
 8008416:	4603      	mov	r3, r0
 8008418:	4618      	mov	r0, r3
 800841a:	bd80      	pop	{r7, pc}

0800841c <moter_speed_set>:

FSM_STATE_t moter_speed_set(uint16_t speed) {
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	80fb      	strh	r3, [r7, #6]
    SEND_WAITE,
    IS_SUCESS,
  } s_State = {START};

  static uint8_t* ack;
  switch (s_State) {
 8008426:	4b39      	ldr	r3, [pc, #228]	@ (800850c <moter_speed_set+0xf0>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b03      	cmp	r3, #3
 800842c:	d860      	bhi.n	80084f0 <moter_speed_set+0xd4>
 800842e:	a201      	add	r2, pc, #4	@ (adr r2, 8008434 <moter_speed_set+0x18>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	08008445 	.word	0x08008445
 8008438:	0800844b 	.word	0x0800844b
 800843c:	0800845b 	.word	0x0800845b
 8008440:	08008463 	.word	0x08008463
    case START:
      s_State = SEND_SPEED_CMD;
 8008444:	4b31      	ldr	r3, [pc, #196]	@ (800850c <moter_speed_set+0xf0>)
 8008446:	2201      	movs	r2, #1
 8008448:	701a      	strb	r2, [r3, #0]
    case SEND_SPEED_CMD:
      Uart_Send_MovementRegister_ServoMotor(3, speed);  // 设置速度
 800844a:	88fb      	ldrh	r3, [r7, #6]
 800844c:	4619      	mov	r1, r3
 800844e:	2003      	movs	r0, #3
 8008450:	f7f8 fe32 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      s_State = SEND_WAITE;
 8008454:	4b2d      	ldr	r3, [pc, #180]	@ (800850c <moter_speed_set+0xf0>)
 8008456:	2202      	movs	r2, #2
 8008458:	701a      	strb	r2, [r3, #0]
    case SEND_WAITE:
      s_State = IS_SUCESS;
 800845a:	4b2c      	ldr	r3, [pc, #176]	@ (800850c <moter_speed_set+0xf0>)
 800845c:	2203      	movs	r2, #3
 800845e:	701a      	strb	r2, [r3, #0]
      break;
 8008460:	e046      	b.n	80084f0 <moter_speed_set+0xd4>
    case IS_SUCESS:
      ack = GetMoterAck();
 8008462:	f7f7 ff09 	bl	8000278 <GetMoterAck>
 8008466:	4603      	mov	r3, r0
 8008468:	4a29      	ldr	r2, [pc, #164]	@ (8008510 <moter_speed_set+0xf4>)
 800846a:	6013      	str	r3, [r2, #0]

      /*************Debug****************/
      LOGI("ack is %02x", ack[0]);
 800846c:	f7fa fe04 	bl	8003078 <HAL_GetTick>
 8008470:	4601      	mov	r1, r0
 8008472:	4b27      	ldr	r3, [pc, #156]	@ (8008510 <moter_speed_set+0xf4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	4a26      	ldr	r2, [pc, #152]	@ (8008514 <moter_speed_set+0xf8>)
 800847a:	4827      	ldr	r0, [pc, #156]	@ (8008518 <moter_speed_set+0xfc>)
 800847c:	f000 fd10 	bl	8008ea0 <iprintf>
      LOGI("ack is %02x", ack[1]);
 8008480:	f7fa fdfa 	bl	8003078 <HAL_GetTick>
 8008484:	4601      	mov	r1, r0
 8008486:	4b22      	ldr	r3, [pc, #136]	@ (8008510 <moter_speed_set+0xf4>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	4a21      	ldr	r2, [pc, #132]	@ (8008514 <moter_speed_set+0xf8>)
 8008490:	4821      	ldr	r0, [pc, #132]	@ (8008518 <moter_speed_set+0xfc>)
 8008492:	f000 fd05 	bl	8008ea0 <iprintf>
      /*********************************/
      if (NULL == ack) {
 8008496:	4b1e      	ldr	r3, [pc, #120]	@ (8008510 <moter_speed_set+0xf4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10d      	bne.n	80084ba <moter_speed_set+0x9e>
        LOGE("ack is null");
 800849e:	f7fa fdeb 	bl	8003078 <HAL_GetTick>
 80084a2:	4603      	mov	r3, r0
 80084a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008514 <moter_speed_set+0xf8>)
 80084a6:	4619      	mov	r1, r3
 80084a8:	481c      	ldr	r0, [pc, #112]	@ (800851c <moter_speed_set+0x100>)
 80084aa:	f000 fcf9 	bl	8008ea0 <iprintf>
        IS_SUCESS_RESET();
 80084ae:	4b17      	ldr	r3, [pc, #92]	@ (800850c <moter_speed_set+0xf0>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	701a      	strb	r2, [r3, #0]
        return fsm_error;
 80084b4:	f04f 33ff 	mov.w	r3, #4294967295
 80084b8:	e023      	b.n	8008502 <moter_speed_set+0xe6>
      }

      if ((0x00 == ack[0] && speed == ack[1])) {
 80084ba:	4b15      	ldr	r3, [pc, #84]	@ (8008510 <moter_speed_set+0xf4>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d111      	bne.n	80084e8 <moter_speed_set+0xcc>
 80084c4:	4b12      	ldr	r3, [pc, #72]	@ (8008510 <moter_speed_set+0xf4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d109      	bne.n	80084e8 <moter_speed_set+0xcc>
        LOGI("speed sucess");
 80084d4:	f7fa fdd0 	bl	8003078 <HAL_GetTick>
 80084d8:	4603      	mov	r3, r0
 80084da:	4a0e      	ldr	r2, [pc, #56]	@ (8008514 <moter_speed_set+0xf8>)
 80084dc:	4619      	mov	r1, r3
 80084de:	4810      	ldr	r0, [pc, #64]	@ (8008520 <moter_speed_set+0x104>)
 80084e0:	f000 fcde 	bl	8008ea0 <iprintf>
        return fsm_cpl;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e00c      	b.n	8008502 <moter_speed_set+0xe6>
      }

      s_State = SEND_SPEED_CMD;
 80084e8:	4b08      	ldr	r3, [pc, #32]	@ (800850c <moter_speed_set+0xf0>)
 80084ea:	2201      	movs	r2, #1
 80084ec:	701a      	strb	r2, [r3, #0]
      break;
 80084ee:	bf00      	nop
  }
  LOGI("onging");
 80084f0:	f7fa fdc2 	bl	8003078 <HAL_GetTick>
 80084f4:	4603      	mov	r3, r0
 80084f6:	4a07      	ldr	r2, [pc, #28]	@ (8008514 <moter_speed_set+0xf8>)
 80084f8:	4619      	mov	r1, r3
 80084fa:	480a      	ldr	r0, [pc, #40]	@ (8008524 <moter_speed_set+0x108>)
 80084fc:	f000 fcd0 	bl	8008ea0 <iprintf>
  return fsm_onging;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200009b7 	.word	0x200009b7
 8008510:	200009b8 	.word	0x200009b8
 8008514:	0800a5fc 	.word	0x0800a5fc
 8008518:	0800a104 	.word	0x0800a104
 800851c:	0800a12c 	.word	0x0800a12c
 8008520:	0800a154 	.word	0x0800a154
 8008524:	0800a17c 	.word	0x0800a17c

08008528 <moter_set_move>:
      LOGI("Is success");
      return fsm_cpl;
    }
  }
}
FSM_STATE_t moter_set_move(ENUM_MOTOR_MOTION direction) {
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	71fb      	strb	r3, [r7, #7]
    IS_SUCESS,
  } s_State = {START};

  static uint8_t* ack;
  uint16_t        data;
  switch (s_State) {
 8008532:	4b5d      	ldr	r3, [pc, #372]	@ (80086a8 <moter_set_move+0x180>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b03      	cmp	r3, #3
 8008538:	f200 80a9 	bhi.w	800868e <moter_set_move+0x166>
 800853c:	a201      	add	r2, pc, #4	@ (adr r2, 8008544 <moter_set_move+0x1c>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	08008555 	.word	0x08008555
 8008548:	0800856f 	.word	0x0800856f
 800854c:	080085d1 	.word	0x080085d1
 8008550:	080085d9 	.word	0x080085d9
    case START:
      s_State = SEND_MOVE_CMD;
 8008554:	4b54      	ldr	r3, [pc, #336]	@ (80086a8 <moter_set_move+0x180>)
 8008556:	2201      	movs	r2, #1
 8008558:	701a      	strb	r2, [r3, #0]
      data    = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	81fb      	strh	r3, [r7, #14]
      LOGI("Send start")
 800855e:	f7fa fd8b 	bl	8003078 <HAL_GetTick>
 8008562:	4603      	mov	r3, r0
 8008564:	4a51      	ldr	r2, [pc, #324]	@ (80086ac <moter_set_move+0x184>)
 8008566:	4619      	mov	r1, r3
 8008568:	4851      	ldr	r0, [pc, #324]	@ (80086b0 <moter_set_move+0x188>)
 800856a:	f000 fc99 	bl	8008ea0 <iprintf>
    case SEND_MOVE_CMD:

      if (ON_LEFT == GetMoterOnPos()) {
 800856e:	f7f7 fe97 	bl	80002a0 <GetMoterOnPos>
 8008572:	4603      	mov	r3, r0
 8008574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008578:	d111      	bne.n	800859e <moter_set_move+0x76>
        if (KGoLeft == direction)
 800857a:	79fb      	ldrb	r3, [r7, #7]
 800857c:	2bcc      	cmp	r3, #204	@ 0xcc
 800857e:	d105      	bne.n	800858c <moter_set_move+0x64>
          Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);
 8008580:	f241 3186 	movw	r1, #4998	@ 0x1386
 8008584:	2003      	movs	r0, #3
 8008586:	f7f8 fd97 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 800858a:	e01e      	b.n	80085ca <moter_set_move+0xa2>
        else if (KGoRight == direction)
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2b0c      	cmp	r3, #12
 8008590:	d11b      	bne.n	80085ca <moter_set_move+0xa2>
          Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);
 8008592:	f241 3187 	movw	r1, #4999	@ 0x1387
 8008596:	2003      	movs	r0, #3
 8008598:	f7f8 fd8e 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 800859c:	e015      	b.n	80085ca <moter_set_move+0xa2>

      } else if (ON_RIGHT == GetMoterOnPos()) {
 800859e:	f7f7 fe7f 	bl	80002a0 <GetMoterOnPos>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d110      	bne.n	80085ca <moter_set_move+0xa2>
        if (KGoLeft == direction)
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	2bcc      	cmp	r3, #204	@ 0xcc
 80085ac:	d105      	bne.n	80085ba <moter_set_move+0x92>
          Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CW);
 80085ae:	f241 3187 	movw	r1, #4999	@ 0x1387
 80085b2:	2003      	movs	r0, #3
 80085b4:	f7f8 fd80 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
 80085b8:	e007      	b.n	80085ca <moter_set_move+0xa2>
        else if (KGoRight == direction)
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	2b0c      	cmp	r3, #12
 80085be:	d104      	bne.n	80085ca <moter_set_move+0xa2>
          Uart_Send_MovementRegister_ServoMotor(3, JOGmode_Data_CCW);
 80085c0:	f241 3186 	movw	r1, #4998	@ 0x1386
 80085c4:	2003      	movs	r0, #3
 80085c6:	f7f8 fd77 	bl	80010b8 <Uart_Send_MovementRegister_ServoMotor>
      }

      s_State = SEND_WAITE;
 80085ca:	4b37      	ldr	r3, [pc, #220]	@ (80086a8 <moter_set_move+0x180>)
 80085cc:	2202      	movs	r2, #2
 80085ce:	701a      	strb	r2, [r3, #0]
    case SEND_WAITE:
      s_State = IS_SUCESS;
 80085d0:	4b35      	ldr	r3, [pc, #212]	@ (80086a8 <moter_set_move+0x180>)
 80085d2:	2203      	movs	r2, #3
 80085d4:	701a      	strb	r2, [r3, #0]
      // LOGI("send waite");
      break;
 80085d6:	e05a      	b.n	800868e <moter_set_move+0x166>
    case IS_SUCESS:
      ack = GetMoterAck();
 80085d8:	f7f7 fe4e 	bl	8000278 <GetMoterAck>
 80085dc:	4603      	mov	r3, r0
 80085de:	4a35      	ldr	r2, [pc, #212]	@ (80086b4 <moter_set_move+0x18c>)
 80085e0:	6013      	str	r3, [r2, #0]
      LOGI("ack is %02x", ack[0]);
 80085e2:	f7fa fd49 	bl	8003078 <HAL_GetTick>
 80085e6:	4601      	mov	r1, r0
 80085e8:	4b32      	ldr	r3, [pc, #200]	@ (80086b4 <moter_set_move+0x18c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	4a2f      	ldr	r2, [pc, #188]	@ (80086ac <moter_set_move+0x184>)
 80085f0:	4831      	ldr	r0, [pc, #196]	@ (80086b8 <moter_set_move+0x190>)
 80085f2:	f000 fc55 	bl	8008ea0 <iprintf>
      LOGI("ack is %02x", ack[1]);
 80085f6:	f7fa fd3f 	bl	8003078 <HAL_GetTick>
 80085fa:	4601      	mov	r1, r0
 80085fc:	4b2d      	ldr	r3, [pc, #180]	@ (80086b4 <moter_set_move+0x18c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	4a29      	ldr	r2, [pc, #164]	@ (80086ac <moter_set_move+0x184>)
 8008606:	482c      	ldr	r0, [pc, #176]	@ (80086b8 <moter_set_move+0x190>)
 8008608:	f000 fc4a 	bl	8008ea0 <iprintf>
      if (NULL == ack) {
 800860c:	4b29      	ldr	r3, [pc, #164]	@ (80086b4 <moter_set_move+0x18c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10d      	bne.n	8008630 <moter_set_move+0x108>
        LOGE("ack is null");
 8008614:	f7fa fd30 	bl	8003078 <HAL_GetTick>
 8008618:	4603      	mov	r3, r0
 800861a:	4a24      	ldr	r2, [pc, #144]	@ (80086ac <moter_set_move+0x184>)
 800861c:	4619      	mov	r1, r3
 800861e:	4827      	ldr	r0, [pc, #156]	@ (80086bc <moter_set_move+0x194>)
 8008620:	f000 fc3e 	bl	8008ea0 <iprintf>
        IS_SUCESS_RESET();
 8008624:	4b20      	ldr	r3, [pc, #128]	@ (80086a8 <moter_set_move+0x180>)
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
        return fsm_error;
 800862a:	f04f 33ff 	mov.w	r3, #4294967295
 800862e:	e037      	b.n	80086a0 <moter_set_move+0x178>
      }
      data = ack[0];
 8008630:	4b20      	ldr	r3, [pc, #128]	@ (80086b4 <moter_set_move+0x18c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	81fb      	strh	r3, [r7, #14]
      data <<= 8;
 8008638:	89fb      	ldrh	r3, [r7, #14]
 800863a:	021b      	lsls	r3, r3, #8
 800863c:	81fb      	strh	r3, [r7, #14]
      data |= ack[1];
 800863e:	4b1d      	ldr	r3, [pc, #116]	@ (80086b4 <moter_set_move+0x18c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3301      	adds	r3, #1
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	89fb      	ldrh	r3, [r7, #14]
 800864a:	4313      	orrs	r3, r2
 800864c:	81fb      	strh	r3, [r7, #14]
      LOGI("data is %04x", data);
 800864e:	f7fa fd13 	bl	8003078 <HAL_GetTick>
 8008652:	4601      	mov	r1, r0
 8008654:	89fb      	ldrh	r3, [r7, #14]
 8008656:	4a15      	ldr	r2, [pc, #84]	@ (80086ac <moter_set_move+0x184>)
 8008658:	4819      	ldr	r0, [pc, #100]	@ (80086c0 <moter_set_move+0x198>)
 800865a:	f000 fc21 	bl	8008ea0 <iprintf>
      //(((uint16_t)ack[4] << 8) | ack[5])
      if (JOGmode_Data_CCW == data ||  //
 800865e:	89fb      	ldrh	r3, [r7, #14]
 8008660:	f241 3286 	movw	r2, #4998	@ 0x1386
 8008664:	4293      	cmp	r3, r2
 8008666:	d004      	beq.n	8008672 <moter_set_move+0x14a>
 8008668:	89fb      	ldrh	r3, [r7, #14]
 800866a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800866e:	4293      	cmp	r3, r2
 8008670:	d109      	bne.n	8008686 <moter_set_move+0x15e>
          JOGmode_Data_CW == data) {
        LOGI("Is success");
 8008672:	f7fa fd01 	bl	8003078 <HAL_GetTick>
 8008676:	4603      	mov	r3, r0
 8008678:	4a0c      	ldr	r2, [pc, #48]	@ (80086ac <moter_set_move+0x184>)
 800867a:	4619      	mov	r1, r3
 800867c:	4811      	ldr	r0, [pc, #68]	@ (80086c4 <moter_set_move+0x19c>)
 800867e:	f000 fc0f 	bl	8008ea0 <iprintf>
        return fsm_cpl;
 8008682:	2301      	movs	r3, #1
 8008684:	e00c      	b.n	80086a0 <moter_set_move+0x178>
      }

      s_State = START;
 8008686:	4b08      	ldr	r3, [pc, #32]	@ (80086a8 <moter_set_move+0x180>)
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
      break;
 800868c:	bf00      	nop
  }
  LOGI(" mov onging");
 800868e:	f7fa fcf3 	bl	8003078 <HAL_GetTick>
 8008692:	4603      	mov	r3, r0
 8008694:	4a05      	ldr	r2, [pc, #20]	@ (80086ac <moter_set_move+0x184>)
 8008696:	4619      	mov	r1, r3
 8008698:	480b      	ldr	r0, [pc, #44]	@ (80086c8 <moter_set_move+0x1a0>)
 800869a:	f000 fc01 	bl	8008ea0 <iprintf>
  return fsm_onging;
 800869e:	2300      	movs	r3, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	200009bc 	.word	0x200009bc
 80086ac:	0800a60c 	.word	0x0800a60c
 80086b0:	0800a214 	.word	0x0800a214
 80086b4:	200009c0 	.word	0x200009c0
 80086b8:	0800a104 	.word	0x0800a104
 80086bc:	0800a12c 	.word	0x0800a12c
 80086c0:	0800a1c4 	.word	0x0800a1c4
 80086c4:	0800a1ec 	.word	0x0800a1ec
 80086c8:	0800a23c 	.word	0x0800a23c

080086cc <upper_uart_reg_handle>:
static uint8_t rx_cache;
static bool    flag = false;

static void upper_packet_analys(void);

void upper_uart_reg_handle(UART_HandleTypeDef *h_uart, DMA_HandleTypeDef *h_dma) {
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  m_uart = h_uart;
 80086d6:	4a05      	ldr	r2, [pc, #20]	@ (80086ec <upper_uart_reg_handle+0x20>)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6013      	str	r3, [r2, #0]
  m_dma  = h_dma;
 80086dc:	4a04      	ldr	r2, [pc, #16]	@ (80086f0 <upper_uart_reg_handle+0x24>)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	6013      	str	r3, [r2, #0]
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr
 80086ec:	200009c4 	.word	0x200009c4
 80086f0:	200009c8 	.word	0x200009c8

080086f4 <upper_uart_init>:

void upper_uart_init(void) {
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  registCallback(EVENT_UpperUart, upper_packet_analys);          // 注册事件表
 80086f8:	490b      	ldr	r1, [pc, #44]	@ (8008728 <upper_uart_init+0x34>)
 80086fa:	2001      	movs	r0, #1
 80086fc:	f000 fa60 	bl	8008bc0 <registCallback>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 8008700:	4b0a      	ldr	r3, [pc, #40]	@ (800872c <upper_uart_init+0x38>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008708:	4909      	ldr	r1, [pc, #36]	@ (8008730 <upper_uart_init+0x3c>)
 800870a:	4618      	mov	r0, r3
 800870c:	f7fd ffc8 	bl	80066a0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 8008710:	4b08      	ldr	r3, [pc, #32]	@ (8008734 <upper_uart_init+0x40>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	4b06      	ldr	r3, [pc, #24]	@ (8008734 <upper_uart_init+0x40>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0204 	bic.w	r2, r2, #4
 8008722:	601a      	str	r2, [r3, #0]
}
 8008724:	bf00      	nop
 8008726:	bd80      	pop	{r7, pc}
 8008728:	080087fd 	.word	0x080087fd
 800872c:	200009c4 	.word	0x200009c4
 8008730:	200009cc 	.word	0x200009cc
 8008734:	200009c8 	.word	0x200009c8

08008738 <GetUpperUartHandle>:

UART_HandleTypeDef *GetUpperUartHandle(void) {
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
  if (m_uart == NULL) {
 800873c:	4b08      	ldr	r3, [pc, #32]	@ (8008760 <GetUpperUartHandle+0x28>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <GetUpperUartHandle+0x22>
    LOGW("not get m_uart");
 8008744:	f7fa fc98 	bl	8003078 <HAL_GetTick>
 8008748:	4603      	mov	r3, r0
 800874a:	4a06      	ldr	r2, [pc, #24]	@ (8008764 <GetUpperUartHandle+0x2c>)
 800874c:	4619      	mov	r1, r3
 800874e:	4806      	ldr	r0, [pc, #24]	@ (8008768 <GetUpperUartHandle+0x30>)
 8008750:	f000 fba6 	bl	8008ea0 <iprintf>
    return m_uart;
 8008754:	4b02      	ldr	r3, [pc, #8]	@ (8008760 <GetUpperUartHandle+0x28>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	e7ff      	b.n	800875a <GetUpperUartHandle+0x22>
  }
}
 800875a:	4618      	mov	r0, r3
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	200009c4 	.word	0x200009c4
 8008764:	0800a61c 	.word	0x0800a61c
 8008768:	0800a264 	.word	0x0800a264

0800876c <CRC16_Calculate>:

static uint16_t CRC16_Calculate(uint8_t *data, uint8_t len) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 8008778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800877c:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 800877e:	2300      	movs	r3, #0
 8008780:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 8008782:	2300      	movs	r3, #0
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	e022      	b.n	80087ce <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	4413      	add	r3, r2
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	8afb      	ldrh	r3, [r7, #22]
 8008794:	4053      	eors	r3, r2
 8008796:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e011      	b.n	80087c2 <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 800879e:	8afb      	ldrh	r3, [r7, #22]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d006      	beq.n	80087b6 <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 80087a8:	8afb      	ldrh	r3, [r7, #22]
 80087aa:	085b      	lsrs	r3, r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	4b10      	ldr	r3, [pc, #64]	@ (80087f0 <CRC16_Calculate+0x84>)
 80087b0:	4053      	eors	r3, r2
 80087b2:	82fb      	strh	r3, [r7, #22]
 80087b4:	e002      	b.n	80087bc <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 80087b6:	8afb      	ldrh	r3, [r7, #22]
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3301      	adds	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b07      	cmp	r3, #7
 80087c6:	ddea      	ble.n	800879e <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	3301      	adds	r3, #1
 80087cc:	613b      	str	r3, [r7, #16]
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	dbd8      	blt.n	8008788 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 80087d6:	f7fa fc4f 	bl	8003078 <HAL_GetTick>
 80087da:	4601      	mov	r1, r0
 80087dc:	8afb      	ldrh	r3, [r7, #22]
 80087de:	4a05      	ldr	r2, [pc, #20]	@ (80087f4 <CRC16_Calculate+0x88>)
 80087e0:	4805      	ldr	r0, [pc, #20]	@ (80087f8 <CRC16_Calculate+0x8c>)
 80087e2:	f000 fb5d 	bl	8008ea0 <iprintf>
  return crc16;
 80087e6:	8afb      	ldrh	r3, [r7, #22]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	ffffa001 	.word	0xffffa001
 80087f4:	0800a630 	.word	0x0800a630
 80087f8:	0800a290 	.word	0x0800a290

080087fc <upper_packet_analys>:

void upper_packet_analys(void) {
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
  uint8_t  type     = rx_buf[0];
 8008802:	4b2b      	ldr	r3, [pc, #172]	@ (80088b0 <upper_packet_analys+0xb4>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	72fb      	strb	r3, [r7, #11]
  uint16_t pack_len = rx_buf[4];
 8008808:	4b29      	ldr	r3, [pc, #164]	@ (80088b0 <upper_packet_analys+0xb4>)
 800880a:	791b      	ldrb	r3, [r3, #4]
 800880c:	813b      	strh	r3, [r7, #8]
  uint8_t *recv_cmd;
  bool     transmit_state = get_transmit_state();
 800880e:	f7ff fcb9 	bl	8008184 <get_transmit_state>
 8008812:	4603      	mov	r3, r0
 8008814:	71fb      	strb	r3, [r7, #7]

  for (int i = 0; i < rx_len; i++)  //
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	e00d      	b.n	8008838 <upper_packet_analys+0x3c>
    LOGI("%02x", rx_buf[i]);
 800881c:	f7fa fc2c 	bl	8003078 <HAL_GetTick>
 8008820:	4601      	mov	r1, r0
 8008822:	4a23      	ldr	r2, [pc, #140]	@ (80088b0 <upper_packet_analys+0xb4>)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	4413      	add	r3, r2
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	4a22      	ldr	r2, [pc, #136]	@ (80088b4 <upper_packet_analys+0xb8>)
 800882c:	4822      	ldr	r0, [pc, #136]	@ (80088b8 <upper_packet_analys+0xbc>)
 800882e:	f000 fb37 	bl	8008ea0 <iprintf>
  for (int i = 0; i < rx_len; i++)  //
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	4b20      	ldr	r3, [pc, #128]	@ (80088bc <upper_packet_analys+0xc0>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	461a      	mov	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4293      	cmp	r3, r2
 8008842:	dbeb      	blt.n	800881c <upper_packet_analys+0x20>

  if (type == 0xd0) {
 8008844:	7afb      	ldrb	r3, [r7, #11]
 8008846:	2bd0      	cmp	r3, #208	@ 0xd0
 8008848:	d12f      	bne.n	80088aa <upper_packet_analys+0xae>
    if (CRC16_Calculate(rx_buf, rx_len)) {
 800884a:	4b1c      	ldr	r3, [pc, #112]	@ (80088bc <upper_packet_analys+0xc0>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	4619      	mov	r1, r3
 8008850:	4817      	ldr	r0, [pc, #92]	@ (80088b0 <upper_packet_analys+0xb4>)
 8008852:	f7ff ff8b 	bl	800876c <CRC16_Calculate>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <upper_packet_analys+0x72>
      LOGE("CRC error");
 800885c:	f7fa fc0c 	bl	8003078 <HAL_GetTick>
 8008860:	4603      	mov	r3, r0
 8008862:	4a14      	ldr	r2, [pc, #80]	@ (80088b4 <upper_packet_analys+0xb8>)
 8008864:	4619      	mov	r1, r3
 8008866:	4816      	ldr	r0, [pc, #88]	@ (80088c0 <upper_packet_analys+0xc4>)
 8008868:	f000 fb1a 	bl	8008ea0 <iprintf>
      return;
 800886c:	e01d      	b.n	80088aa <upper_packet_analys+0xae>
    }

    if (transmit_state) {
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d008      	beq.n	8008886 <upper_packet_analys+0x8a>
      LOGE("transmit has occupied");
 8008874:	f7fa fc00 	bl	8003078 <HAL_GetTick>
 8008878:	4603      	mov	r3, r0
 800887a:	4a0e      	ldr	r2, [pc, #56]	@ (80088b4 <upper_packet_analys+0xb8>)
 800887c:	4619      	mov	r1, r3
 800887e:	4811      	ldr	r0, [pc, #68]	@ (80088c4 <upper_packet_analys+0xc8>)
 8008880:	f000 fb0e 	bl	8008ea0 <iprintf>
      return;
 8008884:	e011      	b.n	80088aa <upper_packet_analys+0xae>
    }

    transmit_using(true);
 8008886:	2001      	movs	r0, #1
 8008888:	f7ff fc6c 	bl	8008164 <transmit_using>

    // lower computer recv
    recv_cmd = get_cmd_cache();
 800888c:	f7ff fc50 	bl	8008130 <get_cmd_cache>
 8008890:	6038      	str	r0, [r7, #0]

    memcpy(recv_cmd, rx_buf, rx_len);
 8008892:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <upper_packet_analys+0xc0>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	4905      	ldr	r1, [pc, #20]	@ (80088b0 <upper_packet_analys+0xb4>)
 800889a:	6838      	ldr	r0, [r7, #0]
 800889c:	f000 fbd1 	bl	8009042 <memcpy>
    // for (int i = 0; i < 10; i++)  //
    //   LOGI("%02x", recv_cmd[i]);

    // LOGI("%08x", (get_cmd_cache())[0]);
    // LOGI("%08x", recv_cmd);
    set_cmd_recv_len(rx_len);
 80088a0:	4b06      	ldr	r3, [pc, #24]	@ (80088bc <upper_packet_analys+0xc0>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff fc4d 	bl	8008144 <set_cmd_recv_len>
  }
}
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	200009cc 	.word	0x200009cc
 80088b4:	0800a640 	.word	0x0800a640
 80088b8:	0800a2b8 	.word	0x0800a2b8
 80088bc:	20000acc 	.word	0x20000acc
 80088c0:	0800a2d8 	.word	0x0800a2d8
 80088c4:	0800a300 	.word	0x0800a300

080088c8 <upper_receive_rx_data>:

void upper_receive_rx_data(void) {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  flag = true;
 80088cc:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <upper_receive_rx_data+0x5c>)
 80088ce:	2201      	movs	r2, #1
 80088d0:	701a      	strb	r2, [r3, #0]
  enterQueueEvent(EVENT_UpperUart);
 80088d2:	2001      	movs	r0, #1
 80088d4:	f000 f98c 	bl	8008bf0 <enterQueueEvent>
  rx_len = RECV_BUF_LEN - __HAL_DMA_GET_COUNTER(m_dma);
 80088d8:	4b13      	ldr	r3, [pc, #76]	@ (8008928 <upper_receive_rx_data+0x60>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	425b      	negs	r3, r3
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	4b11      	ldr	r3, [pc, #68]	@ (800892c <upper_receive_rx_data+0x64>)
 80088e8:	701a      	strb	r2, [r3, #0]
  LOGI("%d", rx_len);
 80088ea:	f7fa fbc5 	bl	8003078 <HAL_GetTick>
 80088ee:	4601      	mov	r1, r0
 80088f0:	4b0e      	ldr	r3, [pc, #56]	@ (800892c <upper_receive_rx_data+0x64>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	4a0e      	ldr	r2, [pc, #56]	@ (8008930 <upper_receive_rx_data+0x68>)
 80088f6:	480f      	ldr	r0, [pc, #60]	@ (8008934 <upper_receive_rx_data+0x6c>)
 80088f8:	f000 fad2 	bl	8008ea0 <iprintf>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 80088fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008938 <upper_receive_rx_data+0x70>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008904:	490d      	ldr	r1, [pc, #52]	@ (800893c <upper_receive_rx_data+0x74>)
 8008906:	4618      	mov	r0, r3
 8008908:	f7fd feca 	bl	80066a0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 800890c:	4b06      	ldr	r3, [pc, #24]	@ (8008928 <upper_receive_rx_data+0x60>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	4b04      	ldr	r3, [pc, #16]	@ (8008928 <upper_receive_rx_data+0x60>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0204 	bic.w	r2, r2, #4
 800891e:	601a      	str	r2, [r3, #0]
}
 8008920:	bf00      	nop
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20000acd 	.word	0x20000acd
 8008928:	200009c8 	.word	0x200009c8
 800892c:	20000acc 	.word	0x20000acc
 8008930:	0800a654 	.word	0x0800a654
 8008934:	0800a334 	.word	0x0800a334
 8008938:	200009c4 	.word	0x200009c4
 800893c:	200009cc 	.word	0x200009cc

08008940 <wireless_reg_handle>:

static uint8_t book_buf[WIRELESS_MAX_BUF_LEN];

static void wireless_packet_analys(void);

void wireless_reg_handle(UART_HandleTypeDef *h_uart, DMA_HandleTypeDef *h_dma) {
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  m_uart = h_uart;
 800894a:	4a05      	ldr	r2, [pc, #20]	@ (8008960 <wireless_reg_handle+0x20>)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6013      	str	r3, [r2, #0]
  m_dma  = h_dma;
 8008950:	4a04      	ldr	r2, [pc, #16]	@ (8008964 <wireless_reg_handle+0x24>)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	6013      	str	r3, [r2, #0]
}
 8008956:	bf00      	nop
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr
 8008960:	20000ad0 	.word	0x20000ad0
 8008964:	20000ad4 	.word	0x20000ad4

08008968 <wireless_init>:

void wireless_init(void) {
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0
  registCallback(EVENT_Wirless, wireless_packet_analys);         // 注册事件表
 800896c:	490b      	ldr	r1, [pc, #44]	@ (800899c <wireless_init+0x34>)
 800896e:	2000      	movs	r0, #0
 8008970:	f000 f926 	bl	8008bc0 <registCallback>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 8008974:	4b0a      	ldr	r3, [pc, #40]	@ (80089a0 <wireless_init+0x38>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800897c:	4909      	ldr	r1, [pc, #36]	@ (80089a4 <wireless_init+0x3c>)
 800897e:	4618      	mov	r0, r3
 8008980:	f7fd fe8e 	bl	80066a0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 8008984:	4b08      	ldr	r3, [pc, #32]	@ (80089a8 <wireless_init+0x40>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	4b06      	ldr	r3, [pc, #24]	@ (80089a8 <wireless_init+0x40>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 0204 	bic.w	r2, r2, #4
 8008996:	601a      	str	r2, [r3, #0]
}
 8008998:	bf00      	nop
 800899a:	bd80      	pop	{r7, pc}
 800899c:	08008a95 	.word	0x08008a95
 80089a0:	20000ad0 	.word	0x20000ad0
 80089a4:	20000ad8 	.word	0x20000ad8
 80089a8:	20000ad4 	.word	0x20000ad4

080089ac <GetWireLessHandle>:

UART_HandleTypeDef *GetWireLessHandle(void) {
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  if (m_uart == NULL) LOGW("not get m_uart");
 80089b0:	4b07      	ldr	r3, [pc, #28]	@ (80089d0 <GetWireLessHandle+0x24>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d107      	bne.n	80089c8 <GetWireLessHandle+0x1c>
 80089b8:	f7fa fb5e 	bl	8003078 <HAL_GetTick>
 80089bc:	4603      	mov	r3, r0
 80089be:	4a05      	ldr	r2, [pc, #20]	@ (80089d4 <GetWireLessHandle+0x28>)
 80089c0:	4619      	mov	r1, r3
 80089c2:	4805      	ldr	r0, [pc, #20]	@ (80089d8 <GetWireLessHandle+0x2c>)
 80089c4:	f000 fa6c 	bl	8008ea0 <iprintf>
  return m_uart;
 80089c8:	4b01      	ldr	r3, [pc, #4]	@ (80089d0 <GetWireLessHandle+0x24>)
 80089ca:	681b      	ldr	r3, [r3, #0]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20000ad0 	.word	0x20000ad0
 80089d4:	0800a66c 	.word	0x0800a66c
 80089d8:	0800a354 	.word	0x0800a354

080089dc <wireless_send>:

void wireless_send(uint8_t *data, uint8_t len) { HAL_UART_Transmit(m_uart, data, len, 100); }
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
 80089e8:	4b05      	ldr	r3, [pc, #20]	@ (8008a00 <wireless_send+0x24>)
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	78fb      	ldrb	r3, [r7, #3]
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	2364      	movs	r3, #100	@ 0x64
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	f7fd fdac 	bl	8006550 <HAL_UART_Transmit>
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	20000ad0 	.word	0x20000ad0

08008a04 <CRC16_Calculate>:

static uint16_t CRC16_Calculate(uint8_t *data, uint8_t len) {
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  uint16_t crc16 = 0xffff;
 8008a10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a14:	82fb      	strh	r3, [r7, #22]
  uint16_t temp  = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	817b      	strh	r3, [r7, #10]
  for (int i = 0; i < len; i++) {
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	613b      	str	r3, [r7, #16]
 8008a1e:	e022      	b.n	8008a66 <CRC16_Calculate+0x62>
    crc16 ^= (uint16_t)data[i];
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	4413      	add	r3, r2
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	8afb      	ldrh	r3, [r7, #22]
 8008a2c:	4053      	eors	r3, r2
 8008a2e:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e011      	b.n	8008a5a <CRC16_Calculate+0x56>
      if (crc16 & 0x0001) {
 8008a36:	8afb      	ldrh	r3, [r7, #22]
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d006      	beq.n	8008a4e <CRC16_Calculate+0x4a>
        crc16 = (crc16 >> 1) ^ 0xa001;
 8008a40:	8afb      	ldrh	r3, [r7, #22]
 8008a42:	085b      	lsrs	r3, r3, #1
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	4b10      	ldr	r3, [pc, #64]	@ (8008a88 <CRC16_Calculate+0x84>)
 8008a48:	4053      	eors	r3, r2
 8008a4a:	82fb      	strh	r3, [r7, #22]
 8008a4c:	e002      	b.n	8008a54 <CRC16_Calculate+0x50>
      } else {
        crc16 = (crc16 >> 1);
 8008a4e:	8afb      	ldrh	r3, [r7, #22]
 8008a50:	085b      	lsrs	r3, r3, #1
 8008a52:	82fb      	strh	r3, [r7, #22]
    for (int j = 0; j < 8; j++) {
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b07      	cmp	r3, #7
 8008a5e:	ddea      	ble.n	8008a36 <CRC16_Calculate+0x32>
  for (int i = 0; i < len; i++) {
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	3301      	adds	r3, #1
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	dbd8      	blt.n	8008a20 <CRC16_Calculate+0x1c>
      }
    }
  }
  LOGI("CRC is :%04x", crc16);
 8008a6e:	f7fa fb03 	bl	8003078 <HAL_GetTick>
 8008a72:	4601      	mov	r1, r0
 8008a74:	8afb      	ldrh	r3, [r7, #22]
 8008a76:	4a05      	ldr	r2, [pc, #20]	@ (8008a8c <CRC16_Calculate+0x88>)
 8008a78:	4805      	ldr	r0, [pc, #20]	@ (8008a90 <CRC16_Calculate+0x8c>)
 8008a7a:	f000 fa11 	bl	8008ea0 <iprintf>
  return crc16;
 8008a7e:	8afb      	ldrh	r3, [r7, #22]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	ffffa001 	.word	0xffffa001
 8008a8c:	0800a680 	.word	0x0800a680
 8008a90:	0800a380 	.word	0x0800a380

08008a94 <wireless_packet_analys>:

void wireless_packet_analys(void) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
  uint8_t  type     = rx_buf[0];
 8008a9a:	4b25      	ldr	r3, [pc, #148]	@ (8008b30 <wireless_packet_analys+0x9c>)
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	73fb      	strb	r3, [r7, #15]
  uint16_t pack_len = rx_buf[4];
 8008aa0:	4b23      	ldr	r3, [pc, #140]	@ (8008b30 <wireless_packet_analys+0x9c>)
 8008aa2:	791b      	ldrb	r3, [r3, #4]
 8008aa4:	81bb      	strh	r3, [r7, #12]
  uint8_t *recv_cmd;
  bool     transmit_state = get_transmit_state();
 8008aa6:	f7ff fb6d 	bl	8008184 <get_transmit_state>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	72fb      	strb	r3, [r7, #11]
  LOGI("WIRLESS");
 8008aae:	f7fa fae3 	bl	8003078 <HAL_GetTick>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8008b34 <wireless_packet_analys+0xa0>)
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	481f      	ldr	r0, [pc, #124]	@ (8008b38 <wireless_packet_analys+0xa4>)
 8008aba:	f000 f9f1 	bl	8008ea0 <iprintf>
  if (type == 0x70) {
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	2b70      	cmp	r3, #112	@ 0x70
 8008ac2:	d131      	bne.n	8008b28 <wireless_packet_analys+0x94>
    if (CRC16_Calculate(&rx_buf, 6 + pack_len)) {
 8008ac4:	89bb      	ldrh	r3, [r7, #12]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	3306      	adds	r3, #6
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	4619      	mov	r1, r3
 8008ace:	4818      	ldr	r0, [pc, #96]	@ (8008b30 <wireless_packet_analys+0x9c>)
 8008ad0:	f7ff ff98 	bl	8008a04 <CRC16_Calculate>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <wireless_packet_analys+0x58>
      LOGE("CRC error");
 8008ada:	f7fa facd 	bl	8003078 <HAL_GetTick>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	4a14      	ldr	r2, [pc, #80]	@ (8008b34 <wireless_packet_analys+0xa0>)
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4815      	ldr	r0, [pc, #84]	@ (8008b3c <wireless_packet_analys+0xa8>)
 8008ae6:	f000 f9db 	bl	8008ea0 <iprintf>
      return;
 8008aea:	e01d      	b.n	8008b28 <wireless_packet_analys+0x94>
    }
    // lower computer recv
    if (transmit_state) {
 8008aec:	7afb      	ldrb	r3, [r7, #11]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d008      	beq.n	8008b04 <wireless_packet_analys+0x70>
      LOGE("transmit has occupied");
 8008af2:	f7fa fac1 	bl	8003078 <HAL_GetTick>
 8008af6:	4603      	mov	r3, r0
 8008af8:	4a0e      	ldr	r2, [pc, #56]	@ (8008b34 <wireless_packet_analys+0xa0>)
 8008afa:	4619      	mov	r1, r3
 8008afc:	4810      	ldr	r0, [pc, #64]	@ (8008b40 <wireless_packet_analys+0xac>)
 8008afe:	f000 f9cf 	bl	8008ea0 <iprintf>
      return;
 8008b02:	e011      	b.n	8008b28 <wireless_packet_analys+0x94>
    }

    transmit_using(true);
 8008b04:	2001      	movs	r0, #1
 8008b06:	f7ff fb2d 	bl	8008164 <transmit_using>
    recv_cmd = get_cmd_cache();
 8008b0a:	f7ff fb11 	bl	8008130 <get_cmd_cache>
 8008b0e:	6078      	str	r0, [r7, #4]
    memcpy(recv_cmd, rx_buf, rx_len);
 8008b10:	4b0c      	ldr	r3, [pc, #48]	@ (8008b44 <wireless_packet_analys+0xb0>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	461a      	mov	r2, r3
 8008b16:	4906      	ldr	r1, [pc, #24]	@ (8008b30 <wireless_packet_analys+0x9c>)
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fa92 	bl	8009042 <memcpy>
    set_cmd_recv_len(rx_len);
 8008b1e:	4b09      	ldr	r3, [pc, #36]	@ (8008b44 <wireless_packet_analys+0xb0>)
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7ff fb0e 	bl	8008144 <set_cmd_recv_len>
  //     return;
  //   }

  // event_data_book(&(rx_buf[2]), pack_len);
  // }
}
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000ad8 	.word	0x20000ad8
 8008b34:	0800a690 	.word	0x0800a690
 8008b38:	0800a3a8 	.word	0x0800a3a8
 8008b3c:	0800a3cc 	.word	0x0800a3cc
 8008b40:	0800a3f4 	.word	0x0800a3f4
 8008b44:	20000bd8 	.word	0x20000bd8

08008b48 <receive_rx_data>:
  return cmd;
  //}
  // return 10;
}

void receive_rx_data(void) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  flag = true;
 8008b4c:	4b15      	ldr	r3, [pc, #84]	@ (8008ba4 <receive_rx_data+0x5c>)
 8008b4e:	2201      	movs	r2, #1
 8008b50:	701a      	strb	r2, [r3, #0]
  enterQueueEvent(EVENT_Wirless);
 8008b52:	2000      	movs	r0, #0
 8008b54:	f000 f84c 	bl	8008bf0 <enterQueueEvent>
  rx_len = WIRELESS_MAX_BUF_LEN - __HAL_DMA_GET_COUNTER(m_dma);
 8008b58:	4b13      	ldr	r3, [pc, #76]	@ (8008ba8 <receive_rx_data+0x60>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	425b      	negs	r3, r3
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	4b11      	ldr	r3, [pc, #68]	@ (8008bac <receive_rx_data+0x64>)
 8008b68:	701a      	strb	r2, [r3, #0]
  LOGI("%d", rx_len);
 8008b6a:	f7fa fa85 	bl	8003078 <HAL_GetTick>
 8008b6e:	4601      	mov	r1, r0
 8008b70:	4b0e      	ldr	r3, [pc, #56]	@ (8008bac <receive_rx_data+0x64>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	4a0e      	ldr	r2, [pc, #56]	@ (8008bb0 <receive_rx_data+0x68>)
 8008b76:	480f      	ldr	r0, [pc, #60]	@ (8008bb4 <receive_rx_data+0x6c>)
 8008b78:	f000 f992 	bl	8008ea0 <iprintf>
  HAL_UARTEx_ReceiveToIdle_DMA(m_uart, rx_buf, sizeof(rx_buf));  // 串口�?�?+dma
 8008b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb8 <receive_rx_data+0x70>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b84:	490d      	ldr	r1, [pc, #52]	@ (8008bbc <receive_rx_data+0x74>)
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fd fd8a 	bl	80066a0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(m_dma, DMA_IT_HT);                        // 关闭dma接收半满�?�?函数
 8008b8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ba8 <receive_rx_data+0x60>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	4b04      	ldr	r3, [pc, #16]	@ (8008ba8 <receive_rx_data+0x60>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0204 	bic.w	r2, r2, #4
 8008b9e:	601a      	str	r2, [r3, #0]
}
 8008ba0:	bf00      	nop
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	20000bd9 	.word	0x20000bd9
 8008ba8:	20000ad4 	.word	0x20000ad4
 8008bac:	20000bd8 	.word	0x20000bd8
 8008bb0:	0800a6a8 	.word	0x0800a6a8
 8008bb4:	0800a448 	.word	0x0800a448
 8008bb8:	20000ad0 	.word	0x20000ad0
 8008bbc:	20000ad8 	.word	0x20000ad8

08008bc0 <registCallback>:
static uint8_t eventQueueHead = 0;
static uint8_t eventQueueTail = 0;

static EVENT_t m_cbs[EVENT_QUEUE_SIZE];  // 事件队列表

void registCallback(EVENT_TYPE type, event_callback cb) {
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
  m_cbs[type].type     = type;
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	4907      	ldr	r1, [pc, #28]	@ (8008bec <registCallback+0x2c>)
 8008bd0:	79fa      	ldrb	r2, [r7, #7]
 8008bd2:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
  m_cbs[type].callback = cb;
 8008bd6:	79fb      	ldrb	r3, [r7, #7]
 8008bd8:	4a04      	ldr	r2, [pc, #16]	@ (8008bec <registCallback+0x2c>)
 8008bda:	00db      	lsls	r3, r3, #3
 8008bdc:	4413      	add	r3, r2
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	605a      	str	r2, [r3, #4]
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bc80      	pop	{r7}
 8008bea:	4770      	bx	lr
 8008bec:	20000c60 	.word	0x20000c60

08008bf0 <enterQueueEvent>:

void enterQueueEvent(EVENT_TYPE type) {
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	71fb      	strb	r3, [r7, #7]
  if ((eventQueueHead + 1) % EVENT_QUEUE_SIZE == eventQueueTail) {
 8008bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8008c70 <enterQueueEvent+0x80>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	425a      	negs	r2, r3
 8008c02:	f003 030f 	and.w	r3, r3, #15
 8008c06:	f002 020f 	and.w	r2, r2, #15
 8008c0a:	bf58      	it	pl
 8008c0c:	4253      	negpl	r3, r2
 8008c0e:	4a19      	ldr	r2, [pc, #100]	@ (8008c74 <enterQueueEvent+0x84>)
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d108      	bne.n	8008c28 <enterQueueEvent+0x38>
    LOGW("event queue full");
 8008c16:	f7fa fa2f 	bl	8003078 <HAL_GetTick>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	4a16      	ldr	r2, [pc, #88]	@ (8008c78 <enterQueueEvent+0x88>)
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4816      	ldr	r0, [pc, #88]	@ (8008c7c <enterQueueEvent+0x8c>)
 8008c22:	f000 f93d 	bl	8008ea0 <iprintf>
    return;
 8008c26:	e01f      	b.n	8008c68 <enterQueueEvent+0x78>
  }
  eventQueue[eventQueueHead].type     = type;
 8008c28:	4b11      	ldr	r3, [pc, #68]	@ (8008c70 <enterQueueEvent+0x80>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4a14      	ldr	r2, [pc, #80]	@ (8008c80 <enterQueueEvent+0x90>)
 8008c30:	79fb      	ldrb	r3, [r7, #7]
 8008c32:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
  eventQueue[eventQueueHead].callback = m_cbs[type].callback;
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	4a0d      	ldr	r2, [pc, #52]	@ (8008c70 <enterQueueEvent+0x80>)
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4a11      	ldr	r2, [pc, #68]	@ (8008c84 <enterQueueEvent+0x94>)
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	4413      	add	r3, r2
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	490e      	ldr	r1, [pc, #56]	@ (8008c80 <enterQueueEvent+0x90>)
 8008c48:	00c3      	lsls	r3, r0, #3
 8008c4a:	440b      	add	r3, r1
 8008c4c:	605a      	str	r2, [r3, #4]
  eventQueueHead                      = (eventQueueHead + 1) % EVENT_QUEUE_SIZE;
 8008c4e:	4b08      	ldr	r3, [pc, #32]	@ (8008c70 <enterQueueEvent+0x80>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	425a      	negs	r2, r3
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	f002 020f 	and.w	r2, r2, #15
 8008c5e:	bf58      	it	pl
 8008c60:	4253      	negpl	r3, r2
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	4b02      	ldr	r3, [pc, #8]	@ (8008c70 <enterQueueEvent+0x80>)
 8008c66:	701a      	strb	r2, [r3, #0]
}
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	20000c5c 	.word	0x20000c5c
 8008c74:	20000c5d 	.word	0x20000c5d
 8008c78:	0800a6b8 	.word	0x0800a6b8
 8008c7c:	0800a468 	.word	0x0800a468
 8008c80:	20000bdc 	.word	0x20000bdc
 8008c84:	20000c60 	.word	0x20000c60

08008c88 <process_event>:

void process_event(void) {
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
  while (eventQueueTail != eventQueueHead) {
 8008c8e:	e01b      	b.n	8008cc8 <process_event+0x40>
    EVENT_t event = eventQueue[eventQueueTail];
 8008c90:	4b13      	ldr	r3, [pc, #76]	@ (8008ce0 <process_event+0x58>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	4913      	ldr	r1, [pc, #76]	@ (8008ce4 <process_event+0x5c>)
 8008c96:	463a      	mov	r2, r7
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	440b      	add	r3, r1
 8008c9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ca0:	e882 0003 	stmia.w	r2, {r0, r1}
    if (event.callback != NULL) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <process_event+0x26>
      event.callback();  // 调用回调函数
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4798      	blx	r3
    }
    eventQueueTail = (eventQueueTail + 1) % EVENT_QUEUE_SIZE;
 8008cae:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce0 <process_event+0x58>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	425a      	negs	r2, r3
 8008cb6:	f003 030f 	and.w	r3, r3, #15
 8008cba:	f002 020f 	and.w	r2, r2, #15
 8008cbe:	bf58      	it	pl
 8008cc0:	4253      	negpl	r3, r2
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	4b06      	ldr	r3, [pc, #24]	@ (8008ce0 <process_event+0x58>)
 8008cc6:	701a      	strb	r2, [r3, #0]
  while (eventQueueTail != eventQueueHead) {
 8008cc8:	4b05      	ldr	r3, [pc, #20]	@ (8008ce0 <process_event+0x58>)
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	4b06      	ldr	r3, [pc, #24]	@ (8008ce8 <process_event+0x60>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d1dd      	bne.n	8008c90 <process_event+0x8>
  }
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20000c5d 	.word	0x20000c5d
 8008ce4:	20000bdc 	.word	0x20000bdc
 8008ce8:	20000c5c 	.word	0x20000c5c

08008cec <has_pass_time>:
#include "tick.h"

#include "stm32f1xx_hal.h"

uint32_t has_pass_time(uint32_t last_time)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
    int32_t pass_time;
    pass_time = HAL_GetTick() - last_time;
 8008cf4:	f7fa f9c0 	bl	8003078 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	60fb      	str	r3, [r7, #12]
    if (pass_time >= 0)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	db01      	blt.n	8008d0a <has_pass_time+0x1e>
        return pass_time;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	e003      	b.n	8008d12 <has_pass_time+0x26>
    else
        return UINT32_MAX - last_time - pass_time;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	43da      	mvns	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <std>:
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	4604      	mov	r4, r0
 8008d22:	e9c0 3300 	strd	r3, r3, [r0]
 8008d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d2a:	6083      	str	r3, [r0, #8]
 8008d2c:	8181      	strh	r1, [r0, #12]
 8008d2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d30:	81c2      	strh	r2, [r0, #14]
 8008d32:	6183      	str	r3, [r0, #24]
 8008d34:	4619      	mov	r1, r3
 8008d36:	2208      	movs	r2, #8
 8008d38:	305c      	adds	r0, #92	@ 0x5c
 8008d3a:	f000 f906 	bl	8008f4a <memset>
 8008d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d74 <std+0x58>)
 8008d40:	6224      	str	r4, [r4, #32]
 8008d42:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d44:	4b0c      	ldr	r3, [pc, #48]	@ (8008d78 <std+0x5c>)
 8008d46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d48:	4b0c      	ldr	r3, [pc, #48]	@ (8008d7c <std+0x60>)
 8008d4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d80 <std+0x64>)
 8008d4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d50:	4b0c      	ldr	r3, [pc, #48]	@ (8008d84 <std+0x68>)
 8008d52:	429c      	cmp	r4, r3
 8008d54:	d006      	beq.n	8008d64 <std+0x48>
 8008d56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d5a:	4294      	cmp	r4, r2
 8008d5c:	d002      	beq.n	8008d64 <std+0x48>
 8008d5e:	33d0      	adds	r3, #208	@ 0xd0
 8008d60:	429c      	cmp	r4, r3
 8008d62:	d105      	bne.n	8008d70 <std+0x54>
 8008d64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d6c:	f000 b966 	b.w	800903c <__retarget_lock_init_recursive>
 8008d70:	bd10      	pop	{r4, pc}
 8008d72:	bf00      	nop
 8008d74:	08008ec5 	.word	0x08008ec5
 8008d78:	08008ee7 	.word	0x08008ee7
 8008d7c:	08008f1f 	.word	0x08008f1f
 8008d80:	08008f43 	.word	0x08008f43
 8008d84:	20000ce0 	.word	0x20000ce0

08008d88 <stdio_exit_handler>:
 8008d88:	4a02      	ldr	r2, [pc, #8]	@ (8008d94 <stdio_exit_handler+0xc>)
 8008d8a:	4903      	ldr	r1, [pc, #12]	@ (8008d98 <stdio_exit_handler+0x10>)
 8008d8c:	4803      	ldr	r0, [pc, #12]	@ (8008d9c <stdio_exit_handler+0x14>)
 8008d8e:	f000 b869 	b.w	8008e64 <_fwalk_sglue>
 8008d92:	bf00      	nop
 8008d94:	20000014 	.word	0x20000014
 8008d98:	080098ed 	.word	0x080098ed
 8008d9c:	20000024 	.word	0x20000024

08008da0 <cleanup_stdio>:
 8008da0:	6841      	ldr	r1, [r0, #4]
 8008da2:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd4 <cleanup_stdio+0x34>)
 8008da4:	b510      	push	{r4, lr}
 8008da6:	4299      	cmp	r1, r3
 8008da8:	4604      	mov	r4, r0
 8008daa:	d001      	beq.n	8008db0 <cleanup_stdio+0x10>
 8008dac:	f000 fd9e 	bl	80098ec <_fflush_r>
 8008db0:	68a1      	ldr	r1, [r4, #8]
 8008db2:	4b09      	ldr	r3, [pc, #36]	@ (8008dd8 <cleanup_stdio+0x38>)
 8008db4:	4299      	cmp	r1, r3
 8008db6:	d002      	beq.n	8008dbe <cleanup_stdio+0x1e>
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fd97 	bl	80098ec <_fflush_r>
 8008dbe:	68e1      	ldr	r1, [r4, #12]
 8008dc0:	4b06      	ldr	r3, [pc, #24]	@ (8008ddc <cleanup_stdio+0x3c>)
 8008dc2:	4299      	cmp	r1, r3
 8008dc4:	d004      	beq.n	8008dd0 <cleanup_stdio+0x30>
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dcc:	f000 bd8e 	b.w	80098ec <_fflush_r>
 8008dd0:	bd10      	pop	{r4, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000ce0 	.word	0x20000ce0
 8008dd8:	20000d48 	.word	0x20000d48
 8008ddc:	20000db0 	.word	0x20000db0

08008de0 <global_stdio_init.part.0>:
 8008de0:	b510      	push	{r4, lr}
 8008de2:	4b0b      	ldr	r3, [pc, #44]	@ (8008e10 <global_stdio_init.part.0+0x30>)
 8008de4:	4c0b      	ldr	r4, [pc, #44]	@ (8008e14 <global_stdio_init.part.0+0x34>)
 8008de6:	4a0c      	ldr	r2, [pc, #48]	@ (8008e18 <global_stdio_init.part.0+0x38>)
 8008de8:	4620      	mov	r0, r4
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	2104      	movs	r1, #4
 8008dee:	2200      	movs	r2, #0
 8008df0:	f7ff ff94 	bl	8008d1c <std>
 8008df4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008df8:	2201      	movs	r2, #1
 8008dfa:	2109      	movs	r1, #9
 8008dfc:	f7ff ff8e 	bl	8008d1c <std>
 8008e00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e04:	2202      	movs	r2, #2
 8008e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e0a:	2112      	movs	r1, #18
 8008e0c:	f7ff bf86 	b.w	8008d1c <std>
 8008e10:	20000e18 	.word	0x20000e18
 8008e14:	20000ce0 	.word	0x20000ce0
 8008e18:	08008d89 	.word	0x08008d89

08008e1c <__sfp_lock_acquire>:
 8008e1c:	4801      	ldr	r0, [pc, #4]	@ (8008e24 <__sfp_lock_acquire+0x8>)
 8008e1e:	f000 b90e 	b.w	800903e <__retarget_lock_acquire_recursive>
 8008e22:	bf00      	nop
 8008e24:	20000e21 	.word	0x20000e21

08008e28 <__sfp_lock_release>:
 8008e28:	4801      	ldr	r0, [pc, #4]	@ (8008e30 <__sfp_lock_release+0x8>)
 8008e2a:	f000 b909 	b.w	8009040 <__retarget_lock_release_recursive>
 8008e2e:	bf00      	nop
 8008e30:	20000e21 	.word	0x20000e21

08008e34 <__sinit>:
 8008e34:	b510      	push	{r4, lr}
 8008e36:	4604      	mov	r4, r0
 8008e38:	f7ff fff0 	bl	8008e1c <__sfp_lock_acquire>
 8008e3c:	6a23      	ldr	r3, [r4, #32]
 8008e3e:	b11b      	cbz	r3, 8008e48 <__sinit+0x14>
 8008e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e44:	f7ff bff0 	b.w	8008e28 <__sfp_lock_release>
 8008e48:	4b04      	ldr	r3, [pc, #16]	@ (8008e5c <__sinit+0x28>)
 8008e4a:	6223      	str	r3, [r4, #32]
 8008e4c:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <__sinit+0x2c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1f5      	bne.n	8008e40 <__sinit+0xc>
 8008e54:	f7ff ffc4 	bl	8008de0 <global_stdio_init.part.0>
 8008e58:	e7f2      	b.n	8008e40 <__sinit+0xc>
 8008e5a:	bf00      	nop
 8008e5c:	08008da1 	.word	0x08008da1
 8008e60:	20000e18 	.word	0x20000e18

08008e64 <_fwalk_sglue>:
 8008e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e68:	4607      	mov	r7, r0
 8008e6a:	4688      	mov	r8, r1
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	2600      	movs	r6, #0
 8008e70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e74:	f1b9 0901 	subs.w	r9, r9, #1
 8008e78:	d505      	bpl.n	8008e86 <_fwalk_sglue+0x22>
 8008e7a:	6824      	ldr	r4, [r4, #0]
 8008e7c:	2c00      	cmp	r4, #0
 8008e7e:	d1f7      	bne.n	8008e70 <_fwalk_sglue+0xc>
 8008e80:	4630      	mov	r0, r6
 8008e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e86:	89ab      	ldrh	r3, [r5, #12]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d907      	bls.n	8008e9c <_fwalk_sglue+0x38>
 8008e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e90:	3301      	adds	r3, #1
 8008e92:	d003      	beq.n	8008e9c <_fwalk_sglue+0x38>
 8008e94:	4629      	mov	r1, r5
 8008e96:	4638      	mov	r0, r7
 8008e98:	47c0      	blx	r8
 8008e9a:	4306      	orrs	r6, r0
 8008e9c:	3568      	adds	r5, #104	@ 0x68
 8008e9e:	e7e9      	b.n	8008e74 <_fwalk_sglue+0x10>

08008ea0 <iprintf>:
 8008ea0:	b40f      	push	{r0, r1, r2, r3}
 8008ea2:	b507      	push	{r0, r1, r2, lr}
 8008ea4:	4906      	ldr	r1, [pc, #24]	@ (8008ec0 <iprintf+0x20>)
 8008ea6:	ab04      	add	r3, sp, #16
 8008ea8:	6808      	ldr	r0, [r1, #0]
 8008eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eae:	6881      	ldr	r1, [r0, #8]
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	f000 f9f3 	bl	800929c <_vfiprintf_r>
 8008eb6:	b003      	add	sp, #12
 8008eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ebc:	b004      	add	sp, #16
 8008ebe:	4770      	bx	lr
 8008ec0:	20000020 	.word	0x20000020

08008ec4 <__sread>:
 8008ec4:	b510      	push	{r4, lr}
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ecc:	f000 f868 	bl	8008fa0 <_read_r>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	bfab      	itete	ge
 8008ed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ed8:	181b      	addge	r3, r3, r0
 8008eda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008ede:	bfac      	ite	ge
 8008ee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008ee2:	81a3      	strhlt	r3, [r4, #12]
 8008ee4:	bd10      	pop	{r4, pc}

08008ee6 <__swrite>:
 8008ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eea:	461f      	mov	r7, r3
 8008eec:	898b      	ldrh	r3, [r1, #12]
 8008eee:	4605      	mov	r5, r0
 8008ef0:	05db      	lsls	r3, r3, #23
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	4616      	mov	r6, r2
 8008ef6:	d505      	bpl.n	8008f04 <__swrite+0x1e>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	2200      	movs	r2, #0
 8008efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f00:	f000 f83c 	bl	8008f7c <_lseek_r>
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	4632      	mov	r2, r6
 8008f08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	4628      	mov	r0, r5
 8008f10:	463b      	mov	r3, r7
 8008f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1a:	f000 b853 	b.w	8008fc4 <_write_r>

08008f1e <__sseek>:
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	460c      	mov	r4, r1
 8008f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f26:	f000 f829 	bl	8008f7c <_lseek_r>
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	bf15      	itete	ne
 8008f30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f3a:	81a3      	strheq	r3, [r4, #12]
 8008f3c:	bf18      	it	ne
 8008f3e:	81a3      	strhne	r3, [r4, #12]
 8008f40:	bd10      	pop	{r4, pc}

08008f42 <__sclose>:
 8008f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f46:	f000 b809 	b.w	8008f5c <_close_r>

08008f4a <memset>:
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	4402      	add	r2, r0
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d100      	bne.n	8008f54 <memset+0xa>
 8008f52:	4770      	bx	lr
 8008f54:	f803 1b01 	strb.w	r1, [r3], #1
 8008f58:	e7f9      	b.n	8008f4e <memset+0x4>
	...

08008f5c <_close_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	2300      	movs	r3, #0
 8008f60:	4d05      	ldr	r5, [pc, #20]	@ (8008f78 <_close_r+0x1c>)
 8008f62:	4604      	mov	r4, r0
 8008f64:	4608      	mov	r0, r1
 8008f66:	602b      	str	r3, [r5, #0]
 8008f68:	f7f9 faf4 	bl	8002554 <_close>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d102      	bne.n	8008f76 <_close_r+0x1a>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	b103      	cbz	r3, 8008f76 <_close_r+0x1a>
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	20000e1c 	.word	0x20000e1c

08008f7c <_lseek_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	2200      	movs	r2, #0
 8008f86:	4d05      	ldr	r5, [pc, #20]	@ (8008f9c <_lseek_r+0x20>)
 8008f88:	602a      	str	r2, [r5, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f7f9 fb06 	bl	800259c <_lseek>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_lseek_r+0x1e>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_lseek_r+0x1e>
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	20000e1c 	.word	0x20000e1c

08008fa0 <_read_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	2200      	movs	r2, #0
 8008faa:	4d05      	ldr	r5, [pc, #20]	@ (8008fc0 <_read_r+0x20>)
 8008fac:	602a      	str	r2, [r5, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f7f9 fa97 	bl	80024e2 <_read>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_read_r+0x1e>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_read_r+0x1e>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	20000e1c 	.word	0x20000e1c

08008fc4 <_write_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	4608      	mov	r0, r1
 8008fca:	4611      	mov	r1, r2
 8008fcc:	2200      	movs	r2, #0
 8008fce:	4d05      	ldr	r5, [pc, #20]	@ (8008fe4 <_write_r+0x20>)
 8008fd0:	602a      	str	r2, [r5, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f7f9 faa2 	bl	800251c <_write>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d102      	bne.n	8008fe2 <_write_r+0x1e>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	b103      	cbz	r3, 8008fe2 <_write_r+0x1e>
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}
 8008fe4:	20000e1c 	.word	0x20000e1c

08008fe8 <__errno>:
 8008fe8:	4b01      	ldr	r3, [pc, #4]	@ (8008ff0 <__errno+0x8>)
 8008fea:	6818      	ldr	r0, [r3, #0]
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	20000020 	.word	0x20000020

08008ff4 <__libc_init_array>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	2600      	movs	r6, #0
 8008ff8:	4d0c      	ldr	r5, [pc, #48]	@ (800902c <__libc_init_array+0x38>)
 8008ffa:	4c0d      	ldr	r4, [pc, #52]	@ (8009030 <__libc_init_array+0x3c>)
 8008ffc:	1b64      	subs	r4, r4, r5
 8008ffe:	10a4      	asrs	r4, r4, #2
 8009000:	42a6      	cmp	r6, r4
 8009002:	d109      	bne.n	8009018 <__libc_init_array+0x24>
 8009004:	f000 fdd0 	bl	8009ba8 <_init>
 8009008:	2600      	movs	r6, #0
 800900a:	4d0a      	ldr	r5, [pc, #40]	@ (8009034 <__libc_init_array+0x40>)
 800900c:	4c0a      	ldr	r4, [pc, #40]	@ (8009038 <__libc_init_array+0x44>)
 800900e:	1b64      	subs	r4, r4, r5
 8009010:	10a4      	asrs	r4, r4, #2
 8009012:	42a6      	cmp	r6, r4
 8009014:	d105      	bne.n	8009022 <__libc_init_array+0x2e>
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	f855 3b04 	ldr.w	r3, [r5], #4
 800901c:	4798      	blx	r3
 800901e:	3601      	adds	r6, #1
 8009020:	e7ee      	b.n	8009000 <__libc_init_array+0xc>
 8009022:	f855 3b04 	ldr.w	r3, [r5], #4
 8009026:	4798      	blx	r3
 8009028:	3601      	adds	r6, #1
 800902a:	e7f2      	b.n	8009012 <__libc_init_array+0x1e>
 800902c:	0800a6fc 	.word	0x0800a6fc
 8009030:	0800a6fc 	.word	0x0800a6fc
 8009034:	0800a6fc 	.word	0x0800a6fc
 8009038:	0800a700 	.word	0x0800a700

0800903c <__retarget_lock_init_recursive>:
 800903c:	4770      	bx	lr

0800903e <__retarget_lock_acquire_recursive>:
 800903e:	4770      	bx	lr

08009040 <__retarget_lock_release_recursive>:
 8009040:	4770      	bx	lr

08009042 <memcpy>:
 8009042:	440a      	add	r2, r1
 8009044:	4291      	cmp	r1, r2
 8009046:	f100 33ff 	add.w	r3, r0, #4294967295
 800904a:	d100      	bne.n	800904e <memcpy+0xc>
 800904c:	4770      	bx	lr
 800904e:	b510      	push	{r4, lr}
 8009050:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009054:	4291      	cmp	r1, r2
 8009056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800905a:	d1f9      	bne.n	8009050 <memcpy+0xe>
 800905c:	bd10      	pop	{r4, pc}
	...

08009060 <_free_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4605      	mov	r5, r0
 8009064:	2900      	cmp	r1, #0
 8009066:	d040      	beq.n	80090ea <_free_r+0x8a>
 8009068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906c:	1f0c      	subs	r4, r1, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfb8      	it	lt
 8009072:	18e4      	addlt	r4, r4, r3
 8009074:	f000 f8de 	bl	8009234 <__malloc_lock>
 8009078:	4a1c      	ldr	r2, [pc, #112]	@ (80090ec <_free_r+0x8c>)
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	b933      	cbnz	r3, 800908c <_free_r+0x2c>
 800907e:	6063      	str	r3, [r4, #4]
 8009080:	6014      	str	r4, [r2, #0]
 8009082:	4628      	mov	r0, r5
 8009084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009088:	f000 b8da 	b.w	8009240 <__malloc_unlock>
 800908c:	42a3      	cmp	r3, r4
 800908e:	d908      	bls.n	80090a2 <_free_r+0x42>
 8009090:	6820      	ldr	r0, [r4, #0]
 8009092:	1821      	adds	r1, r4, r0
 8009094:	428b      	cmp	r3, r1
 8009096:	bf01      	itttt	eq
 8009098:	6819      	ldreq	r1, [r3, #0]
 800909a:	685b      	ldreq	r3, [r3, #4]
 800909c:	1809      	addeq	r1, r1, r0
 800909e:	6021      	streq	r1, [r4, #0]
 80090a0:	e7ed      	b.n	800907e <_free_r+0x1e>
 80090a2:	461a      	mov	r2, r3
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	b10b      	cbz	r3, 80090ac <_free_r+0x4c>
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	d9fa      	bls.n	80090a2 <_free_r+0x42>
 80090ac:	6811      	ldr	r1, [r2, #0]
 80090ae:	1850      	adds	r0, r2, r1
 80090b0:	42a0      	cmp	r0, r4
 80090b2:	d10b      	bne.n	80090cc <_free_r+0x6c>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	4401      	add	r1, r0
 80090b8:	1850      	adds	r0, r2, r1
 80090ba:	4283      	cmp	r3, r0
 80090bc:	6011      	str	r1, [r2, #0]
 80090be:	d1e0      	bne.n	8009082 <_free_r+0x22>
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	4408      	add	r0, r1
 80090c6:	6010      	str	r0, [r2, #0]
 80090c8:	6053      	str	r3, [r2, #4]
 80090ca:	e7da      	b.n	8009082 <_free_r+0x22>
 80090cc:	d902      	bls.n	80090d4 <_free_r+0x74>
 80090ce:	230c      	movs	r3, #12
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	e7d6      	b.n	8009082 <_free_r+0x22>
 80090d4:	6820      	ldr	r0, [r4, #0]
 80090d6:	1821      	adds	r1, r4, r0
 80090d8:	428b      	cmp	r3, r1
 80090da:	bf01      	itttt	eq
 80090dc:	6819      	ldreq	r1, [r3, #0]
 80090de:	685b      	ldreq	r3, [r3, #4]
 80090e0:	1809      	addeq	r1, r1, r0
 80090e2:	6021      	streq	r1, [r4, #0]
 80090e4:	6063      	str	r3, [r4, #4]
 80090e6:	6054      	str	r4, [r2, #4]
 80090e8:	e7cb      	b.n	8009082 <_free_r+0x22>
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	20000e28 	.word	0x20000e28

080090f0 <sbrk_aligned>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	4e0f      	ldr	r6, [pc, #60]	@ (8009130 <sbrk_aligned+0x40>)
 80090f4:	460c      	mov	r4, r1
 80090f6:	6831      	ldr	r1, [r6, #0]
 80090f8:	4605      	mov	r5, r0
 80090fa:	b911      	cbnz	r1, 8009102 <sbrk_aligned+0x12>
 80090fc:	f000 fcb2 	bl	8009a64 <_sbrk_r>
 8009100:	6030      	str	r0, [r6, #0]
 8009102:	4621      	mov	r1, r4
 8009104:	4628      	mov	r0, r5
 8009106:	f000 fcad 	bl	8009a64 <_sbrk_r>
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	d103      	bne.n	8009116 <sbrk_aligned+0x26>
 800910e:	f04f 34ff 	mov.w	r4, #4294967295
 8009112:	4620      	mov	r0, r4
 8009114:	bd70      	pop	{r4, r5, r6, pc}
 8009116:	1cc4      	adds	r4, r0, #3
 8009118:	f024 0403 	bic.w	r4, r4, #3
 800911c:	42a0      	cmp	r0, r4
 800911e:	d0f8      	beq.n	8009112 <sbrk_aligned+0x22>
 8009120:	1a21      	subs	r1, r4, r0
 8009122:	4628      	mov	r0, r5
 8009124:	f000 fc9e 	bl	8009a64 <_sbrk_r>
 8009128:	3001      	adds	r0, #1
 800912a:	d1f2      	bne.n	8009112 <sbrk_aligned+0x22>
 800912c:	e7ef      	b.n	800910e <sbrk_aligned+0x1e>
 800912e:	bf00      	nop
 8009130:	20000e24 	.word	0x20000e24

08009134 <_malloc_r>:
 8009134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009138:	1ccd      	adds	r5, r1, #3
 800913a:	f025 0503 	bic.w	r5, r5, #3
 800913e:	3508      	adds	r5, #8
 8009140:	2d0c      	cmp	r5, #12
 8009142:	bf38      	it	cc
 8009144:	250c      	movcc	r5, #12
 8009146:	2d00      	cmp	r5, #0
 8009148:	4606      	mov	r6, r0
 800914a:	db01      	blt.n	8009150 <_malloc_r+0x1c>
 800914c:	42a9      	cmp	r1, r5
 800914e:	d904      	bls.n	800915a <_malloc_r+0x26>
 8009150:	230c      	movs	r3, #12
 8009152:	6033      	str	r3, [r6, #0]
 8009154:	2000      	movs	r0, #0
 8009156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800915a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009230 <_malloc_r+0xfc>
 800915e:	f000 f869 	bl	8009234 <__malloc_lock>
 8009162:	f8d8 3000 	ldr.w	r3, [r8]
 8009166:	461c      	mov	r4, r3
 8009168:	bb44      	cbnz	r4, 80091bc <_malloc_r+0x88>
 800916a:	4629      	mov	r1, r5
 800916c:	4630      	mov	r0, r6
 800916e:	f7ff ffbf 	bl	80090f0 <sbrk_aligned>
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	4604      	mov	r4, r0
 8009176:	d158      	bne.n	800922a <_malloc_r+0xf6>
 8009178:	f8d8 4000 	ldr.w	r4, [r8]
 800917c:	4627      	mov	r7, r4
 800917e:	2f00      	cmp	r7, #0
 8009180:	d143      	bne.n	800920a <_malloc_r+0xd6>
 8009182:	2c00      	cmp	r4, #0
 8009184:	d04b      	beq.n	800921e <_malloc_r+0xea>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	4639      	mov	r1, r7
 800918a:	4630      	mov	r0, r6
 800918c:	eb04 0903 	add.w	r9, r4, r3
 8009190:	f000 fc68 	bl	8009a64 <_sbrk_r>
 8009194:	4581      	cmp	r9, r0
 8009196:	d142      	bne.n	800921e <_malloc_r+0xea>
 8009198:	6821      	ldr	r1, [r4, #0]
 800919a:	4630      	mov	r0, r6
 800919c:	1a6d      	subs	r5, r5, r1
 800919e:	4629      	mov	r1, r5
 80091a0:	f7ff ffa6 	bl	80090f0 <sbrk_aligned>
 80091a4:	3001      	adds	r0, #1
 80091a6:	d03a      	beq.n	800921e <_malloc_r+0xea>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	442b      	add	r3, r5
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	f8d8 3000 	ldr.w	r3, [r8]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	bb62      	cbnz	r2, 8009210 <_malloc_r+0xdc>
 80091b6:	f8c8 7000 	str.w	r7, [r8]
 80091ba:	e00f      	b.n	80091dc <_malloc_r+0xa8>
 80091bc:	6822      	ldr	r2, [r4, #0]
 80091be:	1b52      	subs	r2, r2, r5
 80091c0:	d420      	bmi.n	8009204 <_malloc_r+0xd0>
 80091c2:	2a0b      	cmp	r2, #11
 80091c4:	d917      	bls.n	80091f6 <_malloc_r+0xc2>
 80091c6:	1961      	adds	r1, r4, r5
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	6025      	str	r5, [r4, #0]
 80091cc:	bf18      	it	ne
 80091ce:	6059      	strne	r1, [r3, #4]
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	bf08      	it	eq
 80091d4:	f8c8 1000 	streq.w	r1, [r8]
 80091d8:	5162      	str	r2, [r4, r5]
 80091da:	604b      	str	r3, [r1, #4]
 80091dc:	4630      	mov	r0, r6
 80091de:	f000 f82f 	bl	8009240 <__malloc_unlock>
 80091e2:	f104 000b 	add.w	r0, r4, #11
 80091e6:	1d23      	adds	r3, r4, #4
 80091e8:	f020 0007 	bic.w	r0, r0, #7
 80091ec:	1ac2      	subs	r2, r0, r3
 80091ee:	bf1c      	itt	ne
 80091f0:	1a1b      	subne	r3, r3, r0
 80091f2:	50a3      	strne	r3, [r4, r2]
 80091f4:	e7af      	b.n	8009156 <_malloc_r+0x22>
 80091f6:	6862      	ldr	r2, [r4, #4]
 80091f8:	42a3      	cmp	r3, r4
 80091fa:	bf0c      	ite	eq
 80091fc:	f8c8 2000 	streq.w	r2, [r8]
 8009200:	605a      	strne	r2, [r3, #4]
 8009202:	e7eb      	b.n	80091dc <_malloc_r+0xa8>
 8009204:	4623      	mov	r3, r4
 8009206:	6864      	ldr	r4, [r4, #4]
 8009208:	e7ae      	b.n	8009168 <_malloc_r+0x34>
 800920a:	463c      	mov	r4, r7
 800920c:	687f      	ldr	r7, [r7, #4]
 800920e:	e7b6      	b.n	800917e <_malloc_r+0x4a>
 8009210:	461a      	mov	r2, r3
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	42a3      	cmp	r3, r4
 8009216:	d1fb      	bne.n	8009210 <_malloc_r+0xdc>
 8009218:	2300      	movs	r3, #0
 800921a:	6053      	str	r3, [r2, #4]
 800921c:	e7de      	b.n	80091dc <_malloc_r+0xa8>
 800921e:	230c      	movs	r3, #12
 8009220:	4630      	mov	r0, r6
 8009222:	6033      	str	r3, [r6, #0]
 8009224:	f000 f80c 	bl	8009240 <__malloc_unlock>
 8009228:	e794      	b.n	8009154 <_malloc_r+0x20>
 800922a:	6005      	str	r5, [r0, #0]
 800922c:	e7d6      	b.n	80091dc <_malloc_r+0xa8>
 800922e:	bf00      	nop
 8009230:	20000e28 	.word	0x20000e28

08009234 <__malloc_lock>:
 8009234:	4801      	ldr	r0, [pc, #4]	@ (800923c <__malloc_lock+0x8>)
 8009236:	f7ff bf02 	b.w	800903e <__retarget_lock_acquire_recursive>
 800923a:	bf00      	nop
 800923c:	20000e20 	.word	0x20000e20

08009240 <__malloc_unlock>:
 8009240:	4801      	ldr	r0, [pc, #4]	@ (8009248 <__malloc_unlock+0x8>)
 8009242:	f7ff befd 	b.w	8009040 <__retarget_lock_release_recursive>
 8009246:	bf00      	nop
 8009248:	20000e20 	.word	0x20000e20

0800924c <__sfputc_r>:
 800924c:	6893      	ldr	r3, [r2, #8]
 800924e:	b410      	push	{r4}
 8009250:	3b01      	subs	r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	6093      	str	r3, [r2, #8]
 8009256:	da07      	bge.n	8009268 <__sfputc_r+0x1c>
 8009258:	6994      	ldr	r4, [r2, #24]
 800925a:	42a3      	cmp	r3, r4
 800925c:	db01      	blt.n	8009262 <__sfputc_r+0x16>
 800925e:	290a      	cmp	r1, #10
 8009260:	d102      	bne.n	8009268 <__sfputc_r+0x1c>
 8009262:	bc10      	pop	{r4}
 8009264:	f000 bb6a 	b.w	800993c <__swbuf_r>
 8009268:	6813      	ldr	r3, [r2, #0]
 800926a:	1c58      	adds	r0, r3, #1
 800926c:	6010      	str	r0, [r2, #0]
 800926e:	7019      	strb	r1, [r3, #0]
 8009270:	4608      	mov	r0, r1
 8009272:	bc10      	pop	{r4}
 8009274:	4770      	bx	lr

08009276 <__sfputs_r>:
 8009276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009278:	4606      	mov	r6, r0
 800927a:	460f      	mov	r7, r1
 800927c:	4614      	mov	r4, r2
 800927e:	18d5      	adds	r5, r2, r3
 8009280:	42ac      	cmp	r4, r5
 8009282:	d101      	bne.n	8009288 <__sfputs_r+0x12>
 8009284:	2000      	movs	r0, #0
 8009286:	e007      	b.n	8009298 <__sfputs_r+0x22>
 8009288:	463a      	mov	r2, r7
 800928a:	4630      	mov	r0, r6
 800928c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009290:	f7ff ffdc 	bl	800924c <__sfputc_r>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d1f3      	bne.n	8009280 <__sfputs_r+0xa>
 8009298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800929c <_vfiprintf_r>:
 800929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a0:	460d      	mov	r5, r1
 80092a2:	4614      	mov	r4, r2
 80092a4:	4698      	mov	r8, r3
 80092a6:	4606      	mov	r6, r0
 80092a8:	b09d      	sub	sp, #116	@ 0x74
 80092aa:	b118      	cbz	r0, 80092b4 <_vfiprintf_r+0x18>
 80092ac:	6a03      	ldr	r3, [r0, #32]
 80092ae:	b90b      	cbnz	r3, 80092b4 <_vfiprintf_r+0x18>
 80092b0:	f7ff fdc0 	bl	8008e34 <__sinit>
 80092b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092b6:	07d9      	lsls	r1, r3, #31
 80092b8:	d405      	bmi.n	80092c6 <_vfiprintf_r+0x2a>
 80092ba:	89ab      	ldrh	r3, [r5, #12]
 80092bc:	059a      	lsls	r2, r3, #22
 80092be:	d402      	bmi.n	80092c6 <_vfiprintf_r+0x2a>
 80092c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092c2:	f7ff febc 	bl	800903e <__retarget_lock_acquire_recursive>
 80092c6:	89ab      	ldrh	r3, [r5, #12]
 80092c8:	071b      	lsls	r3, r3, #28
 80092ca:	d501      	bpl.n	80092d0 <_vfiprintf_r+0x34>
 80092cc:	692b      	ldr	r3, [r5, #16]
 80092ce:	b99b      	cbnz	r3, 80092f8 <_vfiprintf_r+0x5c>
 80092d0:	4629      	mov	r1, r5
 80092d2:	4630      	mov	r0, r6
 80092d4:	f000 fb70 	bl	80099b8 <__swsetup_r>
 80092d8:	b170      	cbz	r0, 80092f8 <_vfiprintf_r+0x5c>
 80092da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092dc:	07dc      	lsls	r4, r3, #31
 80092de:	d504      	bpl.n	80092ea <_vfiprintf_r+0x4e>
 80092e0:	f04f 30ff 	mov.w	r0, #4294967295
 80092e4:	b01d      	add	sp, #116	@ 0x74
 80092e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ea:	89ab      	ldrh	r3, [r5, #12]
 80092ec:	0598      	lsls	r0, r3, #22
 80092ee:	d4f7      	bmi.n	80092e0 <_vfiprintf_r+0x44>
 80092f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092f2:	f7ff fea5 	bl	8009040 <__retarget_lock_release_recursive>
 80092f6:	e7f3      	b.n	80092e0 <_vfiprintf_r+0x44>
 80092f8:	2300      	movs	r3, #0
 80092fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80092fc:	2320      	movs	r3, #32
 80092fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009302:	2330      	movs	r3, #48	@ 0x30
 8009304:	f04f 0901 	mov.w	r9, #1
 8009308:	f8cd 800c 	str.w	r8, [sp, #12]
 800930c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80094b8 <_vfiprintf_r+0x21c>
 8009310:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009314:	4623      	mov	r3, r4
 8009316:	469a      	mov	sl, r3
 8009318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800931c:	b10a      	cbz	r2, 8009322 <_vfiprintf_r+0x86>
 800931e:	2a25      	cmp	r2, #37	@ 0x25
 8009320:	d1f9      	bne.n	8009316 <_vfiprintf_r+0x7a>
 8009322:	ebba 0b04 	subs.w	fp, sl, r4
 8009326:	d00b      	beq.n	8009340 <_vfiprintf_r+0xa4>
 8009328:	465b      	mov	r3, fp
 800932a:	4622      	mov	r2, r4
 800932c:	4629      	mov	r1, r5
 800932e:	4630      	mov	r0, r6
 8009330:	f7ff ffa1 	bl	8009276 <__sfputs_r>
 8009334:	3001      	adds	r0, #1
 8009336:	f000 80a7 	beq.w	8009488 <_vfiprintf_r+0x1ec>
 800933a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800933c:	445a      	add	r2, fp
 800933e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009340:	f89a 3000 	ldrb.w	r3, [sl]
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 809f 	beq.w	8009488 <_vfiprintf_r+0x1ec>
 800934a:	2300      	movs	r3, #0
 800934c:	f04f 32ff 	mov.w	r2, #4294967295
 8009350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009354:	f10a 0a01 	add.w	sl, sl, #1
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	9307      	str	r3, [sp, #28]
 800935c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009360:	931a      	str	r3, [sp, #104]	@ 0x68
 8009362:	4654      	mov	r4, sl
 8009364:	2205      	movs	r2, #5
 8009366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936a:	4853      	ldr	r0, [pc, #332]	@ (80094b8 <_vfiprintf_r+0x21c>)
 800936c:	f000 fb8a 	bl	8009a84 <memchr>
 8009370:	9a04      	ldr	r2, [sp, #16]
 8009372:	b9d8      	cbnz	r0, 80093ac <_vfiprintf_r+0x110>
 8009374:	06d1      	lsls	r1, r2, #27
 8009376:	bf44      	itt	mi
 8009378:	2320      	movmi	r3, #32
 800937a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800937e:	0713      	lsls	r3, r2, #28
 8009380:	bf44      	itt	mi
 8009382:	232b      	movmi	r3, #43	@ 0x2b
 8009384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009388:	f89a 3000 	ldrb.w	r3, [sl]
 800938c:	2b2a      	cmp	r3, #42	@ 0x2a
 800938e:	d015      	beq.n	80093bc <_vfiprintf_r+0x120>
 8009390:	4654      	mov	r4, sl
 8009392:	2000      	movs	r0, #0
 8009394:	f04f 0c0a 	mov.w	ip, #10
 8009398:	9a07      	ldr	r2, [sp, #28]
 800939a:	4621      	mov	r1, r4
 800939c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093a0:	3b30      	subs	r3, #48	@ 0x30
 80093a2:	2b09      	cmp	r3, #9
 80093a4:	d94b      	bls.n	800943e <_vfiprintf_r+0x1a2>
 80093a6:	b1b0      	cbz	r0, 80093d6 <_vfiprintf_r+0x13a>
 80093a8:	9207      	str	r2, [sp, #28]
 80093aa:	e014      	b.n	80093d6 <_vfiprintf_r+0x13a>
 80093ac:	eba0 0308 	sub.w	r3, r0, r8
 80093b0:	fa09 f303 	lsl.w	r3, r9, r3
 80093b4:	4313      	orrs	r3, r2
 80093b6:	46a2      	mov	sl, r4
 80093b8:	9304      	str	r3, [sp, #16]
 80093ba:	e7d2      	b.n	8009362 <_vfiprintf_r+0xc6>
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	1d19      	adds	r1, r3, #4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	9103      	str	r1, [sp, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	bfbb      	ittet	lt
 80093c8:	425b      	neglt	r3, r3
 80093ca:	f042 0202 	orrlt.w	r2, r2, #2
 80093ce:	9307      	strge	r3, [sp, #28]
 80093d0:	9307      	strlt	r3, [sp, #28]
 80093d2:	bfb8      	it	lt
 80093d4:	9204      	strlt	r2, [sp, #16]
 80093d6:	7823      	ldrb	r3, [r4, #0]
 80093d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80093da:	d10a      	bne.n	80093f2 <_vfiprintf_r+0x156>
 80093dc:	7863      	ldrb	r3, [r4, #1]
 80093de:	2b2a      	cmp	r3, #42	@ 0x2a
 80093e0:	d132      	bne.n	8009448 <_vfiprintf_r+0x1ac>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	3402      	adds	r4, #2
 80093e6:	1d1a      	adds	r2, r3, #4
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	9203      	str	r2, [sp, #12]
 80093ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80094bc <_vfiprintf_r+0x220>
 80093f6:	2203      	movs	r2, #3
 80093f8:	4650      	mov	r0, sl
 80093fa:	7821      	ldrb	r1, [r4, #0]
 80093fc:	f000 fb42 	bl	8009a84 <memchr>
 8009400:	b138      	cbz	r0, 8009412 <_vfiprintf_r+0x176>
 8009402:	2240      	movs	r2, #64	@ 0x40
 8009404:	9b04      	ldr	r3, [sp, #16]
 8009406:	eba0 000a 	sub.w	r0, r0, sl
 800940a:	4082      	lsls	r2, r0
 800940c:	4313      	orrs	r3, r2
 800940e:	3401      	adds	r4, #1
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009416:	2206      	movs	r2, #6
 8009418:	4829      	ldr	r0, [pc, #164]	@ (80094c0 <_vfiprintf_r+0x224>)
 800941a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800941e:	f000 fb31 	bl	8009a84 <memchr>
 8009422:	2800      	cmp	r0, #0
 8009424:	d03f      	beq.n	80094a6 <_vfiprintf_r+0x20a>
 8009426:	4b27      	ldr	r3, [pc, #156]	@ (80094c4 <_vfiprintf_r+0x228>)
 8009428:	bb1b      	cbnz	r3, 8009472 <_vfiprintf_r+0x1d6>
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	3307      	adds	r3, #7
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	3308      	adds	r3, #8
 8009434:	9303      	str	r3, [sp, #12]
 8009436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009438:	443b      	add	r3, r7
 800943a:	9309      	str	r3, [sp, #36]	@ 0x24
 800943c:	e76a      	b.n	8009314 <_vfiprintf_r+0x78>
 800943e:	460c      	mov	r4, r1
 8009440:	2001      	movs	r0, #1
 8009442:	fb0c 3202 	mla	r2, ip, r2, r3
 8009446:	e7a8      	b.n	800939a <_vfiprintf_r+0xfe>
 8009448:	2300      	movs	r3, #0
 800944a:	f04f 0c0a 	mov.w	ip, #10
 800944e:	4619      	mov	r1, r3
 8009450:	3401      	adds	r4, #1
 8009452:	9305      	str	r3, [sp, #20]
 8009454:	4620      	mov	r0, r4
 8009456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800945a:	3a30      	subs	r2, #48	@ 0x30
 800945c:	2a09      	cmp	r2, #9
 800945e:	d903      	bls.n	8009468 <_vfiprintf_r+0x1cc>
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0c6      	beq.n	80093f2 <_vfiprintf_r+0x156>
 8009464:	9105      	str	r1, [sp, #20]
 8009466:	e7c4      	b.n	80093f2 <_vfiprintf_r+0x156>
 8009468:	4604      	mov	r4, r0
 800946a:	2301      	movs	r3, #1
 800946c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009470:	e7f0      	b.n	8009454 <_vfiprintf_r+0x1b8>
 8009472:	ab03      	add	r3, sp, #12
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	462a      	mov	r2, r5
 8009478:	4630      	mov	r0, r6
 800947a:	4b13      	ldr	r3, [pc, #76]	@ (80094c8 <_vfiprintf_r+0x22c>)
 800947c:	a904      	add	r1, sp, #16
 800947e:	f3af 8000 	nop.w
 8009482:	4607      	mov	r7, r0
 8009484:	1c78      	adds	r0, r7, #1
 8009486:	d1d6      	bne.n	8009436 <_vfiprintf_r+0x19a>
 8009488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800948a:	07d9      	lsls	r1, r3, #31
 800948c:	d405      	bmi.n	800949a <_vfiprintf_r+0x1fe>
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	059a      	lsls	r2, r3, #22
 8009492:	d402      	bmi.n	800949a <_vfiprintf_r+0x1fe>
 8009494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009496:	f7ff fdd3 	bl	8009040 <__retarget_lock_release_recursive>
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	065b      	lsls	r3, r3, #25
 800949e:	f53f af1f 	bmi.w	80092e0 <_vfiprintf_r+0x44>
 80094a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094a4:	e71e      	b.n	80092e4 <_vfiprintf_r+0x48>
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	462a      	mov	r2, r5
 80094ac:	4630      	mov	r0, r6
 80094ae:	4b06      	ldr	r3, [pc, #24]	@ (80094c8 <_vfiprintf_r+0x22c>)
 80094b0:	a904      	add	r1, sp, #16
 80094b2:	f000 f87d 	bl	80095b0 <_printf_i>
 80094b6:	e7e4      	b.n	8009482 <_vfiprintf_r+0x1e6>
 80094b8:	0800a6c8 	.word	0x0800a6c8
 80094bc:	0800a6ce 	.word	0x0800a6ce
 80094c0:	0800a6d2 	.word	0x0800a6d2
 80094c4:	00000000 	.word	0x00000000
 80094c8:	08009277 	.word	0x08009277

080094cc <_printf_common>:
 80094cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d0:	4616      	mov	r6, r2
 80094d2:	4698      	mov	r8, r3
 80094d4:	688a      	ldr	r2, [r1, #8]
 80094d6:	690b      	ldr	r3, [r1, #16]
 80094d8:	4607      	mov	r7, r0
 80094da:	4293      	cmp	r3, r2
 80094dc:	bfb8      	it	lt
 80094de:	4613      	movlt	r3, r2
 80094e0:	6033      	str	r3, [r6, #0]
 80094e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094e6:	460c      	mov	r4, r1
 80094e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094ec:	b10a      	cbz	r2, 80094f2 <_printf_common+0x26>
 80094ee:	3301      	adds	r3, #1
 80094f0:	6033      	str	r3, [r6, #0]
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	0699      	lsls	r1, r3, #26
 80094f6:	bf42      	ittt	mi
 80094f8:	6833      	ldrmi	r3, [r6, #0]
 80094fa:	3302      	addmi	r3, #2
 80094fc:	6033      	strmi	r3, [r6, #0]
 80094fe:	6825      	ldr	r5, [r4, #0]
 8009500:	f015 0506 	ands.w	r5, r5, #6
 8009504:	d106      	bne.n	8009514 <_printf_common+0x48>
 8009506:	f104 0a19 	add.w	sl, r4, #25
 800950a:	68e3      	ldr	r3, [r4, #12]
 800950c:	6832      	ldr	r2, [r6, #0]
 800950e:	1a9b      	subs	r3, r3, r2
 8009510:	42ab      	cmp	r3, r5
 8009512:	dc2b      	bgt.n	800956c <_printf_common+0xa0>
 8009514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009518:	6822      	ldr	r2, [r4, #0]
 800951a:	3b00      	subs	r3, #0
 800951c:	bf18      	it	ne
 800951e:	2301      	movne	r3, #1
 8009520:	0692      	lsls	r2, r2, #26
 8009522:	d430      	bmi.n	8009586 <_printf_common+0xba>
 8009524:	4641      	mov	r1, r8
 8009526:	4638      	mov	r0, r7
 8009528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800952c:	47c8      	blx	r9
 800952e:	3001      	adds	r0, #1
 8009530:	d023      	beq.n	800957a <_printf_common+0xae>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	6922      	ldr	r2, [r4, #16]
 8009536:	f003 0306 	and.w	r3, r3, #6
 800953a:	2b04      	cmp	r3, #4
 800953c:	bf14      	ite	ne
 800953e:	2500      	movne	r5, #0
 8009540:	6833      	ldreq	r3, [r6, #0]
 8009542:	f04f 0600 	mov.w	r6, #0
 8009546:	bf08      	it	eq
 8009548:	68e5      	ldreq	r5, [r4, #12]
 800954a:	f104 041a 	add.w	r4, r4, #26
 800954e:	bf08      	it	eq
 8009550:	1aed      	subeq	r5, r5, r3
 8009552:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009556:	bf08      	it	eq
 8009558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800955c:	4293      	cmp	r3, r2
 800955e:	bfc4      	itt	gt
 8009560:	1a9b      	subgt	r3, r3, r2
 8009562:	18ed      	addgt	r5, r5, r3
 8009564:	42b5      	cmp	r5, r6
 8009566:	d11a      	bne.n	800959e <_printf_common+0xd2>
 8009568:	2000      	movs	r0, #0
 800956a:	e008      	b.n	800957e <_printf_common+0xb2>
 800956c:	2301      	movs	r3, #1
 800956e:	4652      	mov	r2, sl
 8009570:	4641      	mov	r1, r8
 8009572:	4638      	mov	r0, r7
 8009574:	47c8      	blx	r9
 8009576:	3001      	adds	r0, #1
 8009578:	d103      	bne.n	8009582 <_printf_common+0xb6>
 800957a:	f04f 30ff 	mov.w	r0, #4294967295
 800957e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009582:	3501      	adds	r5, #1
 8009584:	e7c1      	b.n	800950a <_printf_common+0x3e>
 8009586:	2030      	movs	r0, #48	@ 0x30
 8009588:	18e1      	adds	r1, r4, r3
 800958a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800958e:	1c5a      	adds	r2, r3, #1
 8009590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009594:	4422      	add	r2, r4
 8009596:	3302      	adds	r3, #2
 8009598:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800959c:	e7c2      	b.n	8009524 <_printf_common+0x58>
 800959e:	2301      	movs	r3, #1
 80095a0:	4622      	mov	r2, r4
 80095a2:	4641      	mov	r1, r8
 80095a4:	4638      	mov	r0, r7
 80095a6:	47c8      	blx	r9
 80095a8:	3001      	adds	r0, #1
 80095aa:	d0e6      	beq.n	800957a <_printf_common+0xae>
 80095ac:	3601      	adds	r6, #1
 80095ae:	e7d9      	b.n	8009564 <_printf_common+0x98>

080095b0 <_printf_i>:
 80095b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	7e0f      	ldrb	r7, [r1, #24]
 80095b6:	4691      	mov	r9, r2
 80095b8:	2f78      	cmp	r7, #120	@ 0x78
 80095ba:	4680      	mov	r8, r0
 80095bc:	460c      	mov	r4, r1
 80095be:	469a      	mov	sl, r3
 80095c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095c6:	d807      	bhi.n	80095d8 <_printf_i+0x28>
 80095c8:	2f62      	cmp	r7, #98	@ 0x62
 80095ca:	d80a      	bhi.n	80095e2 <_printf_i+0x32>
 80095cc:	2f00      	cmp	r7, #0
 80095ce:	f000 80d1 	beq.w	8009774 <_printf_i+0x1c4>
 80095d2:	2f58      	cmp	r7, #88	@ 0x58
 80095d4:	f000 80b8 	beq.w	8009748 <_printf_i+0x198>
 80095d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095e0:	e03a      	b.n	8009658 <_printf_i+0xa8>
 80095e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095e6:	2b15      	cmp	r3, #21
 80095e8:	d8f6      	bhi.n	80095d8 <_printf_i+0x28>
 80095ea:	a101      	add	r1, pc, #4	@ (adr r1, 80095f0 <_printf_i+0x40>)
 80095ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095f0:	08009649 	.word	0x08009649
 80095f4:	0800965d 	.word	0x0800965d
 80095f8:	080095d9 	.word	0x080095d9
 80095fc:	080095d9 	.word	0x080095d9
 8009600:	080095d9 	.word	0x080095d9
 8009604:	080095d9 	.word	0x080095d9
 8009608:	0800965d 	.word	0x0800965d
 800960c:	080095d9 	.word	0x080095d9
 8009610:	080095d9 	.word	0x080095d9
 8009614:	080095d9 	.word	0x080095d9
 8009618:	080095d9 	.word	0x080095d9
 800961c:	0800975b 	.word	0x0800975b
 8009620:	08009687 	.word	0x08009687
 8009624:	08009715 	.word	0x08009715
 8009628:	080095d9 	.word	0x080095d9
 800962c:	080095d9 	.word	0x080095d9
 8009630:	0800977d 	.word	0x0800977d
 8009634:	080095d9 	.word	0x080095d9
 8009638:	08009687 	.word	0x08009687
 800963c:	080095d9 	.word	0x080095d9
 8009640:	080095d9 	.word	0x080095d9
 8009644:	0800971d 	.word	0x0800971d
 8009648:	6833      	ldr	r3, [r6, #0]
 800964a:	1d1a      	adds	r2, r3, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6032      	str	r2, [r6, #0]
 8009650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009658:	2301      	movs	r3, #1
 800965a:	e09c      	b.n	8009796 <_printf_i+0x1e6>
 800965c:	6833      	ldr	r3, [r6, #0]
 800965e:	6820      	ldr	r0, [r4, #0]
 8009660:	1d19      	adds	r1, r3, #4
 8009662:	6031      	str	r1, [r6, #0]
 8009664:	0606      	lsls	r6, r0, #24
 8009666:	d501      	bpl.n	800966c <_printf_i+0xbc>
 8009668:	681d      	ldr	r5, [r3, #0]
 800966a:	e003      	b.n	8009674 <_printf_i+0xc4>
 800966c:	0645      	lsls	r5, r0, #25
 800966e:	d5fb      	bpl.n	8009668 <_printf_i+0xb8>
 8009670:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009674:	2d00      	cmp	r5, #0
 8009676:	da03      	bge.n	8009680 <_printf_i+0xd0>
 8009678:	232d      	movs	r3, #45	@ 0x2d
 800967a:	426d      	negs	r5, r5
 800967c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009680:	230a      	movs	r3, #10
 8009682:	4858      	ldr	r0, [pc, #352]	@ (80097e4 <_printf_i+0x234>)
 8009684:	e011      	b.n	80096aa <_printf_i+0xfa>
 8009686:	6821      	ldr	r1, [r4, #0]
 8009688:	6833      	ldr	r3, [r6, #0]
 800968a:	0608      	lsls	r0, r1, #24
 800968c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009690:	d402      	bmi.n	8009698 <_printf_i+0xe8>
 8009692:	0649      	lsls	r1, r1, #25
 8009694:	bf48      	it	mi
 8009696:	b2ad      	uxthmi	r5, r5
 8009698:	2f6f      	cmp	r7, #111	@ 0x6f
 800969a:	6033      	str	r3, [r6, #0]
 800969c:	bf14      	ite	ne
 800969e:	230a      	movne	r3, #10
 80096a0:	2308      	moveq	r3, #8
 80096a2:	4850      	ldr	r0, [pc, #320]	@ (80097e4 <_printf_i+0x234>)
 80096a4:	2100      	movs	r1, #0
 80096a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096aa:	6866      	ldr	r6, [r4, #4]
 80096ac:	2e00      	cmp	r6, #0
 80096ae:	60a6      	str	r6, [r4, #8]
 80096b0:	db05      	blt.n	80096be <_printf_i+0x10e>
 80096b2:	6821      	ldr	r1, [r4, #0]
 80096b4:	432e      	orrs	r6, r5
 80096b6:	f021 0104 	bic.w	r1, r1, #4
 80096ba:	6021      	str	r1, [r4, #0]
 80096bc:	d04b      	beq.n	8009756 <_printf_i+0x1a6>
 80096be:	4616      	mov	r6, r2
 80096c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80096c4:	fb03 5711 	mls	r7, r3, r1, r5
 80096c8:	5dc7      	ldrb	r7, [r0, r7]
 80096ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096ce:	462f      	mov	r7, r5
 80096d0:	42bb      	cmp	r3, r7
 80096d2:	460d      	mov	r5, r1
 80096d4:	d9f4      	bls.n	80096c0 <_printf_i+0x110>
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	d10b      	bne.n	80096f2 <_printf_i+0x142>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	07df      	lsls	r7, r3, #31
 80096de:	d508      	bpl.n	80096f2 <_printf_i+0x142>
 80096e0:	6923      	ldr	r3, [r4, #16]
 80096e2:	6861      	ldr	r1, [r4, #4]
 80096e4:	4299      	cmp	r1, r3
 80096e6:	bfde      	ittt	le
 80096e8:	2330      	movle	r3, #48	@ 0x30
 80096ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096f2:	1b92      	subs	r2, r2, r6
 80096f4:	6122      	str	r2, [r4, #16]
 80096f6:	464b      	mov	r3, r9
 80096f8:	4621      	mov	r1, r4
 80096fa:	4640      	mov	r0, r8
 80096fc:	f8cd a000 	str.w	sl, [sp]
 8009700:	aa03      	add	r2, sp, #12
 8009702:	f7ff fee3 	bl	80094cc <_printf_common>
 8009706:	3001      	adds	r0, #1
 8009708:	d14a      	bne.n	80097a0 <_printf_i+0x1f0>
 800970a:	f04f 30ff 	mov.w	r0, #4294967295
 800970e:	b004      	add	sp, #16
 8009710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	f043 0320 	orr.w	r3, r3, #32
 800971a:	6023      	str	r3, [r4, #0]
 800971c:	2778      	movs	r7, #120	@ 0x78
 800971e:	4832      	ldr	r0, [pc, #200]	@ (80097e8 <_printf_i+0x238>)
 8009720:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	6831      	ldr	r1, [r6, #0]
 8009728:	061f      	lsls	r7, r3, #24
 800972a:	f851 5b04 	ldr.w	r5, [r1], #4
 800972e:	d402      	bmi.n	8009736 <_printf_i+0x186>
 8009730:	065f      	lsls	r7, r3, #25
 8009732:	bf48      	it	mi
 8009734:	b2ad      	uxthmi	r5, r5
 8009736:	6031      	str	r1, [r6, #0]
 8009738:	07d9      	lsls	r1, r3, #31
 800973a:	bf44      	itt	mi
 800973c:	f043 0320 	orrmi.w	r3, r3, #32
 8009740:	6023      	strmi	r3, [r4, #0]
 8009742:	b11d      	cbz	r5, 800974c <_printf_i+0x19c>
 8009744:	2310      	movs	r3, #16
 8009746:	e7ad      	b.n	80096a4 <_printf_i+0xf4>
 8009748:	4826      	ldr	r0, [pc, #152]	@ (80097e4 <_printf_i+0x234>)
 800974a:	e7e9      	b.n	8009720 <_printf_i+0x170>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	f023 0320 	bic.w	r3, r3, #32
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	e7f6      	b.n	8009744 <_printf_i+0x194>
 8009756:	4616      	mov	r6, r2
 8009758:	e7bd      	b.n	80096d6 <_printf_i+0x126>
 800975a:	6833      	ldr	r3, [r6, #0]
 800975c:	6825      	ldr	r5, [r4, #0]
 800975e:	1d18      	adds	r0, r3, #4
 8009760:	6961      	ldr	r1, [r4, #20]
 8009762:	6030      	str	r0, [r6, #0]
 8009764:	062e      	lsls	r6, r5, #24
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	d501      	bpl.n	800976e <_printf_i+0x1be>
 800976a:	6019      	str	r1, [r3, #0]
 800976c:	e002      	b.n	8009774 <_printf_i+0x1c4>
 800976e:	0668      	lsls	r0, r5, #25
 8009770:	d5fb      	bpl.n	800976a <_printf_i+0x1ba>
 8009772:	8019      	strh	r1, [r3, #0]
 8009774:	2300      	movs	r3, #0
 8009776:	4616      	mov	r6, r2
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	e7bc      	b.n	80096f6 <_printf_i+0x146>
 800977c:	6833      	ldr	r3, [r6, #0]
 800977e:	2100      	movs	r1, #0
 8009780:	1d1a      	adds	r2, r3, #4
 8009782:	6032      	str	r2, [r6, #0]
 8009784:	681e      	ldr	r6, [r3, #0]
 8009786:	6862      	ldr	r2, [r4, #4]
 8009788:	4630      	mov	r0, r6
 800978a:	f000 f97b 	bl	8009a84 <memchr>
 800978e:	b108      	cbz	r0, 8009794 <_printf_i+0x1e4>
 8009790:	1b80      	subs	r0, r0, r6
 8009792:	6060      	str	r0, [r4, #4]
 8009794:	6863      	ldr	r3, [r4, #4]
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	2300      	movs	r3, #0
 800979a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800979e:	e7aa      	b.n	80096f6 <_printf_i+0x146>
 80097a0:	4632      	mov	r2, r6
 80097a2:	4649      	mov	r1, r9
 80097a4:	4640      	mov	r0, r8
 80097a6:	6923      	ldr	r3, [r4, #16]
 80097a8:	47d0      	blx	sl
 80097aa:	3001      	adds	r0, #1
 80097ac:	d0ad      	beq.n	800970a <_printf_i+0x15a>
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	079b      	lsls	r3, r3, #30
 80097b2:	d413      	bmi.n	80097dc <_printf_i+0x22c>
 80097b4:	68e0      	ldr	r0, [r4, #12]
 80097b6:	9b03      	ldr	r3, [sp, #12]
 80097b8:	4298      	cmp	r0, r3
 80097ba:	bfb8      	it	lt
 80097bc:	4618      	movlt	r0, r3
 80097be:	e7a6      	b.n	800970e <_printf_i+0x15e>
 80097c0:	2301      	movs	r3, #1
 80097c2:	4632      	mov	r2, r6
 80097c4:	4649      	mov	r1, r9
 80097c6:	4640      	mov	r0, r8
 80097c8:	47d0      	blx	sl
 80097ca:	3001      	adds	r0, #1
 80097cc:	d09d      	beq.n	800970a <_printf_i+0x15a>
 80097ce:	3501      	adds	r5, #1
 80097d0:	68e3      	ldr	r3, [r4, #12]
 80097d2:	9903      	ldr	r1, [sp, #12]
 80097d4:	1a5b      	subs	r3, r3, r1
 80097d6:	42ab      	cmp	r3, r5
 80097d8:	dcf2      	bgt.n	80097c0 <_printf_i+0x210>
 80097da:	e7eb      	b.n	80097b4 <_printf_i+0x204>
 80097dc:	2500      	movs	r5, #0
 80097de:	f104 0619 	add.w	r6, r4, #25
 80097e2:	e7f5      	b.n	80097d0 <_printf_i+0x220>
 80097e4:	0800a6d9 	.word	0x0800a6d9
 80097e8:	0800a6ea 	.word	0x0800a6ea

080097ec <__sflush_r>:
 80097ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	0716      	lsls	r6, r2, #28
 80097f4:	4605      	mov	r5, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	d454      	bmi.n	80098a4 <__sflush_r+0xb8>
 80097fa:	684b      	ldr	r3, [r1, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dc02      	bgt.n	8009806 <__sflush_r+0x1a>
 8009800:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009802:	2b00      	cmp	r3, #0
 8009804:	dd48      	ble.n	8009898 <__sflush_r+0xac>
 8009806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009808:	2e00      	cmp	r6, #0
 800980a:	d045      	beq.n	8009898 <__sflush_r+0xac>
 800980c:	2300      	movs	r3, #0
 800980e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009812:	682f      	ldr	r7, [r5, #0]
 8009814:	6a21      	ldr	r1, [r4, #32]
 8009816:	602b      	str	r3, [r5, #0]
 8009818:	d030      	beq.n	800987c <__sflush_r+0x90>
 800981a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	0759      	lsls	r1, r3, #29
 8009820:	d505      	bpl.n	800982e <__sflush_r+0x42>
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	1ad2      	subs	r2, r2, r3
 8009826:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009828:	b10b      	cbz	r3, 800982e <__sflush_r+0x42>
 800982a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800982c:	1ad2      	subs	r2, r2, r3
 800982e:	2300      	movs	r3, #0
 8009830:	4628      	mov	r0, r5
 8009832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009834:	6a21      	ldr	r1, [r4, #32]
 8009836:	47b0      	blx	r6
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	d106      	bne.n	800984c <__sflush_r+0x60>
 800983e:	6829      	ldr	r1, [r5, #0]
 8009840:	291d      	cmp	r1, #29
 8009842:	d82b      	bhi.n	800989c <__sflush_r+0xb0>
 8009844:	4a28      	ldr	r2, [pc, #160]	@ (80098e8 <__sflush_r+0xfc>)
 8009846:	40ca      	lsrs	r2, r1
 8009848:	07d6      	lsls	r6, r2, #31
 800984a:	d527      	bpl.n	800989c <__sflush_r+0xb0>
 800984c:	2200      	movs	r2, #0
 800984e:	6062      	str	r2, [r4, #4]
 8009850:	6922      	ldr	r2, [r4, #16]
 8009852:	04d9      	lsls	r1, r3, #19
 8009854:	6022      	str	r2, [r4, #0]
 8009856:	d504      	bpl.n	8009862 <__sflush_r+0x76>
 8009858:	1c42      	adds	r2, r0, #1
 800985a:	d101      	bne.n	8009860 <__sflush_r+0x74>
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	b903      	cbnz	r3, 8009862 <__sflush_r+0x76>
 8009860:	6560      	str	r0, [r4, #84]	@ 0x54
 8009862:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009864:	602f      	str	r7, [r5, #0]
 8009866:	b1b9      	cbz	r1, 8009898 <__sflush_r+0xac>
 8009868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800986c:	4299      	cmp	r1, r3
 800986e:	d002      	beq.n	8009876 <__sflush_r+0x8a>
 8009870:	4628      	mov	r0, r5
 8009872:	f7ff fbf5 	bl	8009060 <_free_r>
 8009876:	2300      	movs	r3, #0
 8009878:	6363      	str	r3, [r4, #52]	@ 0x34
 800987a:	e00d      	b.n	8009898 <__sflush_r+0xac>
 800987c:	2301      	movs	r3, #1
 800987e:	4628      	mov	r0, r5
 8009880:	47b0      	blx	r6
 8009882:	4602      	mov	r2, r0
 8009884:	1c50      	adds	r0, r2, #1
 8009886:	d1c9      	bne.n	800981c <__sflush_r+0x30>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0c6      	beq.n	800981c <__sflush_r+0x30>
 800988e:	2b1d      	cmp	r3, #29
 8009890:	d001      	beq.n	8009896 <__sflush_r+0xaa>
 8009892:	2b16      	cmp	r3, #22
 8009894:	d11d      	bne.n	80098d2 <__sflush_r+0xe6>
 8009896:	602f      	str	r7, [r5, #0]
 8009898:	2000      	movs	r0, #0
 800989a:	e021      	b.n	80098e0 <__sflush_r+0xf4>
 800989c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098a0:	b21b      	sxth	r3, r3
 80098a2:	e01a      	b.n	80098da <__sflush_r+0xee>
 80098a4:	690f      	ldr	r7, [r1, #16]
 80098a6:	2f00      	cmp	r7, #0
 80098a8:	d0f6      	beq.n	8009898 <__sflush_r+0xac>
 80098aa:	0793      	lsls	r3, r2, #30
 80098ac:	bf18      	it	ne
 80098ae:	2300      	movne	r3, #0
 80098b0:	680e      	ldr	r6, [r1, #0]
 80098b2:	bf08      	it	eq
 80098b4:	694b      	ldreq	r3, [r1, #20]
 80098b6:	1bf6      	subs	r6, r6, r7
 80098b8:	600f      	str	r7, [r1, #0]
 80098ba:	608b      	str	r3, [r1, #8]
 80098bc:	2e00      	cmp	r6, #0
 80098be:	ddeb      	ble.n	8009898 <__sflush_r+0xac>
 80098c0:	4633      	mov	r3, r6
 80098c2:	463a      	mov	r2, r7
 80098c4:	4628      	mov	r0, r5
 80098c6:	6a21      	ldr	r1, [r4, #32]
 80098c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80098cc:	47e0      	blx	ip
 80098ce:	2800      	cmp	r0, #0
 80098d0:	dc07      	bgt.n	80098e2 <__sflush_r+0xf6>
 80098d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098da:	f04f 30ff 	mov.w	r0, #4294967295
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098e2:	4407      	add	r7, r0
 80098e4:	1a36      	subs	r6, r6, r0
 80098e6:	e7e9      	b.n	80098bc <__sflush_r+0xd0>
 80098e8:	20400001 	.word	0x20400001

080098ec <_fflush_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	690b      	ldr	r3, [r1, #16]
 80098f0:	4605      	mov	r5, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	b913      	cbnz	r3, 80098fc <_fflush_r+0x10>
 80098f6:	2500      	movs	r5, #0
 80098f8:	4628      	mov	r0, r5
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	b118      	cbz	r0, 8009906 <_fflush_r+0x1a>
 80098fe:	6a03      	ldr	r3, [r0, #32]
 8009900:	b90b      	cbnz	r3, 8009906 <_fflush_r+0x1a>
 8009902:	f7ff fa97 	bl	8008e34 <__sinit>
 8009906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0f3      	beq.n	80098f6 <_fflush_r+0xa>
 800990e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009910:	07d0      	lsls	r0, r2, #31
 8009912:	d404      	bmi.n	800991e <_fflush_r+0x32>
 8009914:	0599      	lsls	r1, r3, #22
 8009916:	d402      	bmi.n	800991e <_fflush_r+0x32>
 8009918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800991a:	f7ff fb90 	bl	800903e <__retarget_lock_acquire_recursive>
 800991e:	4628      	mov	r0, r5
 8009920:	4621      	mov	r1, r4
 8009922:	f7ff ff63 	bl	80097ec <__sflush_r>
 8009926:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009928:	4605      	mov	r5, r0
 800992a:	07da      	lsls	r2, r3, #31
 800992c:	d4e4      	bmi.n	80098f8 <_fflush_r+0xc>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	059b      	lsls	r3, r3, #22
 8009932:	d4e1      	bmi.n	80098f8 <_fflush_r+0xc>
 8009934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009936:	f7ff fb83 	bl	8009040 <__retarget_lock_release_recursive>
 800993a:	e7dd      	b.n	80098f8 <_fflush_r+0xc>

0800993c <__swbuf_r>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	460e      	mov	r6, r1
 8009940:	4614      	mov	r4, r2
 8009942:	4605      	mov	r5, r0
 8009944:	b118      	cbz	r0, 800994e <__swbuf_r+0x12>
 8009946:	6a03      	ldr	r3, [r0, #32]
 8009948:	b90b      	cbnz	r3, 800994e <__swbuf_r+0x12>
 800994a:	f7ff fa73 	bl	8008e34 <__sinit>
 800994e:	69a3      	ldr	r3, [r4, #24]
 8009950:	60a3      	str	r3, [r4, #8]
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	071a      	lsls	r2, r3, #28
 8009956:	d501      	bpl.n	800995c <__swbuf_r+0x20>
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	b943      	cbnz	r3, 800996e <__swbuf_r+0x32>
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f000 f82a 	bl	80099b8 <__swsetup_r>
 8009964:	b118      	cbz	r0, 800996e <__swbuf_r+0x32>
 8009966:	f04f 37ff 	mov.w	r7, #4294967295
 800996a:	4638      	mov	r0, r7
 800996c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	6922      	ldr	r2, [r4, #16]
 8009972:	b2f6      	uxtb	r6, r6
 8009974:	1a98      	subs	r0, r3, r2
 8009976:	6963      	ldr	r3, [r4, #20]
 8009978:	4637      	mov	r7, r6
 800997a:	4283      	cmp	r3, r0
 800997c:	dc05      	bgt.n	800998a <__swbuf_r+0x4e>
 800997e:	4621      	mov	r1, r4
 8009980:	4628      	mov	r0, r5
 8009982:	f7ff ffb3 	bl	80098ec <_fflush_r>
 8009986:	2800      	cmp	r0, #0
 8009988:	d1ed      	bne.n	8009966 <__swbuf_r+0x2a>
 800998a:	68a3      	ldr	r3, [r4, #8]
 800998c:	3b01      	subs	r3, #1
 800998e:	60a3      	str	r3, [r4, #8]
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	6022      	str	r2, [r4, #0]
 8009996:	701e      	strb	r6, [r3, #0]
 8009998:	6962      	ldr	r2, [r4, #20]
 800999a:	1c43      	adds	r3, r0, #1
 800999c:	429a      	cmp	r2, r3
 800999e:	d004      	beq.n	80099aa <__swbuf_r+0x6e>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	07db      	lsls	r3, r3, #31
 80099a4:	d5e1      	bpl.n	800996a <__swbuf_r+0x2e>
 80099a6:	2e0a      	cmp	r6, #10
 80099a8:	d1df      	bne.n	800996a <__swbuf_r+0x2e>
 80099aa:	4621      	mov	r1, r4
 80099ac:	4628      	mov	r0, r5
 80099ae:	f7ff ff9d 	bl	80098ec <_fflush_r>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d0d9      	beq.n	800996a <__swbuf_r+0x2e>
 80099b6:	e7d6      	b.n	8009966 <__swbuf_r+0x2a>

080099b8 <__swsetup_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4b29      	ldr	r3, [pc, #164]	@ (8009a60 <__swsetup_r+0xa8>)
 80099bc:	4605      	mov	r5, r0
 80099be:	6818      	ldr	r0, [r3, #0]
 80099c0:	460c      	mov	r4, r1
 80099c2:	b118      	cbz	r0, 80099cc <__swsetup_r+0x14>
 80099c4:	6a03      	ldr	r3, [r0, #32]
 80099c6:	b90b      	cbnz	r3, 80099cc <__swsetup_r+0x14>
 80099c8:	f7ff fa34 	bl	8008e34 <__sinit>
 80099cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d0:	0719      	lsls	r1, r3, #28
 80099d2:	d422      	bmi.n	8009a1a <__swsetup_r+0x62>
 80099d4:	06da      	lsls	r2, r3, #27
 80099d6:	d407      	bmi.n	80099e8 <__swsetup_r+0x30>
 80099d8:	2209      	movs	r2, #9
 80099da:	602a      	str	r2, [r5, #0]
 80099dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099e0:	f04f 30ff 	mov.w	r0, #4294967295
 80099e4:	81a3      	strh	r3, [r4, #12]
 80099e6:	e033      	b.n	8009a50 <__swsetup_r+0x98>
 80099e8:	0758      	lsls	r0, r3, #29
 80099ea:	d512      	bpl.n	8009a12 <__swsetup_r+0x5a>
 80099ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099ee:	b141      	cbz	r1, 8009a02 <__swsetup_r+0x4a>
 80099f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099f4:	4299      	cmp	r1, r3
 80099f6:	d002      	beq.n	80099fe <__swsetup_r+0x46>
 80099f8:	4628      	mov	r0, r5
 80099fa:	f7ff fb31 	bl	8009060 <_free_r>
 80099fe:	2300      	movs	r3, #0
 8009a00:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a08:	81a3      	strh	r3, [r4, #12]
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6063      	str	r3, [r4, #4]
 8009a0e:	6923      	ldr	r3, [r4, #16]
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	f043 0308 	orr.w	r3, r3, #8
 8009a18:	81a3      	strh	r3, [r4, #12]
 8009a1a:	6923      	ldr	r3, [r4, #16]
 8009a1c:	b94b      	cbnz	r3, 8009a32 <__swsetup_r+0x7a>
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a28:	d003      	beq.n	8009a32 <__swsetup_r+0x7a>
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	f000 f85c 	bl	8009aea <__smakebuf_r>
 8009a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a36:	f013 0201 	ands.w	r2, r3, #1
 8009a3a:	d00a      	beq.n	8009a52 <__swsetup_r+0x9a>
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	60a2      	str	r2, [r4, #8]
 8009a40:	6962      	ldr	r2, [r4, #20]
 8009a42:	4252      	negs	r2, r2
 8009a44:	61a2      	str	r2, [r4, #24]
 8009a46:	6922      	ldr	r2, [r4, #16]
 8009a48:	b942      	cbnz	r2, 8009a5c <__swsetup_r+0xa4>
 8009a4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a4e:	d1c5      	bne.n	80099dc <__swsetup_r+0x24>
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
 8009a52:	0799      	lsls	r1, r3, #30
 8009a54:	bf58      	it	pl
 8009a56:	6962      	ldrpl	r2, [r4, #20]
 8009a58:	60a2      	str	r2, [r4, #8]
 8009a5a:	e7f4      	b.n	8009a46 <__swsetup_r+0x8e>
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e7f7      	b.n	8009a50 <__swsetup_r+0x98>
 8009a60:	20000020 	.word	0x20000020

08009a64 <_sbrk_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	2300      	movs	r3, #0
 8009a68:	4d05      	ldr	r5, [pc, #20]	@ (8009a80 <_sbrk_r+0x1c>)
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	602b      	str	r3, [r5, #0]
 8009a70:	f7f8 fda0 	bl	80025b4 <_sbrk>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d102      	bne.n	8009a7e <_sbrk_r+0x1a>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	b103      	cbz	r3, 8009a7e <_sbrk_r+0x1a>
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	20000e1c 	.word	0x20000e1c

08009a84 <memchr>:
 8009a84:	4603      	mov	r3, r0
 8009a86:	b510      	push	{r4, lr}
 8009a88:	b2c9      	uxtb	r1, r1
 8009a8a:	4402      	add	r2, r0
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	d101      	bne.n	8009a96 <memchr+0x12>
 8009a92:	2000      	movs	r0, #0
 8009a94:	e003      	b.n	8009a9e <memchr+0x1a>
 8009a96:	7804      	ldrb	r4, [r0, #0]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	428c      	cmp	r4, r1
 8009a9c:	d1f6      	bne.n	8009a8c <memchr+0x8>
 8009a9e:	bd10      	pop	{r4, pc}

08009aa0 <__swhatbuf_r>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa8:	4615      	mov	r5, r2
 8009aaa:	2900      	cmp	r1, #0
 8009aac:	461e      	mov	r6, r3
 8009aae:	b096      	sub	sp, #88	@ 0x58
 8009ab0:	da0c      	bge.n	8009acc <__swhatbuf_r+0x2c>
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009aba:	bf14      	ite	ne
 8009abc:	2340      	movne	r3, #64	@ 0x40
 8009abe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	6031      	str	r1, [r6, #0]
 8009ac6:	602b      	str	r3, [r5, #0]
 8009ac8:	b016      	add	sp, #88	@ 0x58
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	466a      	mov	r2, sp
 8009ace:	f000 f849 	bl	8009b64 <_fstat_r>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	dbed      	blt.n	8009ab2 <__swhatbuf_r+0x12>
 8009ad6:	9901      	ldr	r1, [sp, #4]
 8009ad8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009adc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ae0:	4259      	negs	r1, r3
 8009ae2:	4159      	adcs	r1, r3
 8009ae4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ae8:	e7eb      	b.n	8009ac2 <__swhatbuf_r+0x22>

08009aea <__smakebuf_r>:
 8009aea:	898b      	ldrh	r3, [r1, #12]
 8009aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aee:	079d      	lsls	r5, r3, #30
 8009af0:	4606      	mov	r6, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	d507      	bpl.n	8009b06 <__smakebuf_r+0x1c>
 8009af6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	6123      	str	r3, [r4, #16]
 8009afe:	2301      	movs	r3, #1
 8009b00:	6163      	str	r3, [r4, #20]
 8009b02:	b003      	add	sp, #12
 8009b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b06:	466a      	mov	r2, sp
 8009b08:	ab01      	add	r3, sp, #4
 8009b0a:	f7ff ffc9 	bl	8009aa0 <__swhatbuf_r>
 8009b0e:	9f00      	ldr	r7, [sp, #0]
 8009b10:	4605      	mov	r5, r0
 8009b12:	4639      	mov	r1, r7
 8009b14:	4630      	mov	r0, r6
 8009b16:	f7ff fb0d 	bl	8009134 <_malloc_r>
 8009b1a:	b948      	cbnz	r0, 8009b30 <__smakebuf_r+0x46>
 8009b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b20:	059a      	lsls	r2, r3, #22
 8009b22:	d4ee      	bmi.n	8009b02 <__smakebuf_r+0x18>
 8009b24:	f023 0303 	bic.w	r3, r3, #3
 8009b28:	f043 0302 	orr.w	r3, r3, #2
 8009b2c:	81a3      	strh	r3, [r4, #12]
 8009b2e:	e7e2      	b.n	8009af6 <__smakebuf_r+0xc>
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b3a:	81a3      	strh	r3, [r4, #12]
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	6020      	str	r0, [r4, #0]
 8009b40:	b15b      	cbz	r3, 8009b5a <__smakebuf_r+0x70>
 8009b42:	4630      	mov	r0, r6
 8009b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b48:	f000 f81e 	bl	8009b88 <_isatty_r>
 8009b4c:	b128      	cbz	r0, 8009b5a <__smakebuf_r+0x70>
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	f023 0303 	bic.w	r3, r3, #3
 8009b54:	f043 0301 	orr.w	r3, r3, #1
 8009b58:	81a3      	strh	r3, [r4, #12]
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	431d      	orrs	r5, r3
 8009b5e:	81a5      	strh	r5, [r4, #12]
 8009b60:	e7cf      	b.n	8009b02 <__smakebuf_r+0x18>
	...

08009b64 <_fstat_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	2300      	movs	r3, #0
 8009b68:	4d06      	ldr	r5, [pc, #24]	@ (8009b84 <_fstat_r+0x20>)
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	602b      	str	r3, [r5, #0]
 8009b72:	f7f8 fcfa 	bl	800256a <_fstat>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	d102      	bne.n	8009b80 <_fstat_r+0x1c>
 8009b7a:	682b      	ldr	r3, [r5, #0]
 8009b7c:	b103      	cbz	r3, 8009b80 <_fstat_r+0x1c>
 8009b7e:	6023      	str	r3, [r4, #0]
 8009b80:	bd38      	pop	{r3, r4, r5, pc}
 8009b82:	bf00      	nop
 8009b84:	20000e1c 	.word	0x20000e1c

08009b88 <_isatty_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	4d05      	ldr	r5, [pc, #20]	@ (8009ba4 <_isatty_r+0x1c>)
 8009b8e:	4604      	mov	r4, r0
 8009b90:	4608      	mov	r0, r1
 8009b92:	602b      	str	r3, [r5, #0]
 8009b94:	f7f8 fcf8 	bl	8002588 <_isatty>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	d102      	bne.n	8009ba2 <_isatty_r+0x1a>
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	b103      	cbz	r3, 8009ba2 <_isatty_r+0x1a>
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	bd38      	pop	{r3, r4, r5, pc}
 8009ba4:	20000e1c 	.word	0x20000e1c

08009ba8 <_init>:
 8009ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009baa:	bf00      	nop
 8009bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bae:	bc08      	pop	{r3}
 8009bb0:	469e      	mov	lr, r3
 8009bb2:	4770      	bx	lr

08009bb4 <_fini>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	bf00      	nop
 8009bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bba:	bc08      	pop	{r3}
 8009bbc:	469e      	mov	lr, r3
 8009bbe:	4770      	bx	lr
